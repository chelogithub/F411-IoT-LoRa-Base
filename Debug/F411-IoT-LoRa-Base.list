
F411-IoT-LoRa-Base.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000106f4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000096c  08010894  08010894  00020894  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011200  08011200  00030178  2**0
                  CONTENTS
  4 .ARM          00000008  08011200  08011200  00021200  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011208  08011208  00030178  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011208  08011208  00021208  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801120c  0801120c  0002120c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000178  20000000  08011210  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004048  20000178  08011388  00030178  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200041c0  08011388  000341c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030178  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000301a8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015b6a  00000000  00000000  000301eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000030a9  00000000  00000000  00045d55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001198  00000000  00000000  00048e00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e42  00000000  00000000  00049f98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001888c  00000000  00000000  0004adda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000182ff  00000000  00000000  00063666  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00093b6b  00000000  00000000  0007b965  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005684  00000000  00000000  0010f4d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  00114b54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000178 	.word	0x20000178
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0801087c 	.word	0x0801087c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000017c 	.word	0x2000017c
 80001dc:	0801087c 	.word	0x0801087c

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b970 	b.w	80005a8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	460d      	mov	r5, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	460f      	mov	r7, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4694      	mov	ip, r2
 80002f4:	d965      	bls.n	80003c2 <__udivmoddi4+0xe2>
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	b143      	cbz	r3, 800030e <__udivmoddi4+0x2e>
 80002fc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000300:	f1c3 0220 	rsb	r2, r3, #32
 8000304:	409f      	lsls	r7, r3
 8000306:	fa20 f202 	lsr.w	r2, r0, r2
 800030a:	4317      	orrs	r7, r2
 800030c:	409c      	lsls	r4, r3
 800030e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000312:	fa1f f58c 	uxth.w	r5, ip
 8000316:	fbb7 f1fe 	udiv	r1, r7, lr
 800031a:	0c22      	lsrs	r2, r4, #16
 800031c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000320:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000324:	fb01 f005 	mul.w	r0, r1, r5
 8000328:	4290      	cmp	r0, r2
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x62>
 800032c:	eb1c 0202 	adds.w	r2, ip, r2
 8000330:	f101 37ff 	add.w	r7, r1, #4294967295
 8000334:	f080 811c 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000338:	4290      	cmp	r0, r2
 800033a:	f240 8119 	bls.w	8000570 <__udivmoddi4+0x290>
 800033e:	3902      	subs	r1, #2
 8000340:	4462      	add	r2, ip
 8000342:	1a12      	subs	r2, r2, r0
 8000344:	b2a4      	uxth	r4, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000352:	fb00 f505 	mul.w	r5, r0, r5
 8000356:	42a5      	cmp	r5, r4
 8000358:	d90a      	bls.n	8000370 <__udivmoddi4+0x90>
 800035a:	eb1c 0404 	adds.w	r4, ip, r4
 800035e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000362:	f080 8107 	bcs.w	8000574 <__udivmoddi4+0x294>
 8000366:	42a5      	cmp	r5, r4
 8000368:	f240 8104 	bls.w	8000574 <__udivmoddi4+0x294>
 800036c:	4464      	add	r4, ip
 800036e:	3802      	subs	r0, #2
 8000370:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000374:	1b64      	subs	r4, r4, r5
 8000376:	2100      	movs	r1, #0
 8000378:	b11e      	cbz	r6, 8000382 <__udivmoddi4+0xa2>
 800037a:	40dc      	lsrs	r4, r3
 800037c:	2300      	movs	r3, #0
 800037e:	e9c6 4300 	strd	r4, r3, [r6]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0xbc>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80ed 	beq.w	800056a <__udivmoddi4+0x28a>
 8000390:	2100      	movs	r1, #0
 8000392:	e9c6 0500 	strd	r0, r5, [r6]
 8000396:	4608      	mov	r0, r1
 8000398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039c:	fab3 f183 	clz	r1, r3
 80003a0:	2900      	cmp	r1, #0
 80003a2:	d149      	bne.n	8000438 <__udivmoddi4+0x158>
 80003a4:	42ab      	cmp	r3, r5
 80003a6:	d302      	bcc.n	80003ae <__udivmoddi4+0xce>
 80003a8:	4282      	cmp	r2, r0
 80003aa:	f200 80f8 	bhi.w	800059e <__udivmoddi4+0x2be>
 80003ae:	1a84      	subs	r4, r0, r2
 80003b0:	eb65 0203 	sbc.w	r2, r5, r3
 80003b4:	2001      	movs	r0, #1
 80003b6:	4617      	mov	r7, r2
 80003b8:	2e00      	cmp	r6, #0
 80003ba:	d0e2      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	e9c6 4700 	strd	r4, r7, [r6]
 80003c0:	e7df      	b.n	8000382 <__udivmoddi4+0xa2>
 80003c2:	b902      	cbnz	r2, 80003c6 <__udivmoddi4+0xe6>
 80003c4:	deff      	udf	#255	; 0xff
 80003c6:	fab2 f382 	clz	r3, r2
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8090 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d0:	1a8a      	subs	r2, r1, r2
 80003d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d6:	fa1f fe8c 	uxth.w	lr, ip
 80003da:	2101      	movs	r1, #1
 80003dc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003e0:	fb07 2015 	mls	r0, r7, r5, r2
 80003e4:	0c22      	lsrs	r2, r4, #16
 80003e6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ea:	fb0e f005 	mul.w	r0, lr, r5
 80003ee:	4290      	cmp	r0, r2
 80003f0:	d908      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f2:	eb1c 0202 	adds.w	r2, ip, r2
 80003f6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4290      	cmp	r0, r2
 80003fe:	f200 80cb 	bhi.w	8000598 <__udivmoddi4+0x2b8>
 8000402:	4645      	mov	r5, r8
 8000404:	1a12      	subs	r2, r2, r0
 8000406:	b2a4      	uxth	r4, r4
 8000408:	fbb2 f0f7 	udiv	r0, r2, r7
 800040c:	fb07 2210 	mls	r2, r7, r0, r2
 8000410:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000414:	fb0e fe00 	mul.w	lr, lr, r0
 8000418:	45a6      	cmp	lr, r4
 800041a:	d908      	bls.n	800042e <__udivmoddi4+0x14e>
 800041c:	eb1c 0404 	adds.w	r4, ip, r4
 8000420:	f100 32ff 	add.w	r2, r0, #4294967295
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x14c>
 8000426:	45a6      	cmp	lr, r4
 8000428:	f200 80bb 	bhi.w	80005a2 <__udivmoddi4+0x2c2>
 800042c:	4610      	mov	r0, r2
 800042e:	eba4 040e 	sub.w	r4, r4, lr
 8000432:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000436:	e79f      	b.n	8000378 <__udivmoddi4+0x98>
 8000438:	f1c1 0720 	rsb	r7, r1, #32
 800043c:	408b      	lsls	r3, r1
 800043e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000442:	ea4c 0c03 	orr.w	ip, ip, r3
 8000446:	fa05 f401 	lsl.w	r4, r5, r1
 800044a:	fa20 f307 	lsr.w	r3, r0, r7
 800044e:	40fd      	lsrs	r5, r7
 8000450:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000454:	4323      	orrs	r3, r4
 8000456:	fbb5 f8f9 	udiv	r8, r5, r9
 800045a:	fa1f fe8c 	uxth.w	lr, ip
 800045e:	fb09 5518 	mls	r5, r9, r8, r5
 8000462:	0c1c      	lsrs	r4, r3, #16
 8000464:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000468:	fb08 f50e 	mul.w	r5, r8, lr
 800046c:	42a5      	cmp	r5, r4
 800046e:	fa02 f201 	lsl.w	r2, r2, r1
 8000472:	fa00 f001 	lsl.w	r0, r0, r1
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000480:	f080 8088 	bcs.w	8000594 <__udivmoddi4+0x2b4>
 8000484:	42a5      	cmp	r5, r4
 8000486:	f240 8085 	bls.w	8000594 <__udivmoddi4+0x2b4>
 800048a:	f1a8 0802 	sub.w	r8, r8, #2
 800048e:	4464      	add	r4, ip
 8000490:	1b64      	subs	r4, r4, r5
 8000492:	b29d      	uxth	r5, r3
 8000494:	fbb4 f3f9 	udiv	r3, r4, r9
 8000498:	fb09 4413 	mls	r4, r9, r3, r4
 800049c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004a0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004a4:	45a6      	cmp	lr, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f103 35ff 	add.w	r5, r3, #4294967295
 80004b0:	d26c      	bcs.n	800058c <__udivmoddi4+0x2ac>
 80004b2:	45a6      	cmp	lr, r4
 80004b4:	d96a      	bls.n	800058c <__udivmoddi4+0x2ac>
 80004b6:	3b02      	subs	r3, #2
 80004b8:	4464      	add	r4, ip
 80004ba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004be:	fba3 9502 	umull	r9, r5, r3, r2
 80004c2:	eba4 040e 	sub.w	r4, r4, lr
 80004c6:	42ac      	cmp	r4, r5
 80004c8:	46c8      	mov	r8, r9
 80004ca:	46ae      	mov	lr, r5
 80004cc:	d356      	bcc.n	800057c <__udivmoddi4+0x29c>
 80004ce:	d053      	beq.n	8000578 <__udivmoddi4+0x298>
 80004d0:	b156      	cbz	r6, 80004e8 <__udivmoddi4+0x208>
 80004d2:	ebb0 0208 	subs.w	r2, r0, r8
 80004d6:	eb64 040e 	sbc.w	r4, r4, lr
 80004da:	fa04 f707 	lsl.w	r7, r4, r7
 80004de:	40ca      	lsrs	r2, r1
 80004e0:	40cc      	lsrs	r4, r1
 80004e2:	4317      	orrs	r7, r2
 80004e4:	e9c6 7400 	strd	r7, r4, [r6]
 80004e8:	4618      	mov	r0, r3
 80004ea:	2100      	movs	r1, #0
 80004ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004f0:	f1c3 0120 	rsb	r1, r3, #32
 80004f4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004f8:	fa20 f201 	lsr.w	r2, r0, r1
 80004fc:	fa25 f101 	lsr.w	r1, r5, r1
 8000500:	409d      	lsls	r5, r3
 8000502:	432a      	orrs	r2, r5
 8000504:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000508:	fa1f fe8c 	uxth.w	lr, ip
 800050c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000510:	fb07 1510 	mls	r5, r7, r0, r1
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800051a:	fb00 f50e 	mul.w	r5, r0, lr
 800051e:	428d      	cmp	r5, r1
 8000520:	fa04 f403 	lsl.w	r4, r4, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x258>
 8000526:	eb1c 0101 	adds.w	r1, ip, r1
 800052a:	f100 38ff 	add.w	r8, r0, #4294967295
 800052e:	d22f      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000530:	428d      	cmp	r5, r1
 8000532:	d92d      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000534:	3802      	subs	r0, #2
 8000536:	4461      	add	r1, ip
 8000538:	1b49      	subs	r1, r1, r5
 800053a:	b292      	uxth	r2, r2
 800053c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000540:	fb07 1115 	mls	r1, r7, r5, r1
 8000544:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000548:	fb05 f10e 	mul.w	r1, r5, lr
 800054c:	4291      	cmp	r1, r2
 800054e:	d908      	bls.n	8000562 <__udivmoddi4+0x282>
 8000550:	eb1c 0202 	adds.w	r2, ip, r2
 8000554:	f105 38ff 	add.w	r8, r5, #4294967295
 8000558:	d216      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 800055a:	4291      	cmp	r1, r2
 800055c:	d914      	bls.n	8000588 <__udivmoddi4+0x2a8>
 800055e:	3d02      	subs	r5, #2
 8000560:	4462      	add	r2, ip
 8000562:	1a52      	subs	r2, r2, r1
 8000564:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000568:	e738      	b.n	80003dc <__udivmoddi4+0xfc>
 800056a:	4631      	mov	r1, r6
 800056c:	4630      	mov	r0, r6
 800056e:	e708      	b.n	8000382 <__udivmoddi4+0xa2>
 8000570:	4639      	mov	r1, r7
 8000572:	e6e6      	b.n	8000342 <__udivmoddi4+0x62>
 8000574:	4610      	mov	r0, r2
 8000576:	e6fb      	b.n	8000370 <__udivmoddi4+0x90>
 8000578:	4548      	cmp	r0, r9
 800057a:	d2a9      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 800057c:	ebb9 0802 	subs.w	r8, r9, r2
 8000580:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000584:	3b01      	subs	r3, #1
 8000586:	e7a3      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000588:	4645      	mov	r5, r8
 800058a:	e7ea      	b.n	8000562 <__udivmoddi4+0x282>
 800058c:	462b      	mov	r3, r5
 800058e:	e794      	b.n	80004ba <__udivmoddi4+0x1da>
 8000590:	4640      	mov	r0, r8
 8000592:	e7d1      	b.n	8000538 <__udivmoddi4+0x258>
 8000594:	46d0      	mov	r8, sl
 8000596:	e77b      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000598:	3d02      	subs	r5, #2
 800059a:	4462      	add	r2, ip
 800059c:	e732      	b.n	8000404 <__udivmoddi4+0x124>
 800059e:	4608      	mov	r0, r1
 80005a0:	e70a      	b.n	80003b8 <__udivmoddi4+0xd8>
 80005a2:	4464      	add	r4, ip
 80005a4:	3802      	subs	r0, #2
 80005a6:	e742      	b.n	800042e <__udivmoddi4+0x14e>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80005ac:	b480      	push	{r7}
 80005ae:	b083      	sub	sp, #12
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	4603      	mov	r3, r0
 80005b4:	6039      	str	r1, [r7, #0]
 80005b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005bc:	2b00      	cmp	r3, #0
 80005be:	db0a      	blt.n	80005d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005c0:	683b      	ldr	r3, [r7, #0]
 80005c2:	b2da      	uxtb	r2, r3
 80005c4:	490c      	ldr	r1, [pc, #48]	; (80005f8 <__NVIC_SetPriority+0x4c>)
 80005c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005ca:	0112      	lsls	r2, r2, #4
 80005cc:	b2d2      	uxtb	r2, r2
 80005ce:	440b      	add	r3, r1
 80005d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80005d4:	e00a      	b.n	80005ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005d6:	683b      	ldr	r3, [r7, #0]
 80005d8:	b2da      	uxtb	r2, r3
 80005da:	4908      	ldr	r1, [pc, #32]	; (80005fc <__NVIC_SetPriority+0x50>)
 80005dc:	79fb      	ldrb	r3, [r7, #7]
 80005de:	f003 030f 	and.w	r3, r3, #15
 80005e2:	3b04      	subs	r3, #4
 80005e4:	0112      	lsls	r2, r2, #4
 80005e6:	b2d2      	uxtb	r2, r2
 80005e8:	440b      	add	r3, r1
 80005ea:	761a      	strb	r2, [r3, #24]
}
 80005ec:	bf00      	nop
 80005ee:	370c      	adds	r7, #12
 80005f0:	46bd      	mov	sp, r7
 80005f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f6:	4770      	bx	lr
 80005f8:	e000e100 	.word	0xe000e100
 80005fc:	e000ed00 	.word	0xe000ed00

08000600 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	3b01      	subs	r3, #1
 800060c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000610:	d301      	bcc.n	8000616 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000612:	2301      	movs	r3, #1
 8000614:	e00f      	b.n	8000636 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000616:	4a0a      	ldr	r2, [pc, #40]	; (8000640 <SysTick_Config+0x40>)
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	3b01      	subs	r3, #1
 800061c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800061e:	210f      	movs	r1, #15
 8000620:	f04f 30ff 	mov.w	r0, #4294967295
 8000624:	f7ff ffc2 	bl	80005ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000628:	4b05      	ldr	r3, [pc, #20]	; (8000640 <SysTick_Config+0x40>)
 800062a:	2200      	movs	r2, #0
 800062c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800062e:	4b04      	ldr	r3, [pc, #16]	; (8000640 <SysTick_Config+0x40>)
 8000630:	2207      	movs	r2, #7
 8000632:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000634:	2300      	movs	r3, #0
}
 8000636:	4618      	mov	r0, r3
 8000638:	3708      	adds	r7, #8
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	e000e010 	.word	0xe000e010

08000644 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000644:	b480      	push	{r7}
 8000646:	b083      	sub	sp, #12
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800064c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000650:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000654:	f003 0301 	and.w	r3, r3, #1
 8000658:	2b00      	cmp	r3, #0
 800065a:	d013      	beq.n	8000684 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800065c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000660:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000664:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000668:	2b00      	cmp	r3, #0
 800066a:	d00b      	beq.n	8000684 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800066c:	e000      	b.n	8000670 <ITM_SendChar+0x2c>
    {
      __NOP();
 800066e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000670:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	2b00      	cmp	r3, #0
 8000678:	d0f9      	beq.n	800066e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800067a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800067e:	687a      	ldr	r2, [r7, #4]
 8000680:	b2d2      	uxtb	r2, r2
 8000682:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000684:	687b      	ldr	r3, [r7, #4]
}
 8000686:	4618      	mov	r0, r3
 8000688:	370c      	adds	r7, #12
 800068a:	46bd      	mov	sp, r7
 800068c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000690:	4770      	bx	lr
	...

08000694 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000694:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000698:	b0a6      	sub	sp, #152	; 0x98
 800069a:	af14      	add	r7, sp, #80	; 0x50
  /* USER CODE BEGIN 1 */
	//----------------------- ETHERNET W5100 Environment-------------------------//

	//	GATEWAY ADDRESS
		ETH.GAR[0]=192;
 800069c:	4bcf      	ldr	r3, [pc, #828]	; (80009dc <main+0x348>)
 800069e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006a2:	22c0      	movs	r2, #192	; 0xc0
 80006a4:	771a      	strb	r2, [r3, #28]
		ETH.GAR[1]=168;
 80006a6:	4bcd      	ldr	r3, [pc, #820]	; (80009dc <main+0x348>)
 80006a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006ac:	22a8      	movs	r2, #168	; 0xa8
 80006ae:	775a      	strb	r2, [r3, #29]
		ETH.GAR[2]=0;
 80006b0:	4bca      	ldr	r3, [pc, #808]	; (80009dc <main+0x348>)
 80006b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006b6:	2200      	movs	r2, #0
 80006b8:	779a      	strb	r2, [r3, #30]
		ETH.GAR[3]=1;
 80006ba:	4bc8      	ldr	r3, [pc, #800]	; (80009dc <main+0x348>)
 80006bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006c0:	2201      	movs	r2, #1
 80006c2:	77da      	strb	r2, [r3, #31]
	//	SUBNET MASK
		ETH.SUBR[0]=255;
 80006c4:	4bc5      	ldr	r3, [pc, #788]	; (80009dc <main+0x348>)
 80006c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006ca:	22ff      	movs	r2, #255	; 0xff
 80006cc:	f883 2020 	strb.w	r2, [r3, #32]
		ETH.SUBR[1]=255;
 80006d0:	4bc2      	ldr	r3, [pc, #776]	; (80009dc <main+0x348>)
 80006d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006d6:	22ff      	movs	r2, #255	; 0xff
 80006d8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		ETH.SUBR[2]=255;
 80006dc:	4bbf      	ldr	r3, [pc, #764]	; (80009dc <main+0x348>)
 80006de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006e2:	22ff      	movs	r2, #255	; 0xff
 80006e4:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		ETH.SUBR[3]=0;
 80006e8:	4bbc      	ldr	r3, [pc, #752]	; (80009dc <main+0x348>)
 80006ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006ee:	2200      	movs	r2, #0
 80006f0:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	//	MAC ADDRESS
		ETH.SHAR[0]=0x00;
 80006f4:	4bb9      	ldr	r3, [pc, #740]	; (80009dc <main+0x348>)
 80006f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006fa:	2200      	movs	r2, #0
 80006fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		ETH.SHAR[1]=0x08;
 8000700:	4bb6      	ldr	r3, [pc, #728]	; (80009dc <main+0x348>)
 8000702:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000706:	2208      	movs	r2, #8
 8000708:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		ETH.SHAR[2]=0xDC;
 800070c:	4bb3      	ldr	r3, [pc, #716]	; (80009dc <main+0x348>)
 800070e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000712:	22dc      	movs	r2, #220	; 0xdc
 8000714:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
		ETH.SHAR[3]=0x00;
 8000718:	4bb0      	ldr	r3, [pc, #704]	; (80009dc <main+0x348>)
 800071a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800071e:	2200      	movs	r2, #0
 8000720:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		ETH.SHAR[4]=0x00;
 8000724:	4bad      	ldr	r3, [pc, #692]	; (80009dc <main+0x348>)
 8000726:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800072a:	2200      	movs	r2, #0
 800072c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		ETH.SHAR[5]=0x01;
 8000730:	4baa      	ldr	r3, [pc, #680]	; (80009dc <main+0x348>)
 8000732:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000736:	2201      	movs	r2, #1
 8000738:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

	//	IP ADDRESS
		ETH.SIPR[0]=192;
 800073c:	4ba7      	ldr	r3, [pc, #668]	; (80009dc <main+0x348>)
 800073e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000742:	22c0      	movs	r2, #192	; 0xc0
 8000744:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		ETH.SIPR[1]=168;
 8000748:	4ba4      	ldr	r3, [pc, #656]	; (80009dc <main+0x348>)
 800074a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800074e:	22a8      	movs	r2, #168	; 0xa8
 8000750:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		ETH.SIPR[2]=0;
 8000754:	4ba1      	ldr	r3, [pc, #644]	; (80009dc <main+0x348>)
 8000756:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800075a:	2200      	movs	r2, #0
 800075c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		ETH.SIPR[3]=6,//ETH.SIPR[3]=34,
 8000760:	4b9e      	ldr	r3, [pc, #632]	; (80009dc <main+0x348>)
 8000762:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000766:	2206      	movs	r2, #6
 8000768:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	//  Socket RX memory
		ETH.RMSR=0x55;
 800076c:	4b9b      	ldr	r3, [pc, #620]	; (80009dc <main+0x348>)
 800076e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000772:	2255      	movs	r2, #85	; 0x55
 8000774:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	//  Socket TX memory


		ETH.TMSR=0x55;
 8000778:	4b98      	ldr	r3, [pc, #608]	; (80009dc <main+0x348>)
 800077a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800077e:	2255      	movs	r2, #85	; 0x55
 8000780:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	//  S0 Port Number
		ETH.S0_PORT[0]=0x01;
 8000784:	4b95      	ldr	r3, [pc, #596]	; (80009dc <main+0x348>)
 8000786:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800078a:	2201      	movs	r2, #1
 800078c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
		ETH.S0_PORT[1]=0xF6;
 8000790:	4b92      	ldr	r3, [pc, #584]	; (80009dc <main+0x348>)
 8000792:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000796:	22f6      	movs	r2, #246	; 0xf6
 8000798:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	//	S0 Client IP ADDRESS
		ETH.S0_DIPR[0]=192;
 800079c:	4b8f      	ldr	r3, [pc, #572]	; (80009dc <main+0x348>)
 800079e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007a2:	22c0      	movs	r2, #192	; 0xc0
 80007a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
		ETH.S0_DIPR[1]=168;
 80007a8:	4b8c      	ldr	r3, [pc, #560]	; (80009dc <main+0x348>)
 80007aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007ae:	22a8      	movs	r2, #168	; 0xa8
 80007b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
		ETH.S0_DIPR[2]=0;
 80007b4:	4b89      	ldr	r3, [pc, #548]	; (80009dc <main+0x348>)
 80007b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007ba:	2200      	movs	r2, #0
 80007bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
		ETH.S0_DIPR[3]=3;
 80007c0:	4b86      	ldr	r3, [pc, #536]	; (80009dc <main+0x348>)
 80007c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007c6:	2203      	movs	r2, #3
 80007c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
	//	S0 Client IP ADDRESS
		ETH.S0_DPORT[0]=0x01;
 80007cc:	4b83      	ldr	r3, [pc, #524]	; (80009dc <main+0x348>)
 80007ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007d2:	2201      	movs	r2, #1
 80007d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		ETH.S0_DPORT[1]=0xF6;
 80007d8:	4b80      	ldr	r3, [pc, #512]	; (80009dc <main+0x348>)
 80007da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007de:	22f6      	movs	r2, #246	; 0xf6
 80007e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

		ETH.gS0_RX_BASE = 0x6000;
 80007e4:	4b7d      	ldr	r3, [pc, #500]	; (80009dc <main+0x348>)
 80007e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007ea:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 80007ee:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
		ETH.gS0_RX_MASK = 0x07FF;
 80007f2:	4b7a      	ldr	r3, [pc, #488]	; (80009dc <main+0x348>)
 80007f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007f8:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80007fc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
		ETH.gS1_RX_BASE = 0x6800;
 8000800:	4b76      	ldr	r3, [pc, #472]	; (80009dc <main+0x348>)
 8000802:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000806:	f44f 42d0 	mov.w	r2, #26624	; 0x6800
 800080a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
		ETH.gS1_RX_MASK = 0x07FF;
 800080e:	4b73      	ldr	r3, [pc, #460]	; (80009dc <main+0x348>)
 8000810:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000814:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000818:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
		ETH.gS2_RX_BASE = 0x7000;
 800081c:	4b6f      	ldr	r3, [pc, #444]	; (80009dc <main+0x348>)
 800081e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000822:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
 8000826:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
		ETH.gS2_RX_MASK = 0x07FF;
 800082a:	4b6c      	ldr	r3, [pc, #432]	; (80009dc <main+0x348>)
 800082c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000830:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000834:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
		ETH.gS3_RX_BASE = 0x7800;
 8000838:	4b68      	ldr	r3, [pc, #416]	; (80009dc <main+0x348>)
 800083a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800083e:	f44f 42f0 	mov.w	r2, #30720	; 0x7800
 8000842:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
		ETH.gS3_RX_MASK = 0x07FF;
 8000846:	4b65      	ldr	r3, [pc, #404]	; (80009dc <main+0x348>)
 8000848:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800084c:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000850:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
		ETH.gS0_TX_BASE = 0x4000;
 8000854:	4b61      	ldr	r3, [pc, #388]	; (80009dc <main+0x348>)
 8000856:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800085a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800085e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
		ETH.gS0_TX_MASK = 0x07FF;
 8000862:	4b5e      	ldr	r3, [pc, #376]	; (80009dc <main+0x348>)
 8000864:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000868:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800086c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
		ETH.gS1_TX_BASE = 0x4800;
 8000870:	4b5a      	ldr	r3, [pc, #360]	; (80009dc <main+0x348>)
 8000872:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000876:	f44f 4290 	mov.w	r2, #18432	; 0x4800
 800087a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
		ETH.gS1_TX_MASK = 0x07FF;
 800087e:	4b57      	ldr	r3, [pc, #348]	; (80009dc <main+0x348>)
 8000880:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000884:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000888:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
		ETH.gS2_TX_BASE = 0x5000;
 800088c:	4b53      	ldr	r3, [pc, #332]	; (80009dc <main+0x348>)
 800088e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000892:	f44f 42a0 	mov.w	r2, #20480	; 0x5000
 8000896:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
		ETH.gS2_TX_MASK = 0x07FF;
 800089a:	4b50      	ldr	r3, [pc, #320]	; (80009dc <main+0x348>)
 800089c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80008a0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80008a4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
		ETH.gS3_TX_BASE = 0x5800;
 80008a8:	4b4c      	ldr	r3, [pc, #304]	; (80009dc <main+0x348>)
 80008aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80008ae:	f44f 42b0 	mov.w	r2, #22528	; 0x5800
 80008b2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
		ETH.gS3_TX_MASK = 0x07FF;
 80008b6:	4b49      	ldr	r3, [pc, #292]	; (80009dc <main+0x348>)
 80008b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80008bc:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80008c0:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64

		ETH.S0_ENserver = 0;			//Actúa como servidor S0_ENserver=1 o cliente S0_ENserver=0
 80008c4:	4b45      	ldr	r3, [pc, #276]	; (80009dc <main+0x348>)
 80008c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80008ca:	2200      	movs	r2, #0
 80008cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	  //----------------------- LoRa ------------------------//

	  //----------------------- LoRa ------------------------//

	  //----------------------- WIFI ------------------------//
 	  	Inicializar(&wf); 									//Borra todos los registros de la estructura
 80008d0:	4843      	ldr	r0, [pc, #268]	; (80009e0 <main+0x34c>)
 80008d2:	f006 f853 	bl	800697c <Inicializar>
 	  	wf.RESET_PORT=GPIOA;
 80008d6:	4b42      	ldr	r3, [pc, #264]	; (80009e0 <main+0x34c>)
 80008d8:	4a42      	ldr	r2, [pc, #264]	; (80009e4 <main+0x350>)
 80008da:	601a      	str	r2, [r3, #0]
 	  	wf.RESET_PORT=GPIO_PIN_8;
 80008dc:	4b40      	ldr	r3, [pc, #256]	; (80009e0 <main+0x34c>)
 80008de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80008e2:	601a      	str	r2, [r3, #0]
		strcpy(wf._WF_Net, WIFI_NET);						//Nombre de la red WIFI  a conectar Fibertel WiFi967 2.4GHz
 80008e4:	4940      	ldr	r1, [pc, #256]	; (80009e8 <main+0x354>)
 80008e6:	4841      	ldr	r0, [pc, #260]	; (80009ec <main+0x358>)
 80008e8:	f00e ffe2 	bl	800f8b0 <strcpy>
		strcpy(wf._WF_Pass, WIFI_PASS);						//Password de la red WIFI
 80008ec:	4940      	ldr	r1, [pc, #256]	; (80009f0 <main+0x35c>)
 80008ee:	4841      	ldr	r0, [pc, #260]	; (80009f4 <main+0x360>)
 80008f0:	f00e ffde 	bl	800f8b0 <strcpy>
		strcpy(wf._TCP_Remote_Server_IP, TCP_SERVER);		//char _TCP_Remote_Server_IP[16];		//IP del Servidor TCP
 80008f4:	4940      	ldr	r1, [pc, #256]	; (80009f8 <main+0x364>)
 80008f6:	4841      	ldr	r0, [pc, #260]	; (80009fc <main+0x368>)
 80008f8:	f00e ffda 	bl	800f8b0 <strcpy>
		strcpy(wf._TCP_Remote_Server_Port, TCP_PORT);		//char _TCP_Remote_Server_Port[16];			//Puerto del Servidor TCP
 80008fc:	4940      	ldr	r1, [pc, #256]	; (8000a00 <main+0x36c>)
 80008fe:	4841      	ldr	r0, [pc, #260]	; (8000a04 <main+0x370>)
 8000900:	f00e ffd6 	bl	800f8b0 <strcpy>
		strcpy(wf._TCP_Local_Server_IP, TCP_SERVER_LOCAL);
 8000904:	4940      	ldr	r1, [pc, #256]	; (8000a08 <main+0x374>)
 8000906:	4841      	ldr	r0, [pc, #260]	; (8000a0c <main+0x378>)
 8000908:	f00e ffd2 	bl	800f8b0 <strcpy>
		strcpy(wf._TCP_Local_Server_GWY, TCP_SERVER_LOCAL_GWY);
 800090c:	4940      	ldr	r1, [pc, #256]	; (8000a10 <main+0x37c>)
 800090e:	4841      	ldr	r0, [pc, #260]	; (8000a14 <main+0x380>)
 8000910:	f00e ffce 	bl	800f8b0 <strcpy>
		strcpy(wf._TCP_Local_Server_MSK, TCP_SERVER_LOCAL_MSK);
 8000914:	4940      	ldr	r1, [pc, #256]	; (8000a18 <main+0x384>)
 8000916:	4841      	ldr	r0, [pc, #260]	; (8000a1c <main+0x388>)
 8000918:	f00e ffca 	bl	800f8b0 <strcpy>
		strcpy(wf._TCP_Local_Server_Port, TCP_PORT_LOCAL);
 800091c:	4940      	ldr	r1, [pc, #256]	; (8000a20 <main+0x38c>)
 800091e:	4841      	ldr	r0, [pc, #260]	; (8000a24 <main+0x390>)
 8000920:	f00e ffc6 	bl	800f8b0 <strcpy>
		wf._TCP_Local_Server_EN=0;							//Habilito el Servidor Local
 8000924:	4b2e      	ldr	r3, [pc, #184]	; (80009e0 <main+0x34c>)
 8000926:	2200      	movs	r2, #0
 8000928:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
		wf._data2SND[0]=0x00;//strcpy(wf._data2SND,"01;03;00;00;00;0A;C5;CD");//strcpy(wf._data2SND,"20;352;52#");
 800092c:	4b2c      	ldr	r3, [pc, #176]	; (80009e0 <main+0x34c>)
 800092e:	2200      	movs	r2, #0
 8000930:	f883 2298 	strb.w	r2, [r3, #664]	; 0x298
		wf._data2SND[1]=0x00;
 8000934:	4b2a      	ldr	r3, [pc, #168]	; (80009e0 <main+0x34c>)
 8000936:	2200      	movs	r2, #0
 8000938:	f883 2299 	strb.w	r2, [r3, #665]	; 0x299
		wf._data2SND[2]=0x00;
 800093c:	4b28      	ldr	r3, [pc, #160]	; (80009e0 <main+0x34c>)
 800093e:	2200      	movs	r2, #0
 8000940:	f883 229a 	strb.w	r2, [r3, #666]	; 0x29a
		wf._data2SND[3]=0x00;
 8000944:	4b26      	ldr	r3, [pc, #152]	; (80009e0 <main+0x34c>)
 8000946:	2200      	movs	r2, #0
 8000948:	f883 229b 	strb.w	r2, [r3, #667]	; 0x29b
		wf._data2SND[4]=0x00;
 800094c:	4b24      	ldr	r3, [pc, #144]	; (80009e0 <main+0x34c>)
 800094e:	2200      	movs	r2, #0
 8000950:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
		wf._data2SND[5]=0x06;
 8000954:	4b22      	ldr	r3, [pc, #136]	; (80009e0 <main+0x34c>)
 8000956:	2206      	movs	r2, #6
 8000958:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
		wf._data2SND[6]=0x01;
 800095c:	4b20      	ldr	r3, [pc, #128]	; (80009e0 <main+0x34c>)
 800095e:	2201      	movs	r2, #1
 8000960:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
		wf._data2SND[7]=0x03;
 8000964:	4b1e      	ldr	r3, [pc, #120]	; (80009e0 <main+0x34c>)
 8000966:	2203      	movs	r2, #3
 8000968:	f883 229f 	strb.w	r2, [r3, #671]	; 0x29f
		wf._data2SND[8]=0x00;//strcpy(wf._data2SND,"01;03;00;00;00;0A;C5;CD");//strcpy(wf._data2SND,"20;352;52#");
 800096c:	4b1c      	ldr	r3, [pc, #112]	; (80009e0 <main+0x34c>)
 800096e:	2200      	movs	r2, #0
 8000970:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
		wf._data2SND[9]=0x00;
 8000974:	4b1a      	ldr	r3, [pc, #104]	; (80009e0 <main+0x34c>)
 8000976:	2200      	movs	r2, #0
 8000978:	f883 22a1 	strb.w	r2, [r3, #673]	; 0x2a1
		wf._data2SND[10]=0x00;
 800097c:	4b18      	ldr	r3, [pc, #96]	; (80009e0 <main+0x34c>)
 800097e:	2200      	movs	r2, #0
 8000980:	f883 22a2 	strb.w	r2, [r3, #674]	; 0x2a2
		wf._data2SND[11]=0x0A;
 8000984:	4b16      	ldr	r3, [pc, #88]	; (80009e0 <main+0x34c>)
 8000986:	220a      	movs	r2, #10
 8000988:	f883 22a3 	strb.w	r2, [r3, #675]	; 0x2a3
		wf._data2SND[12]=0x00;
 800098c:	4b14      	ldr	r3, [pc, #80]	; (80009e0 <main+0x34c>)
 800098e:	2200      	movs	r2, #0
 8000990:	f883 22a4 	strb.w	r2, [r3, #676]	; 0x2a4
		wf._data2SND[13]=0x33;
 8000994:	4b12      	ldr	r3, [pc, #72]	; (80009e0 <main+0x34c>)
 8000996:	2233      	movs	r2, #51	; 0x33
 8000998:	f883 22a5 	strb.w	r2, [r3, #677]	; 0x2a5
		wf._data2SND[14]=0x34;
 800099c:	4b10      	ldr	r3, [pc, #64]	; (80009e0 <main+0x34c>)
 800099e:	2234      	movs	r2, #52	; 0x34
 80009a0:	f883 22a6 	strb.w	r2, [r3, #678]	; 0x2a6
		wf._data2SND[15]=0x35;
 80009a4:	4b0e      	ldr	r3, [pc, #56]	; (80009e0 <main+0x34c>)
 80009a6:	2235      	movs	r2, #53	; 0x35
 80009a8:	f883 22a7 	strb.w	r2, [r3, #679]	; 0x2a7
		wf._n_D2SND=12;
 80009ac:	4b0c      	ldr	r3, [pc, #48]	; (80009e0 <main+0x34c>)
 80009ae:	220c      	movs	r2, #12
 80009b0:	f8c3 2cf0 	str.w	r2, [r3, #3312]	; 0xcf0
		wf._estado_conexion=100;//Si no se define no arranca	//wf._estado_conexion=1;					//Arranco en WiFi Desconectado
 80009b4:	4b0a      	ldr	r3, [pc, #40]	; (80009e0 <main+0x34c>)
 80009b6:	2264      	movs	r2, #100	; 0x64
 80009b8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
		wf._automatizacion=WF_CONNECT_TCP;//wf._automatizacion=WF_SEND;
 80009bc:	4b08      	ldr	r3, [pc, #32]	; (80009e0 <main+0x34c>)
 80009be:	2202      	movs	r2, #2
 80009c0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
		wf._NO_IP=1;
 80009c4:	4b06      	ldr	r3, [pc, #24]	; (80009e0 <main+0x34c>)
 80009c6:	2201      	movs	r2, #1
 80009c8:	f8c3 2d58 	str.w	r2, [r3, #3416]	; 0xd58
		wf._DBG_EN=1;
 80009cc:	4b04      	ldr	r3, [pc, #16]	; (80009e0 <main+0x34c>)
 80009ce:	2201      	movs	r2, #1
 80009d0:	f8c3 2d5c 	str.w	r2, [r3, #3420]	; 0xd5c
		//wf._send_data=1;
		// ----------- INICIO - Seteo de módulo Ethernet W5100 ----------- //
	    // Conectado a SPI2
		// PIN NSS - PortB 12
		spi_no_debug=1;
 80009d4:	4b14      	ldr	r3, [pc, #80]	; (8000a28 <main+0x394>)
 80009d6:	2201      	movs	r2, #1
 80009d8:	701a      	strb	r2, [r3, #0]
 80009da:	e027      	b.n	8000a2c <main+0x398>
 80009dc:	20002960 	.word	0x20002960
 80009e0:	20000b58 	.word	0x20000b58
 80009e4:	40020000 	.word	0x40020000
 80009e8:	20000024 	.word	0x20000024
 80009ec:	20000b5e 	.word	0x20000b5e
 80009f0:	2000002c 	.word	0x2000002c
 80009f4:	20000b7e 	.word	0x20000b7e
 80009f8:	20000038 	.word	0x20000038
 80009fc:	20000b8e 	.word	0x20000b8e
 8000a00:	20000048 	.word	0x20000048
 8000a04:	20000b9e 	.word	0x20000b9e
 8000a08:	20000050 	.word	0x20000050
 8000a0c:	20000ba4 	.word	0x20000ba4
 8000a10:	20000060 	.word	0x20000060
 8000a14:	20000bba 	.word	0x20000bba
 8000a18:	20000070 	.word	0x20000070
 8000a1c:	20000bca 	.word	0x20000bca
 8000a20:	20000080 	.word	0x20000080
 8000a24:	20000bb4 	.word	0x20000bb4
 8000a28:	20003a10 	.word	0x20003a10
		ETH.NSS_PORT=GPIOA;
 8000a2c:	4b4d      	ldr	r3, [pc, #308]	; (8000b64 <main+0x4d0>)
 8000a2e:	4a4e      	ldr	r2, [pc, #312]	; (8000b68 <main+0x4d4>)
 8000a30:	605a      	str	r2, [r3, #4]
		ETH.NSS_PIN=GPIO_PIN_4;
 8000a32:	4b4c      	ldr	r3, [pc, #304]	; (8000b64 <main+0x4d0>)
 8000a34:	2210      	movs	r2, #16
 8000a36:	811a      	strh	r2, [r3, #8]
		ETH.SPI= &hspi1;
 8000a38:	4b4a      	ldr	r3, [pc, #296]	; (8000b64 <main+0x4d0>)
 8000a3a:	4a4c      	ldr	r2, [pc, #304]	; (8000b6c <main+0x4d8>)
 8000a3c:	601a      	str	r2, [r3, #0]

	 //----------------------- WIFI ------------------------//

	 //---------------------- ModBUS -----------------------//

		ModBUS_Config(&mb_eth);		//ETHERNET como cliente TCP envía  ModBUS
 8000a3e:	484c      	ldr	r0, [pc, #304]	; (8000b70 <main+0x4dc>)
 8000a40:	f00c f91a 	bl	800cc78 <ModBUS_Config>
		mb_eth._mode = CLIENTE;
 8000a44:	4b4a      	ldr	r3, [pc, #296]	; (8000b70 <main+0x4dc>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	711a      	strb	r2, [r3, #4]
		ModBUS_Config(&mb_wf);	//WIFI como servidor TCP, recibe comadno ModBUS
 8000a4a:	484a      	ldr	r0, [pc, #296]	; (8000b74 <main+0x4e0>)
 8000a4c:	f00c f914 	bl	800cc78 <ModBUS_Config>
		mb_wf._mode = CLIENTE;
 8000a50:	4b48      	ldr	r3, [pc, #288]	; (8000b74 <main+0x4e0>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	711a      	strb	r2, [r3, #4]
		ModBUS_F03_Assign(&mb_wf,3,0xAA55);
 8000a56:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8000a5a:	2103      	movs	r1, #3
 8000a5c:	4845      	ldr	r0, [pc, #276]	; (8000b74 <main+0x4e0>)
 8000a5e:	f00c f9ae 	bl	800cdbe <ModBUS_F03_Assign>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a62:	f002 f8fb 	bl	8002c5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a66:	f000 fb3f 	bl	80010e8 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  SysTick_Config(SystemCoreClock/1000);
 8000a6a:	4b43      	ldr	r3, [pc, #268]	; (8000b78 <main+0x4e4>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	4a43      	ldr	r2, [pc, #268]	; (8000b7c <main+0x4e8>)
 8000a70:	fba2 2303 	umull	r2, r3, r2, r3
 8000a74:	099b      	lsrs	r3, r3, #6
 8000a76:	4618      	mov	r0, r3
 8000a78:	f7ff fdc2 	bl	8000600 <SysTick_Config>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a7c:	f000 fd46 	bl	800150c <MX_GPIO_Init>
  MX_SPI1_Init();
 8000a80:	f000 fb9a 	bl	80011b8 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000a84:	f000 fcc4 	bl	8001410 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000a88:	f000 fcec 	bl	8001464 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 8000a8c:	f000 fd14 	bl	80014b8 <MX_USART6_UART_Init>
  MX_TIM2_Init();
 8000a90:	f000 fbc8 	bl	8001224 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000a94:	f000 fc40 	bl	8001318 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 0);
 8000a98:	2200      	movs	r2, #0
 8000a9a:	2102      	movs	r1, #2
 8000a9c:	4832      	ldr	r0, [pc, #200]	; (8000b68 <main+0x4d4>)
 8000a9e:	f002 fdb1 	bl	8003604 <HAL_GPIO_WritePin>
  ITM0_Write("\r\n INICIO OK\r\n",strlen("\r\n INICIO OK\r\n"));
 8000aa2:	210e      	movs	r1, #14
 8000aa4:	4836      	ldr	r0, [pc, #216]	; (8000b80 <main+0x4ec>)
 8000aa6:	f000 fdc3 	bl	8001630 <ITM0_Write>
     ESP8266_HW_Reset();	//WRNNG Hardcoded	  //Reseteo el modulo desde el pin de RESET
 8000aaa:	f001 fceb 	bl	8002484 <ESP8266_HW_Reset>
     if (wf._DBG_EN) ITM0_Write("\r\n RESET ESP8266 \r\n",strlen("\r\n RESET ESP8266 \r\n"));
 8000aae:	4b35      	ldr	r3, [pc, #212]	; (8000b84 <main+0x4f0>)
 8000ab0:	f8d3 3d5c 	ldr.w	r3, [r3, #3420]	; 0xd5c
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d003      	beq.n	8000ac0 <main+0x42c>
 8000ab8:	2113      	movs	r1, #19
 8000aba:	4833      	ldr	r0, [pc, #204]	; (8000b88 <main+0x4f4>)
 8000abc:	f000 fdb8 	bl	8001630 <ITM0_Write>
     HAL_UART_Receive_IT(&huart1,(uint8_t *)UART_RX_byte,1);
 8000ac0:	2201      	movs	r2, #1
 8000ac2:	4932      	ldr	r1, [pc, #200]	; (8000b8c <main+0x4f8>)
 8000ac4:	4832      	ldr	r0, [pc, #200]	; (8000b90 <main+0x4fc>)
 8000ac6:	f004 fec6 	bl	8005856 <HAL_UART_Receive_IT>
     HAL_UART_Receive_IT(&huart2,(uint8_t *)UART2_RX_byte,1);
 8000aca:	2201      	movs	r2, #1
 8000acc:	4931      	ldr	r1, [pc, #196]	; (8000b94 <main+0x500>)
 8000ace:	4832      	ldr	r0, [pc, #200]	; (8000b98 <main+0x504>)
 8000ad0:	f004 fec1 	bl	8005856 <HAL_UART_Receive_IT>
     if (ETH_DBG_EN)ITM0_Write("\r\n SET-UP W5100 \r\n",strlen("\r\n SET-UP W5100 \r\n"));
 8000ad4:	4b31      	ldr	r3, [pc, #196]	; (8000b9c <main+0x508>)
 8000ad6:	781b      	ldrb	r3, [r3, #0]
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d003      	beq.n	8000ae4 <main+0x450>
 8000adc:	2112      	movs	r1, #18
 8000ade:	4830      	ldr	r0, [pc, #192]	; (8000ba0 <main+0x50c>)
 8000ae0:	f000 fda6 	bl	8001630 <ITM0_Write>

   	 ETH.operacion=SPI_WRITE;
 8000ae4:	4b1f      	ldr	r3, [pc, #124]	; (8000b64 <main+0x4d0>)
 8000ae6:	22f0      	movs	r2, #240	; 0xf0
 8000ae8:	729a      	strb	r2, [r3, #10]
   	 ETH.TX[1]= 0;
 8000aea:	4b1e      	ldr	r3, [pc, #120]	; (8000b64 <main+0x4d0>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	755a      	strb	r2, [r3, #21]
   	 ETH.TX[2]= 1;
 8000af0:	4b1c      	ldr	r3, [pc, #112]	; (8000b64 <main+0x4d0>)
 8000af2:	2201      	movs	r2, #1
 8000af4:	759a      	strb	r2, [r3, #22]
   	 ETH.TX[3]= 192;
 8000af6:	4b1b      	ldr	r3, [pc, #108]	; (8000b64 <main+0x4d0>)
 8000af8:	22c0      	movs	r2, #192	; 0xc0
 8000afa:	75da      	strb	r2, [r3, #23]
   ETH.operacion=SPI_READ;
 8000afc:	4b19      	ldr	r3, [pc, #100]	; (8000b64 <main+0x4d0>)
 8000afe:	220f      	movs	r2, #15
 8000b00:	729a      	strb	r2, [r3, #10]
   ETH.TX[1]= 0;
 8000b02:	4b18      	ldr	r3, [pc, #96]	; (8000b64 <main+0x4d0>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	755a      	strb	r2, [r3, #21]
   ETH.TX[2]= 1;
 8000b08:	4b16      	ldr	r3, [pc, #88]	; (8000b64 <main+0x4d0>)
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	759a      	strb	r2, [r3, #22]
   ETH.TX[3]= 0;
 8000b0e:	4b15      	ldr	r3, [pc, #84]	; (8000b64 <main+0x4d0>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	75da      	strb	r2, [r3, #23]

     if(ESP8266_HW_Init(&huart1)==1)
 8000b14:	481e      	ldr	r0, [pc, #120]	; (8000b90 <main+0x4fc>)
 8000b16:	f001 fcdd 	bl	80024d4 <ESP8266_HW_Init>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b01      	cmp	r3, #1
 8000b1e:	d10c      	bne.n	8000b3a <main+0x4a6>
     {
   	  ESP_HW_Init=1;
 8000b20:	4b20      	ldr	r3, [pc, #128]	; (8000ba4 <main+0x510>)
 8000b22:	2201      	movs	r2, #1
 8000b24:	701a      	strb	r2, [r3, #0]
   	  if (wf._DBG_EN) ITM0_Write("\r\n ESP HW Init OK\r\n",strlen("\r\n ESP HW Init OK\r\n"));
 8000b26:	4b17      	ldr	r3, [pc, #92]	; (8000b84 <main+0x4f0>)
 8000b28:	f8d3 3d5c 	ldr.w	r3, [r3, #3420]	; 0xd5c
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d049      	beq.n	8000bc4 <main+0x530>
 8000b30:	2113      	movs	r1, #19
 8000b32:	481d      	ldr	r0, [pc, #116]	; (8000ba8 <main+0x514>)
 8000b34:	f000 fd7c 	bl	8001630 <ITM0_Write>
 8000b38:	e044      	b.n	8000bc4 <main+0x530>
     }
     else
     {
   	  ESP8266_HW_Reset(); //WRNNG Hardcoded
 8000b3a:	f001 fca3 	bl	8002484 <ESP8266_HW_Reset>
   	  if(ESP8266_HW_Init(&huart1)==1)
 8000b3e:	4814      	ldr	r0, [pc, #80]	; (8000b90 <main+0x4fc>)
 8000b40:	f001 fcc8 	bl	80024d4 <ESP8266_HW_Init>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b01      	cmp	r3, #1
 8000b48:	d130      	bne.n	8000bac <main+0x518>
   	  {
   		  ESP_HW_Init=1;
 8000b4a:	4b16      	ldr	r3, [pc, #88]	; (8000ba4 <main+0x510>)
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	701a      	strb	r2, [r3, #0]
   		  if (wf._DBG_EN) ITM0_Write("\r\n ESP HW Init OK\r\n",strlen("\r\n ESP HW Init OK\r\n"));
 8000b50:	4b0c      	ldr	r3, [pc, #48]	; (8000b84 <main+0x4f0>)
 8000b52:	f8d3 3d5c 	ldr.w	r3, [r3, #3420]	; 0xd5c
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d034      	beq.n	8000bc4 <main+0x530>
 8000b5a:	2113      	movs	r1, #19
 8000b5c:	4812      	ldr	r0, [pc, #72]	; (8000ba8 <main+0x514>)
 8000b5e:	f000 fd67 	bl	8001630 <ITM0_Write>
 8000b62:	e02f      	b.n	8000bc4 <main+0x530>
 8000b64:	20002960 	.word	0x20002960
 8000b68:	40020000 	.word	0x40020000
 8000b6c:	20000194 	.word	0x20000194
 8000b70:	200018b8 	.word	0x200018b8
 8000b74:	20001f08 	.word	0x20001f08
 8000b78:	20000084 	.word	0x20000084
 8000b7c:	10624dd3 	.word	0x10624dd3
 8000b80:	08010894 	.word	0x08010894
 8000b84:	20000b58 	.word	0x20000b58
 8000b88:	080108a4 	.word	0x080108a4
 8000b8c:	20004028 	.word	0x20004028
 8000b90:	2000027c 	.word	0x2000027c
 8000b94:	2000402c 	.word	0x2000402c
 8000b98:	200002c0 	.word	0x200002c0
 8000b9c:	20002958 	.word	0x20002958
 8000ba0:	080108b8 	.word	0x080108b8
 8000ba4:	20003a13 	.word	0x20003a13
 8000ba8:	080108cc 	.word	0x080108cc
   	  }
   	  else
   	  {
   		  ESP_HW_Init=0;
 8000bac:	4bac      	ldr	r3, [pc, #688]	; (8000e60 <main+0x7cc>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	701a      	strb	r2, [r3, #0]
   		  if (wf._DBG_EN)  ITM0_Write("\r\n ESP HW Init Fail\r\n",strlen("\r\n ESP HW Init Fail\r\n"));
 8000bb2:	4bac      	ldr	r3, [pc, #688]	; (8000e64 <main+0x7d0>)
 8000bb4:	f8d3 3d5c 	ldr.w	r3, [r3, #3420]	; 0xd5c
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d003      	beq.n	8000bc4 <main+0x530>
 8000bbc:	2115      	movs	r1, #21
 8000bbe:	48aa      	ldr	r0, [pc, #680]	; (8000e68 <main+0x7d4>)
 8000bc0:	f000 fd36 	bl	8001630 <ITM0_Write>
   	  }
     }

     HAL_Delay(1000);
 8000bc4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000bc8:	f002 f8ba 	bl	8002d40 <HAL_Delay>





	  	  if (ESP_HW_Init==1)
 8000bcc:	4ba4      	ldr	r3, [pc, #656]	; (8000e60 <main+0x7cc>)
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	2b01      	cmp	r3, #1
 8000bd2:	f040 80cf 	bne.w	8000d74 <main+0x6e0>
	  	  {
	  			if((WF_SND_FLAG==1)&&(wf._TCP_Local_Server_EN==0)&&(wf._estado_conexion>=609)&&(lr._data_available))
 8000bd6:	4ba5      	ldr	r3, [pc, #660]	; (8000e6c <main+0x7d8>)
 8000bd8:	781b      	ldrb	r3, [r3, #0]
 8000bda:	2b01      	cmp	r3, #1
 8000bdc:	f040 80ca 	bne.w	8000d74 <main+0x6e0>
 8000be0:	4ba0      	ldr	r3, [pc, #640]	; (8000e64 <main+0x7d0>)
 8000be2:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	f040 80c4 	bne.w	8000d74 <main+0x6e0>
 8000bec:	4b9d      	ldr	r3, [pc, #628]	; (8000e64 <main+0x7d0>)
 8000bee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000bf2:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 8000bf6:	f340 80bd 	ble.w	8000d74 <main+0x6e0>
 8000bfa:	4b9d      	ldr	r3, [pc, #628]	; (8000e70 <main+0x7dc>)
 8000bfc:	f893 3800 	ldrb.w	r3, [r3, #2048]	; 0x800
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	f000 80b7 	beq.w	8000d74 <main+0x6e0>
	  			{	lr._data_available=0;
 8000c06:	4b9a      	ldr	r3, [pc, #616]	; (8000e70 <main+0x7dc>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	f883 2800 	strb.w	r2, [r3, #2048]	; 0x800
	  				wf_snd_flag_ticks=0;
 8000c0e:	4b99      	ldr	r3, [pc, #612]	; (8000e74 <main+0x7e0>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	601a      	str	r2, [r3, #0]
	  				WF_SND_FLAG=0;
 8000c14:	4b95      	ldr	r3, [pc, #596]	; (8000e6c <main+0x7d8>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	701a      	strb	r2, [r3, #0]
	  				if( httpPOST(	ENDPOINT, SERVER_IP,PORT,
 8000c1a:	2100      	movs	r1, #0
 8000c1c:	4896      	ldr	r0, [pc, #600]	; (8000e78 <main+0x7e4>)
 8000c1e:	f00c f8fd 	bl	800ce1c <ModBUS_F03_Read>
 8000c22:	4603      	mov	r3, r0
 8000c24:	4698      	mov	r8, r3
 8000c26:	2101      	movs	r1, #1
 8000c28:	4893      	ldr	r0, [pc, #588]	; (8000e78 <main+0x7e4>)
 8000c2a:	f00c f8f7 	bl	800ce1c <ModBUS_F03_Read>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000c32:	2102      	movs	r1, #2
 8000c34:	4890      	ldr	r0, [pc, #576]	; (8000e78 <main+0x7e4>)
 8000c36:	f00c f8f1 	bl	800ce1c <ModBUS_F03_Read>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	62bb      	str	r3, [r7, #40]	; 0x28
 8000c3e:	2103      	movs	r1, #3
 8000c40:	488d      	ldr	r0, [pc, #564]	; (8000e78 <main+0x7e4>)
 8000c42:	f00c f8eb 	bl	800ce1c <ModBUS_F03_Read>
 8000c46:	4603      	mov	r3, r0
 8000c48:	627b      	str	r3, [r7, #36]	; 0x24
 8000c4a:	2104      	movs	r1, #4
 8000c4c:	488a      	ldr	r0, [pc, #552]	; (8000e78 <main+0x7e4>)
 8000c4e:	f00c f8e5 	bl	800ce1c <ModBUS_F03_Read>
 8000c52:	4603      	mov	r3, r0
 8000c54:	623b      	str	r3, [r7, #32]
 8000c56:	2105      	movs	r1, #5
 8000c58:	4887      	ldr	r0, [pc, #540]	; (8000e78 <main+0x7e4>)
 8000c5a:	f00c f8df 	bl	800ce1c <ModBUS_F03_Read>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	61fb      	str	r3, [r7, #28]
 8000c62:	2106      	movs	r1, #6
 8000c64:	4884      	ldr	r0, [pc, #528]	; (8000e78 <main+0x7e4>)
 8000c66:	f00c f8d9 	bl	800ce1c <ModBUS_F03_Read>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	61bb      	str	r3, [r7, #24]
 8000c6e:	2107      	movs	r1, #7
 8000c70:	4881      	ldr	r0, [pc, #516]	; (8000e78 <main+0x7e4>)
 8000c72:	f00c f8d3 	bl	800ce1c <ModBUS_F03_Read>
 8000c76:	4603      	mov	r3, r0
 8000c78:	617b      	str	r3, [r7, #20]
 8000c7a:	2108      	movs	r1, #8
 8000c7c:	487e      	ldr	r0, [pc, #504]	; (8000e78 <main+0x7e4>)
 8000c7e:	f00c f8cd 	bl	800ce1c <ModBUS_F03_Read>
 8000c82:	4603      	mov	r3, r0
 8000c84:	613b      	str	r3, [r7, #16]
 8000c86:	2109      	movs	r1, #9
 8000c88:	487b      	ldr	r0, [pc, #492]	; (8000e78 <main+0x7e4>)
 8000c8a:	f00c f8c7 	bl	800ce1c <ModBUS_F03_Read>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	60fb      	str	r3, [r7, #12]
 8000c92:	210a      	movs	r1, #10
 8000c94:	4878      	ldr	r0, [pc, #480]	; (8000e78 <main+0x7e4>)
 8000c96:	f00c f8c1 	bl	800ce1c <ModBUS_F03_Read>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	60bb      	str	r3, [r7, #8]
 8000c9e:	210b      	movs	r1, #11
 8000ca0:	4875      	ldr	r0, [pc, #468]	; (8000e78 <main+0x7e4>)
 8000ca2:	f00c f8bb 	bl	800ce1c <ModBUS_F03_Read>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	607b      	str	r3, [r7, #4]
 8000caa:	210c      	movs	r1, #12
 8000cac:	4872      	ldr	r0, [pc, #456]	; (8000e78 <main+0x7e4>)
 8000cae:	f00c f8b5 	bl	800ce1c <ModBUS_F03_Read>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	461e      	mov	r6, r3
 8000cb6:	210d      	movs	r1, #13
 8000cb8:	486f      	ldr	r0, [pc, #444]	; (8000e78 <main+0x7e4>)
 8000cba:	f00c f8af 	bl	800ce1c <ModBUS_F03_Read>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	461d      	mov	r5, r3
 8000cc2:	210e      	movs	r1, #14
 8000cc4:	486c      	ldr	r0, [pc, #432]	; (8000e78 <main+0x7e4>)
 8000cc6:	f00c f8a9 	bl	800ce1c <ModBUS_F03_Read>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	461c      	mov	r4, r3
 8000cce:	210f      	movs	r1, #15
 8000cd0:	4869      	ldr	r0, [pc, #420]	; (8000e78 <main+0x7e4>)
 8000cd2:	f00c f8a3 	bl	800ce1c <ModBUS_F03_Read>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	461a      	mov	r2, r3
 8000cda:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000cde:	9312      	str	r3, [sp, #72]	; 0x48
 8000ce0:	4b66      	ldr	r3, [pc, #408]	; (8000e7c <main+0x7e8>)
 8000ce2:	9311      	str	r3, [sp, #68]	; 0x44
 8000ce4:	4b66      	ldr	r3, [pc, #408]	; (8000e80 <main+0x7ec>)
 8000ce6:	9310      	str	r3, [sp, #64]	; 0x40
 8000ce8:	2301      	movs	r3, #1
 8000cea:	930f      	str	r3, [sp, #60]	; 0x3c
 8000cec:	920e      	str	r2, [sp, #56]	; 0x38
 8000cee:	940d      	str	r4, [sp, #52]	; 0x34
 8000cf0:	950c      	str	r5, [sp, #48]	; 0x30
 8000cf2:	960b      	str	r6, [sp, #44]	; 0x2c
 8000cf4:	687a      	ldr	r2, [r7, #4]
 8000cf6:	920a      	str	r2, [sp, #40]	; 0x28
 8000cf8:	68ba      	ldr	r2, [r7, #8]
 8000cfa:	9209      	str	r2, [sp, #36]	; 0x24
 8000cfc:	68fa      	ldr	r2, [r7, #12]
 8000cfe:	9208      	str	r2, [sp, #32]
 8000d00:	693a      	ldr	r2, [r7, #16]
 8000d02:	9207      	str	r2, [sp, #28]
 8000d04:	697a      	ldr	r2, [r7, #20]
 8000d06:	9206      	str	r2, [sp, #24]
 8000d08:	69ba      	ldr	r2, [r7, #24]
 8000d0a:	9205      	str	r2, [sp, #20]
 8000d0c:	69fa      	ldr	r2, [r7, #28]
 8000d0e:	9204      	str	r2, [sp, #16]
 8000d10:	6a3a      	ldr	r2, [r7, #32]
 8000d12:	9203      	str	r2, [sp, #12]
 8000d14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d16:	9202      	str	r2, [sp, #8]
 8000d18:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000d1a:	9201      	str	r2, [sp, #4]
 8000d1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d1e:	9300      	str	r3, [sp, #0]
 8000d20:	4643      	mov	r3, r8
 8000d22:	4a58      	ldr	r2, [pc, #352]	; (8000e84 <main+0x7f0>)
 8000d24:	4958      	ldr	r1, [pc, #352]	; (8000e88 <main+0x7f4>)
 8000d26:	4859      	ldr	r0, [pc, #356]	; (8000e8c <main+0x7f8>)
 8000d28:	f00a fe9a 	bl	800ba60 <httpPOST>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d020      	beq.n	8000d74 <main+0x6e0>
									ModBUS_F03_Read(&mb_eth,14),
									ModBUS_F03_Read(&mb_eth,15),TEST_1,//ModBUS_F03_Read(&mb_eth,9),TEPELCO,
	  								post, body, 512))

	  				{
	  							CopiaVector(wf._data2SND,post,strlen(post),0,'A');
 8000d32:	4853      	ldr	r0, [pc, #332]	; (8000e80 <main+0x7ec>)
 8000d34:	f7ff fa5e 	bl	80001f4 <strlen>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	461a      	mov	r2, r3
 8000d3c:	2341      	movs	r3, #65	; 0x41
 8000d3e:	9300      	str	r3, [sp, #0]
 8000d40:	2300      	movs	r3, #0
 8000d42:	494f      	ldr	r1, [pc, #316]	; (8000e80 <main+0x7ec>)
 8000d44:	4852      	ldr	r0, [pc, #328]	; (8000e90 <main+0x7fc>)
 8000d46:	f00e fa7f 	bl	800f248 <CopiaVector>
	  							wf._n_D2SND=strlen(post);
 8000d4a:	484d      	ldr	r0, [pc, #308]	; (8000e80 <main+0x7ec>)
 8000d4c:	f7ff fa52 	bl	80001f4 <strlen>
 8000d50:	4603      	mov	r3, r0
 8000d52:	461a      	mov	r2, r3
 8000d54:	4b43      	ldr	r3, [pc, #268]	; (8000e64 <main+0x7d0>)
 8000d56:	f8c3 2cf0 	str.w	r2, [r3, #3312]	; 0xcf0
	  							if(wf._automatizacion < WF_SEND)		// Send only with automation sent diasabled
 8000d5a:	4b42      	ldr	r3, [pc, #264]	; (8000e64 <main+0x7d0>)
 8000d5c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8000d60:	2b02      	cmp	r3, #2
 8000d62:	d807      	bhi.n	8000d74 <main+0x6e0>
	  							{
	  								EnviarDatos(&wf);
 8000d64:	483f      	ldr	r0, [pc, #252]	; (8000e64 <main+0x7d0>)
 8000d66:	f005 fdf3 	bl	8006950 <EnviarDatos>
	  								wf._estado_conexion=TCP_SND_EN_CURSO;
 8000d6a:	4b3e      	ldr	r3, [pc, #248]	; (8000e64 <main+0x7d0>)
 8000d6c:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8000d70:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	  				}
	  			}
	  	  }
	  /**************[ FIN PIDO ENVIAR DATOS ]**************/

	  		if ((FLAG_UART1==1)||(FLAG_TIMEOUT==1))  //Si recibí datos o me fui por TimeOUT
 8000d74:	4b47      	ldr	r3, [pc, #284]	; (8000e94 <main+0x800>)
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	2b01      	cmp	r3, #1
 8000d7a:	d004      	beq.n	8000d86 <main+0x6f2>
 8000d7c:	4b46      	ldr	r3, [pc, #280]	; (8000e98 <main+0x804>)
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	2b01      	cmp	r3, #1
 8000d82:	f040 80aa 	bne.w	8000eda <main+0x846>
	  		{
	  			if(FLAG_UART1==1)
 8000d86:	4b43      	ldr	r3, [pc, #268]	; (8000e94 <main+0x800>)
 8000d88:	781b      	ldrb	r3, [r3, #0]
 8000d8a:	2b01      	cmp	r3, #1
 8000d8c:	d11c      	bne.n	8000dc8 <main+0x734>
	  				{
	  					CopiaVector(wf._uartRCVD,UART_RX_vect_hld,UART_RX_items,1,CMP_VECT);
 8000d8e:	4b43      	ldr	r3, [pc, #268]	; (8000e9c <main+0x808>)
 8000d90:	681a      	ldr	r2, [r3, #0]
 8000d92:	4b43      	ldr	r3, [pc, #268]	; (8000ea0 <main+0x80c>)
 8000d94:	9300      	str	r3, [sp, #0]
 8000d96:	2301      	movs	r3, #1
 8000d98:	4942      	ldr	r1, [pc, #264]	; (8000ea4 <main+0x810>)
 8000d9a:	4843      	ldr	r0, [pc, #268]	; (8000ea8 <main+0x814>)
 8000d9c:	f00e fa54 	bl	800f248 <CopiaVector>
	  					FLAG_UART1=0;
 8000da0:	4b3c      	ldr	r3, [pc, #240]	; (8000e94 <main+0x800>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	701a      	strb	r2, [r3, #0]

	  						if (error_rxdata==3)
 8000da6:	4b41      	ldr	r3, [pc, #260]	; (8000eac <main+0x818>)
 8000da8:	781b      	ldrb	r3, [r3, #0]
 8000daa:	2b03      	cmp	r3, #3
 8000dac:	d102      	bne.n	8000db4 <main+0x720>
	  						{
	  							error_rxdata=0;
 8000dae:	4b3f      	ldr	r3, [pc, #252]	; (8000eac <main+0x818>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	701a      	strb	r2, [r3, #0]
	  						}
	  						if (error_rxdata==1)
 8000db4:	4b3d      	ldr	r3, [pc, #244]	; (8000eac <main+0x818>)
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	2b01      	cmp	r3, #1
 8000dba:	d105      	bne.n	8000dc8 <main+0x734>
	  						{
	  							error_rxdata=5;
 8000dbc:	4b3b      	ldr	r3, [pc, #236]	; (8000eac <main+0x818>)
 8000dbe:	2205      	movs	r2, #5
 8000dc0:	701a      	strb	r2, [r3, #0]
	  							error_rxdata=0;
 8000dc2:	4b3a      	ldr	r3, [pc, #232]	; (8000eac <main+0x818>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	701a      	strb	r2, [r3, #0]
	  						}
	  				}
	  			if(FLAG_TIMEOUT==1)
 8000dc8:	4b33      	ldr	r3, [pc, #204]	; (8000e98 <main+0x804>)
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	2b01      	cmp	r3, #1
 8000dce:	d102      	bne.n	8000dd6 <main+0x742>
	  					{
	  						FLAG_TIMEOUT=0;
 8000dd0:	4b31      	ldr	r3, [pc, #196]	; (8000e98 <main+0x804>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	701a      	strb	r2, [r3, #0]
	  					}

	  			if (ESP_HW_Init==1) //Si el módulo se inició correctamente
 8000dd6:	4b22      	ldr	r3, [pc, #136]	; (8000e60 <main+0x7cc>)
 8000dd8:	781b      	ldrb	r3, [r3, #0]
 8000dda:	2b01      	cmp	r3, #1
 8000ddc:	d17d      	bne.n	8000eda <main+0x846>
	  				{
	  					/*************** Copio y proceso info recibida ***************/
	  					wf._n_orig=UART_RX_items;
 8000dde:	4b2f      	ldr	r3, [pc, #188]	; (8000e9c <main+0x808>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	4a20      	ldr	r2, [pc, #128]	; (8000e64 <main+0x7d0>)
 8000de4:	f8c2 3ce4 	str.w	r3, [r2, #3300]	; 0xce4
	  					CopiaVector(wf._uartRCVD,UART_RX_vect_hld,UART_RX_items,1,CMP_VECT);
 8000de8:	4b2c      	ldr	r3, [pc, #176]	; (8000e9c <main+0x808>)
 8000dea:	681a      	ldr	r2, [r3, #0]
 8000dec:	4b2c      	ldr	r3, [pc, #176]	; (8000ea0 <main+0x80c>)
 8000dee:	9300      	str	r3, [sp, #0]
 8000df0:	2301      	movs	r3, #1
 8000df2:	492c      	ldr	r1, [pc, #176]	; (8000ea4 <main+0x810>)
 8000df4:	482c      	ldr	r0, [pc, #176]	; (8000ea8 <main+0x814>)
 8000df6:	f00e fa27 	bl	800f248 <CopiaVector>
	  					resultado=AT_ESP8266_ND(&wf);
 8000dfa:	481a      	ldr	r0, [pc, #104]	; (8000e64 <main+0x7d0>)
 8000dfc:	f005 fe8e 	bl	8006b1c <AT_ESP8266_ND>
 8000e00:	4603      	mov	r3, r0
 8000e02:	b2da      	uxtb	r2, r3
 8000e04:	4b2a      	ldr	r3, [pc, #168]	; (8000eb0 <main+0x81c>)
 8000e06:	701a      	strb	r2, [r3, #0]

	  					/*************** Si recibo datos y estan correctos me fijo que son ***************/

	  					if ((wf._new_data_rcv==1)&&(wf._estado_rcv_data==99))
 8000e08:	4b16      	ldr	r3, [pc, #88]	; (8000e64 <main+0x7d0>)
 8000e0a:	f8d3 3cdc 	ldr.w	r3, [r3, #3292]	; 0xcdc
 8000e0e:	2b01      	cmp	r3, #1
 8000e10:	d163      	bne.n	8000eda <main+0x846>
 8000e12:	4b14      	ldr	r3, [pc, #80]	; (8000e64 <main+0x7d0>)
 8000e14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000e18:	2b63      	cmp	r3, #99	; 0x63
 8000e1a:	d15e      	bne.n	8000eda <main+0x846>
	  					{

	  						CopiaVector(mb_wf._MBUS_RCVD,wf._dataRCV,wf._n_dataRCV,0,'A');
 8000e1c:	4b11      	ldr	r3, [pc, #68]	; (8000e64 <main+0x7d0>)
 8000e1e:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8000e22:	2341      	movs	r3, #65	; 0x41
 8000e24:	9300      	str	r3, [sp, #0]
 8000e26:	2300      	movs	r3, #0
 8000e28:	4922      	ldr	r1, [pc, #136]	; (8000eb4 <main+0x820>)
 8000e2a:	4823      	ldr	r0, [pc, #140]	; (8000eb8 <main+0x824>)
 8000e2c:	f00e fa0c 	bl	800f248 <CopiaVector>
	  						mb_wf._n_MBUS_RCVD=wf._n_dataRCV;
 8000e30:	4b0c      	ldr	r3, [pc, #48]	; (8000e64 <main+0x7d0>)
 8000e32:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8000e36:	4a21      	ldr	r2, [pc, #132]	; (8000ebc <main+0x828>)
 8000e38:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214

	  						ModBUS(&mb_wf);
 8000e3c:	481f      	ldr	r0, [pc, #124]	; (8000ebc <main+0x828>)
 8000e3e:	f00c f873 	bl	800cf28 <ModBUS>

	  						CopiaVector(wf._data2SND,mb_wf._MBUS_2SND,mb_wf._n_MBUS_2SND,0,'A');
 8000e42:	4b1e      	ldr	r3, [pc, #120]	; (8000ebc <main+0x828>)
 8000e44:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 8000e48:	2341      	movs	r3, #65	; 0x41
 8000e4a:	9300      	str	r3, [sp, #0]
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	491c      	ldr	r1, [pc, #112]	; (8000ec0 <main+0x82c>)
 8000e50:	480f      	ldr	r0, [pc, #60]	; (8000e90 <main+0x7fc>)
 8000e52:	f00e f9f9 	bl	800f248 <CopiaVector>
	  						wf._n_D2SND=mb_wf._n_MBUS_2SND;
 8000e56:	4b19      	ldr	r3, [pc, #100]	; (8000ebc <main+0x828>)
 8000e58:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 8000e5c:	e032      	b.n	8000ec4 <main+0x830>
 8000e5e:	bf00      	nop
 8000e60:	20003a13 	.word	0x20003a13
 8000e64:	20000b58 	.word	0x20000b58
 8000e68:	080108e0 	.word	0x080108e0
 8000e6c:	20002959 	.word	0x20002959
 8000e70:	20000350 	.word	0x20000350
 8000e74:	2000295c 	.word	0x2000295c
 8000e78:	200018b8 	.word	0x200018b8
 8000e7c:	20002758 	.word	0x20002758
 8000e80:	20002558 	.word	0x20002558
 8000e84:	2000001c 	.word	0x2000001c
 8000e88:	2000000c 	.word	0x2000000c
 8000e8c:	20000000 	.word	0x20000000
 8000e90:	20000df0 	.word	0x20000df0
 8000e94:	20003a18 	.word	0x20003a18
 8000e98:	20003a17 	.word	0x20003a17
 8000e9c:	20004034 	.word	0x20004034
 8000ea0:	20004024 	.word	0x20004024
 8000ea4:	20003e24 	.word	0x20003e24
 8000ea8:	200011f0 	.word	0x200011f0
 8000eac:	20003a1b 	.word	0x20003a1b
 8000eb0:	20003a1a 	.word	0x20003a1a
 8000eb4:	20000bf0 	.word	0x20000bf0
 8000eb8:	20001f1a 	.word	0x20001f1a
 8000ebc:	20001f08 	.word	0x20001f08
 8000ec0:	20002120 	.word	0x20002120
 8000ec4:	4a77      	ldr	r2, [pc, #476]	; (80010a4 <main+0xa10>)
 8000ec6:	f8c2 3cf0 	str.w	r3, [r2, #3312]	; 0xcf0
	  						wf._new_data_rcv=0;//
 8000eca:	4b76      	ldr	r3, [pc, #472]	; (80010a4 <main+0xa10>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	f8c3 2cdc 	str.w	r2, [r3, #3292]	; 0xcdc
	  						wf._send_data=1;
 8000ed2:	4b74      	ldr	r3, [pc, #464]	; (80010a4 <main+0xa10>)
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	f8c3 2a9c 	str.w	r2, [r3, #2716]	; 0xa9c
	  						}
	  					}

	  		}
// AGREGAR TIMER EN MS TICKS PARA HABILITAR ESTADO Y CUENTA TODOS EN EL STRUCT
	  		if((FLAG_UART2 == 1)||(lr.tmr_dly_ON==1))  //Evento de dato recibido LoRA debo verificar que es
 8000eda:	4b73      	ldr	r3, [pc, #460]	; (80010a8 <main+0xa14>)
 8000edc:	781b      	ldrb	r3, [r3, #0]
 8000ede:	2b01      	cmp	r3, #1
 8000ee0:	d005      	beq.n	8000eee <main+0x85a>
 8000ee2:	4b72      	ldr	r3, [pc, #456]	; (80010ac <main+0xa18>)
 8000ee4:	f893 37ee 	ldrb.w	r3, [r3, #2030]	; 0x7ee
 8000ee8:	2b01      	cmp	r3, #1
 8000eea:	f040 80b2 	bne.w	8001052 <main+0x9be>
	  		{
	  			if(FLAG_UART2==1)
 8000eee:	4b6e      	ldr	r3, [pc, #440]	; (80010a8 <main+0xa14>)
 8000ef0:	781b      	ldrb	r3, [r3, #0]
 8000ef2:	2b01      	cmp	r3, #1
 8000ef4:	d160      	bne.n	8000fb8 <main+0x924>
	  				{
	  				FLAG_UART2=0;
 8000ef6:	4b6c      	ldr	r3, [pc, #432]	; (80010a8 <main+0xa14>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	701a      	strb	r2, [r3, #0]
	  				LoRa_decode(&lr);
 8000efc:	486b      	ldr	r0, [pc, #428]	; (80010ac <main+0xa18>)
 8000efe:	f00b fa03 	bl	800c308 <LoRa_decode>
	  				if(lr._data_available)
 8000f02:	4b6a      	ldr	r3, [pc, #424]	; (80010ac <main+0xa18>)
 8000f04:	f893 3800 	ldrb.w	r3, [r3, #2048]	; 0x800
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d055      	beq.n	8000fb8 <main+0x924>
	  				{
	  					CopiaVector(lr.dataRCV_hld,lr.dataRCV,lr._n_dataRCV,1,"D");
 8000f0c:	4b67      	ldr	r3, [pc, #412]	; (80010ac <main+0xa18>)
 8000f0e:	f8d3 24d8 	ldr.w	r2, [r3, #1240]	; 0x4d8
 8000f12:	4b67      	ldr	r3, [pc, #412]	; (80010b0 <main+0xa1c>)
 8000f14:	9300      	str	r3, [sp, #0]
 8000f16:	2301      	movs	r3, #1
 8000f18:	4966      	ldr	r1, [pc, #408]	; (80010b4 <main+0xa20>)
 8000f1a:	4867      	ldr	r0, [pc, #412]	; (80010b8 <main+0xa24>)
 8000f1c:	f00e f994 	bl	800f248 <CopiaVector>
	  					char num[6];
	  					int i=0;
 8000f20:	2300      	movs	r3, #0
 8000f22:	647b      	str	r3, [r7, #68]	; 0x44
	  					int n=0;
 8000f24:	2300      	movs	r3, #0
 8000f26:	643b      	str	r3, [r7, #64]	; 0x40
	  					int lnn=0;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	63bb      	str	r3, [r7, #56]	; 0x38
	  					lnn=strlen(lr.dataRCV_hld);
 8000f2c:	4862      	ldr	r0, [pc, #392]	; (80010b8 <main+0xa24>)
 8000f2e:	f7ff f961 	bl	80001f4 <strlen>
 8000f32:	4603      	mov	r3, r0
 8000f34:	63bb      	str	r3, [r7, #56]	; 0x38
	  					while(i < lnn-1)
 8000f36:	e03a      	b.n	8000fae <main+0x91a>
	  					{
							if( i!=0) i++;
 8000f38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d002      	beq.n	8000f44 <main+0x8b0>
 8000f3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000f40:	3301      	adds	r3, #1
 8000f42:	647b      	str	r3, [r7, #68]	; 0x44
							int j=0;
 8000f44:	2300      	movs	r3, #0
 8000f46:	63fb      	str	r3, [r7, #60]	; 0x3c
								while(lr.dataRCV_hld[i] != ';')
 8000f48:	e011      	b.n	8000f6e <main+0x8da>
								{
									num[j]=lr.dataRCV_hld[i];
 8000f4a:	4a58      	ldr	r2, [pc, #352]	; (80010ac <main+0xa18>)
 8000f4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000f4e:	4413      	add	r3, r2
 8000f50:	f203 3356 	addw	r3, r3, #854	; 0x356
 8000f54:	7819      	ldrb	r1, [r3, #0]
 8000f56:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8000f5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f5c:	4413      	add	r3, r2
 8000f5e:	460a      	mov	r2, r1
 8000f60:	701a      	strb	r2, [r3, #0]
									j++;
 8000f62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f64:	3301      	adds	r3, #1
 8000f66:	63fb      	str	r3, [r7, #60]	; 0x3c
									i++;
 8000f68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000f6a:	3301      	adds	r3, #1
 8000f6c:	647b      	str	r3, [r7, #68]	; 0x44
								while(lr.dataRCV_hld[i] != ';')
 8000f6e:	4a4f      	ldr	r2, [pc, #316]	; (80010ac <main+0xa18>)
 8000f70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000f72:	4413      	add	r3, r2
 8000f74:	f203 3356 	addw	r3, r3, #854	; 0x356
 8000f78:	781b      	ldrb	r3, [r3, #0]
 8000f7a:	2b3b      	cmp	r3, #59	; 0x3b
 8000f7c:	d1e5      	bne.n	8000f4a <main+0x8b6>
								}
							num[j]='\0';
 8000f7e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8000f82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f84:	4413      	add	r3, r2
 8000f86:	2200      	movs	r2, #0
 8000f88:	701a      	strb	r2, [r3, #0]
							ModBUS_F03_Assign(&mb_eth,n,atoi(num,10));
 8000f8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000f8c:	b2dc      	uxtb	r4, r3
 8000f8e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f92:	210a      	movs	r1, #10
 8000f94:	4618      	mov	r0, r3
 8000f96:	f00e f9a2 	bl	800f2de <atoi>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	b29b      	uxth	r3, r3
 8000f9e:	461a      	mov	r2, r3
 8000fa0:	4621      	mov	r1, r4
 8000fa2:	4846      	ldr	r0, [pc, #280]	; (80010bc <main+0xa28>)
 8000fa4:	f00b ff0b 	bl	800cdbe <ModBUS_F03_Assign>
							n++;//Incremento posición  a almacenar
 8000fa8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000faa:	3301      	adds	r3, #1
 8000fac:	643b      	str	r3, [r7, #64]	; 0x40
	  					while(i < lnn-1)
 8000fae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000fb0:	3b01      	subs	r3, #1
 8000fb2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000fb4:	429a      	cmp	r2, r3
 8000fb6:	dbbf      	blt.n	8000f38 <main+0x8a4>
	  					}
	  				}
	  				}

	  			if(lr.tmr_dly_ON==1)
 8000fb8:	4b3c      	ldr	r3, [pc, #240]	; (80010ac <main+0xa18>)
 8000fba:	f893 37ee 	ldrb.w	r3, [r3, #2030]	; 0x7ee
 8000fbe:	2b01      	cmp	r3, #1
 8000fc0:	d147      	bne.n	8001052 <main+0x9be>
	  				{
	  					lr.tmr_dly_ON=0;
 8000fc2:	4b3a      	ldr	r3, [pc, #232]	; (80010ac <main+0xa18>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	f883 27ee 	strb.w	r2, [r3, #2030]	; 0x7ee
	  					LoRa_reset_sndTIMER(&lr,3000);
 8000fca:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8000fce:	4837      	ldr	r0, [pc, #220]	; (80010ac <main+0xa18>)
 8000fd0:	f00b f97e 	bl	800c2d0 <LoRa_reset_sndTIMER>
						lr.dest_address[0]='\0';
 8000fd4:	4b35      	ldr	r3, [pc, #212]	; (80010ac <main+0xa18>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	759a      	strb	r2, [r3, #22]
						lr.txbuff[0]='\0';
 8000fda:	4b34      	ldr	r3, [pc, #208]	; (80010ac <main+0xa18>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	f883 24dc 	strb.w	r2, [r3, #1244]	; 0x4dc
			  			strncat(lr.dest_address,"1",1);
 8000fe2:	4837      	ldr	r0, [pc, #220]	; (80010c0 <main+0xa2c>)
 8000fe4:	f7ff f906 	bl	80001f4 <strlen>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	461a      	mov	r2, r3
 8000fec:	4b34      	ldr	r3, [pc, #208]	; (80010c0 <main+0xa2c>)
 8000fee:	4413      	add	r3, r2
 8000ff0:	4934      	ldr	r1, [pc, #208]	; (80010c4 <main+0xa30>)
 8000ff2:	461a      	mov	r2, r3
 8000ff4:	460b      	mov	r3, r1
 8000ff6:	881b      	ldrh	r3, [r3, #0]
 8000ff8:	8013      	strh	r3, [r2, #0]
			  			strncat(lr.txbuff,"prueba de envio de mensaje de texto",strlen("prueba de envio de mensaje de texto"));
 8000ffa:	4833      	ldr	r0, [pc, #204]	; (80010c8 <main+0xa34>)
 8000ffc:	f7ff f8fa 	bl	80001f4 <strlen>
 8001000:	4603      	mov	r3, r0
 8001002:	461a      	mov	r2, r3
 8001004:	4b30      	ldr	r3, [pc, #192]	; (80010c8 <main+0xa34>)
 8001006:	4413      	add	r3, r2
 8001008:	4a30      	ldr	r2, [pc, #192]	; (80010cc <main+0xa38>)
 800100a:	4614      	mov	r4, r2
 800100c:	469c      	mov	ip, r3
 800100e:	f104 0e20 	add.w	lr, r4, #32
 8001012:	4665      	mov	r5, ip
 8001014:	4626      	mov	r6, r4
 8001016:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001018:	6028      	str	r0, [r5, #0]
 800101a:	6069      	str	r1, [r5, #4]
 800101c:	60aa      	str	r2, [r5, #8]
 800101e:	60eb      	str	r3, [r5, #12]
 8001020:	3410      	adds	r4, #16
 8001022:	f10c 0c10 	add.w	ip, ip, #16
 8001026:	4574      	cmp	r4, lr
 8001028:	d1f3      	bne.n	8001012 <main+0x97e>
 800102a:	4663      	mov	r3, ip
 800102c:	4622      	mov	r2, r4
 800102e:	6810      	ldr	r0, [r2, #0]
 8001030:	6018      	str	r0, [r3, #0]
			  			lr.txitems=strlen("prueba de envio de mensaje de texto");
 8001032:	4b1e      	ldr	r3, [pc, #120]	; (80010ac <main+0xa18>)
 8001034:	2223      	movs	r2, #35	; 0x23
 8001036:	f8c3 27e0 	str.w	r2, [r3, #2016]	; 0x7e0
		  				lr.estado=_SENT;										//
 800103a:	4b1c      	ldr	r3, [pc, #112]	; (80010ac <main+0xa18>)
 800103c:	2214      	movs	r2, #20
 800103e:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
			  			error=LoRa_Send(&lr,&huart2);
 8001042:	4923      	ldr	r1, [pc, #140]	; (80010d0 <main+0xa3c>)
 8001044:	4819      	ldr	r0, [pc, #100]	; (80010ac <main+0xa18>)
 8001046:	f00b f895 	bl	800c174 <LoRa_Send>
 800104a:	4603      	mov	r3, r0
 800104c:	b2da      	uxtb	r2, r3
 800104e:	4b21      	ldr	r3, [pc, #132]	; (80010d4 <main+0xa40>)
 8001050:	701a      	strb	r2, [r3, #0]
	  				}
	  		}

	  		if (ESP_HW_Init==1) //Si el módulo se inició correctamente
 8001052:	4b21      	ldr	r3, [pc, #132]	; (80010d8 <main+0xa44>)
 8001054:	781b      	ldrb	r3, [r3, #0]
 8001056:	2b01      	cmp	r3, #1
 8001058:	d108      	bne.n	800106c <main+0x9d8>
	  			{
	  				conexion=WiFi_Conn_ND(&wf,&huart1,1);	//Tiene que ir en el main el chequeo es constante
 800105a:	2201      	movs	r2, #1
 800105c:	491f      	ldr	r1, [pc, #124]	; (80010dc <main+0xa48>)
 800105e:	4811      	ldr	r0, [pc, #68]	; (80010a4 <main+0xa10>)
 8001060:	f009 f806 	bl	800a070 <WiFi_Conn_ND>
 8001064:	4603      	mov	r3, r0
 8001066:	b2da      	uxtb	r2, r3
 8001068:	4b1d      	ldr	r3, [pc, #116]	; (80010e0 <main+0xa4c>)
 800106a:	701a      	strb	r2, [r3, #0]
	  				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
	  				ITM0_Write("\r\n ESP WAIT 5s AFT RST\r\n",strlen("\r\n ESP WAIT 5s AFT RST\r\n"));
	  				HAL_Delay(5000);//210419
	  				esp_restart=0;
	  			}*/
	  		if (esp_restart==1) //WRNNG Hardcoded RESET WIFI
 800106c:	4b1d      	ldr	r3, [pc, #116]	; (80010e4 <main+0xa50>)
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	2b01      	cmp	r3, #1
 8001072:	f47f adab 	bne.w	8000bcc <main+0x538>
	  			{

	  				HW_RESET(&wf);
 8001076:	480b      	ldr	r0, [pc, #44]	; (80010a4 <main+0xa10>)
 8001078:	f005 fb7c 	bl	8006774 <HW_RESET>
	  				HAL_Delay(5000);//210419
 800107c:	f241 3088 	movw	r0, #5000	; 0x1388
 8001080:	f001 fe5e 	bl	8002d40 <HAL_Delay>
	  				esp_restart=0;
 8001084:	4b17      	ldr	r3, [pc, #92]	; (80010e4 <main+0xa50>)
 8001086:	2200      	movs	r2, #0
 8001088:	701a      	strb	r2, [r3, #0]
	  				wf._estado=0;
 800108a:	4b06      	ldr	r3, [pc, #24]	; (80010a4 <main+0xa10>)
 800108c:	2200      	movs	r2, #0
 800108e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	  				wf._estado_conexion=100;
 8001092:	4b04      	ldr	r3, [pc, #16]	; (80010a4 <main+0xa10>)
 8001094:	2264      	movs	r2, #100	; 0x64
 8001096:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	  				ConectarWIFI(&wf);
 800109a:	4802      	ldr	r0, [pc, #8]	; (80010a4 <main+0xa10>)
 800109c:	f005 fbbe 	bl	800681c <ConectarWIFI>
	  	  if (ESP_HW_Init==1)
 80010a0:	e594      	b.n	8000bcc <main+0x538>
 80010a2:	bf00      	nop
 80010a4:	20000b58 	.word	0x20000b58
 80010a8:	20003a19 	.word	0x20003a19
 80010ac:	20000350 	.word	0x20000350
 80010b0:	080108f8 	.word	0x080108f8
 80010b4:	20000526 	.word	0x20000526
 80010b8:	200006a6 	.word	0x200006a6
 80010bc:	200018b8 	.word	0x200018b8
 80010c0:	20000366 	.word	0x20000366
 80010c4:	080108fc 	.word	0x080108fc
 80010c8:	2000082c 	.word	0x2000082c
 80010cc:	08010900 	.word	0x08010900
 80010d0:	200002c0 	.word	0x200002c0
 80010d4:	20000b54 	.word	0x20000b54
 80010d8:	20003a13 	.word	0x20003a13
 80010dc:	2000027c 	.word	0x2000027c
 80010e0:	20003a1d 	.word	0x20003a1d
 80010e4:	20003a1c 	.word	0x20003a1c

080010e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b094      	sub	sp, #80	; 0x50
 80010ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010ee:	f107 0320 	add.w	r3, r7, #32
 80010f2:	2230      	movs	r2, #48	; 0x30
 80010f4:	2100      	movs	r1, #0
 80010f6:	4618      	mov	r0, r3
 80010f8:	f00e faf1 	bl	800f6de <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010fc:	f107 030c 	add.w	r3, r7, #12
 8001100:	2200      	movs	r2, #0
 8001102:	601a      	str	r2, [r3, #0]
 8001104:	605a      	str	r2, [r3, #4]
 8001106:	609a      	str	r2, [r3, #8]
 8001108:	60da      	str	r2, [r3, #12]
 800110a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800110c:	2300      	movs	r3, #0
 800110e:	60bb      	str	r3, [r7, #8]
 8001110:	4b27      	ldr	r3, [pc, #156]	; (80011b0 <SystemClock_Config+0xc8>)
 8001112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001114:	4a26      	ldr	r2, [pc, #152]	; (80011b0 <SystemClock_Config+0xc8>)
 8001116:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800111a:	6413      	str	r3, [r2, #64]	; 0x40
 800111c:	4b24      	ldr	r3, [pc, #144]	; (80011b0 <SystemClock_Config+0xc8>)
 800111e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001120:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001124:	60bb      	str	r3, [r7, #8]
 8001126:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001128:	2300      	movs	r3, #0
 800112a:	607b      	str	r3, [r7, #4]
 800112c:	4b21      	ldr	r3, [pc, #132]	; (80011b4 <SystemClock_Config+0xcc>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4a20      	ldr	r2, [pc, #128]	; (80011b4 <SystemClock_Config+0xcc>)
 8001132:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001136:	6013      	str	r3, [r2, #0]
 8001138:	4b1e      	ldr	r3, [pc, #120]	; (80011b4 <SystemClock_Config+0xcc>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001140:	607b      	str	r3, [r7, #4]
 8001142:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001144:	2301      	movs	r3, #1
 8001146:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001148:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800114c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800114e:	2302      	movs	r3, #2
 8001150:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001152:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001156:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8001158:	230c      	movs	r3, #12
 800115a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 800115c:	2360      	movs	r3, #96	; 0x60
 800115e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001160:	2302      	movs	r3, #2
 8001162:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001164:	2304      	movs	r3, #4
 8001166:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001168:	f107 0320 	add.w	r3, r7, #32
 800116c:	4618      	mov	r0, r3
 800116e:	f002 fa7d 	bl	800366c <HAL_RCC_OscConfig>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d001      	beq.n	800117c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001178:	f001 fa5c 	bl	8002634 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800117c:	230f      	movs	r3, #15
 800117e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001180:	2302      	movs	r3, #2
 8001182:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001184:	2300      	movs	r3, #0
 8001186:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001188:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800118c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800118e:	2300      	movs	r3, #0
 8001190:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001192:	f107 030c 	add.w	r3, r7, #12
 8001196:	2103      	movs	r1, #3
 8001198:	4618      	mov	r0, r3
 800119a:	f002 fcdf 	bl	8003b5c <HAL_RCC_ClockConfig>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d001      	beq.n	80011a8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80011a4:	f001 fa46 	bl	8002634 <Error_Handler>
  }
}
 80011a8:	bf00      	nop
 80011aa:	3750      	adds	r7, #80	; 0x50
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	40023800 	.word	0x40023800
 80011b4:	40007000 	.word	0x40007000

080011b8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80011bc:	4b17      	ldr	r3, [pc, #92]	; (800121c <MX_SPI1_Init+0x64>)
 80011be:	4a18      	ldr	r2, [pc, #96]	; (8001220 <MX_SPI1_Init+0x68>)
 80011c0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80011c2:	4b16      	ldr	r3, [pc, #88]	; (800121c <MX_SPI1_Init+0x64>)
 80011c4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80011c8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80011ca:	4b14      	ldr	r3, [pc, #80]	; (800121c <MX_SPI1_Init+0x64>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80011d0:	4b12      	ldr	r3, [pc, #72]	; (800121c <MX_SPI1_Init+0x64>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011d6:	4b11      	ldr	r3, [pc, #68]	; (800121c <MX_SPI1_Init+0x64>)
 80011d8:	2200      	movs	r2, #0
 80011da:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011dc:	4b0f      	ldr	r3, [pc, #60]	; (800121c <MX_SPI1_Init+0x64>)
 80011de:	2200      	movs	r2, #0
 80011e0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80011e2:	4b0e      	ldr	r3, [pc, #56]	; (800121c <MX_SPI1_Init+0x64>)
 80011e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011e8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80011ea:	4b0c      	ldr	r3, [pc, #48]	; (800121c <MX_SPI1_Init+0x64>)
 80011ec:	2210      	movs	r2, #16
 80011ee:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011f0:	4b0a      	ldr	r3, [pc, #40]	; (800121c <MX_SPI1_Init+0x64>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80011f6:	4b09      	ldr	r3, [pc, #36]	; (800121c <MX_SPI1_Init+0x64>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011fc:	4b07      	ldr	r3, [pc, #28]	; (800121c <MX_SPI1_Init+0x64>)
 80011fe:	2200      	movs	r2, #0
 8001200:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001202:	4b06      	ldr	r3, [pc, #24]	; (800121c <MX_SPI1_Init+0x64>)
 8001204:	220a      	movs	r2, #10
 8001206:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001208:	4804      	ldr	r0, [pc, #16]	; (800121c <MX_SPI1_Init+0x64>)
 800120a:	f002 fe87 	bl	8003f1c <HAL_SPI_Init>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d001      	beq.n	8001218 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001214:	f001 fa0e 	bl	8002634 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001218:	bf00      	nop
 800121a:	bd80      	pop	{r7, pc}
 800121c:	20000194 	.word	0x20000194
 8001220:	40013000 	.word	0x40013000

08001224 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b08e      	sub	sp, #56	; 0x38
 8001228:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800122a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800122e:	2200      	movs	r2, #0
 8001230:	601a      	str	r2, [r3, #0]
 8001232:	605a      	str	r2, [r3, #4]
 8001234:	609a      	str	r2, [r3, #8]
 8001236:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001238:	f107 0320 	add.w	r3, r7, #32
 800123c:	2200      	movs	r2, #0
 800123e:	601a      	str	r2, [r3, #0]
 8001240:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001242:	1d3b      	adds	r3, r7, #4
 8001244:	2200      	movs	r2, #0
 8001246:	601a      	str	r2, [r3, #0]
 8001248:	605a      	str	r2, [r3, #4]
 800124a:	609a      	str	r2, [r3, #8]
 800124c:	60da      	str	r2, [r3, #12]
 800124e:	611a      	str	r2, [r3, #16]
 8001250:	615a      	str	r2, [r3, #20]
 8001252:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001254:	4b2f      	ldr	r3, [pc, #188]	; (8001314 <MX_TIM2_Init+0xf0>)
 8001256:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800125a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100;
 800125c:	4b2d      	ldr	r3, [pc, #180]	; (8001314 <MX_TIM2_Init+0xf0>)
 800125e:	2264      	movs	r2, #100	; 0x64
 8001260:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001262:	4b2c      	ldr	r3, [pc, #176]	; (8001314 <MX_TIM2_Init+0xf0>)
 8001264:	2200      	movs	r2, #0
 8001266:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 8001268:	4b2a      	ldr	r3, [pc, #168]	; (8001314 <MX_TIM2_Init+0xf0>)
 800126a:	2264      	movs	r2, #100	; 0x64
 800126c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800126e:	4b29      	ldr	r3, [pc, #164]	; (8001314 <MX_TIM2_Init+0xf0>)
 8001270:	2200      	movs	r2, #0
 8001272:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001274:	4b27      	ldr	r3, [pc, #156]	; (8001314 <MX_TIM2_Init+0xf0>)
 8001276:	2280      	movs	r2, #128	; 0x80
 8001278:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800127a:	4826      	ldr	r0, [pc, #152]	; (8001314 <MX_TIM2_Init+0xf0>)
 800127c:	f003 f944 	bl	8004508 <HAL_TIM_Base_Init>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8001286:	f001 f9d5 	bl	8002634 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800128a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800128e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001290:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001294:	4619      	mov	r1, r3
 8001296:	481f      	ldr	r0, [pc, #124]	; (8001314 <MX_TIM2_Init+0xf0>)
 8001298:	f003 fd4c 	bl	8004d34 <HAL_TIM_ConfigClockSource>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 80012a2:	f001 f9c7 	bl	8002634 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 80012a6:	481b      	ldr	r0, [pc, #108]	; (8001314 <MX_TIM2_Init+0xf0>)
 80012a8:	f003 f97d 	bl	80045a6 <HAL_TIM_OC_Init>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d001      	beq.n	80012b6 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 80012b2:	f001 f9bf 	bl	8002634 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim2, TIM_OPMODE_SINGLE) != HAL_OK)
 80012b6:	2108      	movs	r1, #8
 80012b8:	4816      	ldr	r0, [pc, #88]	; (8001314 <MX_TIM2_Init+0xf0>)
 80012ba:	f003 fb7d 	bl	80049b8 <HAL_TIM_OnePulse_Init>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <MX_TIM2_Init+0xa4>
  {
    Error_Handler();
 80012c4:	f001 f9b6 	bl	8002634 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012c8:	2300      	movs	r3, #0
 80012ca:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012cc:	2300      	movs	r3, #0
 80012ce:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012d0:	f107 0320 	add.w	r3, r7, #32
 80012d4:	4619      	mov	r1, r3
 80012d6:	480f      	ldr	r0, [pc, #60]	; (8001314 <MX_TIM2_Init+0xf0>)
 80012d8:	f004 f8e8 	bl	80054ac <HAL_TIMEx_MasterConfigSynchronization>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <MX_TIM2_Init+0xc2>
  {
    Error_Handler();
 80012e2:	f001 f9a7 	bl	8002634 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_INACTIVE;
 80012e6:	2320      	movs	r3, #32
 80012e8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80012ea:	2300      	movs	r3, #0
 80012ec:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012ee:	2300      	movs	r3, #0
 80012f0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012f2:	2300      	movs	r3, #0
 80012f4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012f6:	1d3b      	adds	r3, r7, #4
 80012f8:	2200      	movs	r2, #0
 80012fa:	4619      	mov	r1, r3
 80012fc:	4805      	ldr	r0, [pc, #20]	; (8001314 <MX_TIM2_Init+0xf0>)
 80012fe:	f003 fcbd 	bl	8004c7c <HAL_TIM_OC_ConfigChannel>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d001      	beq.n	800130c <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 8001308:	f001 f994 	bl	8002634 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800130c:	bf00      	nop
 800130e:	3738      	adds	r7, #56	; 0x38
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}
 8001314:	200001ec 	.word	0x200001ec

08001318 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b08e      	sub	sp, #56	; 0x38
 800131c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800131e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001322:	2200      	movs	r2, #0
 8001324:	601a      	str	r2, [r3, #0]
 8001326:	605a      	str	r2, [r3, #4]
 8001328:	609a      	str	r2, [r3, #8]
 800132a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800132c:	f107 0320 	add.w	r3, r7, #32
 8001330:	2200      	movs	r2, #0
 8001332:	601a      	str	r2, [r3, #0]
 8001334:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001336:	1d3b      	adds	r3, r7, #4
 8001338:	2200      	movs	r2, #0
 800133a:	601a      	str	r2, [r3, #0]
 800133c:	605a      	str	r2, [r3, #4]
 800133e:	609a      	str	r2, [r3, #8]
 8001340:	60da      	str	r2, [r3, #12]
 8001342:	611a      	str	r2, [r3, #16]
 8001344:	615a      	str	r2, [r3, #20]
 8001346:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001348:	4b2f      	ldr	r3, [pc, #188]	; (8001408 <MX_TIM3_Init+0xf0>)
 800134a:	4a30      	ldr	r2, [pc, #192]	; (800140c <MX_TIM3_Init+0xf4>)
 800134c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 100;
 800134e:	4b2e      	ldr	r3, [pc, #184]	; (8001408 <MX_TIM3_Init+0xf0>)
 8001350:	2264      	movs	r2, #100	; 0x64
 8001352:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001354:	4b2c      	ldr	r3, [pc, #176]	; (8001408 <MX_TIM3_Init+0xf0>)
 8001356:	2200      	movs	r2, #0
 8001358:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 150;
 800135a:	4b2b      	ldr	r3, [pc, #172]	; (8001408 <MX_TIM3_Init+0xf0>)
 800135c:	2296      	movs	r2, #150	; 0x96
 800135e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001360:	4b29      	ldr	r3, [pc, #164]	; (8001408 <MX_TIM3_Init+0xf0>)
 8001362:	2200      	movs	r2, #0
 8001364:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001366:	4b28      	ldr	r3, [pc, #160]	; (8001408 <MX_TIM3_Init+0xf0>)
 8001368:	2280      	movs	r2, #128	; 0x80
 800136a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800136c:	4826      	ldr	r0, [pc, #152]	; (8001408 <MX_TIM3_Init+0xf0>)
 800136e:	f003 f8cb 	bl	8004508 <HAL_TIM_Base_Init>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d001      	beq.n	800137c <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8001378:	f001 f95c 	bl	8002634 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800137c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001380:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001382:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001386:	4619      	mov	r1, r3
 8001388:	481f      	ldr	r0, [pc, #124]	; (8001408 <MX_TIM3_Init+0xf0>)
 800138a:	f003 fcd3 	bl	8004d34 <HAL_TIM_ConfigClockSource>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d001      	beq.n	8001398 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8001394:	f001 f94e 	bl	8002634 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8001398:	481b      	ldr	r0, [pc, #108]	; (8001408 <MX_TIM3_Init+0xf0>)
 800139a:	f003 f904 	bl	80045a6 <HAL_TIM_OC_Init>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 80013a4:	f001 f946 	bl	8002634 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim3, TIM_OPMODE_SINGLE) != HAL_OK)
 80013a8:	2108      	movs	r1, #8
 80013aa:	4817      	ldr	r0, [pc, #92]	; (8001408 <MX_TIM3_Init+0xf0>)
 80013ac:	f003 fb04 	bl	80049b8 <HAL_TIM_OnePulse_Init>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <MX_TIM3_Init+0xa2>
  {
    Error_Handler();
 80013b6:	f001 f93d 	bl	8002634 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013ba:	2300      	movs	r3, #0
 80013bc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013be:	2300      	movs	r3, #0
 80013c0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80013c2:	f107 0320 	add.w	r3, r7, #32
 80013c6:	4619      	mov	r1, r3
 80013c8:	480f      	ldr	r0, [pc, #60]	; (8001408 <MX_TIM3_Init+0xf0>)
 80013ca:	f004 f86f 	bl	80054ac <HAL_TIMEx_MasterConfigSynchronization>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d001      	beq.n	80013d8 <MX_TIM3_Init+0xc0>
  {
    Error_Handler();
 80013d4:	f001 f92e 	bl	8002634 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_INACTIVE;
 80013d8:	2320      	movs	r3, #32
 80013da:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80013dc:	2300      	movs	r3, #0
 80013de:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013e0:	2300      	movs	r3, #0
 80013e2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013e4:	2300      	movs	r3, #0
 80013e6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013e8:	1d3b      	adds	r3, r7, #4
 80013ea:	2200      	movs	r2, #0
 80013ec:	4619      	mov	r1, r3
 80013ee:	4806      	ldr	r0, [pc, #24]	; (8001408 <MX_TIM3_Init+0xf0>)
 80013f0:	f003 fc44 	bl	8004c7c <HAL_TIM_OC_ConfigChannel>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d001      	beq.n	80013fe <MX_TIM3_Init+0xe6>
  {
    Error_Handler();
 80013fa:	f001 f91b 	bl	8002634 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80013fe:	bf00      	nop
 8001400:	3738      	adds	r7, #56	; 0x38
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	20000234 	.word	0x20000234
 800140c:	40000400 	.word	0x40000400

08001410 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001414:	4b11      	ldr	r3, [pc, #68]	; (800145c <MX_USART1_UART_Init+0x4c>)
 8001416:	4a12      	ldr	r2, [pc, #72]	; (8001460 <MX_USART1_UART_Init+0x50>)
 8001418:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800141a:	4b10      	ldr	r3, [pc, #64]	; (800145c <MX_USART1_UART_Init+0x4c>)
 800141c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001420:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001422:	4b0e      	ldr	r3, [pc, #56]	; (800145c <MX_USART1_UART_Init+0x4c>)
 8001424:	2200      	movs	r2, #0
 8001426:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001428:	4b0c      	ldr	r3, [pc, #48]	; (800145c <MX_USART1_UART_Init+0x4c>)
 800142a:	2200      	movs	r2, #0
 800142c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800142e:	4b0b      	ldr	r3, [pc, #44]	; (800145c <MX_USART1_UART_Init+0x4c>)
 8001430:	2200      	movs	r2, #0
 8001432:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001434:	4b09      	ldr	r3, [pc, #36]	; (800145c <MX_USART1_UART_Init+0x4c>)
 8001436:	220c      	movs	r2, #12
 8001438:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800143a:	4b08      	ldr	r3, [pc, #32]	; (800145c <MX_USART1_UART_Init+0x4c>)
 800143c:	2200      	movs	r2, #0
 800143e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001440:	4b06      	ldr	r3, [pc, #24]	; (800145c <MX_USART1_UART_Init+0x4c>)
 8001442:	2200      	movs	r2, #0
 8001444:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001446:	4805      	ldr	r0, [pc, #20]	; (800145c <MX_USART1_UART_Init+0x4c>)
 8001448:	f004 f8b2 	bl	80055b0 <HAL_UART_Init>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001452:	f001 f8ef 	bl	8002634 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001456:	bf00      	nop
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	2000027c 	.word	0x2000027c
 8001460:	40011000 	.word	0x40011000

08001464 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001468:	4b11      	ldr	r3, [pc, #68]	; (80014b0 <MX_USART2_UART_Init+0x4c>)
 800146a:	4a12      	ldr	r2, [pc, #72]	; (80014b4 <MX_USART2_UART_Init+0x50>)
 800146c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800146e:	4b10      	ldr	r3, [pc, #64]	; (80014b0 <MX_USART2_UART_Init+0x4c>)
 8001470:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001474:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001476:	4b0e      	ldr	r3, [pc, #56]	; (80014b0 <MX_USART2_UART_Init+0x4c>)
 8001478:	2200      	movs	r2, #0
 800147a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800147c:	4b0c      	ldr	r3, [pc, #48]	; (80014b0 <MX_USART2_UART_Init+0x4c>)
 800147e:	2200      	movs	r2, #0
 8001480:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001482:	4b0b      	ldr	r3, [pc, #44]	; (80014b0 <MX_USART2_UART_Init+0x4c>)
 8001484:	2200      	movs	r2, #0
 8001486:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001488:	4b09      	ldr	r3, [pc, #36]	; (80014b0 <MX_USART2_UART_Init+0x4c>)
 800148a:	220c      	movs	r2, #12
 800148c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800148e:	4b08      	ldr	r3, [pc, #32]	; (80014b0 <MX_USART2_UART_Init+0x4c>)
 8001490:	2200      	movs	r2, #0
 8001492:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001494:	4b06      	ldr	r3, [pc, #24]	; (80014b0 <MX_USART2_UART_Init+0x4c>)
 8001496:	2200      	movs	r2, #0
 8001498:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800149a:	4805      	ldr	r0, [pc, #20]	; (80014b0 <MX_USART2_UART_Init+0x4c>)
 800149c:	f004 f888 	bl	80055b0 <HAL_UART_Init>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d001      	beq.n	80014aa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80014a6:	f001 f8c5 	bl	8002634 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80014aa:	bf00      	nop
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	200002c0 	.word	0x200002c0
 80014b4:	40004400 	.word	0x40004400

080014b8 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80014bc:	4b11      	ldr	r3, [pc, #68]	; (8001504 <MX_USART6_UART_Init+0x4c>)
 80014be:	4a12      	ldr	r2, [pc, #72]	; (8001508 <MX_USART6_UART_Init+0x50>)
 80014c0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80014c2:	4b10      	ldr	r3, [pc, #64]	; (8001504 <MX_USART6_UART_Init+0x4c>)
 80014c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014c8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80014ca:	4b0e      	ldr	r3, [pc, #56]	; (8001504 <MX_USART6_UART_Init+0x4c>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80014d0:	4b0c      	ldr	r3, [pc, #48]	; (8001504 <MX_USART6_UART_Init+0x4c>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80014d6:	4b0b      	ldr	r3, [pc, #44]	; (8001504 <MX_USART6_UART_Init+0x4c>)
 80014d8:	2200      	movs	r2, #0
 80014da:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80014dc:	4b09      	ldr	r3, [pc, #36]	; (8001504 <MX_USART6_UART_Init+0x4c>)
 80014de:	220c      	movs	r2, #12
 80014e0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014e2:	4b08      	ldr	r3, [pc, #32]	; (8001504 <MX_USART6_UART_Init+0x4c>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80014e8:	4b06      	ldr	r3, [pc, #24]	; (8001504 <MX_USART6_UART_Init+0x4c>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80014ee:	4805      	ldr	r0, [pc, #20]	; (8001504 <MX_USART6_UART_Init+0x4c>)
 80014f0:	f004 f85e 	bl	80055b0 <HAL_UART_Init>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80014fa:	f001 f89b 	bl	8002634 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80014fe:	bf00      	nop
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	20000304 	.word	0x20000304
 8001508:	40011400 	.word	0x40011400

0800150c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b08a      	sub	sp, #40	; 0x28
 8001510:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001512:	f107 0314 	add.w	r3, r7, #20
 8001516:	2200      	movs	r2, #0
 8001518:	601a      	str	r2, [r3, #0]
 800151a:	605a      	str	r2, [r3, #4]
 800151c:	609a      	str	r2, [r3, #8]
 800151e:	60da      	str	r2, [r3, #12]
 8001520:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001522:	2300      	movs	r3, #0
 8001524:	613b      	str	r3, [r7, #16]
 8001526:	4b3f      	ldr	r3, [pc, #252]	; (8001624 <MX_GPIO_Init+0x118>)
 8001528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152a:	4a3e      	ldr	r2, [pc, #248]	; (8001624 <MX_GPIO_Init+0x118>)
 800152c:	f043 0304 	orr.w	r3, r3, #4
 8001530:	6313      	str	r3, [r2, #48]	; 0x30
 8001532:	4b3c      	ldr	r3, [pc, #240]	; (8001624 <MX_GPIO_Init+0x118>)
 8001534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001536:	f003 0304 	and.w	r3, r3, #4
 800153a:	613b      	str	r3, [r7, #16]
 800153c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800153e:	2300      	movs	r3, #0
 8001540:	60fb      	str	r3, [r7, #12]
 8001542:	4b38      	ldr	r3, [pc, #224]	; (8001624 <MX_GPIO_Init+0x118>)
 8001544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001546:	4a37      	ldr	r2, [pc, #220]	; (8001624 <MX_GPIO_Init+0x118>)
 8001548:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800154c:	6313      	str	r3, [r2, #48]	; 0x30
 800154e:	4b35      	ldr	r3, [pc, #212]	; (8001624 <MX_GPIO_Init+0x118>)
 8001550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001552:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001556:	60fb      	str	r3, [r7, #12]
 8001558:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800155a:	2300      	movs	r3, #0
 800155c:	60bb      	str	r3, [r7, #8]
 800155e:	4b31      	ldr	r3, [pc, #196]	; (8001624 <MX_GPIO_Init+0x118>)
 8001560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001562:	4a30      	ldr	r2, [pc, #192]	; (8001624 <MX_GPIO_Init+0x118>)
 8001564:	f043 0301 	orr.w	r3, r3, #1
 8001568:	6313      	str	r3, [r2, #48]	; 0x30
 800156a:	4b2e      	ldr	r3, [pc, #184]	; (8001624 <MX_GPIO_Init+0x118>)
 800156c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156e:	f003 0301 	and.w	r3, r3, #1
 8001572:	60bb      	str	r3, [r7, #8]
 8001574:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001576:	2300      	movs	r3, #0
 8001578:	607b      	str	r3, [r7, #4]
 800157a:	4b2a      	ldr	r3, [pc, #168]	; (8001624 <MX_GPIO_Init+0x118>)
 800157c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157e:	4a29      	ldr	r2, [pc, #164]	; (8001624 <MX_GPIO_Init+0x118>)
 8001580:	f043 0302 	orr.w	r3, r3, #2
 8001584:	6313      	str	r3, [r2, #48]	; 0x30
 8001586:	4b27      	ldr	r3, [pc, #156]	; (8001624 <MX_GPIO_Init+0x118>)
 8001588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158a:	f003 0302 	and.w	r3, r3, #2
 800158e:	607b      	str	r3, [r7, #4]
 8001590:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PCB_LED_GPIO_Port, PCB_LED_Pin, GPIO_PIN_RESET);
 8001592:	2200      	movs	r2, #0
 8001594:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001598:	4823      	ldr	r0, [pc, #140]	; (8001628 <MX_GPIO_Init+0x11c>)
 800159a:	f002 f833 	bl	8003604 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI1_NSS_Pin|WIFI_EN_Pin, GPIO_PIN_SET);
 800159e:	2201      	movs	r2, #1
 80015a0:	f44f 7188 	mov.w	r1, #272	; 0x110
 80015a4:	4821      	ldr	r0, [pc, #132]	; (800162c <MX_GPIO_Init+0x120>)
 80015a6:	f002 f82d 	bl	8003604 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PCB_LED_Pin */
  GPIO_InitStruct.Pin = PCB_LED_Pin;
 80015aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015b0:	2301      	movs	r3, #1
 80015b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b4:	2300      	movs	r3, #0
 80015b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b8:	2300      	movs	r3, #0
 80015ba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PCB_LED_GPIO_Port, &GPIO_InitStruct);
 80015bc:	f107 0314 	add.w	r3, r7, #20
 80015c0:	4619      	mov	r1, r3
 80015c2:	4819      	ldr	r0, [pc, #100]	; (8001628 <MX_GPIO_Init+0x11c>)
 80015c4:	f001 fdb6 	bl	8003134 <HAL_GPIO_Init>

  /*Configure GPIO pin : KEY_BTN_Pin */
  GPIO_InitStruct.Pin = KEY_BTN_Pin;
 80015c8:	2301      	movs	r3, #1
 80015ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015cc:	2300      	movs	r3, #0
 80015ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d0:	2300      	movs	r3, #0
 80015d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(KEY_BTN_GPIO_Port, &GPIO_InitStruct);
 80015d4:	f107 0314 	add.w	r3, r7, #20
 80015d8:	4619      	mov	r1, r3
 80015da:	4814      	ldr	r0, [pc, #80]	; (800162c <MX_GPIO_Init+0x120>)
 80015dc:	f001 fdaa 	bl	8003134 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_NSS_Pin */
  GPIO_InitStruct.Pin = SPI1_NSS_Pin;
 80015e0:	2310      	movs	r3, #16
 80015e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015e4:	2301      	movs	r3, #1
 80015e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e8:	2300      	movs	r3, #0
 80015ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ec:	2303      	movs	r3, #3
 80015ee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_NSS_GPIO_Port, &GPIO_InitStruct);
 80015f0:	f107 0314 	add.w	r3, r7, #20
 80015f4:	4619      	mov	r1, r3
 80015f6:	480d      	ldr	r0, [pc, #52]	; (800162c <MX_GPIO_Init+0x120>)
 80015f8:	f001 fd9c 	bl	8003134 <HAL_GPIO_Init>

  /*Configure GPIO pin : WIFI_EN_Pin */
  GPIO_InitStruct.Pin = WIFI_EN_Pin;
 80015fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001600:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001602:	2301      	movs	r3, #1
 8001604:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001606:	2300      	movs	r3, #0
 8001608:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800160a:	2300      	movs	r3, #0
 800160c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(WIFI_EN_GPIO_Port, &GPIO_InitStruct);
 800160e:	f107 0314 	add.w	r3, r7, #20
 8001612:	4619      	mov	r1, r3
 8001614:	4805      	ldr	r0, [pc, #20]	; (800162c <MX_GPIO_Init+0x120>)
 8001616:	f001 fd8d 	bl	8003134 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800161a:	bf00      	nop
 800161c:	3728      	adds	r7, #40	; 0x28
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	40023800 	.word	0x40023800
 8001628:	40020800 	.word	0x40020800
 800162c:	40020000 	.word	0x40020000

08001630 <ITM0_Write>:

/* USER CODE BEGIN 4 */


int ITM0_Write( char *ptr, int len)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b084      	sub	sp, #16
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
 8001638:	6039      	str	r1, [r7, #0]
 int DataIdx;

  for(DataIdx=0; DataIdx<len; DataIdx++)
 800163a:	2300      	movs	r3, #0
 800163c:	60fb      	str	r3, [r7, #12]
 800163e:	e009      	b.n	8001654 <ITM0_Write+0x24>
  {
    ITM_SendChar(*ptr++);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	1c5a      	adds	r2, r3, #1
 8001644:	607a      	str	r2, [r7, #4]
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	4618      	mov	r0, r3
 800164a:	f7fe fffb 	bl	8000644 <ITM_SendChar>
  for(DataIdx=0; DataIdx<len; DataIdx++)
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	3301      	adds	r3, #1
 8001652:	60fb      	str	r3, [r7, #12]
 8001654:	68fa      	ldr	r2, [r7, #12]
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	429a      	cmp	r2, r3
 800165a:	dbf1      	blt.n	8001640 <ITM0_Write+0x10>
  }
  return len;
 800165c:	683b      	ldr	r3, [r7, #0]
}
 800165e:	4618      	mov	r0, r3
 8001660:	3710      	adds	r7, #16
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
	...

08001668 <SysTick_Handler>:

void SysTick_Handler(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN SysTick_IRQn 0 */

	ms_ticks++;	//100 ms
 800166e:	4b1c      	ldr	r3, [pc, #112]	; (80016e0 <SysTick_Handler+0x78>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	3301      	adds	r3, #1
 8001674:	4a1a      	ldr	r2, [pc, #104]	; (80016e0 <SysTick_Handler+0x78>)
 8001676:	6013      	str	r3, [r2, #0]

	ESP_ticks++;
 8001678:	4b1a      	ldr	r3, [pc, #104]	; (80016e4 <SysTick_Handler+0x7c>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	3301      	adds	r3, #1
 800167e:	4a19      	ldr	r2, [pc, #100]	; (80016e4 <SysTick_Handler+0x7c>)
 8001680:	6013      	str	r3, [r2, #0]
	if(mb_eth._w_answer) MB_TOUT_ticks++;
 8001682:	4b19      	ldr	r3, [pc, #100]	; (80016e8 <SysTick_Handler+0x80>)
 8001684:	7a1b      	ldrb	r3, [r3, #8]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d004      	beq.n	8001694 <SysTick_Handler+0x2c>
 800168a:	4b18      	ldr	r3, [pc, #96]	; (80016ec <SysTick_Handler+0x84>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	3301      	adds	r3, #1
 8001690:	4a16      	ldr	r2, [pc, #88]	; (80016ec <SysTick_Handler+0x84>)
 8001692:	6013      	str	r3, [r2, #0]
	if ( mb_eth._w_answer && (mb_eth._timeout < MB_TOUT_ticks))
 8001694:	4b14      	ldr	r3, [pc, #80]	; (80016e8 <SysTick_Handler+0x80>)
 8001696:	7a1b      	ldrb	r3, [r3, #8]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d00c      	beq.n	80016b6 <SysTick_Handler+0x4e>
 800169c:	4b12      	ldr	r3, [pc, #72]	; (80016e8 <SysTick_Handler+0x80>)
 800169e:	88db      	ldrh	r3, [r3, #6]
 80016a0:	461a      	mov	r2, r3
 80016a2:	4b12      	ldr	r3, [pc, #72]	; (80016ec <SysTick_Handler+0x84>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	429a      	cmp	r2, r3
 80016a8:	da05      	bge.n	80016b6 <SysTick_Handler+0x4e>
		{
			mb_eth._w_answer=0;
 80016aa:	4b0f      	ldr	r3, [pc, #60]	; (80016e8 <SysTick_Handler+0x80>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	721a      	strb	r2, [r3, #8]
			MB_TOUT_ticks=0;
 80016b0:	4b0e      	ldr	r3, [pc, #56]	; (80016ec <SysTick_Handler+0x84>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	601a      	str	r2, [r3, #0]
		}

	if ((wf._estado == wf._estado_old)&&(lr._data_available)) { wf._wtchdog++;}  //Si hay datos y no hay comm suma
 80016b6:	4b0e      	ldr	r3, [pc, #56]	; (80016f0 <SysTick_Handler+0x88>)
 80016b8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80016bc:	4b0c      	ldr	r3, [pc, #48]	; (80016f0 <SysTick_Handler+0x88>)
 80016be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016c2:	429a      	cmp	r2, r3
 80016c4:	d118      	bne.n	80016f8 <SysTick_Handler+0x90>
 80016c6:	4b0b      	ldr	r3, [pc, #44]	; (80016f4 <SysTick_Handler+0x8c>)
 80016c8:	f893 3800 	ldrb.w	r3, [r3, #2048]	; 0x800
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d013      	beq.n	80016f8 <SysTick_Handler+0x90>
 80016d0:	4b07      	ldr	r3, [pc, #28]	; (80016f0 <SysTick_Handler+0x88>)
 80016d2:	f8d3 3cc0 	ldr.w	r3, [r3, #3264]	; 0xcc0
 80016d6:	3301      	adds	r3, #1
 80016d8:	4a05      	ldr	r2, [pc, #20]	; (80016f0 <SysTick_Handler+0x88>)
 80016da:	f8c2 3cc0 	str.w	r3, [r2, #3264]	; 0xcc0
 80016de:	e015      	b.n	800170c <SysTick_Handler+0xa4>
 80016e0:	20000348 	.word	0x20000348
 80016e4:	2000403c 	.word	0x2000403c
 80016e8:	200018b8 	.word	0x200018b8
 80016ec:	20004044 	.word	0x20004044
 80016f0:	20000b58 	.word	0x20000b58
 80016f4:	20000350 	.word	0x20000350
		else {
				wf._estado_old = wf._estado;
 80016f8:	4b63      	ldr	r3, [pc, #396]	; (8001888 <SysTick_Handler+0x220>)
 80016fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016fe:	4a62      	ldr	r2, [pc, #392]	; (8001888 <SysTick_Handler+0x220>)
 8001700:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
				wf._wtchdog=0;
 8001704:	4b60      	ldr	r3, [pc, #384]	; (8001888 <SysTick_Handler+0x220>)
 8001706:	2200      	movs	r2, #0
 8001708:	f8c3 2cc0 	str.w	r2, [r3, #3264]	; 0xcc0
			 }

	if(wf._wtchdog>=30000)
 800170c:	4b5e      	ldr	r3, [pc, #376]	; (8001888 <SysTick_Handler+0x220>)
 800170e:	f8d3 3cc0 	ldr.w	r3, [r3, #3264]	; 0xcc0
 8001712:	f247 522f 	movw	r2, #29999	; 0x752f
 8001716:	4293      	cmp	r3, r2
 8001718:	dd0a      	ble.n	8001730 <SysTick_Handler+0xc8>
	{
		wf._wtchdog=0;
 800171a:	4b5b      	ldr	r3, [pc, #364]	; (8001888 <SysTick_Handler+0x220>)
 800171c:	2200      	movs	r2, #0
 800171e:	f8c3 2cc0 	str.w	r2, [r3, #3264]	; 0xcc0
		wf._rst_rq=1;
 8001722:	4b59      	ldr	r3, [pc, #356]	; (8001888 <SysTick_Handler+0x220>)
 8001724:	2201      	movs	r2, #1
 8001726:	f8c3 2cc4 	str.w	r2, [r3, #3268]	; 0xcc4
		esp_restart=1;
 800172a:	4b58      	ldr	r3, [pc, #352]	; (800188c <SysTick_Handler+0x224>)
 800172c:	2201      	movs	r2, #1
 800172e:	701a      	strb	r2, [r3, #0]
	}

// ENVIO DATOS LoRa ---------------------------------------------------------------//

	if(lr.tmr_dly_en==1)
 8001730:	4b57      	ldr	r3, [pc, #348]	; (8001890 <SysTick_Handler+0x228>)
 8001732:	f893 37ed 	ldrb.w	r3, [r3, #2029]	; 0x7ed
 8001736:	2b01      	cmp	r3, #1
 8001738:	d116      	bne.n	8001768 <SysTick_Handler+0x100>
	{
		lr.tmr_dlyCNT++;
 800173a:	4b55      	ldr	r3, [pc, #340]	; (8001890 <SysTick_Handler+0x228>)
 800173c:	f8d3 37f4 	ldr.w	r3, [r3, #2036]	; 0x7f4
 8001740:	3301      	adds	r3, #1
 8001742:	4a53      	ldr	r2, [pc, #332]	; (8001890 <SysTick_Handler+0x228>)
 8001744:	f8c2 37f4 	str.w	r3, [r2, #2036]	; 0x7f4
		if(lr.tmr_dlyCNT > lr.tmr_dly)
 8001748:	4b51      	ldr	r3, [pc, #324]	; (8001890 <SysTick_Handler+0x228>)
 800174a:	f8d3 27f4 	ldr.w	r2, [r3, #2036]	; 0x7f4
 800174e:	4b50      	ldr	r3, [pc, #320]	; (8001890 <SysTick_Handler+0x228>)
 8001750:	f8d3 37f0 	ldr.w	r3, [r3, #2032]	; 0x7f0
 8001754:	429a      	cmp	r2, r3
 8001756:	dd07      	ble.n	8001768 <SysTick_Handler+0x100>
		{
			lr.tmr_dly_ON=1;
 8001758:	4b4d      	ldr	r3, [pc, #308]	; (8001890 <SysTick_Handler+0x228>)
 800175a:	2201      	movs	r2, #1
 800175c:	f883 27ee 	strb.w	r2, [r3, #2030]	; 0x7ee
			lr.tmr_dly_en=0;
 8001760:	4b4b      	ldr	r3, [pc, #300]	; (8001890 <SysTick_Handler+0x228>)
 8001762:	2200      	movs	r2, #0
 8001764:	f883 27ed 	strb.w	r2, [r3, #2029]	; 0x7ed
		}
	}
// ENVIO DATOS LoRa ---------------------------------------------------------------//
// ENVIO DATOS WF ---------------------------------------------------------------//

	if((wf._estado_conexion==609 || wf._estado_conexion==700)&&(wf._TCP_Local_Server_EN==0))  wf_snd_flag_ticks++;
 8001768:	4b47      	ldr	r3, [pc, #284]	; (8001888 <SysTick_Handler+0x220>)
 800176a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800176e:	f240 2261 	movw	r2, #609	; 0x261
 8001772:	4293      	cmp	r3, r2
 8001774:	d005      	beq.n	8001782 <SysTick_Handler+0x11a>
 8001776:	4b44      	ldr	r3, [pc, #272]	; (8001888 <SysTick_Handler+0x220>)
 8001778:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800177c:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8001780:	d109      	bne.n	8001796 <SysTick_Handler+0x12e>
 8001782:	4b41      	ldr	r3, [pc, #260]	; (8001888 <SysTick_Handler+0x220>)
 8001784:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8001788:	2b00      	cmp	r3, #0
 800178a:	d104      	bne.n	8001796 <SysTick_Handler+0x12e>
 800178c:	4b41      	ldr	r3, [pc, #260]	; (8001894 <SysTick_Handler+0x22c>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	3301      	adds	r3, #1
 8001792:	4a40      	ldr	r2, [pc, #256]	; (8001894 <SysTick_Handler+0x22c>)
 8001794:	6013      	str	r3, [r2, #0]

	if(wf_snd_flag_ticks>= 2000 && wf._ejecucion!=1 && wf._TCP_Local_Server_EN==0)		 	  WF_SND_FLAG=1;
 8001796:	4b3f      	ldr	r3, [pc, #252]	; (8001894 <SysTick_Handler+0x22c>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800179e:	db0c      	blt.n	80017ba <SysTick_Handler+0x152>
 80017a0:	4b39      	ldr	r3, [pc, #228]	; (8001888 <SysTick_Handler+0x220>)
 80017a2:	f8d3 3ab4 	ldr.w	r3, [r3, #2740]	; 0xab4
 80017a6:	2b01      	cmp	r3, #1
 80017a8:	d007      	beq.n	80017ba <SysTick_Handler+0x152>
 80017aa:	4b37      	ldr	r3, [pc, #220]	; (8001888 <SysTick_Handler+0x220>)
 80017ac:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d102      	bne.n	80017ba <SysTick_Handler+0x152>
 80017b4:	4b38      	ldr	r3, [pc, #224]	; (8001898 <SysTick_Handler+0x230>)
 80017b6:	2201      	movs	r2, #1
 80017b8:	701a      	strb	r2, [r3, #0]

// ENVIO DATOS WF ----------------------------------- ---------------------------//

/**********************[ INICIO - EHTERNET WDG ] **********************/

	if(ETH.S0_status == 0)
 80017ba:	4b38      	ldr	r3, [pc, #224]	; (800189c <SysTick_Handler+0x234>)
 80017bc:	7b9b      	ldrb	r3, [r3, #14]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d10e      	bne.n	80017e0 <SysTick_Handler+0x178>
	{
		ETH.ETH_WDG++;
 80017c2:	4b36      	ldr	r3, [pc, #216]	; (800189c <SysTick_Handler+0x234>)
 80017c4:	899b      	ldrh	r3, [r3, #12]
 80017c6:	3301      	adds	r3, #1
 80017c8:	b29a      	uxth	r2, r3
 80017ca:	4b34      	ldr	r3, [pc, #208]	; (800189c <SysTick_Handler+0x234>)
 80017cc:	819a      	strh	r2, [r3, #12]
		if (ETH.ETH_WDG>=64000)
 80017ce:	4b33      	ldr	r3, [pc, #204]	; (800189c <SysTick_Handler+0x234>)
 80017d0:	899b      	ldrh	r3, [r3, #12]
 80017d2:	f5b3 4f7a 	cmp.w	r3, #64000	; 0xfa00
 80017d6:	d303      	bcc.n	80017e0 <SysTick_Handler+0x178>
		{
			ETH.ETH_WDG=64000;
 80017d8:	4b30      	ldr	r3, [pc, #192]	; (800189c <SysTick_Handler+0x234>)
 80017da:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 80017de:	819a      	strh	r2, [r3, #12]
		}
	}

/**********************[ FIN 	- EHTERNET WDG ] **********************/

if (ms_ticks==100)//(ms_ticks==250)//(ms_ticks==50)
 80017e0:	4b2f      	ldr	r3, [pc, #188]	; (80018a0 <SysTick_Handler+0x238>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	2b64      	cmp	r3, #100	; 0x64
 80017e6:	f040 841b 	bne.w	8002020 <SysTick_Handler+0x9b8>
  {
	  dbgn++;
 80017ea:	4b2e      	ldr	r3, [pc, #184]	; (80018a4 <SysTick_Handler+0x23c>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	3301      	adds	r3, #1
 80017f0:	4a2c      	ldr	r2, [pc, #176]	; (80018a4 <SysTick_Handler+0x23c>)
 80017f2:	6013      	str	r3, [r2, #0]
	  ms_ticks=0;
 80017f4:	4b2a      	ldr	r3, [pc, #168]	; (80018a0 <SysTick_Handler+0x238>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	601a      	str	r2, [r3, #0]
	  min_ticks++;
 80017fa:	4b2b      	ldr	r3, [pc, #172]	; (80018a8 <SysTick_Handler+0x240>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	3301      	adds	r3, #1
 8001800:	4a29      	ldr	r2, [pc, #164]	; (80018a8 <SysTick_Handler+0x240>)
 8001802:	6013      	str	r3, [r2, #0]


	  	if(MBUS_ticks==360) MBUS_ticks=0;
 8001804:	4b29      	ldr	r3, [pc, #164]	; (80018ac <SysTick_Handler+0x244>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 800180c:	d102      	bne.n	8001814 <SysTick_Handler+0x1ac>
 800180e:	4b27      	ldr	r3, [pc, #156]	; (80018ac <SysTick_Handler+0x244>)
 8001810:	2200      	movs	r2, #0
 8001812:	601a      	str	r2, [r3, #0]

	  	if (asc==0)  MBUS_ticks++;
 8001814:	4b26      	ldr	r3, [pc, #152]	; (80018b0 <SysTick_Handler+0x248>)
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d104      	bne.n	8001826 <SysTick_Handler+0x1be>
 800181c:	4b23      	ldr	r3, [pc, #140]	; (80018ac <SysTick_Handler+0x244>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	3301      	adds	r3, #1
 8001822:	4a22      	ldr	r2, [pc, #136]	; (80018ac <SysTick_Handler+0x244>)
 8001824:	6013      	str	r3, [r2, #0]
	  	if (MBUS_ticks==100) asc=1;
 8001826:	4b21      	ldr	r3, [pc, #132]	; (80018ac <SysTick_Handler+0x244>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	2b64      	cmp	r3, #100	; 0x64
 800182c:	d102      	bne.n	8001834 <SysTick_Handler+0x1cc>
 800182e:	4b20      	ldr	r3, [pc, #128]	; (80018b0 <SysTick_Handler+0x248>)
 8001830:	2201      	movs	r2, #1
 8001832:	701a      	strb	r2, [r3, #0]
	  	if (asc==1) MBUS_ticks--;
 8001834:	4b1e      	ldr	r3, [pc, #120]	; (80018b0 <SysTick_Handler+0x248>)
 8001836:	781b      	ldrb	r3, [r3, #0]
 8001838:	2b01      	cmp	r3, #1
 800183a:	d104      	bne.n	8001846 <SysTick_Handler+0x1de>
 800183c:	4b1b      	ldr	r3, [pc, #108]	; (80018ac <SysTick_Handler+0x244>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	3b01      	subs	r3, #1
 8001842:	4a1a      	ldr	r2, [pc, #104]	; (80018ac <SysTick_Handler+0x244>)
 8001844:	6013      	str	r3, [r2, #0]
	  	if (MBUS_ticks==0) asc=0;
 8001846:	4b19      	ldr	r3, [pc, #100]	; (80018ac <SysTick_Handler+0x244>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d102      	bne.n	8001854 <SysTick_Handler+0x1ec>
 800184e:	4b18      	ldr	r3, [pc, #96]	; (80018b0 <SysTick_Handler+0x248>)
 8001850:	2200      	movs	r2, #0
 8001852:	701a      	strb	r2, [r3, #0]


	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001854:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001858:	4816      	ldr	r0, [pc, #88]	; (80018b4 <SysTick_Handler+0x24c>)
 800185a:	f001 feec 	bl	8003636 <HAL_GPIO_TogglePin>
	  if(spi_no_debug)
 800185e:	4b16      	ldr	r3, [pc, #88]	; (80018b8 <SysTick_Handler+0x250>)
 8001860:	781b      	ldrb	r3, [r3, #0]
 8001862:	2b00      	cmp	r3, #0
 8001864:	f000 83cc 	beq.w	8002000 <SysTick_Handler+0x998>
	  	  {
	  if(SPI_READ_EN)
 8001868:	4b14      	ldr	r3, [pc, #80]	; (80018bc <SysTick_Handler+0x254>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	2b00      	cmp	r3, #0
 800186e:	f000 83cb 	beq.w	8002008 <SysTick_Handler+0x9a0>
	  {
	     ETH.S0_status=eth_rd_SOCKET_STAT(&ETH,0);
 8001872:	2100      	movs	r1, #0
 8001874:	4809      	ldr	r0, [pc, #36]	; (800189c <SysTick_Handler+0x234>)
 8001876:	f00c ff7d 	bl	800e774 <eth_rd_SOCKET_STAT>
 800187a:	4603      	mov	r3, r0
 800187c:	461a      	mov	r2, r3
 800187e:	4b07      	ldr	r3, [pc, #28]	; (800189c <SysTick_Handler+0x234>)
 8001880:	739a      	strb	r2, [r3, #14]

		  switch(ETH.S0_status)	//Check Socket status
 8001882:	4b06      	ldr	r3, [pc, #24]	; (800189c <SysTick_Handler+0x234>)
 8001884:	7b9b      	ldrb	r3, [r3, #14]
 8001886:	e01b      	b.n	80018c0 <SysTick_Handler+0x258>
 8001888:	20000b58 	.word	0x20000b58
 800188c:	20003a1c 	.word	0x20003a1c
 8001890:	20000350 	.word	0x20000350
 8001894:	2000295c 	.word	0x2000295c
 8001898:	20002959 	.word	0x20002959
 800189c:	20002960 	.word	0x20002960
 80018a0:	20000348 	.word	0x20000348
 80018a4:	20004068 	.word	0x20004068
 80018a8:	2000034c 	.word	0x2000034c
 80018ac:	20004040 	.word	0x20004040
 80018b0:	20003a1e 	.word	0x20003a1e
 80018b4:	40020800 	.word	0x40020800
 80018b8:	20003a10 	.word	0x20003a10
 80018bc:	20003a20 	.word	0x20003a20
 80018c0:	2b5f      	cmp	r3, #95	; 0x5f
 80018c2:	f200 83a6 	bhi.w	8002012 <SysTick_Handler+0x9aa>
 80018c6:	a201      	add	r2, pc, #4	; (adr r2, 80018cc <SysTick_Handler+0x264>)
 80018c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018cc:	08001a4d 	.word	0x08001a4d
 80018d0:	08002013 	.word	0x08002013
 80018d4:	08002013 	.word	0x08002013
 80018d8:	08002013 	.word	0x08002013
 80018dc:	08002013 	.word	0x08002013
 80018e0:	08002013 	.word	0x08002013
 80018e4:	08002013 	.word	0x08002013
 80018e8:	08002013 	.word	0x08002013
 80018ec:	08002013 	.word	0x08002013
 80018f0:	08002013 	.word	0x08002013
 80018f4:	08002013 	.word	0x08002013
 80018f8:	08002013 	.word	0x08002013
 80018fc:	08002013 	.word	0x08002013
 8001900:	08002013 	.word	0x08002013
 8001904:	08002013 	.word	0x08002013
 8001908:	08002013 	.word	0x08002013
 800190c:	08002013 	.word	0x08002013
 8001910:	08002013 	.word	0x08002013
 8001914:	08002013 	.word	0x08002013
 8001918:	08001a85 	.word	0x08001a85
 800191c:	08001ad7 	.word	0x08001ad7
 8001920:	08001aef 	.word	0x08001aef
 8001924:	08001b07 	.word	0x08001b07
 8001928:	08001b1f 	.word	0x08001b1f
 800192c:	08001e7b 	.word	0x08001e7b
 8001930:	08002013 	.word	0x08002013
 8001934:	08001e93 	.word	0x08001e93
 8001938:	08001eab 	.word	0x08001eab
 800193c:	08001ee9 	.word	0x08001ee9
 8001940:	08001f27 	.word	0x08001f27
 8001944:	08002013 	.word	0x08002013
 8001948:	08002013 	.word	0x08002013
 800194c:	08002013 	.word	0x08002013
 8001950:	08002013 	.word	0x08002013
 8001954:	08001f3f 	.word	0x08001f3f
 8001958:	08002013 	.word	0x08002013
 800195c:	08002013 	.word	0x08002013
 8001960:	08002013 	.word	0x08002013
 8001964:	08002013 	.word	0x08002013
 8001968:	08002013 	.word	0x08002013
 800196c:	08002013 	.word	0x08002013
 8001970:	08002013 	.word	0x08002013
 8001974:	08002013 	.word	0x08002013
 8001978:	08002013 	.word	0x08002013
 800197c:	08002013 	.word	0x08002013
 8001980:	08002013 	.word	0x08002013
 8001984:	08002013 	.word	0x08002013
 8001988:	08002013 	.word	0x08002013
 800198c:	08002013 	.word	0x08002013
 8001990:	08002013 	.word	0x08002013
 8001994:	08001fb9 	.word	0x08001fb9
 8001998:	08002013 	.word	0x08002013
 800199c:	08002013 	.word	0x08002013
 80019a0:	08002013 	.word	0x08002013
 80019a4:	08002013 	.word	0x08002013
 80019a8:	08002013 	.word	0x08002013
 80019ac:	08002013 	.word	0x08002013
 80019b0:	08002013 	.word	0x08002013
 80019b4:	08002013 	.word	0x08002013
 80019b8:	08002013 	.word	0x08002013
 80019bc:	08002013 	.word	0x08002013
 80019c0:	08002013 	.word	0x08002013
 80019c4:	08002013 	.word	0x08002013
 80019c8:	08002013 	.word	0x08002013
 80019cc:	08002013 	.word	0x08002013
 80019d0:	08002013 	.word	0x08002013
 80019d4:	08001fd1 	.word	0x08001fd1
 80019d8:	08002013 	.word	0x08002013
 80019dc:	08002013 	.word	0x08002013
 80019e0:	08002013 	.word	0x08002013
 80019e4:	08002013 	.word	0x08002013
 80019e8:	08002013 	.word	0x08002013
 80019ec:	08002013 	.word	0x08002013
 80019f0:	08002013 	.word	0x08002013
 80019f4:	08002013 	.word	0x08002013
 80019f8:	08002013 	.word	0x08002013
 80019fc:	08002013 	.word	0x08002013
 8001a00:	08002013 	.word	0x08002013
 8001a04:	08002013 	.word	0x08002013
 8001a08:	08002013 	.word	0x08002013
 8001a0c:	08002013 	.word	0x08002013
 8001a10:	08002013 	.word	0x08002013
 8001a14:	08002013 	.word	0x08002013
 8001a18:	08002013 	.word	0x08002013
 8001a1c:	08002013 	.word	0x08002013
 8001a20:	08002013 	.word	0x08002013
 8001a24:	08002013 	.word	0x08002013
 8001a28:	08002013 	.word	0x08002013
 8001a2c:	08002013 	.word	0x08002013
 8001a30:	08002013 	.word	0x08002013
 8001a34:	08002013 	.word	0x08002013
 8001a38:	08002013 	.word	0x08002013
 8001a3c:	08002013 	.word	0x08002013
 8001a40:	08002013 	.word	0x08002013
 8001a44:	08002013 	.word	0x08002013
 8001a48:	08001fe9 	.word	0x08001fe9
	     {
			 case SOCK_CLOSED :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_CLOSED \r\n",strlen("\r\nS0_SOCK_CLOSED \r\n"));
 8001a4c:	4b82      	ldr	r3, [pc, #520]	; (8001c58 <SysTick_Handler+0x5f0>)
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d003      	beq.n	8001a5c <SysTick_Handler+0x3f4>
 8001a54:	2113      	movs	r1, #19
 8001a56:	4881      	ldr	r0, [pc, #516]	; (8001c5c <SysTick_Handler+0x5f4>)
 8001a58:	f7ff fdea 	bl	8001630 <ITM0_Write>
					eth_wr_SOCKET_CMD(&ETH, 0 ,OPEN );
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	2100      	movs	r1, #0
 8001a60:	487f      	ldr	r0, [pc, #508]	; (8001c60 <SysTick_Handler+0x5f8>)
 8001a62:	f00c fd9d 	bl	800e5a0 <eth_wr_SOCKET_CMD>
					 // Si no tengo intento de ARP por 5 segundos vuelvo a inicializar
					 if(ETH.ETH_WDG>=5000)
 8001a66:	4b7e      	ldr	r3, [pc, #504]	; (8001c60 <SysTick_Handler+0x5f8>)
 8001a68:	899b      	ldrh	r3, [r3, #12]
 8001a6a:	f241 3287 	movw	r2, #4999	; 0x1387
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	f240 82cc 	bls.w	800200c <SysTick_Handler+0x9a4>
					 {
						 eth_init(&ETH);
 8001a74:	487a      	ldr	r0, [pc, #488]	; (8001c60 <SysTick_Handler+0x5f8>)
 8001a76:	f00c fdcf 	bl	800e618 <eth_init>

						 eth_socket_init(&ETH,0);
 8001a7a:	2100      	movs	r1, #0
 8001a7c:	4878      	ldr	r0, [pc, #480]	; (8001c60 <SysTick_Handler+0x5f8>)
 8001a7e:	f00c fe21 	bl	800e6c4 <eth_socket_init>
					 }

				 }
			 break;
 8001a82:	e2c3      	b.n	800200c <SysTick_Handler+0x9a4>
			 case  SOCK_INIT :
				 {
					 if(ETH.S0_ENserver == 1)
 8001a84:	4b76      	ldr	r3, [pc, #472]	; (8001c60 <SysTick_Handler+0x5f8>)
 8001a86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a8a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001a8e:	2b01      	cmp	r3, #1
 8001a90:	d110      	bne.n	8001ab4 <SysTick_Handler+0x44c>
					 {
						 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_INIT \r\n",strlen("\r\nS0_SOCK_INIT \r\n"));
 8001a92:	4b71      	ldr	r3, [pc, #452]	; (8001c58 <SysTick_Handler+0x5f0>)
 8001a94:	781b      	ldrb	r3, [r3, #0]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d003      	beq.n	8001aa2 <SysTick_Handler+0x43a>
 8001a9a:	2111      	movs	r1, #17
 8001a9c:	4871      	ldr	r0, [pc, #452]	; (8001c64 <SysTick_Handler+0x5fc>)
 8001a9e:	f7ff fdc7 	bl	8001630 <ITM0_Write>
							eth_wr_SOCKET_CMD(&ETH, 0, LISTEN );
 8001aa2:	2202      	movs	r2, #2
 8001aa4:	2100      	movs	r1, #0
 8001aa6:	486e      	ldr	r0, [pc, #440]	; (8001c60 <SysTick_Handler+0x5f8>)
 8001aa8:	f00c fd7a 	bl	800e5a0 <eth_wr_SOCKET_CMD>
							ETH.ETH_WDG=0;
 8001aac:	4b6c      	ldr	r3, [pc, #432]	; (8001c60 <SysTick_Handler+0x5f8>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	819a      	strh	r2, [r3, #12]
						 	if (ETH_DBG_EN)ITM0_Write("\r\nETH-W5100-CONNECT\r\n",strlen("\r\nETH-W5100-CONNECT\r\n"));
						 	ETH.ETH_WDG=0;
					 }

				 }
			 break;
 8001ab2:	e2ae      	b.n	8002012 <SysTick_Handler+0x9aa>
						 	eth_wr_SOCKET_CMD(&ETH,0, CONNECT);																				//only for server
 8001ab4:	2204      	movs	r2, #4
 8001ab6:	2100      	movs	r1, #0
 8001ab8:	4869      	ldr	r0, [pc, #420]	; (8001c60 <SysTick_Handler+0x5f8>)
 8001aba:	f00c fd71 	bl	800e5a0 <eth_wr_SOCKET_CMD>
						 	if (ETH_DBG_EN)ITM0_Write("\r\nETH-W5100-CONNECT\r\n",strlen("\r\nETH-W5100-CONNECT\r\n"));
 8001abe:	4b66      	ldr	r3, [pc, #408]	; (8001c58 <SysTick_Handler+0x5f0>)
 8001ac0:	781b      	ldrb	r3, [r3, #0]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d003      	beq.n	8001ace <SysTick_Handler+0x466>
 8001ac6:	2115      	movs	r1, #21
 8001ac8:	4867      	ldr	r0, [pc, #412]	; (8001c68 <SysTick_Handler+0x600>)
 8001aca:	f7ff fdb1 	bl	8001630 <ITM0_Write>
						 	ETH.ETH_WDG=0;
 8001ace:	4b64      	ldr	r3, [pc, #400]	; (8001c60 <SysTick_Handler+0x5f8>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	819a      	strh	r2, [r3, #12]
			 break;
 8001ad4:	e29d      	b.n	8002012 <SysTick_Handler+0x9aa>
			 case SOCK_LISTEN :
				 {
					 if (ETH_DBG_EN)ITM0_Write("\r\nS0_SOCK_LISTEN \r\n",strlen("\r\nS0_SOCK_LISTEN \r\n"));
 8001ad6:	4b60      	ldr	r3, [pc, #384]	; (8001c58 <SysTick_Handler+0x5f0>)
 8001ad8:	781b      	ldrb	r3, [r3, #0]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d003      	beq.n	8001ae6 <SysTick_Handler+0x47e>
 8001ade:	2113      	movs	r1, #19
 8001ae0:	4862      	ldr	r0, [pc, #392]	; (8001c6c <SysTick_Handler+0x604>)
 8001ae2:	f7ff fda5 	bl	8001630 <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001ae6:	4b5e      	ldr	r3, [pc, #376]	; (8001c60 <SysTick_Handler+0x5f8>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001aec:	e291      	b.n	8002012 <SysTick_Handler+0x9aa>
			 case SOCK_SYNSENT :
				 {
					 if (ETH_DBG_EN)ITM0_Write("\r\nS0_SOCK_SYNSENT \r\n",strlen("\r\nS0_SOCK_SYNSENT \r\n"));
 8001aee:	4b5a      	ldr	r3, [pc, #360]	; (8001c58 <SysTick_Handler+0x5f0>)
 8001af0:	781b      	ldrb	r3, [r3, #0]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d003      	beq.n	8001afe <SysTick_Handler+0x496>
 8001af6:	2114      	movs	r1, #20
 8001af8:	485d      	ldr	r0, [pc, #372]	; (8001c70 <SysTick_Handler+0x608>)
 8001afa:	f7ff fd99 	bl	8001630 <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001afe:	4b58      	ldr	r3, [pc, #352]	; (8001c60 <SysTick_Handler+0x5f8>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001b04:	e285      	b.n	8002012 <SysTick_Handler+0x9aa>
			 case SOCK_SYNRECV :
				 {
					 if (ETH_DBG_EN)ITM0_Write("\r\nS0_SOCK_SYNRECV \r\n",strlen("\r\nS0_SOCK_SYNRECV \r\n"));
 8001b06:	4b54      	ldr	r3, [pc, #336]	; (8001c58 <SysTick_Handler+0x5f0>)
 8001b08:	781b      	ldrb	r3, [r3, #0]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d003      	beq.n	8001b16 <SysTick_Handler+0x4ae>
 8001b0e:	2114      	movs	r1, #20
 8001b10:	4858      	ldr	r0, [pc, #352]	; (8001c74 <SysTick_Handler+0x60c>)
 8001b12:	f7ff fd8d 	bl	8001630 <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001b16:	4b52      	ldr	r3, [pc, #328]	; (8001c60 <SysTick_Handler+0x5f8>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001b1c:	e279      	b.n	8002012 <SysTick_Handler+0x9aa>
			 case SOCK_ESTABLISHED :
				 {
					 if (ETH_DBG_EN)ITM0_Write("\r\nS0_SOCK_ESTABLISHED \r\n",strlen("\r\nS0_SOCK_ESTABLISHED \r\n"));
 8001b1e:	4b4e      	ldr	r3, [pc, #312]	; (8001c58 <SysTick_Handler+0x5f0>)
 8001b20:	781b      	ldrb	r3, [r3, #0]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d003      	beq.n	8001b2e <SysTick_Handler+0x4c6>
 8001b26:	2118      	movs	r1, #24
 8001b28:	4853      	ldr	r0, [pc, #332]	; (8001c78 <SysTick_Handler+0x610>)
 8001b2a:	f7ff fd81 	bl	8001630 <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001b2e:	4b4c      	ldr	r3, [pc, #304]	; (8001c60 <SysTick_Handler+0x5f8>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	819a      	strh	r2, [r3, #12]

					if (ETH.S0_ENserver == 1)  // Si el puerto Ethernet actúa como server (Recibe datos conexión mas pedido mbus
 8001b34:	4b4a      	ldr	r3, [pc, #296]	; (8001c60 <SysTick_Handler+0x5f8>)
 8001b36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b3a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001b3e:	2b01      	cmp	r3, #1
 8001b40:	f040 80b0 	bne.w	8001ca4 <SysTick_Handler+0x63c>
					{

							S0_get_size = SPI_ETH_REG(&ETH, S0_RX_SZ_ADDR_BASEHH,S0_RX_SZ_ADDR_BASEHL ,SPI_READ, spi_Data,2);
 8001b44:	2302      	movs	r3, #2
 8001b46:	9301      	str	r3, [sp, #4]
 8001b48:	4b4c      	ldr	r3, [pc, #304]	; (8001c7c <SysTick_Handler+0x614>)
 8001b4a:	9300      	str	r3, [sp, #0]
 8001b4c:	230f      	movs	r3, #15
 8001b4e:	2226      	movs	r2, #38	; 0x26
 8001b50:	2104      	movs	r1, #4
 8001b52:	4843      	ldr	r0, [pc, #268]	; (8001c60 <SysTick_Handler+0x5f8>)
 8001b54:	f00c fbf9 	bl	800e34a <SPI_ETH_REG>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	461a      	mov	r2, r3
 8001b5c:	4b48      	ldr	r3, [pc, #288]	; (8001c80 <SysTick_Handler+0x618>)
 8001b5e:	801a      	strh	r2, [r3, #0]
							if(S0_get_size != 0x00)
 8001b60:	4b47      	ldr	r3, [pc, #284]	; (8001c80 <SysTick_Handler+0x618>)
 8001b62:	881b      	ldrh	r3, [r3, #0]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	f000 8253 	beq.w	8002010 <SysTick_Handler+0x9a8>
							{
								eth_rd_SOCKET_DATA(&ETH,0,&rx_mem_pointer,S0_get_size); // read socket data
 8001b6a:	4b45      	ldr	r3, [pc, #276]	; (8001c80 <SysTick_Handler+0x618>)
 8001b6c:	881b      	ldrh	r3, [r3, #0]
 8001b6e:	4a45      	ldr	r2, [pc, #276]	; (8001c84 <SysTick_Handler+0x61c>)
 8001b70:	2100      	movs	r1, #0
 8001b72:	483b      	ldr	r0, [pc, #236]	; (8001c60 <SysTick_Handler+0x5f8>)
 8001b74:	f00c fe38 	bl	800e7e8 <eth_rd_SOCKET_DATA>
								SPI_ETH_WR_REG_16(&ETH,S0_RX_RD0,rx_mem_pointer );		// write rx memory pointer
 8001b78:	4b42      	ldr	r3, [pc, #264]	; (8001c84 <SysTick_Handler+0x61c>)
 8001b7a:	881b      	ldrh	r3, [r3, #0]
 8001b7c:	461a      	mov	r2, r3
 8001b7e:	f44f 6185 	mov.w	r1, #1064	; 0x428
 8001b82:	4837      	ldr	r0, [pc, #220]	; (8001c60 <SysTick_Handler+0x5f8>)
 8001b84:	f00c fc59 	bl	800e43a <SPI_ETH_WR_REG_16>
								eth_wr_SOCKET_CMD(&ETH,0,RECV);							// write command to execute
 8001b88:	2240      	movs	r2, #64	; 0x40
 8001b8a:	2100      	movs	r1, #0
 8001b8c:	4834      	ldr	r0, [pc, #208]	; (8001c60 <SysTick_Handler+0x5f8>)
 8001b8e:	f00c fd07 	bl	800e5a0 <eth_wr_SOCKET_CMD>
								while(eth_rd_SOCKET_CMD(&ETH,0))						// wait until end of command execution
 8001b92:	bf00      	nop
 8001b94:	2100      	movs	r1, #0
 8001b96:	4832      	ldr	r0, [pc, #200]	; (8001c60 <SysTick_Handler+0x5f8>)
 8001b98:	f00c fe09 	bl	800e7ae <eth_rd_SOCKET_CMD>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d1f8      	bne.n	8001b94 <SysTick_Handler+0x52c>
								{}

								CopiaVector(mb_eth._MBUS_RCVD, ETH.data, S0_get_size, 0, 0 );
 8001ba2:	4b37      	ldr	r3, [pc, #220]	; (8001c80 <SysTick_Handler+0x618>)
 8001ba4:	881b      	ldrh	r3, [r3, #0]
 8001ba6:	461a      	mov	r2, r3
 8001ba8:	2300      	movs	r3, #0
 8001baa:	9300      	str	r3, [sp, #0]
 8001bac:	2300      	movs	r3, #0
 8001bae:	4936      	ldr	r1, [pc, #216]	; (8001c88 <SysTick_Handler+0x620>)
 8001bb0:	4836      	ldr	r0, [pc, #216]	; (8001c8c <SysTick_Handler+0x624>)
 8001bb2:	f00d fb49 	bl	800f248 <CopiaVector>
								mb_eth._n_MBUS_RCVD=S0_get_size;
 8001bb6:	4b32      	ldr	r3, [pc, #200]	; (8001c80 <SysTick_Handler+0x618>)
 8001bb8:	881b      	ldrh	r3, [r3, #0]
 8001bba:	461a      	mov	r2, r3
 8001bbc:	4b34      	ldr	r3, [pc, #208]	; (8001c90 <SysTick_Handler+0x628>)
 8001bbe:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

								if(S0_get_size > 0)	{ ETH.S0_data_available=1;}					//Flag data received
 8001bc2:	4b2f      	ldr	r3, [pc, #188]	; (8001c80 <SysTick_Handler+0x618>)
 8001bc4:	881b      	ldrh	r3, [r3, #0]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d002      	beq.n	8001bd0 <SysTick_Handler+0x568>
 8001bca:	4b25      	ldr	r3, [pc, #148]	; (8001c60 <SysTick_Handler+0x5f8>)
 8001bcc:	2201      	movs	r2, #1
 8001bce:	749a      	strb	r2, [r3, #18]

								if(ModBUS_Check(mb_eth._MBUS_RCVD, mb_eth._n_MBUS_RCVD))		//Ckecks ModBUS type data
 8001bd0:	4b2f      	ldr	r3, [pc, #188]	; (8001c90 <SysTick_Handler+0x628>)
 8001bd2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	482c      	ldr	r0, [pc, #176]	; (8001c8c <SysTick_Handler+0x624>)
 8001bda:	f00b f8a1 	bl	800cd20 <ModBUS_Check>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d00d      	beq.n	8001c00 <SysTick_Handler+0x598>
								{
									ModBUS(&mb_eth);										//ModBUS protocol execution
 8001be4:	482a      	ldr	r0, [pc, #168]	; (8001c90 <SysTick_Handler+0x628>)
 8001be6:	f00b f99f 	bl	800cf28 <ModBUS>
									CopiaVector(ETH.data, mb_eth._MBUS_2SND, mb_eth._n_MBUS_2SND, 0, 0);
 8001bea:	4b29      	ldr	r3, [pc, #164]	; (8001c90 <SysTick_Handler+0x628>)
 8001bec:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	9300      	str	r3, [sp, #0]
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	4927      	ldr	r1, [pc, #156]	; (8001c94 <SysTick_Handler+0x62c>)
 8001bf8:	4823      	ldr	r0, [pc, #140]	; (8001c88 <SysTick_Handler+0x620>)
 8001bfa:	f00d fb25 	bl	800f248 <CopiaVector>
 8001bfe:	e007      	b.n	8001c10 <SysTick_Handler+0x5a8>
								}
								else
								{
									if (ETH_DBG_EN) ITM0_Write("\r\n NO MBUS \r\n",strlen("\r\n\r\n NO MBUS \r\n\r\n"));
 8001c00:	4b15      	ldr	r3, [pc, #84]	; (8001c58 <SysTick_Handler+0x5f0>)
 8001c02:	781b      	ldrb	r3, [r3, #0]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d003      	beq.n	8001c10 <SysTick_Handler+0x5a8>
 8001c08:	2111      	movs	r1, #17
 8001c0a:	4823      	ldr	r0, [pc, #140]	; (8001c98 <SysTick_Handler+0x630>)
 8001c0c:	f7ff fd10 	bl	8001630 <ITM0_Write>
								}

								send_size=mb_eth._n_MBUS_2SND;  //ModBUS data qty
 8001c10:	4b1f      	ldr	r3, [pc, #124]	; (8001c90 <SysTick_Handler+0x628>)
 8001c12:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 8001c16:	b29a      	uxth	r2, r3
 8001c18:	4b20      	ldr	r3, [pc, #128]	; (8001c9c <SysTick_Handler+0x634>)
 8001c1a:	801a      	strh	r2, [r3, #0]

								eth_wr_SOCKET_DATA(&ETH,0, &tx_mem_pointer, send_size);	// write socket data
 8001c1c:	4b1f      	ldr	r3, [pc, #124]	; (8001c9c <SysTick_Handler+0x634>)
 8001c1e:	881b      	ldrh	r3, [r3, #0]
 8001c20:	4a1f      	ldr	r2, [pc, #124]	; (8001ca0 <SysTick_Handler+0x638>)
 8001c22:	2100      	movs	r1, #0
 8001c24:	480e      	ldr	r0, [pc, #56]	; (8001c60 <SysTick_Handler+0x5f8>)
 8001c26:	f00c feaf 	bl	800e988 <eth_wr_SOCKET_DATA>
								SPI_ETH_WR_REG_16(&ETH,0x424,tx_mem_pointer);			// write tx memory pointer
 8001c2a:	4b1d      	ldr	r3, [pc, #116]	; (8001ca0 <SysTick_Handler+0x638>)
 8001c2c:	881b      	ldrh	r3, [r3, #0]
 8001c2e:	461a      	mov	r2, r3
 8001c30:	f240 4124 	movw	r1, #1060	; 0x424
 8001c34:	480a      	ldr	r0, [pc, #40]	; (8001c60 <SysTick_Handler+0x5f8>)
 8001c36:	f00c fc00 	bl	800e43a <SPI_ETH_WR_REG_16>
								eth_wr_SOCKET_CMD(&ETH,0,SEND);							// write command to execute
 8001c3a:	2220      	movs	r2, #32
 8001c3c:	2100      	movs	r1, #0
 8001c3e:	4808      	ldr	r0, [pc, #32]	; (8001c60 <SysTick_Handler+0x5f8>)
 8001c40:	f00c fcae 	bl	800e5a0 <eth_wr_SOCKET_CMD>
								while(eth_rd_SOCKET_CMD(&ETH,0))						// wait until end of command execution
 8001c44:	bf00      	nop
 8001c46:	2100      	movs	r1, #0
 8001c48:	4805      	ldr	r0, [pc, #20]	; (8001c60 <SysTick_Handler+0x5f8>)
 8001c4a:	f00c fdb0 	bl	800e7ae <eth_rd_SOCKET_CMD>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d1f8      	bne.n	8001c46 <SysTick_Handler+0x5de>

							}
						}
					}
				 }
			 break;
 8001c54:	e1dc      	b.n	8002010 <SysTick_Handler+0x9a8>
 8001c56:	bf00      	nop
 8001c58:	20002958 	.word	0x20002958
 8001c5c:	08010924 	.word	0x08010924
 8001c60:	20002960 	.word	0x20002960
 8001c64:	08010938 	.word	0x08010938
 8001c68:	0801094c 	.word	0x0801094c
 8001c6c:	08010964 	.word	0x08010964
 8001c70:	08010978 	.word	0x08010978
 8001c74:	08010990 	.word	0x08010990
 8001c78:	080109a8 	.word	0x080109a8
 8001c7c:	200039d0 	.word	0x200039d0
 8001c80:	200039c8 	.word	0x200039c8
 8001c84:	200039cc 	.word	0x200039cc
 8001c88:	2000297c 	.word	0x2000297c
 8001c8c:	200018ca 	.word	0x200018ca
 8001c90:	200018b8 	.word	0x200018b8
 8001c94:	20001ad0 	.word	0x20001ad0
 8001c98:	080109c4 	.word	0x080109c4
 8001c9c:	200039ce 	.word	0x200039ce
 8001ca0:	200039ca 	.word	0x200039ca
						if (mb_eth._w_answer==0)
 8001ca4:	4bac      	ldr	r3, [pc, #688]	; (8001f58 <SysTick_Handler+0x8f0>)
 8001ca6:	7a1b      	ldrb	r3, [r3, #8]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d167      	bne.n	8001d7c <SysTick_Handler+0x714>
							ETH.data[0]=0x00;
 8001cac:	4bab      	ldr	r3, [pc, #684]	; (8001f5c <SysTick_Handler+0x8f4>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	771a      	strb	r2, [r3, #28]
							ETH.data[1]=0x00;
 8001cb2:	4baa      	ldr	r3, [pc, #680]	; (8001f5c <SysTick_Handler+0x8f4>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	775a      	strb	r2, [r3, #29]
							ETH.data[2]=0x00;
 8001cb8:	4ba8      	ldr	r3, [pc, #672]	; (8001f5c <SysTick_Handler+0x8f4>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	779a      	strb	r2, [r3, #30]
							ETH.data[3]=0x00;
 8001cbe:	4ba7      	ldr	r3, [pc, #668]	; (8001f5c <SysTick_Handler+0x8f4>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	77da      	strb	r2, [r3, #31]
							ETH.data[4]=0x00;
 8001cc4:	4ba5      	ldr	r3, [pc, #660]	; (8001f5c <SysTick_Handler+0x8f4>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	f883 2020 	strb.w	r2, [r3, #32]
							ETH.data[5]=0x06;
 8001ccc:	4ba3      	ldr	r3, [pc, #652]	; (8001f5c <SysTick_Handler+0x8f4>)
 8001cce:	2206      	movs	r2, #6
 8001cd0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
							ETH.data[6]=0x01;
 8001cd4:	4ba1      	ldr	r3, [pc, #644]	; (8001f5c <SysTick_Handler+0x8f4>)
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
							ETH.data[7]=0x03;
 8001cdc:	4b9f      	ldr	r3, [pc, #636]	; (8001f5c <SysTick_Handler+0x8f4>)
 8001cde:	2203      	movs	r2, #3
 8001ce0:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
							ETH.data[8]=0x00;
 8001ce4:	4b9d      	ldr	r3, [pc, #628]	; (8001f5c <SysTick_Handler+0x8f4>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
							ETH.data[9]=0x00;
 8001cec:	4b9b      	ldr	r3, [pc, #620]	; (8001f5c <SysTick_Handler+0x8f4>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
							ETH.data[10]=0x00;
 8001cf4:	4b99      	ldr	r3, [pc, #612]	; (8001f5c <SysTick_Handler+0x8f4>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
							ETH.data[11]=0x0A;
 8001cfc:	4b97      	ldr	r3, [pc, #604]	; (8001f5c <SysTick_Handler+0x8f4>)
 8001cfe:	220a      	movs	r2, #10
 8001d00:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
							send_size=12;
 8001d04:	4b96      	ldr	r3, [pc, #600]	; (8001f60 <SysTick_Handler+0x8f8>)
 8001d06:	220c      	movs	r2, #12
 8001d08:	801a      	strh	r2, [r3, #0]
							ModBUS_F03_Request(&mb_eth,0,15);
 8001d0a:	220f      	movs	r2, #15
 8001d0c:	2100      	movs	r1, #0
 8001d0e:	4892      	ldr	r0, [pc, #584]	; (8001f58 <SysTick_Handler+0x8f0>)
 8001d10:	f00b f8b3 	bl	800ce7a <ModBUS_F03_Request>
							CopiaVector(ETH.data, mb_eth._MBUS_2SND, 12, 0, 0 );
 8001d14:	2300      	movs	r3, #0
 8001d16:	9300      	str	r3, [sp, #0]
 8001d18:	2300      	movs	r3, #0
 8001d1a:	220c      	movs	r2, #12
 8001d1c:	4991      	ldr	r1, [pc, #580]	; (8001f64 <SysTick_Handler+0x8fc>)
 8001d1e:	4892      	ldr	r0, [pc, #584]	; (8001f68 <SysTick_Handler+0x900>)
 8001d20:	f00d fa92 	bl	800f248 <CopiaVector>
							eth_wr_SOCKET_DATA(&ETH,0, &tx_mem_pointer, send_size);	// write socket data
 8001d24:	4b8e      	ldr	r3, [pc, #568]	; (8001f60 <SysTick_Handler+0x8f8>)
 8001d26:	881b      	ldrh	r3, [r3, #0]
 8001d28:	4a90      	ldr	r2, [pc, #576]	; (8001f6c <SysTick_Handler+0x904>)
 8001d2a:	2100      	movs	r1, #0
 8001d2c:	488b      	ldr	r0, [pc, #556]	; (8001f5c <SysTick_Handler+0x8f4>)
 8001d2e:	f00c fe2b 	bl	800e988 <eth_wr_SOCKET_DATA>
							SPI_ETH_WR_REG_16(&ETH,0x424,tx_mem_pointer);			// write tx memory pointer
 8001d32:	4b8e      	ldr	r3, [pc, #568]	; (8001f6c <SysTick_Handler+0x904>)
 8001d34:	881b      	ldrh	r3, [r3, #0]
 8001d36:	461a      	mov	r2, r3
 8001d38:	f240 4124 	movw	r1, #1060	; 0x424
 8001d3c:	4887      	ldr	r0, [pc, #540]	; (8001f5c <SysTick_Handler+0x8f4>)
 8001d3e:	f00c fb7c 	bl	800e43a <SPI_ETH_WR_REG_16>
							eth_wr_SOCKET_CMD(&ETH,0,SEND);							// write command to execute
 8001d42:	2220      	movs	r2, #32
 8001d44:	2100      	movs	r1, #0
 8001d46:	4885      	ldr	r0, [pc, #532]	; (8001f5c <SysTick_Handler+0x8f4>)
 8001d48:	f00c fc2a 	bl	800e5a0 <eth_wr_SOCKET_CMD>
							while(eth_rd_SOCKET_CMD(&ETH,0))						// wait until end of command execution
 8001d4c:	bf00      	nop
 8001d4e:	2100      	movs	r1, #0
 8001d50:	4882      	ldr	r0, [pc, #520]	; (8001f5c <SysTick_Handler+0x8f4>)
 8001d52:	f00c fd2c 	bl	800e7ae <eth_rd_SOCKET_CMD>
 8001d56:	4603      	mov	r3, r0
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d1f8      	bne.n	8001d4e <SysTick_Handler+0x6e6>
							mb_eth._w_answer=1;	// Waiting answer flag
 8001d5c:	4b7e      	ldr	r3, [pc, #504]	; (8001f58 <SysTick_Handler+0x8f0>)
 8001d5e:	2201      	movs	r2, #1
 8001d60:	721a      	strb	r2, [r3, #8]
							MB_TOUT_ticks=0;	// restart counting
 8001d62:	4b83      	ldr	r3, [pc, #524]	; (8001f70 <SysTick_Handler+0x908>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	601a      	str	r2, [r3, #0]
							if (ETH_DBG_EN) ITM0_Write("\r\n SENT MBUS REQ \r\n",strlen("\r\n\r\n SENT MBUS REQ \r\n\r\n"));
 8001d68:	4b82      	ldr	r3, [pc, #520]	; (8001f74 <SysTick_Handler+0x90c>)
 8001d6a:	781b      	ldrb	r3, [r3, #0]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	f000 814f 	beq.w	8002010 <SysTick_Handler+0x9a8>
 8001d72:	2117      	movs	r1, #23
 8001d74:	4880      	ldr	r0, [pc, #512]	; (8001f78 <SysTick_Handler+0x910>)
 8001d76:	f7ff fc5b 	bl	8001630 <ITM0_Write>
			 break;
 8001d7a:	e149      	b.n	8002010 <SysTick_Handler+0x9a8>
						S0_get_size = SPI_ETH_REG(&ETH, S0_RX_SZ_ADDR_BASEHH,S0_RX_SZ_ADDR_BASEHL ,SPI_READ, spi_Data,2);
 8001d7c:	2302      	movs	r3, #2
 8001d7e:	9301      	str	r3, [sp, #4]
 8001d80:	4b7e      	ldr	r3, [pc, #504]	; (8001f7c <SysTick_Handler+0x914>)
 8001d82:	9300      	str	r3, [sp, #0]
 8001d84:	230f      	movs	r3, #15
 8001d86:	2226      	movs	r2, #38	; 0x26
 8001d88:	2104      	movs	r1, #4
 8001d8a:	4874      	ldr	r0, [pc, #464]	; (8001f5c <SysTick_Handler+0x8f4>)
 8001d8c:	f00c fadd 	bl	800e34a <SPI_ETH_REG>
 8001d90:	4603      	mov	r3, r0
 8001d92:	461a      	mov	r2, r3
 8001d94:	4b7a      	ldr	r3, [pc, #488]	; (8001f80 <SysTick_Handler+0x918>)
 8001d96:	801a      	strh	r2, [r3, #0]
							if(S0_get_size != 0x00)
 8001d98:	4b79      	ldr	r3, [pc, #484]	; (8001f80 <SysTick_Handler+0x918>)
 8001d9a:	881b      	ldrh	r3, [r3, #0]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	f000 8137 	beq.w	8002010 <SysTick_Handler+0x9a8>
								eth_rd_SOCKET_DATA(&ETH,0,&rx_mem_pointer,S0_get_size); // read socket data
 8001da2:	4b77      	ldr	r3, [pc, #476]	; (8001f80 <SysTick_Handler+0x918>)
 8001da4:	881b      	ldrh	r3, [r3, #0]
 8001da6:	4a77      	ldr	r2, [pc, #476]	; (8001f84 <SysTick_Handler+0x91c>)
 8001da8:	2100      	movs	r1, #0
 8001daa:	486c      	ldr	r0, [pc, #432]	; (8001f5c <SysTick_Handler+0x8f4>)
 8001dac:	f00c fd1c 	bl	800e7e8 <eth_rd_SOCKET_DATA>
								SPI_ETH_WR_REG_16(&ETH,S0_RX_RD0,rx_mem_pointer );		// write rx memory pointer
 8001db0:	4b74      	ldr	r3, [pc, #464]	; (8001f84 <SysTick_Handler+0x91c>)
 8001db2:	881b      	ldrh	r3, [r3, #0]
 8001db4:	461a      	mov	r2, r3
 8001db6:	f44f 6185 	mov.w	r1, #1064	; 0x428
 8001dba:	4868      	ldr	r0, [pc, #416]	; (8001f5c <SysTick_Handler+0x8f4>)
 8001dbc:	f00c fb3d 	bl	800e43a <SPI_ETH_WR_REG_16>
								eth_wr_SOCKET_CMD(&ETH,0,RECV);							// write command to execute
 8001dc0:	2240      	movs	r2, #64	; 0x40
 8001dc2:	2100      	movs	r1, #0
 8001dc4:	4865      	ldr	r0, [pc, #404]	; (8001f5c <SysTick_Handler+0x8f4>)
 8001dc6:	f00c fbeb 	bl	800e5a0 <eth_wr_SOCKET_CMD>
								while(eth_rd_SOCKET_CMD(&ETH,0))						// wait until end of command execution
 8001dca:	bf00      	nop
 8001dcc:	2100      	movs	r1, #0
 8001dce:	4863      	ldr	r0, [pc, #396]	; (8001f5c <SysTick_Handler+0x8f4>)
 8001dd0:	f00c fced 	bl	800e7ae <eth_rd_SOCKET_CMD>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d1f8      	bne.n	8001dcc <SysTick_Handler+0x764>
								CopiaVector(mb_eth._MBUS_RCVD, ETH.data, S0_get_size, 0, 0 );
 8001dda:	4b69      	ldr	r3, [pc, #420]	; (8001f80 <SysTick_Handler+0x918>)
 8001ddc:	881b      	ldrh	r3, [r3, #0]
 8001dde:	461a      	mov	r2, r3
 8001de0:	2300      	movs	r3, #0
 8001de2:	9300      	str	r3, [sp, #0]
 8001de4:	2300      	movs	r3, #0
 8001de6:	4960      	ldr	r1, [pc, #384]	; (8001f68 <SysTick_Handler+0x900>)
 8001de8:	4867      	ldr	r0, [pc, #412]	; (8001f88 <SysTick_Handler+0x920>)
 8001dea:	f00d fa2d 	bl	800f248 <CopiaVector>
								mb_eth._n_MBUS_RCVD=S0_get_size;
 8001dee:	4b64      	ldr	r3, [pc, #400]	; (8001f80 <SysTick_Handler+0x918>)
 8001df0:	881b      	ldrh	r3, [r3, #0]
 8001df2:	461a      	mov	r2, r3
 8001df4:	4b58      	ldr	r3, [pc, #352]	; (8001f58 <SysTick_Handler+0x8f0>)
 8001df6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
								if(S0_get_size > 0)	{ ETH.S0_data_available=1;}
 8001dfa:	4b61      	ldr	r3, [pc, #388]	; (8001f80 <SysTick_Handler+0x918>)
 8001dfc:	881b      	ldrh	r3, [r3, #0]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d002      	beq.n	8001e08 <SysTick_Handler+0x7a0>
 8001e02:	4b56      	ldr	r3, [pc, #344]	; (8001f5c <SysTick_Handler+0x8f4>)
 8001e04:	2201      	movs	r2, #1
 8001e06:	749a      	strb	r2, [r3, #18]
								if(ModBUS_Check(mb_eth._MBUS_RCVD, mb_eth._n_MBUS_RCVD))		//Ckecks ModBUS type data
 8001e08:	4b53      	ldr	r3, [pc, #332]	; (8001f58 <SysTick_Handler+0x8f0>)
 8001e0a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8001e0e:	4619      	mov	r1, r3
 8001e10:	485d      	ldr	r0, [pc, #372]	; (8001f88 <SysTick_Handler+0x920>)
 8001e12:	f00a ff85 	bl	800cd20 <ModBUS_Check>
 8001e16:	4603      	mov	r3, r0
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d024      	beq.n	8001e66 <SysTick_Handler+0x7fe>
										mb_eth._w_answer=0;  									//Si el mensaje recibido ya es modbus digo que ya recibi
 8001e1c:	4b4e      	ldr	r3, [pc, #312]	; (8001f58 <SysTick_Handler+0x8f0>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	721a      	strb	r2, [r3, #8]
										MB_TOUT_ticks=0;
 8001e22:	4b53      	ldr	r3, [pc, #332]	; (8001f70 <SysTick_Handler+0x908>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	601a      	str	r2, [r3, #0]
										ModBUS(&mb_eth);										//ModBUS protocol execution
 8001e28:	484b      	ldr	r0, [pc, #300]	; (8001f58 <SysTick_Handler+0x8f0>)
 8001e2a:	f00b f87d 	bl	800cf28 <ModBUS>
										CopiaVector(ETH.swap, mb_eth._MBUS_RCVD, mb_eth._n_MBUS_RCVD, 0, 0);
 8001e2e:	4b4a      	ldr	r3, [pc, #296]	; (8001f58 <SysTick_Handler+0x8f0>)
 8001e30:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001e34:	2300      	movs	r3, #0
 8001e36:	9300      	str	r3, [sp, #0]
 8001e38:	2300      	movs	r3, #0
 8001e3a:	4953      	ldr	r1, [pc, #332]	; (8001f88 <SysTick_Handler+0x920>)
 8001e3c:	4853      	ldr	r0, [pc, #332]	; (8001f8c <SysTick_Handler+0x924>)
 8001e3e:	f00d fa03 	bl	800f248 <CopiaVector>
										CopiaVector(mb_wf._Holding_Registers, mb_eth._Holding_Registers, 64, 0, 0);
 8001e42:	2300      	movs	r3, #0
 8001e44:	9300      	str	r3, [sp, #0]
 8001e46:	2300      	movs	r3, #0
 8001e48:	2240      	movs	r2, #64	; 0x40
 8001e4a:	4951      	ldr	r1, [pc, #324]	; (8001f90 <SysTick_Handler+0x928>)
 8001e4c:	4851      	ldr	r0, [pc, #324]	; (8001f94 <SysTick_Handler+0x92c>)
 8001e4e:	f00d f9fb 	bl	800f248 <CopiaVector>
										if (ETH_DBG_EN) ITM0_Write("\r\n RCVD MBUS REQ \r\n",strlen("\r\n\r\n RCVD MBUS REQ \r\n\r\n"));
 8001e52:	4b48      	ldr	r3, [pc, #288]	; (8001f74 <SysTick_Handler+0x90c>)
 8001e54:	781b      	ldrb	r3, [r3, #0]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	f000 80da 	beq.w	8002010 <SysTick_Handler+0x9a8>
 8001e5c:	2117      	movs	r1, #23
 8001e5e:	484e      	ldr	r0, [pc, #312]	; (8001f98 <SysTick_Handler+0x930>)
 8001e60:	f7ff fbe6 	bl	8001630 <ITM0_Write>
			 break;
 8001e64:	e0d4      	b.n	8002010 <SysTick_Handler+0x9a8>
										if (ETH_DBG_EN) ITM0_Write("\r\n NO MBUS \r\n",strlen("\r\n\r\n NO MBUS \r\n\r\n"));
 8001e66:	4b43      	ldr	r3, [pc, #268]	; (8001f74 <SysTick_Handler+0x90c>)
 8001e68:	781b      	ldrb	r3, [r3, #0]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	f000 80d0 	beq.w	8002010 <SysTick_Handler+0x9a8>
 8001e70:	2111      	movs	r1, #17
 8001e72:	484a      	ldr	r0, [pc, #296]	; (8001f9c <SysTick_Handler+0x934>)
 8001e74:	f7ff fbdc 	bl	8001630 <ITM0_Write>
			 break;
 8001e78:	e0ca      	b.n	8002010 <SysTick_Handler+0x9a8>
			 case SOCK_FIN_WAIT :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_FIN_WAIT \r\n",strlen("\r\nS0_SOCK_FIN_WAIT \r\n"));
 8001e7a:	4b3e      	ldr	r3, [pc, #248]	; (8001f74 <SysTick_Handler+0x90c>)
 8001e7c:	781b      	ldrb	r3, [r3, #0]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d003      	beq.n	8001e8a <SysTick_Handler+0x822>
 8001e82:	2115      	movs	r1, #21
 8001e84:	4846      	ldr	r0, [pc, #280]	; (8001fa0 <SysTick_Handler+0x938>)
 8001e86:	f7ff fbd3 	bl	8001630 <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001e8a:	4b34      	ldr	r3, [pc, #208]	; (8001f5c <SysTick_Handler+0x8f4>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001e90:	e0bf      	b.n	8002012 <SysTick_Handler+0x9aa>
			 case SOCK_CLOSING :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_CLOSING \r\n",strlen("\r\nS0_SOCK_CLOSING \r\n"));
 8001e92:	4b38      	ldr	r3, [pc, #224]	; (8001f74 <SysTick_Handler+0x90c>)
 8001e94:	781b      	ldrb	r3, [r3, #0]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d003      	beq.n	8001ea2 <SysTick_Handler+0x83a>
 8001e9a:	2114      	movs	r1, #20
 8001e9c:	4841      	ldr	r0, [pc, #260]	; (8001fa4 <SysTick_Handler+0x93c>)
 8001e9e:	f7ff fbc7 	bl	8001630 <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001ea2:	4b2e      	ldr	r3, [pc, #184]	; (8001f5c <SysTick_Handler+0x8f4>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001ea8:	e0b3      	b.n	8002012 <SysTick_Handler+0x9aa>
			 case  SOCK_TIME_WAIT :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_TIME_WAIT \r\n",strlen("\r\nS0_SOCK_TIME_WAIT \r\n"));
 8001eaa:	4b32      	ldr	r3, [pc, #200]	; (8001f74 <SysTick_Handler+0x90c>)
 8001eac:	781b      	ldrb	r3, [r3, #0]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d003      	beq.n	8001eba <SysTick_Handler+0x852>
 8001eb2:	2116      	movs	r1, #22
 8001eb4:	483c      	ldr	r0, [pc, #240]	; (8001fa8 <SysTick_Handler+0x940>)
 8001eb6:	f7ff fbbb 	bl	8001630 <ITM0_Write>
					eth_wr_SOCKET_CMD(&ETH,0, DISCON );
 8001eba:	2208      	movs	r2, #8
 8001ebc:	2100      	movs	r1, #0
 8001ebe:	4827      	ldr	r0, [pc, #156]	; (8001f5c <SysTick_Handler+0x8f4>)
 8001ec0:	f00c fb6e 	bl	800e5a0 <eth_wr_SOCKET_CMD>
					while( SPI_ETH_REG(&ETH, S0_CR_ADDR_BASEH,S0_CR_ADDR_BASEL ,SPI_READ, spi_Data,1))
 8001ec4:	bf00      	nop
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	9301      	str	r3, [sp, #4]
 8001eca:	4b2c      	ldr	r3, [pc, #176]	; (8001f7c <SysTick_Handler+0x914>)
 8001ecc:	9300      	str	r3, [sp, #0]
 8001ece:	230f      	movs	r3, #15
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	2104      	movs	r1, #4
 8001ed4:	4821      	ldr	r0, [pc, #132]	; (8001f5c <SysTick_Handler+0x8f4>)
 8001ed6:	f00c fa38 	bl	800e34a <SPI_ETH_REG>
 8001eda:	4603      	mov	r3, r0
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d1f2      	bne.n	8001ec6 <SysTick_Handler+0x85e>
					{}
					ETH.ETH_WDG=0;
 8001ee0:	4b1e      	ldr	r3, [pc, #120]	; (8001f5c <SysTick_Handler+0x8f4>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001ee6:	e094      	b.n	8002012 <SysTick_Handler+0x9aa>
			 case SOCK_CLOSE_WAIT :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_CLOSE_WAIT \r\n",strlen("\r\nS0_SOCK_CLOSE_WAIT \r\n"));
 8001ee8:	4b22      	ldr	r3, [pc, #136]	; (8001f74 <SysTick_Handler+0x90c>)
 8001eea:	781b      	ldrb	r3, [r3, #0]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d003      	beq.n	8001ef8 <SysTick_Handler+0x890>
 8001ef0:	2117      	movs	r1, #23
 8001ef2:	482e      	ldr	r0, [pc, #184]	; (8001fac <SysTick_Handler+0x944>)
 8001ef4:	f7ff fb9c 	bl	8001630 <ITM0_Write>
					eth_wr_SOCKET_CMD(&ETH,0,DISCON );
 8001ef8:	2208      	movs	r2, #8
 8001efa:	2100      	movs	r1, #0
 8001efc:	4817      	ldr	r0, [pc, #92]	; (8001f5c <SysTick_Handler+0x8f4>)
 8001efe:	f00c fb4f 	bl	800e5a0 <eth_wr_SOCKET_CMD>
					while( SPI_ETH_REG(&ETH, S0_CR_ADDR_BASEH,S0_CR_ADDR_BASEL ,SPI_READ, spi_Data,1))
 8001f02:	bf00      	nop
 8001f04:	2301      	movs	r3, #1
 8001f06:	9301      	str	r3, [sp, #4]
 8001f08:	4b1c      	ldr	r3, [pc, #112]	; (8001f7c <SysTick_Handler+0x914>)
 8001f0a:	9300      	str	r3, [sp, #0]
 8001f0c:	230f      	movs	r3, #15
 8001f0e:	2201      	movs	r2, #1
 8001f10:	2104      	movs	r1, #4
 8001f12:	4812      	ldr	r0, [pc, #72]	; (8001f5c <SysTick_Handler+0x8f4>)
 8001f14:	f00c fa19 	bl	800e34a <SPI_ETH_REG>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d1f2      	bne.n	8001f04 <SysTick_Handler+0x89c>
					{}
					ETH.ETH_WDG=0;
 8001f1e:	4b0f      	ldr	r3, [pc, #60]	; (8001f5c <SysTick_Handler+0x8f4>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001f24:	e075      	b.n	8002012 <SysTick_Handler+0x9aa>
			 case SOCK_LAST_ACK :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_LAST_ACK \r\n",strlen("\r\nS0_SOCK_LAST_ACK \r\n"));
 8001f26:	4b13      	ldr	r3, [pc, #76]	; (8001f74 <SysTick_Handler+0x90c>)
 8001f28:	781b      	ldrb	r3, [r3, #0]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d003      	beq.n	8001f36 <SysTick_Handler+0x8ce>
 8001f2e:	2115      	movs	r1, #21
 8001f30:	481f      	ldr	r0, [pc, #124]	; (8001fb0 <SysTick_Handler+0x948>)
 8001f32:	f7ff fb7d 	bl	8001630 <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001f36:	4b09      	ldr	r3, [pc, #36]	; (8001f5c <SysTick_Handler+0x8f4>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001f3c:	e069      	b.n	8002012 <SysTick_Handler+0x9aa>
			 case SOCK_UDP :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_UDP \r\n",strlen("\r\nS0_SOCK_UDP \r\n"));
 8001f3e:	4b0d      	ldr	r3, [pc, #52]	; (8001f74 <SysTick_Handler+0x90c>)
 8001f40:	781b      	ldrb	r3, [r3, #0]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d003      	beq.n	8001f4e <SysTick_Handler+0x8e6>
 8001f46:	2110      	movs	r1, #16
 8001f48:	481a      	ldr	r0, [pc, #104]	; (8001fb4 <SysTick_Handler+0x94c>)
 8001f4a:	f7ff fb71 	bl	8001630 <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001f4e:	4b03      	ldr	r3, [pc, #12]	; (8001f5c <SysTick_Handler+0x8f4>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001f54:	e05d      	b.n	8002012 <SysTick_Handler+0x9aa>
 8001f56:	bf00      	nop
 8001f58:	200018b8 	.word	0x200018b8
 8001f5c:	20002960 	.word	0x20002960
 8001f60:	200039ce 	.word	0x200039ce
 8001f64:	20001ad0 	.word	0x20001ad0
 8001f68:	2000297c 	.word	0x2000297c
 8001f6c:	200039ca 	.word	0x200039ca
 8001f70:	20004044 	.word	0x20004044
 8001f74:	20002958 	.word	0x20002958
 8001f78:	080109d4 	.word	0x080109d4
 8001f7c:	200039d0 	.word	0x200039d0
 8001f80:	200039c8 	.word	0x200039c8
 8001f84:	200039cc 	.word	0x200039cc
 8001f88:	200018ca 	.word	0x200018ca
 8001f8c:	2000317c 	.word	0x2000317c
 8001f90:	20001cdc 	.word	0x20001cdc
 8001f94:	2000232c 	.word	0x2000232c
 8001f98:	080109e8 	.word	0x080109e8
 8001f9c:	080109c4 	.word	0x080109c4
 8001fa0:	080109fc 	.word	0x080109fc
 8001fa4:	08010a14 	.word	0x08010a14
 8001fa8:	08010a2c 	.word	0x08010a2c
 8001fac:	08010a44 	.word	0x08010a44
 8001fb0:	08010a5c 	.word	0x08010a5c
 8001fb4:	08010a74 	.word	0x08010a74
			 case  SOCK_IPRAW :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_IPRAW \r\n",strlen("\r\nS0_SOCK_IPRAW \r\n"));
 8001fb8:	4b62      	ldr	r3, [pc, #392]	; (8002144 <SysTick_Handler+0xadc>)
 8001fba:	781b      	ldrb	r3, [r3, #0]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d003      	beq.n	8001fc8 <SysTick_Handler+0x960>
 8001fc0:	2112      	movs	r1, #18
 8001fc2:	4861      	ldr	r0, [pc, #388]	; (8002148 <SysTick_Handler+0xae0>)
 8001fc4:	f7ff fb34 	bl	8001630 <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001fc8:	4b60      	ldr	r3, [pc, #384]	; (800214c <SysTick_Handler+0xae4>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001fce:	e020      	b.n	8002012 <SysTick_Handler+0x9aa>
			 case  SOCK_MACRAW :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_MACRAW \r\n",strlen("\r\nS0_SOCK_MACRAW \r\n"));
 8001fd0:	4b5c      	ldr	r3, [pc, #368]	; (8002144 <SysTick_Handler+0xadc>)
 8001fd2:	781b      	ldrb	r3, [r3, #0]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d003      	beq.n	8001fe0 <SysTick_Handler+0x978>
 8001fd8:	2113      	movs	r1, #19
 8001fda:	485d      	ldr	r0, [pc, #372]	; (8002150 <SysTick_Handler+0xae8>)
 8001fdc:	f7ff fb28 	bl	8001630 <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001fe0:	4b5a      	ldr	r3, [pc, #360]	; (800214c <SysTick_Handler+0xae4>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001fe6:	e014      	b.n	8002012 <SysTick_Handler+0x9aa>
			 case SOCK_PPOE :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_PPOE \r\n",strlen("\r\nS0_SOCK_PPOE \r\n"));
 8001fe8:	4b56      	ldr	r3, [pc, #344]	; (8002144 <SysTick_Handler+0xadc>)
 8001fea:	781b      	ldrb	r3, [r3, #0]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d003      	beq.n	8001ff8 <SysTick_Handler+0x990>
 8001ff0:	2111      	movs	r1, #17
 8001ff2:	4858      	ldr	r0, [pc, #352]	; (8002154 <SysTick_Handler+0xaec>)
 8001ff4:	f7ff fb1c 	bl	8001630 <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001ff8:	4b54      	ldr	r3, [pc, #336]	; (800214c <SysTick_Handler+0xae4>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001ffe:	e008      	b.n	8002012 <SysTick_Handler+0x9aa>
				 }
	     }
	  }
	  }else
	  	  {
		  SPI_ETH(&ETH);
 8002000:	4852      	ldr	r0, [pc, #328]	; (800214c <SysTick_Handler+0xae4>)
 8002002:	f00c f97b 	bl	800e2fc <SPI_ETH>
 8002006:	e004      	b.n	8002012 <SysTick_Handler+0x9aa>
			 default:
 8002008:	bf00      	nop
 800200a:	e002      	b.n	8002012 <SysTick_Handler+0x9aa>
			 break;
 800200c:	bf00      	nop
 800200e:	e000      	b.n	8002012 <SysTick_Handler+0x9aa>
			 break;
 8002010:	bf00      	nop
	  	  }
	  if(min_ticks==2)//if(min_ticks==10)
 8002012:	4b51      	ldr	r3, [pc, #324]	; (8002158 <SysTick_Handler+0xaf0>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	2b02      	cmp	r3, #2
 8002018:	d102      	bne.n	8002020 <SysTick_Handler+0x9b8>
		  {
		  	  min_ticks=0;  /* SETEO CADA 2 min*/
 800201a:	4b4f      	ldr	r3, [pc, #316]	; (8002158 <SysTick_Handler+0xaf0>)
 800201c:	2200      	movs	r2, #0
 800201e:	601a      	str	r2, [r3, #0]
		  }
  }

	if(EN_USART1_TMR==1) USART1_ticks++;
 8002020:	4b4e      	ldr	r3, [pc, #312]	; (800215c <SysTick_Handler+0xaf4>)
 8002022:	781b      	ldrb	r3, [r3, #0]
 8002024:	2b01      	cmp	r3, #1
 8002026:	d104      	bne.n	8002032 <SysTick_Handler+0x9ca>
 8002028:	4b4d      	ldr	r3, [pc, #308]	; (8002160 <SysTick_Handler+0xaf8>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	3301      	adds	r3, #1
 800202e:	4a4c      	ldr	r2, [pc, #304]	; (8002160 <SysTick_Handler+0xaf8>)
 8002030:	6013      	str	r3, [r2, #0]

	if(USART1_ticks>=2)//if(USART1_ticks>=10)
 8002032:	4b4b      	ldr	r3, [pc, #300]	; (8002160 <SysTick_Handler+0xaf8>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	2b01      	cmp	r3, #1
 8002038:	dd0f      	ble.n	800205a <SysTick_Handler+0x9f2>
	{
		USART1_ticks=0;
 800203a:	4b49      	ldr	r3, [pc, #292]	; (8002160 <SysTick_Handler+0xaf8>)
 800203c:	2200      	movs	r2, #0
 800203e:	601a      	str	r2, [r3, #0]
		FLAG_USART1=1;
 8002040:	4b48      	ldr	r3, [pc, #288]	; (8002164 <SysTick_Handler+0xafc>)
 8002042:	2201      	movs	r2, #1
 8002044:	601a      	str	r2, [r3, #0]
		EN_USART1_TMR=0;
 8002046:	4b45      	ldr	r3, [pc, #276]	; (800215c <SysTick_Handler+0xaf4>)
 8002048:	2200      	movs	r2, #0
 800204a:	701a      	strb	r2, [r3, #0]
		items_rx=uart1pass;
 800204c:	4b46      	ldr	r3, [pc, #280]	; (8002168 <SysTick_Handler+0xb00>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a46      	ldr	r2, [pc, #280]	; (800216c <SysTick_Handler+0xb04>)
 8002052:	6013      	str	r3, [r2, #0]
		uart1pass=0;
 8002054:	4b44      	ldr	r3, [pc, #272]	; (8002168 <SysTick_Handler+0xb00>)
 8002056:	2200      	movs	r2, #0
 8002058:	601a      	str	r2, [r3, #0]
	}

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800205a:	f000 fe51 	bl	8002d00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
	if(wf._estado_conexion==4)//if((wf._estado_conexion!=1)&&(wf._estado_conexion!=2)&&(resultado!=20)&&(resultado!=24)) //Solo cuento cuando no estahaciendo otra cosa
 800205e:	4b44      	ldr	r3, [pc, #272]	; (8002170 <SysTick_Handler+0xb08>)
 8002060:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002064:	2b04      	cmp	r3, #4
 8002066:	d105      	bne.n	8002074 <SysTick_Handler+0xa0c>
	{
		ticks++;
 8002068:	4b42      	ldr	r3, [pc, #264]	; (8002174 <SysTick_Handler+0xb0c>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	3301      	adds	r3, #1
 800206e:	4a41      	ldr	r2, [pc, #260]	; (8002174 <SysTick_Handler+0xb0c>)
 8002070:	6013      	str	r3, [r2, #0]
 8002072:	e002      	b.n	800207a <SysTick_Handler+0xa12>
	}
	else
	{
		ticks=0;
 8002074:	4b3f      	ldr	r3, [pc, #252]	; (8002174 <SysTick_Handler+0xb0c>)
 8002076:	2200      	movs	r2, #0
 8002078:	601a      	str	r2, [r3, #0]
	}

if(wf._ejecucion==1)
 800207a:	4b3d      	ldr	r3, [pc, #244]	; (8002170 <SysTick_Handler+0xb08>)
 800207c:	f8d3 3ab4 	ldr.w	r3, [r3, #2740]	; 0xab4
 8002080:	2b01      	cmp	r3, #1
 8002082:	d158      	bne.n	8002136 <SysTick_Handler+0xace>
	{
		if (FLAG_TIMEOUT!=1)
 8002084:	4b3c      	ldr	r3, [pc, #240]	; (8002178 <SysTick_Handler+0xb10>)
 8002086:	781b      	ldrb	r3, [r3, #0]
 8002088:	2b01      	cmp	r3, #1
 800208a:	d017      	beq.n	80020bc <SysTick_Handler+0xa54>
		{
			if(wf._instruccion!=2) wf._ticks++;//-----------------------Solo cuento una vez reconcido el timeout, cuando entro al timeout no cuento
 800208c:	4b38      	ldr	r3, [pc, #224]	; (8002170 <SysTick_Handler+0xb08>)
 800208e:	f8d3 3ab0 	ldr.w	r3, [r3, #2736]	; 0xab0
 8002092:	2b02      	cmp	r3, #2
 8002094:	d006      	beq.n	80020a4 <SysTick_Handler+0xa3c>
 8002096:	4b36      	ldr	r3, [pc, #216]	; (8002170 <SysTick_Handler+0xb08>)
 8002098:	f8d3 3cb8 	ldr.w	r3, [r3, #3256]	; 0xcb8
 800209c:	3301      	adds	r3, #1
 800209e:	4a34      	ldr	r2, [pc, #208]	; (8002170 <SysTick_Handler+0xb08>)
 80020a0:	f8c2 3cb8 	str.w	r3, [r2, #3256]	; 0xcb8
			if(wf._instruccion==2) wf._ticks2++;
 80020a4:	4b32      	ldr	r3, [pc, #200]	; (8002170 <SysTick_Handler+0xb08>)
 80020a6:	f8d3 3ab0 	ldr.w	r3, [r3, #2736]	; 0xab0
 80020aa:	2b02      	cmp	r3, #2
 80020ac:	d106      	bne.n	80020bc <SysTick_Handler+0xa54>
 80020ae:	4b30      	ldr	r3, [pc, #192]	; (8002170 <SysTick_Handler+0xb08>)
 80020b0:	f8d3 3cbc 	ldr.w	r3, [r3, #3260]	; 0xcbc
 80020b4:	3301      	adds	r3, #1
 80020b6:	4a2e      	ldr	r2, [pc, #184]	; (8002170 <SysTick_Handler+0xb08>)
 80020b8:	f8c2 3cbc 	str.w	r3, [r2, #3260]	; 0xcbc
		}


		if ((wf._instruccion!=2)&&(wf._ticks > 5500)) //if (wf._ticks > 5000)
 80020bc:	4b2c      	ldr	r3, [pc, #176]	; (8002170 <SysTick_Handler+0xb08>)
 80020be:	f8d3 3ab0 	ldr.w	r3, [r3, #2736]	; 0xab0
 80020c2:	2b02      	cmp	r3, #2
 80020c4:	d018      	beq.n	80020f8 <SysTick_Handler+0xa90>
 80020c6:	4b2a      	ldr	r3, [pc, #168]	; (8002170 <SysTick_Handler+0xb08>)
 80020c8:	f8d3 3cb8 	ldr.w	r3, [r3, #3256]	; 0xcb8
 80020cc:	f241 527c 	movw	r2, #5500	; 0x157c
 80020d0:	4293      	cmp	r3, r2
 80020d2:	dd11      	ble.n	80020f8 <SysTick_Handler+0xa90>
		{
			FLAG_TIMEOUT=1;
 80020d4:	4b28      	ldr	r3, [pc, #160]	; (8002178 <SysTick_Handler+0xb10>)
 80020d6:	2201      	movs	r2, #1
 80020d8:	701a      	strb	r2, [r3, #0]
			if(huart1.Instance->CR1 == 0x200C)  //--------------------Evito error UART colgado
 80020da:	4b28      	ldr	r3, [pc, #160]	; (800217c <SysTick_Handler+0xb14>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	68db      	ldr	r3, [r3, #12]
 80020e0:	f242 020c 	movw	r2, #8204	; 0x200c
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d107      	bne.n	80020f8 <SysTick_Handler+0xa90>
			{
				HAL_UART_Receive_IT(&huart1,(uint8_t *)UART_RX_byte,1);
 80020e8:	2201      	movs	r2, #1
 80020ea:	4925      	ldr	r1, [pc, #148]	; (8002180 <SysTick_Handler+0xb18>)
 80020ec:	4823      	ldr	r0, [pc, #140]	; (800217c <SysTick_Handler+0xb14>)
 80020ee:	f003 fbb2 	bl	8005856 <HAL_UART_Receive_IT>
				EN_UART1_TMR=0; //OBS-VER Para que me vuelva a habilitar el timer
 80020f2:	4b24      	ldr	r3, [pc, #144]	; (8002184 <SysTick_Handler+0xb1c>)
 80020f4:	2200      	movs	r2, #0
 80020f6:	701a      	strb	r2, [r3, #0]
			}
			//wf._ticks=0;
		}
		if ((wf._instruccion==2)&&(wf._ticks2 > 20500)) //if (wf._ticks > 5000)
 80020f8:	4b1d      	ldr	r3, [pc, #116]	; (8002170 <SysTick_Handler+0xb08>)
 80020fa:	f8d3 3ab0 	ldr.w	r3, [r3, #2736]	; 0xab0
 80020fe:	2b02      	cmp	r3, #2
 8002100:	d11d      	bne.n	800213e <SysTick_Handler+0xad6>
 8002102:	4b1b      	ldr	r3, [pc, #108]	; (8002170 <SysTick_Handler+0xb08>)
 8002104:	f8d3 3cbc 	ldr.w	r3, [r3, #3260]	; 0xcbc
 8002108:	f245 0214 	movw	r2, #20500	; 0x5014
 800210c:	4293      	cmp	r3, r2
 800210e:	dd16      	ble.n	800213e <SysTick_Handler+0xad6>
		{
			FLAG_TIMEOUT=1;
 8002110:	4b19      	ldr	r3, [pc, #100]	; (8002178 <SysTick_Handler+0xb10>)
 8002112:	2201      	movs	r2, #1
 8002114:	701a      	strb	r2, [r3, #0]
			if(huart1.Instance->CR1 == 0x200C)  //--------------------Evito error UART colgado
 8002116:	4b19      	ldr	r3, [pc, #100]	; (800217c <SysTick_Handler+0xb14>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	68db      	ldr	r3, [r3, #12]
 800211c:	f242 020c 	movw	r2, #8204	; 0x200c
 8002120:	4293      	cmp	r3, r2
 8002122:	d10c      	bne.n	800213e <SysTick_Handler+0xad6>
			{
				HAL_UART_Receive_IT(&huart1,(uint8_t *)UART_RX_byte,1);
 8002124:	2201      	movs	r2, #1
 8002126:	4916      	ldr	r1, [pc, #88]	; (8002180 <SysTick_Handler+0xb18>)
 8002128:	4814      	ldr	r0, [pc, #80]	; (800217c <SysTick_Handler+0xb14>)
 800212a:	f003 fb94 	bl	8005856 <HAL_UART_Receive_IT>
				EN_UART1_TMR=0; //OBS-VER Para que me vuelva a habilitar el timer
 800212e:	4b15      	ldr	r3, [pc, #84]	; (8002184 <SysTick_Handler+0xb1c>)
 8002130:	2200      	movs	r2, #0
 8002132:	701a      	strb	r2, [r3, #0]
	else
	{
		wf._ticks=0;
	}
  /* USER CODE END SysTick_IRQn 1 */
}
 8002134:	e003      	b.n	800213e <SysTick_Handler+0xad6>
		wf._ticks=0;
 8002136:	4b0e      	ldr	r3, [pc, #56]	; (8002170 <SysTick_Handler+0xb08>)
 8002138:	2200      	movs	r2, #0
 800213a:	f8c3 2cb8 	str.w	r2, [r3, #3256]	; 0xcb8
}
 800213e:	bf00      	nop
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}
 8002144:	20002958 	.word	0x20002958
 8002148:	08010a88 	.word	0x08010a88
 800214c:	20002960 	.word	0x20002960
 8002150:	08010a9c 	.word	0x08010a9c
 8002154:	08010ab0 	.word	0x08010ab0
 8002158:	2000034c 	.word	0x2000034c
 800215c:	20003a16 	.word	0x20003a16
 8002160:	20004054 	.word	0x20004054
 8002164:	20004058 	.word	0x20004058
 8002168:	20004050 	.word	0x20004050
 800216c:	2000405c 	.word	0x2000405c
 8002170:	20000b58 	.word	0x20000b58
 8002174:	20004048 	.word	0x20004048
 8002178:	20003a17 	.word	0x20003a17
 800217c:	2000027c 	.word	0x2000027c
 8002180:	20004028 	.word	0x20004028
 8002184:	20003a14 	.word	0x20003a14

08002188 <HAL_UART_ErrorCallback>:
void HAL_UART_ErrorCallback(UART_HandleTypeDef *ERRUART)

{
 8002188:	b580      	push	{r7, lr}
 800218a:	b086      	sub	sp, #24
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
	if(ERRUART->Instance==USART1)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a22      	ldr	r2, [pc, #136]	; (8002220 <HAL_UART_ErrorCallback+0x98>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d11c      	bne.n	80021d4 <HAL_UART_ErrorCallback+0x4c>
	{
		 volatile int aore=0;
 800219a:	2300      	movs	r3, #0
 800219c:	617b      	str	r3, [r7, #20]
		 volatile int bore=0;
 800219e:	2300      	movs	r3, #0
 80021a0:	613b      	str	r3, [r7, #16]

		// if ( UART_FLAG_ORE == HAL_UART_GetError(huart1))
		//{
		//Al leer los registros de esta forma SR y luego DR se resetean los errores de Framing Noise y Overrun FE NE ORE
		//}
			 wf._debug_count9++;
 80021a2:	4b20      	ldr	r3, [pc, #128]	; (8002224 <HAL_UART_ErrorCallback+0x9c>)
 80021a4:	f8d3 3d28 	ldr.w	r3, [r3, #3368]	; 0xd28
 80021a8:	3301      	adds	r3, #1
 80021aa:	4a1e      	ldr	r2, [pc, #120]	; (8002224 <HAL_UART_ErrorCallback+0x9c>)
 80021ac:	f8c2 3d28 	str.w	r3, [r2, #3368]	; 0xd28
			aore=ERRUART->Instance->SR;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	617b      	str	r3, [r7, #20]
			bore=ERRUART->Instance->DR;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	613b      	str	r3, [r7, #16]


		//HAL_UART_Transmit_IT(&huart5,"U4",strlen("U4"));
		 HAL_UART_DeInit(ERRUART);
 80021c0:	6878      	ldr	r0, [r7, #4]
 80021c2:	f003 fa42 	bl	800564a <HAL_UART_DeInit>
		 MX_USART1_UART_Init();
 80021c6:	f7ff f923 	bl	8001410 <MX_USART1_UART_Init>
		 HAL_UART_Receive_IT(ERRUART,(uint8_t *)UART_RX_byte,1);
 80021ca:	2201      	movs	r2, #1
 80021cc:	4916      	ldr	r1, [pc, #88]	; (8002228 <HAL_UART_ErrorCallback+0xa0>)
 80021ce:	6878      	ldr	r0, [r7, #4]
 80021d0:	f003 fb41 	bl	8005856 <HAL_UART_Receive_IT>
	}
	if(ERRUART->Instance==USART2)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a14      	ldr	r2, [pc, #80]	; (800222c <HAL_UART_ErrorCallback+0xa4>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d11c      	bne.n	8002218 <HAL_UART_ErrorCallback+0x90>
	{
		 volatile int aore=0;
 80021de:	2300      	movs	r3, #0
 80021e0:	60fb      	str	r3, [r7, #12]
		 volatile int bore=0;
 80021e2:	2300      	movs	r3, #0
 80021e4:	60bb      	str	r3, [r7, #8]

		// if ( UART_FLAG_ORE == HAL_UART_GetError(huart1))
		//{
		//Al leer los registros de esta forma SR y luego DR se resetean los errores de Framing Noise y Overrun FE NE ORE
		//}
			 wf._debug_count9++;
 80021e6:	4b0f      	ldr	r3, [pc, #60]	; (8002224 <HAL_UART_ErrorCallback+0x9c>)
 80021e8:	f8d3 3d28 	ldr.w	r3, [r3, #3368]	; 0xd28
 80021ec:	3301      	adds	r3, #1
 80021ee:	4a0d      	ldr	r2, [pc, #52]	; (8002224 <HAL_UART_ErrorCallback+0x9c>)
 80021f0:	f8c2 3d28 	str.w	r3, [r2, #3368]	; 0xd28
			aore=ERRUART->Instance->SR;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	60fb      	str	r3, [r7, #12]
			bore=ERRUART->Instance->DR;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	60bb      	str	r3, [r7, #8]


		//HAL_UART_Transmit_IT(&huart5,"U4",strlen("U4"));
		 HAL_UART_DeInit(ERRUART);
 8002204:	6878      	ldr	r0, [r7, #4]
 8002206:	f003 fa20 	bl	800564a <HAL_UART_DeInit>
		 MX_USART2_UART_Init();
 800220a:	f7ff f92b 	bl	8001464 <MX_USART2_UART_Init>
		 HAL_UART_Receive_IT(ERRUART,(uint8_t *)UART_RX_byte,1);
 800220e:	2201      	movs	r2, #1
 8002210:	4905      	ldr	r1, [pc, #20]	; (8002228 <HAL_UART_ErrorCallback+0xa0>)
 8002212:	6878      	ldr	r0, [r7, #4]
 8002214:	f003 fb1f 	bl	8005856 <HAL_UART_Receive_IT>
	}
}
 8002218:	bf00      	nop
 800221a:	3718      	adds	r7, #24
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}
 8002220:	40011000 	.word	0x40011000
 8002224:	20000b58 	.word	0x20000b58
 8002228:	20004028 	.word	0x20004028
 800222c:	40004400 	.word	0x40004400

08002230 <HAL_UART_RxCpltCallback>:
		wf._debug_count10++;

}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *INTSERIE)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b082      	sub	sp, #8
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]

// WiFi	USART 1 TIMER2
	if(INTSERIE->Instance==USART1)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a2c      	ldr	r2, [pc, #176]	; (80022f0 <HAL_UART_RxCpltCallback+0xc0>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d123      	bne.n	800228a <HAL_UART_RxCpltCallback+0x5a>
		 {
			UART_RX_vect[UART_RX_pos]=UART_RX_byte[0];
 8002242:	4b2c      	ldr	r3, [pc, #176]	; (80022f4 <HAL_UART_RxCpltCallback+0xc4>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a2c      	ldr	r2, [pc, #176]	; (80022f8 <HAL_UART_RxCpltCallback+0xc8>)
 8002248:	7811      	ldrb	r1, [r2, #0]
 800224a:	4a2c      	ldr	r2, [pc, #176]	; (80022fc <HAL_UART_RxCpltCallback+0xcc>)
 800224c:	54d1      	strb	r1, [r2, r3]
			UART_RX_pos++;
 800224e:	4b29      	ldr	r3, [pc, #164]	; (80022f4 <HAL_UART_RxCpltCallback+0xc4>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	3301      	adds	r3, #1
 8002254:	4a27      	ldr	r2, [pc, #156]	; (80022f4 <HAL_UART_RxCpltCallback+0xc4>)
 8002256:	6013      	str	r3, [r2, #0]
			if(UART_RX_pos>=512) UART_RX_pos=512;
 8002258:	4b26      	ldr	r3, [pc, #152]	; (80022f4 <HAL_UART_RxCpltCallback+0xc4>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002260:	db03      	blt.n	800226a <HAL_UART_RxCpltCallback+0x3a>
 8002262:	4b24      	ldr	r3, [pc, #144]	; (80022f4 <HAL_UART_RxCpltCallback+0xc4>)
 8002264:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002268:	601a      	str	r2, [r3, #0]
			HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_1);//HAL_TIM_Base_Start_IT(&htim7);	//Habilito el timer
 800226a:	2100      	movs	r1, #0
 800226c:	4824      	ldr	r0, [pc, #144]	; (8002300 <HAL_UART_RxCpltCallback+0xd0>)
 800226e:	f002 f9f3 	bl	8004658 <HAL_TIM_OC_Start_IT>
			TIM2->CNT=1;
 8002272:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002276:	2201      	movs	r2, #1
 8002278:	625a      	str	r2, [r3, #36]	; 0x24
			EN_UART1_TMR=1;	//Habilito Timeout de software
 800227a:	4b22      	ldr	r3, [pc, #136]	; (8002304 <HAL_UART_RxCpltCallback+0xd4>)
 800227c:	2201      	movs	r2, #1
 800227e:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_IT(INTSERIE,(uint8_t *)UART_RX_byte,1);
 8002280:	2201      	movs	r2, #1
 8002282:	491d      	ldr	r1, [pc, #116]	; (80022f8 <HAL_UART_RxCpltCallback+0xc8>)
 8002284:	6878      	ldr	r0, [r7, #4]
 8002286:	f003 fae6 	bl	8005856 <HAL_UART_Receive_IT>
		 }
// LoRa USART2 TIMER3
	if(INTSERIE->Instance==USART2)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a1e      	ldr	r2, [pc, #120]	; (8002308 <HAL_UART_RxCpltCallback+0xd8>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d128      	bne.n	80022e6 <HAL_UART_RxCpltCallback+0xb6>
		 {
			UART2_RX_vect[UART2_RX_pos]=UART2_RX_byte[0];
 8002294:	4b1d      	ldr	r3, [pc, #116]	; (800230c <HAL_UART_RxCpltCallback+0xdc>)
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	4b1d      	ldr	r3, [pc, #116]	; (8002310 <HAL_UART_RxCpltCallback+0xe0>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	b2d1      	uxtb	r1, r2
 800229e:	4a1d      	ldr	r2, [pc, #116]	; (8002314 <HAL_UART_RxCpltCallback+0xe4>)
 80022a0:	54d1      	strb	r1, [r2, r3]
			UART2_RX_pos++;
 80022a2:	4b1b      	ldr	r3, [pc, #108]	; (8002310 <HAL_UART_RxCpltCallback+0xe0>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	3301      	adds	r3, #1
 80022a8:	4a19      	ldr	r2, [pc, #100]	; (8002310 <HAL_UART_RxCpltCallback+0xe0>)
 80022aa:	6013      	str	r3, [r2, #0]
			if(UART2_RX_pos>=512) UART2_RX_pos=512;
 80022ac:	4b18      	ldr	r3, [pc, #96]	; (8002310 <HAL_UART_RxCpltCallback+0xe0>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022b4:	db03      	blt.n	80022be <HAL_UART_RxCpltCallback+0x8e>
 80022b6:	4b16      	ldr	r3, [pc, #88]	; (8002310 <HAL_UART_RxCpltCallback+0xe0>)
 80022b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80022bc:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 1);
 80022be:	2201      	movs	r2, #1
 80022c0:	2102      	movs	r1, #2
 80022c2:	4815      	ldr	r0, [pc, #84]	; (8002318 <HAL_UART_RxCpltCallback+0xe8>)
 80022c4:	f001 f99e 	bl	8003604 <HAL_GPIO_WritePin>
			HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);//HAL_TIM_Base_Start_IT(&htim7);	//Habilito el timer
 80022c8:	2100      	movs	r1, #0
 80022ca:	4814      	ldr	r0, [pc, #80]	; (800231c <HAL_UART_RxCpltCallback+0xec>)
 80022cc:	f002 f9c4 	bl	8004658 <HAL_TIM_OC_Start_IT>
			TIM3->CNT=1;
 80022d0:	4b13      	ldr	r3, [pc, #76]	; (8002320 <HAL_UART_RxCpltCallback+0xf0>)
 80022d2:	2201      	movs	r2, #1
 80022d4:	625a      	str	r2, [r3, #36]	; 0x24
			EN_UART2_TMR=1;	//Habilito Timeout de software
 80022d6:	4b13      	ldr	r3, [pc, #76]	; (8002324 <HAL_UART_RxCpltCallback+0xf4>)
 80022d8:	2201      	movs	r2, #1
 80022da:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_IT(INTSERIE,(uint8_t *)UART2_RX_byte,1);
 80022dc:	2201      	movs	r2, #1
 80022de:	490b      	ldr	r1, [pc, #44]	; (800230c <HAL_UART_RxCpltCallback+0xdc>)
 80022e0:	6878      	ldr	r0, [r7, #4]
 80022e2:	f003 fab8 	bl	8005856 <HAL_UART_Receive_IT>
		 }
 }
 80022e6:	bf00      	nop
 80022e8:	3708      	adds	r7, #8
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	40011000 	.word	0x40011000
 80022f4:	20004060 	.word	0x20004060
 80022f8:	20004028 	.word	0x20004028
 80022fc:	20003a24 	.word	0x20003a24
 8002300:	200001ec 	.word	0x200001ec
 8002304:	20003a14 	.word	0x20003a14
 8002308:	40004400 	.word	0x40004400
 800230c:	2000402c 	.word	0x2000402c
 8002310:	20004064 	.word	0x20004064
 8002314:	20003c24 	.word	0x20003c24
 8002318:	40020000 	.word	0x40020000
 800231c:	20000234 	.word	0x20000234
 8002320:	40000400 	.word	0x40000400
 8002324:	20003a15 	.word	0x20003a15

08002328 <HAL_TIM_OC_DelayElapsedCallback>:

void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *TIMER)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b084      	sub	sp, #16
 800232c:	af02      	add	r7, sp, #8
 800232e:	6078      	str	r0, [r7, #4]
// WiFi	USART 1 TIMER2
		//void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim2)
		if(TIMER->Instance==TIM2)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002338:	d12d      	bne.n	8002396 <HAL_TIM_OC_DelayElapsedCallback+0x6e>
			{
				 HAL_TIM_OC_Stop_IT(TIMER, TIM_CHANNEL_1); //Paro el timer
 800233a:	2100      	movs	r1, #0
 800233c:	6878      	ldr	r0, [r7, #4]
 800233e:	f002 fa89 	bl	8004854 <HAL_TIM_OC_Stop_IT>
				 FLAG_UART1=1;
 8002342:	4b39      	ldr	r3, [pc, #228]	; (8002428 <HAL_TIM_OC_DelayElapsedCallback+0x100>)
 8002344:	2201      	movs	r2, #1
 8002346:	701a      	strb	r2, [r3, #0]
				 EN_UART1_TMR=0;
 8002348:	4b38      	ldr	r3, [pc, #224]	; (800242c <HAL_TIM_OC_DelayElapsedCallback+0x104>)
 800234a:	2200      	movs	r2, #0
 800234c:	701a      	strb	r2, [r3, #0]
				 UART_RX_items=UART_RX_pos;
 800234e:	4b38      	ldr	r3, [pc, #224]	; (8002430 <HAL_TIM_OC_DelayElapsedCallback+0x108>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a38      	ldr	r2, [pc, #224]	; (8002434 <HAL_TIM_OC_DelayElapsedCallback+0x10c>)
 8002354:	6013      	str	r3, [r2, #0]
				 UART_RX_pos=0;
 8002356:	4b36      	ldr	r3, [pc, #216]	; (8002430 <HAL_TIM_OC_DelayElapsedCallback+0x108>)
 8002358:	2200      	movs	r2, #0
 800235a:	601a      	str	r2, [r3, #0]
				 UART_RX_vect[512]='\0'; //Finalizo el vector a la fuerza ya que recibo hasta 124
 800235c:	4b36      	ldr	r3, [pc, #216]	; (8002438 <HAL_TIM_OC_DelayElapsedCallback+0x110>)
 800235e:	2200      	movs	r2, #0
 8002360:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
				 CopiaVector(UART_RX_vect_hld,UART_RX_vect,UART_RX_items,1,CMP_VECT);
 8002364:	4b33      	ldr	r3, [pc, #204]	; (8002434 <HAL_TIM_OC_DelayElapsedCallback+0x10c>)
 8002366:	681a      	ldr	r2, [r3, #0]
 8002368:	4b34      	ldr	r3, [pc, #208]	; (800243c <HAL_TIM_OC_DelayElapsedCallback+0x114>)
 800236a:	9300      	str	r3, [sp, #0]
 800236c:	2301      	movs	r3, #1
 800236e:	4932      	ldr	r1, [pc, #200]	; (8002438 <HAL_TIM_OC_DelayElapsedCallback+0x110>)
 8002370:	4833      	ldr	r0, [pc, #204]	; (8002440 <HAL_TIM_OC_DelayElapsedCallback+0x118>)
 8002372:	f00c ff69 	bl	800f248 <CopiaVector>
				 HAL_UART_Receive_IT(&huart1,(uint8_t *)UART_RX_byte,1); //Habilito le recepcón de puerto serie al terminar
 8002376:	2201      	movs	r2, #1
 8002378:	4932      	ldr	r1, [pc, #200]	; (8002444 <HAL_TIM_OC_DelayElapsedCallback+0x11c>)
 800237a:	4833      	ldr	r0, [pc, #204]	; (8002448 <HAL_TIM_OC_DelayElapsedCallback+0x120>)
 800237c:	f003 fa6b 	bl	8005856 <HAL_UART_Receive_IT>
				 if (wf._DBG_EN==1)
 8002380:	4b32      	ldr	r3, [pc, #200]	; (800244c <HAL_TIM_OC_DelayElapsedCallback+0x124>)
 8002382:	f8d3 3d5c 	ldr.w	r3, [r3, #3420]	; 0xd5c
 8002386:	2b01      	cmp	r3, #1
 8002388:	d105      	bne.n	8002396 <HAL_TIM_OC_DelayElapsedCallback+0x6e>
				 {
					 ITM0_Write((uint8_t *)UART_RX_vect_hld,UART_RX_items);
 800238a:	4b2a      	ldr	r3, [pc, #168]	; (8002434 <HAL_TIM_OC_DelayElapsedCallback+0x10c>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4619      	mov	r1, r3
 8002390:	482b      	ldr	r0, [pc, #172]	; (8002440 <HAL_TIM_OC_DelayElapsedCallback+0x118>)
 8002392:	f7ff f94d 	bl	8001630 <ITM0_Write>
				 }
		}
		// LoRa USART2 TIMER3
		//void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim2)
		if(TIMER->Instance==TIM3)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4a2d      	ldr	r2, [pc, #180]	; (8002450 <HAL_TIM_OC_DelayElapsedCallback+0x128>)
 800239c:	4293      	cmp	r3, r2
 800239e:	d13f      	bne.n	8002420 <HAL_TIM_OC_DelayElapsedCallback+0xf8>
			{
				 HAL_TIM_OC_Stop_IT(TIMER, TIM_CHANNEL_1); //Paro el timer
 80023a0:	2100      	movs	r1, #0
 80023a2:	6878      	ldr	r0, [r7, #4]
 80023a4:	f002 fa56 	bl	8004854 <HAL_TIM_OC_Stop_IT>
				 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 0);
 80023a8:	2200      	movs	r2, #0
 80023aa:	2102      	movs	r1, #2
 80023ac:	4829      	ldr	r0, [pc, #164]	; (8002454 <HAL_TIM_OC_DelayElapsedCallback+0x12c>)
 80023ae:	f001 f929 	bl	8003604 <HAL_GPIO_WritePin>
				 FLAG_UART2=1;
 80023b2:	4b29      	ldr	r3, [pc, #164]	; (8002458 <HAL_TIM_OC_DelayElapsedCallback+0x130>)
 80023b4:	2201      	movs	r2, #1
 80023b6:	701a      	strb	r2, [r3, #0]
				 EN_UART2_TMR=0;
 80023b8:	4b28      	ldr	r3, [pc, #160]	; (800245c <HAL_TIM_OC_DelayElapsedCallback+0x134>)
 80023ba:	2200      	movs	r2, #0
 80023bc:	701a      	strb	r2, [r3, #0]
				 UART2_RX_items=UART2_RX_pos;
 80023be:	4b28      	ldr	r3, [pc, #160]	; (8002460 <HAL_TIM_OC_DelayElapsedCallback+0x138>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a28      	ldr	r2, [pc, #160]	; (8002464 <HAL_TIM_OC_DelayElapsedCallback+0x13c>)
 80023c4:	6013      	str	r3, [r2, #0]
				 UART2_RX_pos=0;
 80023c6:	4b26      	ldr	r3, [pc, #152]	; (8002460 <HAL_TIM_OC_DelayElapsedCallback+0x138>)
 80023c8:	2200      	movs	r2, #0
 80023ca:	601a      	str	r2, [r3, #0]
				 //UART2_RX_vect[UART2_RX_items]='\0'; //Finalizo el vector a la fuerza ya que recibo hasta 124
				 UART2_RX_vect[512]='\0'; //Finalizo el vector a la fuerza ya que recibo hasta 124
 80023cc:	4b26      	ldr	r3, [pc, #152]	; (8002468 <HAL_TIM_OC_DelayElapsedCallback+0x140>)
 80023ce:	2200      	movs	r2, #0
 80023d0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
				 CopiaVector(lr.rxbuff,UART2_RX_vect,UART2_RX_items,1,CMP_VECT);
 80023d4:	4b23      	ldr	r3, [pc, #140]	; (8002464 <HAL_TIM_OC_DelayElapsedCallback+0x13c>)
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	4b18      	ldr	r3, [pc, #96]	; (800243c <HAL_TIM_OC_DelayElapsedCallback+0x114>)
 80023da:	9300      	str	r3, [sp, #0]
 80023dc:	2301      	movs	r3, #1
 80023de:	4922      	ldr	r1, [pc, #136]	; (8002468 <HAL_TIM_OC_DelayElapsedCallback+0x140>)
 80023e0:	4822      	ldr	r0, [pc, #136]	; (800246c <HAL_TIM_OC_DelayElapsedCallback+0x144>)
 80023e2:	f00c ff31 	bl	800f248 <CopiaVector>
				 lr.rxitems=UART2_RX_items;
 80023e6:	4b1f      	ldr	r3, [pc, #124]	; (8002464 <HAL_TIM_OC_DelayElapsedCallback+0x13c>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a21      	ldr	r2, [pc, #132]	; (8002470 <HAL_TIM_OC_DelayElapsedCallback+0x148>)
 80023ec:	f8c2 37dc 	str.w	r3, [r2, #2012]	; 0x7dc
				 HAL_UART_Receive_IT(&huart2,(uint8_t *)UART2_RX_byte,1); //Habilito le recepcón de puerto serie al terminar
 80023f0:	2201      	movs	r2, #1
 80023f2:	4920      	ldr	r1, [pc, #128]	; (8002474 <HAL_TIM_OC_DelayElapsedCallback+0x14c>)
 80023f4:	4820      	ldr	r0, [pc, #128]	; (8002478 <HAL_TIM_OC_DelayElapsedCallback+0x150>)
 80023f6:	f003 fa2e 	bl	8005856 <HAL_UART_Receive_IT>
				// ITM0_Write("\r\nRecepcion LoRa \r\n",strlen("Recepcion LoRa \r\n"));
				 if (wf._DBG_EN==1)
 80023fa:	4b14      	ldr	r3, [pc, #80]	; (800244c <HAL_TIM_OC_DelayElapsedCallback+0x124>)
 80023fc:	f8d3 3d5c 	ldr.w	r3, [r3, #3420]	; 0xd5c
 8002400:	2b01      	cmp	r3, #1
 8002402:	d10d      	bne.n	8002420 <HAL_TIM_OC_DelayElapsedCallback+0xf8>
				 {
					 ITM0_Write("\r\nData LoRa recibida = ",strlen("\r\nData LoRa recibida = "));
 8002404:	2117      	movs	r1, #23
 8002406:	481d      	ldr	r0, [pc, #116]	; (800247c <HAL_TIM_OC_DelayElapsedCallback+0x154>)
 8002408:	f7ff f912 	bl	8001630 <ITM0_Write>
					 ITM0_Write((uint8_t *)UART2_RX_vect,UART2_RX_items);
 800240c:	4b15      	ldr	r3, [pc, #84]	; (8002464 <HAL_TIM_OC_DelayElapsedCallback+0x13c>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4619      	mov	r1, r3
 8002412:	4815      	ldr	r0, [pc, #84]	; (8002468 <HAL_TIM_OC_DelayElapsedCallback+0x140>)
 8002414:	f7ff f90c 	bl	8001630 <ITM0_Write>
					 ITM0_Write("\r\n",strlen("\r\n"));
 8002418:	2102      	movs	r1, #2
 800241a:	4819      	ldr	r0, [pc, #100]	; (8002480 <HAL_TIM_OC_DelayElapsedCallback+0x158>)
 800241c:	f7ff f908 	bl	8001630 <ITM0_Write>
				 }
		}
}
 8002420:	bf00      	nop
 8002422:	3708      	adds	r7, #8
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}
 8002428:	20003a18 	.word	0x20003a18
 800242c:	20003a14 	.word	0x20003a14
 8002430:	20004060 	.word	0x20004060
 8002434:	20004034 	.word	0x20004034
 8002438:	20003a24 	.word	0x20003a24
 800243c:	20004024 	.word	0x20004024
 8002440:	20003e24 	.word	0x20003e24
 8002444:	20004028 	.word	0x20004028
 8002448:	2000027c 	.word	0x2000027c
 800244c:	20000b58 	.word	0x20000b58
 8002450:	40000400 	.word	0x40000400
 8002454:	40020000 	.word	0x40020000
 8002458:	20003a19 	.word	0x20003a19
 800245c:	20003a15 	.word	0x20003a15
 8002460:	20004064 	.word	0x20004064
 8002464:	20004038 	.word	0x20004038
 8002468:	20003c24 	.word	0x20003c24
 800246c:	200003a6 	.word	0x200003a6
 8002470:	20000350 	.word	0x20000350
 8002474:	2000402c 	.word	0x2000402c
 8002478:	200002c0 	.word	0x200002c0
 800247c:	08010ac4 	.word	0x08010ac4
 8002480:	08010adc 	.word	0x08010adc

08002484 <ESP8266_HW_Reset>:

void ESP8266_HW_Reset(void)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	af00      	add	r7, sp, #0
	  ESP_REinit=0;
 8002488:	4b0e      	ldr	r3, [pc, #56]	; (80024c4 <ESP8266_HW_Reset+0x40>)
 800248a:	2200      	movs	r2, #0
 800248c:	701a      	strb	r2, [r3, #0]
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 800248e:	2200      	movs	r2, #0
 8002490:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002494:	480c      	ldr	r0, [pc, #48]	; (80024c8 <ESP8266_HW_Reset+0x44>)
 8002496:	f001 f8b5 	bl	8003604 <HAL_GPIO_WritePin>
	  ITM0_Write("\r\n ESP HW Resetting\r\n",strlen("\r\n ESP HW Resetting\r\n"));
 800249a:	2115      	movs	r1, #21
 800249c:	480b      	ldr	r0, [pc, #44]	; (80024cc <ESP8266_HW_Reset+0x48>)
 800249e:	f7ff f8c7 	bl	8001630 <ITM0_Write>
	  HAL_Delay(2000);											//Tiempo de reset del módulo
 80024a2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80024a6:	f000 fc4b 	bl	8002d40 <HAL_Delay>
	  ITM0_Write("\r\n ESP ResetT\r\n",strlen("\r\n ESP ResetT\r\n"));
 80024aa:	210f      	movs	r1, #15
 80024ac:	4808      	ldr	r0, [pc, #32]	; (80024d0 <ESP8266_HW_Reset+0x4c>)
 80024ae:	f7ff f8bf 	bl	8001630 <ITM0_Write>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);		//Habilito módulo
 80024b2:	2201      	movs	r2, #1
 80024b4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80024b8:	4803      	ldr	r0, [pc, #12]	; (80024c8 <ESP8266_HW_Reset+0x44>)
 80024ba:	f001 f8a3 	bl	8003604 <HAL_GPIO_WritePin>
}
 80024be:	bf00      	nop
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	20003a11 	.word	0x20003a11
 80024c8:	40020000 	.word	0x40020000
 80024cc:	08010ae0 	.word	0x08010ae0
 80024d0:	08010af8 	.word	0x08010af8

080024d4 <ESP8266_HW_Init>:
uint8_t ESP8266_HW_Init(UART_HandleTypeDef *SerialPort) //Devuelve 1 si reinició OK, y 0 si no
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b088      	sub	sp, #32
 80024d8:	af06      	add	r7, sp, #24
 80024da:	6078      	str	r0, [r7, #4]
	  do{
		  HAL_UART_Transmit(SerialPort, "AT+RESTORE\r\n",strlen("AT+RESTORE\r\n"),100);
 80024dc:	2364      	movs	r3, #100	; 0x64
 80024de:	220c      	movs	r2, #12
 80024e0:	4945      	ldr	r1, [pc, #276]	; (80025f8 <ESP8266_HW_Init+0x124>)
 80024e2:	6878      	ldr	r0, [r7, #4]
 80024e4:	f003 f8e0 	bl	80056a8 <HAL_UART_Transmit>
		  HAL_Delay(500);
 80024e8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80024ec:	f000 fc28 	bl	8002d40 <HAL_Delay>

		  wf._n_fcomp=strlen("ready");
 80024f0:	4b42      	ldr	r3, [pc, #264]	; (80025fc <ESP8266_HW_Init+0x128>)
 80024f2:	2205      	movs	r2, #5
 80024f4:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
		  wf._n_orig=UART_RX_items;
 80024f8:	4b41      	ldr	r3, [pc, #260]	; (8002600 <ESP8266_HW_Init+0x12c>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a3f      	ldr	r2, [pc, #252]	; (80025fc <ESP8266_HW_Init+0x128>)
 80024fe:	f8c2 3ce4 	str.w	r3, [r2, #3300]	; 0xce4

		  while(FT_String_ND(UART_RX_vect_hld,&wf._n_orig,"ready",&wf._n_fcomp,wf._uartRCVD_tok,&wf._n_tok,&ntestc,&wf._id_conn,&wf._overflowVector,FIND)!=1)
 8002502:	e00e      	b.n	8002522 <ESP8266_HW_Init+0x4e>
		  {
			  	  wf._n_orig=UART_RX_items;
 8002504:	4b3e      	ldr	r3, [pc, #248]	; (8002600 <ESP8266_HW_Init+0x12c>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a3c      	ldr	r2, [pc, #240]	; (80025fc <ESP8266_HW_Init+0x128>)
 800250a:	f8c2 3ce4 	str.w	r3, [r2, #3300]	; 0xce4
			  	  if (ESP_ticks>=5000)
 800250e:	4b3d      	ldr	r3, [pc, #244]	; (8002604 <ESP8266_HW_Init+0x130>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f241 3287 	movw	r2, #4999	; 0x1387
 8002516:	4293      	cmp	r3, r2
 8002518:	dd03      	ble.n	8002522 <ESP8266_HW_Init+0x4e>
			  		 {
			  		 ESP_InitF=1;
 800251a:	4b3b      	ldr	r3, [pc, #236]	; (8002608 <ESP8266_HW_Init+0x134>)
 800251c:	2201      	movs	r2, #1
 800251e:	701a      	strb	r2, [r3, #0]
			  		 break;
 8002520:	e014      	b.n	800254c <ESP8266_HW_Init+0x78>
		  while(FT_String_ND(UART_RX_vect_hld,&wf._n_orig,"ready",&wf._n_fcomp,wf._uartRCVD_tok,&wf._n_tok,&ntestc,&wf._id_conn,&wf._overflowVector,FIND)!=1)
 8002522:	4b3a      	ldr	r3, [pc, #232]	; (800260c <ESP8266_HW_Init+0x138>)
 8002524:	2200      	movs	r2, #0
 8002526:	9205      	str	r2, [sp, #20]
 8002528:	9304      	str	r3, [sp, #16]
 800252a:	4b39      	ldr	r3, [pc, #228]	; (8002610 <ESP8266_HW_Init+0x13c>)
 800252c:	9303      	str	r3, [sp, #12]
 800252e:	4b39      	ldr	r3, [pc, #228]	; (8002614 <ESP8266_HW_Init+0x140>)
 8002530:	9302      	str	r3, [sp, #8]
 8002532:	4b39      	ldr	r3, [pc, #228]	; (8002618 <ESP8266_HW_Init+0x144>)
 8002534:	9301      	str	r3, [sp, #4]
 8002536:	4b39      	ldr	r3, [pc, #228]	; (800261c <ESP8266_HW_Init+0x148>)
 8002538:	9300      	str	r3, [sp, #0]
 800253a:	4b39      	ldr	r3, [pc, #228]	; (8002620 <ESP8266_HW_Init+0x14c>)
 800253c:	4a39      	ldr	r2, [pc, #228]	; (8002624 <ESP8266_HW_Init+0x150>)
 800253e:	493a      	ldr	r1, [pc, #232]	; (8002628 <ESP8266_HW_Init+0x154>)
 8002540:	483a      	ldr	r0, [pc, #232]	; (800262c <ESP8266_HW_Init+0x158>)
 8002542:	f00c fb05 	bl	800eb50 <FT_String_ND>
 8002546:	4603      	mov	r3, r0
 8002548:	2b01      	cmp	r3, #1
 800254a:	d1db      	bne.n	8002504 <ESP8266_HW_Init+0x30>
			  		 }
		  }

		  if(ESP_InitF==0)	//Si encontró la sentencia anterior analizo la siguiente
 800254c:	4b2e      	ldr	r3, [pc, #184]	; (8002608 <ESP8266_HW_Init+0x134>)
 800254e:	781b      	ldrb	r3, [r3, #0]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d12b      	bne.n	80025ac <ESP8266_HW_Init+0xd8>
		  {
			  wf._n_fcomp=strlen("ready");
 8002554:	4b29      	ldr	r3, [pc, #164]	; (80025fc <ESP8266_HW_Init+0x128>)
 8002556:	2205      	movs	r2, #5
 8002558:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
			  wf._n_orig=UART_RX_items;
 800255c:	4b28      	ldr	r3, [pc, #160]	; (8002600 <ESP8266_HW_Init+0x12c>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a26      	ldr	r2, [pc, #152]	; (80025fc <ESP8266_HW_Init+0x128>)
 8002562:	f8c2 3ce4 	str.w	r3, [r2, #3300]	; 0xce4
			  while(FT_String_ND(UART_RX_vect_hld,&wf._n_orig,"ready",&wf._n_fcomp,wf._uartRCVD_tok,&wf._n_tok,&ntestc,&wf._id_conn,&wf._overflowVector,FIND)!=1)
 8002566:	e00a      	b.n	800257e <ESP8266_HW_Init+0xaa>
			  {
				  wf._n_orig=UART_RX_items;
 8002568:	4b25      	ldr	r3, [pc, #148]	; (8002600 <ESP8266_HW_Init+0x12c>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a23      	ldr	r2, [pc, #140]	; (80025fc <ESP8266_HW_Init+0x128>)
 800256e:	f8c2 3ce4 	str.w	r3, [r2, #3300]	; 0xce4
				  if (ESP_ticks>=5000)
 8002572:	4b24      	ldr	r3, [pc, #144]	; (8002604 <ESP8266_HW_Init+0x130>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f241 3287 	movw	r2, #4999	; 0x1387
 800257a:	4293      	cmp	r3, r2
 800257c:	dc15      	bgt.n	80025aa <ESP8266_HW_Init+0xd6>
			  while(FT_String_ND(UART_RX_vect_hld,&wf._n_orig,"ready",&wf._n_fcomp,wf._uartRCVD_tok,&wf._n_tok,&ntestc,&wf._id_conn,&wf._overflowVector,FIND)!=1)
 800257e:	4b23      	ldr	r3, [pc, #140]	; (800260c <ESP8266_HW_Init+0x138>)
 8002580:	2200      	movs	r2, #0
 8002582:	9205      	str	r2, [sp, #20]
 8002584:	9304      	str	r3, [sp, #16]
 8002586:	4b22      	ldr	r3, [pc, #136]	; (8002610 <ESP8266_HW_Init+0x13c>)
 8002588:	9303      	str	r3, [sp, #12]
 800258a:	4b22      	ldr	r3, [pc, #136]	; (8002614 <ESP8266_HW_Init+0x140>)
 800258c:	9302      	str	r3, [sp, #8]
 800258e:	4b22      	ldr	r3, [pc, #136]	; (8002618 <ESP8266_HW_Init+0x144>)
 8002590:	9301      	str	r3, [sp, #4]
 8002592:	4b22      	ldr	r3, [pc, #136]	; (800261c <ESP8266_HW_Init+0x148>)
 8002594:	9300      	str	r3, [sp, #0]
 8002596:	4b22      	ldr	r3, [pc, #136]	; (8002620 <ESP8266_HW_Init+0x14c>)
 8002598:	4a22      	ldr	r2, [pc, #136]	; (8002624 <ESP8266_HW_Init+0x150>)
 800259a:	4923      	ldr	r1, [pc, #140]	; (8002628 <ESP8266_HW_Init+0x154>)
 800259c:	4823      	ldr	r0, [pc, #140]	; (800262c <ESP8266_HW_Init+0x158>)
 800259e:	f00c fad7 	bl	800eb50 <FT_String_ND>
 80025a2:	4603      	mov	r3, r0
 80025a4:	2b01      	cmp	r3, #1
 80025a6:	d1df      	bne.n	8002568 <ESP8266_HW_Init+0x94>
 80025a8:	e000      	b.n	80025ac <ESP8266_HW_Init+0xd8>
					 {
					 break;
 80025aa:	bf00      	nop
					 }
			  }
		  }

		  if (ESP_ticks<5000)
 80025ac:	4b15      	ldr	r3, [pc, #84]	; (8002604 <ESP8266_HW_Init+0x130>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f241 3287 	movw	r2, #4999	; 0x1387
 80025b4:	4293      	cmp	r3, r2
 80025b6:	dc06      	bgt.n	80025c6 <ESP8266_HW_Init+0xf2>
		  {
			  ESP_REinit=10;
 80025b8:	4b1d      	ldr	r3, [pc, #116]	; (8002630 <ESP8266_HW_Init+0x15c>)
 80025ba:	220a      	movs	r2, #10
 80025bc:	701a      	strb	r2, [r3, #0]
			  ESP_ticks=0;
 80025be:	4b11      	ldr	r3, [pc, #68]	; (8002604 <ESP8266_HW_Init+0x130>)
 80025c0:	2200      	movs	r2, #0
 80025c2:	601a      	str	r2, [r3, #0]
 80025c4:	e008      	b.n	80025d8 <ESP8266_HW_Init+0x104>
		  }
		  else
		  {
			  ESP_REinit++;
 80025c6:	4b1a      	ldr	r3, [pc, #104]	; (8002630 <ESP8266_HW_Init+0x15c>)
 80025c8:	781b      	ldrb	r3, [r3, #0]
 80025ca:	3301      	adds	r3, #1
 80025cc:	b2da      	uxtb	r2, r3
 80025ce:	4b18      	ldr	r3, [pc, #96]	; (8002630 <ESP8266_HW_Init+0x15c>)
 80025d0:	701a      	strb	r2, [r3, #0]
			  ESP_ticks=0;
 80025d2:	4b0c      	ldr	r3, [pc, #48]	; (8002604 <ESP8266_HW_Init+0x130>)
 80025d4:	2200      	movs	r2, #0
 80025d6:	601a      	str	r2, [r3, #0]
		  }

	  } while (ESP_REinit<=5);
 80025d8:	4b15      	ldr	r3, [pc, #84]	; (8002630 <ESP8266_HW_Init+0x15c>)
 80025da:	781b      	ldrb	r3, [r3, #0]
 80025dc:	2b05      	cmp	r3, #5
 80025de:	f67f af7d 	bls.w	80024dc <ESP8266_HW_Init+0x8>

	  if(ESP_REinit==10)
 80025e2:	4b13      	ldr	r3, [pc, #76]	; (8002630 <ESP8266_HW_Init+0x15c>)
 80025e4:	781b      	ldrb	r3, [r3, #0]
 80025e6:	2b0a      	cmp	r3, #10
 80025e8:	d101      	bne.n	80025ee <ESP8266_HW_Init+0x11a>
	  {
		  return(1);
 80025ea:	2301      	movs	r3, #1
 80025ec:	e000      	b.n	80025f0 <ESP8266_HW_Init+0x11c>
	  }
	  else
	  {
		  return(0);
 80025ee:	2300      	movs	r3, #0
	  }
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	3708      	adds	r7, #8
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}
 80025f8:	08010b08 	.word	0x08010b08
 80025fc:	20000b58 	.word	0x20000b58
 8002600:	20004034 	.word	0x20004034
 8002604:	2000403c 	.word	0x2000403c
 8002608:	20003a12 	.word	0x20003a12
 800260c:	200018ac 	.word	0x200018ac
 8002610:	200015f0 	.word	0x200015f0
 8002614:	2000404c 	.word	0x2000404c
 8002618:	20001844 	.word	0x20001844
 800261c:	200013f0 	.word	0x200013f0
 8002620:	20001850 	.word	0x20001850
 8002624:	08010b18 	.word	0x08010b18
 8002628:	2000183c 	.word	0x2000183c
 800262c:	20003e24 	.word	0x20003e24
 8002630:	20003a11 	.word	0x20003a11

08002634 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002634:	b480      	push	{r7}
 8002636:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002638:	b672      	cpsid	i
}
 800263a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800263c:	e7fe      	b.n	800263c <Error_Handler+0x8>
	...

08002640 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002640:	b480      	push	{r7}
 8002642:	b083      	sub	sp, #12
 8002644:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002646:	2300      	movs	r3, #0
 8002648:	607b      	str	r3, [r7, #4]
 800264a:	4b10      	ldr	r3, [pc, #64]	; (800268c <HAL_MspInit+0x4c>)
 800264c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800264e:	4a0f      	ldr	r2, [pc, #60]	; (800268c <HAL_MspInit+0x4c>)
 8002650:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002654:	6453      	str	r3, [r2, #68]	; 0x44
 8002656:	4b0d      	ldr	r3, [pc, #52]	; (800268c <HAL_MspInit+0x4c>)
 8002658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800265a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800265e:	607b      	str	r3, [r7, #4]
 8002660:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002662:	2300      	movs	r3, #0
 8002664:	603b      	str	r3, [r7, #0]
 8002666:	4b09      	ldr	r3, [pc, #36]	; (800268c <HAL_MspInit+0x4c>)
 8002668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266a:	4a08      	ldr	r2, [pc, #32]	; (800268c <HAL_MspInit+0x4c>)
 800266c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002670:	6413      	str	r3, [r2, #64]	; 0x40
 8002672:	4b06      	ldr	r3, [pc, #24]	; (800268c <HAL_MspInit+0x4c>)
 8002674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002676:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800267a:	603b      	str	r3, [r7, #0]
 800267c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800267e:	bf00      	nop
 8002680:	370c      	adds	r7, #12
 8002682:	46bd      	mov	sp, r7
 8002684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002688:	4770      	bx	lr
 800268a:	bf00      	nop
 800268c:	40023800 	.word	0x40023800

08002690 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b08a      	sub	sp, #40	; 0x28
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002698:	f107 0314 	add.w	r3, r7, #20
 800269c:	2200      	movs	r2, #0
 800269e:	601a      	str	r2, [r3, #0]
 80026a0:	605a      	str	r2, [r3, #4]
 80026a2:	609a      	str	r2, [r3, #8]
 80026a4:	60da      	str	r2, [r3, #12]
 80026a6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a19      	ldr	r2, [pc, #100]	; (8002714 <HAL_SPI_MspInit+0x84>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d12b      	bne.n	800270a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80026b2:	2300      	movs	r3, #0
 80026b4:	613b      	str	r3, [r7, #16]
 80026b6:	4b18      	ldr	r3, [pc, #96]	; (8002718 <HAL_SPI_MspInit+0x88>)
 80026b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ba:	4a17      	ldr	r2, [pc, #92]	; (8002718 <HAL_SPI_MspInit+0x88>)
 80026bc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80026c0:	6453      	str	r3, [r2, #68]	; 0x44
 80026c2:	4b15      	ldr	r3, [pc, #84]	; (8002718 <HAL_SPI_MspInit+0x88>)
 80026c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026ca:	613b      	str	r3, [r7, #16]
 80026cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026ce:	2300      	movs	r3, #0
 80026d0:	60fb      	str	r3, [r7, #12]
 80026d2:	4b11      	ldr	r3, [pc, #68]	; (8002718 <HAL_SPI_MspInit+0x88>)
 80026d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d6:	4a10      	ldr	r2, [pc, #64]	; (8002718 <HAL_SPI_MspInit+0x88>)
 80026d8:	f043 0301 	orr.w	r3, r3, #1
 80026dc:	6313      	str	r3, [r2, #48]	; 0x30
 80026de:	4b0e      	ldr	r3, [pc, #56]	; (8002718 <HAL_SPI_MspInit+0x88>)
 80026e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e2:	f003 0301 	and.w	r3, r3, #1
 80026e6:	60fb      	str	r3, [r7, #12]
 80026e8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80026ea:	23e0      	movs	r3, #224	; 0xe0
 80026ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026ee:	2302      	movs	r3, #2
 80026f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026f2:	2300      	movs	r3, #0
 80026f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026f6:	2303      	movs	r3, #3
 80026f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80026fa:	2305      	movs	r3, #5
 80026fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026fe:	f107 0314 	add.w	r3, r7, #20
 8002702:	4619      	mov	r1, r3
 8002704:	4805      	ldr	r0, [pc, #20]	; (800271c <HAL_SPI_MspInit+0x8c>)
 8002706:	f000 fd15 	bl	8003134 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800270a:	bf00      	nop
 800270c:	3728      	adds	r7, #40	; 0x28
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}
 8002712:	bf00      	nop
 8002714:	40013000 	.word	0x40013000
 8002718:	40023800 	.word	0x40023800
 800271c:	40020000 	.word	0x40020000

08002720 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b084      	sub	sp, #16
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002730:	d116      	bne.n	8002760 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002732:	2300      	movs	r3, #0
 8002734:	60fb      	str	r3, [r7, #12]
 8002736:	4b1a      	ldr	r3, [pc, #104]	; (80027a0 <HAL_TIM_Base_MspInit+0x80>)
 8002738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800273a:	4a19      	ldr	r2, [pc, #100]	; (80027a0 <HAL_TIM_Base_MspInit+0x80>)
 800273c:	f043 0301 	orr.w	r3, r3, #1
 8002740:	6413      	str	r3, [r2, #64]	; 0x40
 8002742:	4b17      	ldr	r3, [pc, #92]	; (80027a0 <HAL_TIM_Base_MspInit+0x80>)
 8002744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002746:	f003 0301 	and.w	r3, r3, #1
 800274a:	60fb      	str	r3, [r7, #12]
 800274c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800274e:	2200      	movs	r2, #0
 8002750:	2100      	movs	r1, #0
 8002752:	201c      	movs	r0, #28
 8002754:	f000 fc17 	bl	8002f86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002758:	201c      	movs	r0, #28
 800275a:	f000 fc30 	bl	8002fbe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800275e:	e01a      	b.n	8002796 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM3)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a0f      	ldr	r2, [pc, #60]	; (80027a4 <HAL_TIM_Base_MspInit+0x84>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d115      	bne.n	8002796 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800276a:	2300      	movs	r3, #0
 800276c:	60bb      	str	r3, [r7, #8]
 800276e:	4b0c      	ldr	r3, [pc, #48]	; (80027a0 <HAL_TIM_Base_MspInit+0x80>)
 8002770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002772:	4a0b      	ldr	r2, [pc, #44]	; (80027a0 <HAL_TIM_Base_MspInit+0x80>)
 8002774:	f043 0302 	orr.w	r3, r3, #2
 8002778:	6413      	str	r3, [r2, #64]	; 0x40
 800277a:	4b09      	ldr	r3, [pc, #36]	; (80027a0 <HAL_TIM_Base_MspInit+0x80>)
 800277c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277e:	f003 0302 	and.w	r3, r3, #2
 8002782:	60bb      	str	r3, [r7, #8]
 8002784:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002786:	2200      	movs	r2, #0
 8002788:	2100      	movs	r1, #0
 800278a:	201d      	movs	r0, #29
 800278c:	f000 fbfb 	bl	8002f86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002790:	201d      	movs	r0, #29
 8002792:	f000 fc14 	bl	8002fbe <HAL_NVIC_EnableIRQ>
}
 8002796:	bf00      	nop
 8002798:	3710      	adds	r7, #16
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}
 800279e:	bf00      	nop
 80027a0:	40023800 	.word	0x40023800
 80027a4:	40000400 	.word	0x40000400

080027a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b08e      	sub	sp, #56	; 0x38
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027b4:	2200      	movs	r2, #0
 80027b6:	601a      	str	r2, [r3, #0]
 80027b8:	605a      	str	r2, [r3, #4]
 80027ba:	609a      	str	r2, [r3, #8]
 80027bc:	60da      	str	r2, [r3, #12]
 80027be:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a54      	ldr	r2, [pc, #336]	; (8002918 <HAL_UART_MspInit+0x170>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d135      	bne.n	8002836 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80027ca:	2300      	movs	r3, #0
 80027cc:	623b      	str	r3, [r7, #32]
 80027ce:	4b53      	ldr	r3, [pc, #332]	; (800291c <HAL_UART_MspInit+0x174>)
 80027d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027d2:	4a52      	ldr	r2, [pc, #328]	; (800291c <HAL_UART_MspInit+0x174>)
 80027d4:	f043 0310 	orr.w	r3, r3, #16
 80027d8:	6453      	str	r3, [r2, #68]	; 0x44
 80027da:	4b50      	ldr	r3, [pc, #320]	; (800291c <HAL_UART_MspInit+0x174>)
 80027dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027de:	f003 0310 	and.w	r3, r3, #16
 80027e2:	623b      	str	r3, [r7, #32]
 80027e4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027e6:	2300      	movs	r3, #0
 80027e8:	61fb      	str	r3, [r7, #28]
 80027ea:	4b4c      	ldr	r3, [pc, #304]	; (800291c <HAL_UART_MspInit+0x174>)
 80027ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ee:	4a4b      	ldr	r2, [pc, #300]	; (800291c <HAL_UART_MspInit+0x174>)
 80027f0:	f043 0301 	orr.w	r3, r3, #1
 80027f4:	6313      	str	r3, [r2, #48]	; 0x30
 80027f6:	4b49      	ldr	r3, [pc, #292]	; (800291c <HAL_UART_MspInit+0x174>)
 80027f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027fa:	f003 0301 	and.w	r3, r3, #1
 80027fe:	61fb      	str	r3, [r7, #28]
 8002800:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USART1_TX_WF_Pin|USART1_RX_WF_Pin;
 8002802:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002806:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002808:	2302      	movs	r3, #2
 800280a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800280c:	2300      	movs	r3, #0
 800280e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002810:	2303      	movs	r3, #3
 8002812:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002814:	2307      	movs	r3, #7
 8002816:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002818:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800281c:	4619      	mov	r1, r3
 800281e:	4840      	ldr	r0, [pc, #256]	; (8002920 <HAL_UART_MspInit+0x178>)
 8002820:	f000 fc88 	bl	8003134 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002824:	2200      	movs	r2, #0
 8002826:	2100      	movs	r1, #0
 8002828:	2025      	movs	r0, #37	; 0x25
 800282a:	f000 fbac 	bl	8002f86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800282e:	2025      	movs	r0, #37	; 0x25
 8002830:	f000 fbc5 	bl	8002fbe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002834:	e06b      	b.n	800290e <HAL_UART_MspInit+0x166>
  else if(huart->Instance==USART2)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a3a      	ldr	r2, [pc, #232]	; (8002924 <HAL_UART_MspInit+0x17c>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d134      	bne.n	80028aa <HAL_UART_MspInit+0x102>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002840:	2300      	movs	r3, #0
 8002842:	61bb      	str	r3, [r7, #24]
 8002844:	4b35      	ldr	r3, [pc, #212]	; (800291c <HAL_UART_MspInit+0x174>)
 8002846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002848:	4a34      	ldr	r2, [pc, #208]	; (800291c <HAL_UART_MspInit+0x174>)
 800284a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800284e:	6413      	str	r3, [r2, #64]	; 0x40
 8002850:	4b32      	ldr	r3, [pc, #200]	; (800291c <HAL_UART_MspInit+0x174>)
 8002852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002854:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002858:	61bb      	str	r3, [r7, #24]
 800285a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800285c:	2300      	movs	r3, #0
 800285e:	617b      	str	r3, [r7, #20]
 8002860:	4b2e      	ldr	r3, [pc, #184]	; (800291c <HAL_UART_MspInit+0x174>)
 8002862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002864:	4a2d      	ldr	r2, [pc, #180]	; (800291c <HAL_UART_MspInit+0x174>)
 8002866:	f043 0301 	orr.w	r3, r3, #1
 800286a:	6313      	str	r3, [r2, #48]	; 0x30
 800286c:	4b2b      	ldr	r3, [pc, #172]	; (800291c <HAL_UART_MspInit+0x174>)
 800286e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002870:	f003 0301 	and.w	r3, r3, #1
 8002874:	617b      	str	r3, [r7, #20]
 8002876:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART2_TX_LR_Pin|USART2_RX_LR_Pin;
 8002878:	230c      	movs	r3, #12
 800287a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800287c:	2302      	movs	r3, #2
 800287e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002880:	2300      	movs	r3, #0
 8002882:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002884:	2303      	movs	r3, #3
 8002886:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002888:	2307      	movs	r3, #7
 800288a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800288c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002890:	4619      	mov	r1, r3
 8002892:	4823      	ldr	r0, [pc, #140]	; (8002920 <HAL_UART_MspInit+0x178>)
 8002894:	f000 fc4e 	bl	8003134 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002898:	2200      	movs	r2, #0
 800289a:	2100      	movs	r1, #0
 800289c:	2026      	movs	r0, #38	; 0x26
 800289e:	f000 fb72 	bl	8002f86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80028a2:	2026      	movs	r0, #38	; 0x26
 80028a4:	f000 fb8b 	bl	8002fbe <HAL_NVIC_EnableIRQ>
}
 80028a8:	e031      	b.n	800290e <HAL_UART_MspInit+0x166>
  else if(huart->Instance==USART6)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a1e      	ldr	r2, [pc, #120]	; (8002928 <HAL_UART_MspInit+0x180>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d12c      	bne.n	800290e <HAL_UART_MspInit+0x166>
    __HAL_RCC_USART6_CLK_ENABLE();
 80028b4:	2300      	movs	r3, #0
 80028b6:	613b      	str	r3, [r7, #16]
 80028b8:	4b18      	ldr	r3, [pc, #96]	; (800291c <HAL_UART_MspInit+0x174>)
 80028ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028bc:	4a17      	ldr	r2, [pc, #92]	; (800291c <HAL_UART_MspInit+0x174>)
 80028be:	f043 0320 	orr.w	r3, r3, #32
 80028c2:	6453      	str	r3, [r2, #68]	; 0x44
 80028c4:	4b15      	ldr	r3, [pc, #84]	; (800291c <HAL_UART_MspInit+0x174>)
 80028c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028c8:	f003 0320 	and.w	r3, r3, #32
 80028cc:	613b      	str	r3, [r7, #16]
 80028ce:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028d0:	2300      	movs	r3, #0
 80028d2:	60fb      	str	r3, [r7, #12]
 80028d4:	4b11      	ldr	r3, [pc, #68]	; (800291c <HAL_UART_MspInit+0x174>)
 80028d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d8:	4a10      	ldr	r2, [pc, #64]	; (800291c <HAL_UART_MspInit+0x174>)
 80028da:	f043 0301 	orr.w	r3, r3, #1
 80028de:	6313      	str	r3, [r2, #48]	; 0x30
 80028e0:	4b0e      	ldr	r3, [pc, #56]	; (800291c <HAL_UART_MspInit+0x174>)
 80028e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e4:	f003 0301 	and.w	r3, r3, #1
 80028e8:	60fb      	str	r3, [r7, #12]
 80028ea:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80028ec:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80028f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028f2:	2302      	movs	r3, #2
 80028f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028f6:	2300      	movs	r3, #0
 80028f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028fa:	2303      	movs	r3, #3
 80028fc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80028fe:	2308      	movs	r3, #8
 8002900:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002902:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002906:	4619      	mov	r1, r3
 8002908:	4805      	ldr	r0, [pc, #20]	; (8002920 <HAL_UART_MspInit+0x178>)
 800290a:	f000 fc13 	bl	8003134 <HAL_GPIO_Init>
}
 800290e:	bf00      	nop
 8002910:	3738      	adds	r7, #56	; 0x38
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}
 8002916:	bf00      	nop
 8002918:	40011000 	.word	0x40011000
 800291c:	40023800 	.word	0x40023800
 8002920:	40020000 	.word	0x40020000
 8002924:	40004400 	.word	0x40004400
 8002928:	40011400 	.word	0x40011400

0800292c <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b082      	sub	sp, #8
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a1c      	ldr	r2, [pc, #112]	; (80029ac <HAL_UART_MspDeInit+0x80>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d10e      	bne.n	800295c <HAL_UART_MspDeInit+0x30>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 800293e:	4b1c      	ldr	r3, [pc, #112]	; (80029b0 <HAL_UART_MspDeInit+0x84>)
 8002940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002942:	4a1b      	ldr	r2, [pc, #108]	; (80029b0 <HAL_UART_MspDeInit+0x84>)
 8002944:	f023 0310 	bic.w	r3, r3, #16
 8002948:	6453      	str	r3, [r2, #68]	; 0x44

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, USART1_TX_WF_Pin|USART1_RX_WF_Pin);
 800294a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800294e:	4819      	ldr	r0, [pc, #100]	; (80029b4 <HAL_UART_MspDeInit+0x88>)
 8002950:	f000 fd74 	bl	800343c <HAL_GPIO_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8002954:	2025      	movs	r0, #37	; 0x25
 8002956:	f000 fb40 	bl	8002fda <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART6_MspDeInit 1 */

  /* USER CODE END USART6_MspDeInit 1 */
  }

}
 800295a:	e022      	b.n	80029a2 <HAL_UART_MspDeInit+0x76>
  else if(huart->Instance==USART2)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a15      	ldr	r2, [pc, #84]	; (80029b8 <HAL_UART_MspDeInit+0x8c>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d10d      	bne.n	8002982 <HAL_UART_MspDeInit+0x56>
    __HAL_RCC_USART2_CLK_DISABLE();
 8002966:	4b12      	ldr	r3, [pc, #72]	; (80029b0 <HAL_UART_MspDeInit+0x84>)
 8002968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800296a:	4a11      	ldr	r2, [pc, #68]	; (80029b0 <HAL_UART_MspDeInit+0x84>)
 800296c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002970:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOA, USART2_TX_LR_Pin|USART2_RX_LR_Pin);
 8002972:	210c      	movs	r1, #12
 8002974:	480f      	ldr	r0, [pc, #60]	; (80029b4 <HAL_UART_MspDeInit+0x88>)
 8002976:	f000 fd61 	bl	800343c <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 800297a:	2026      	movs	r0, #38	; 0x26
 800297c:	f000 fb2d 	bl	8002fda <HAL_NVIC_DisableIRQ>
}
 8002980:	e00f      	b.n	80029a2 <HAL_UART_MspDeInit+0x76>
  else if(huart->Instance==USART6)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a0d      	ldr	r2, [pc, #52]	; (80029bc <HAL_UART_MspDeInit+0x90>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d10a      	bne.n	80029a2 <HAL_UART_MspDeInit+0x76>
    __HAL_RCC_USART6_CLK_DISABLE();
 800298c:	4b08      	ldr	r3, [pc, #32]	; (80029b0 <HAL_UART_MspDeInit+0x84>)
 800298e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002990:	4a07      	ldr	r2, [pc, #28]	; (80029b0 <HAL_UART_MspDeInit+0x84>)
 8002992:	f023 0320 	bic.w	r3, r3, #32
 8002996:	6453      	str	r3, [r2, #68]	; 0x44
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_11|GPIO_PIN_12);
 8002998:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800299c:	4805      	ldr	r0, [pc, #20]	; (80029b4 <HAL_UART_MspDeInit+0x88>)
 800299e:	f000 fd4d 	bl	800343c <HAL_GPIO_DeInit>
}
 80029a2:	bf00      	nop
 80029a4:	3708      	adds	r7, #8
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}
 80029aa:	bf00      	nop
 80029ac:	40011000 	.word	0x40011000
 80029b0:	40023800 	.word	0x40023800
 80029b4:	40020000 	.word	0x40020000
 80029b8:	40004400 	.word	0x40004400
 80029bc:	40011400 	.word	0x40011400

080029c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80029c0:	b480      	push	{r7}
 80029c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80029c4:	e7fe      	b.n	80029c4 <NMI_Handler+0x4>

080029c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80029c6:	b480      	push	{r7}
 80029c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80029ca:	e7fe      	b.n	80029ca <HardFault_Handler+0x4>

080029cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80029cc:	b480      	push	{r7}
 80029ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80029d0:	e7fe      	b.n	80029d0 <MemManage_Handler+0x4>

080029d2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80029d2:	b480      	push	{r7}
 80029d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80029d6:	e7fe      	b.n	80029d6 <BusFault_Handler+0x4>

080029d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80029d8:	b480      	push	{r7}
 80029da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80029dc:	e7fe      	b.n	80029dc <UsageFault_Handler+0x4>

080029de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80029de:	b480      	push	{r7}
 80029e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80029e2:	bf00      	nop
 80029e4:	46bd      	mov	sp, r7
 80029e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ea:	4770      	bx	lr

080029ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80029ec:	b480      	push	{r7}
 80029ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80029f0:	bf00      	nop
 80029f2:	46bd      	mov	sp, r7
 80029f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f8:	4770      	bx	lr

080029fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80029fa:	b480      	push	{r7}
 80029fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80029fe:	bf00      	nop
 8002a00:	46bd      	mov	sp, r7
 8002a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a06:	4770      	bx	lr

08002a08 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002a0c:	4802      	ldr	r0, [pc, #8]	; (8002a18 <TIM2_IRQHandler+0x10>)
 8002a0e:	f002 f82d 	bl	8004a6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002a12:	bf00      	nop
 8002a14:	bd80      	pop	{r7, pc}
 8002a16:	bf00      	nop
 8002a18:	200001ec 	.word	0x200001ec

08002a1c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002a20:	4802      	ldr	r0, [pc, #8]	; (8002a2c <TIM3_IRQHandler+0x10>)
 8002a22:	f002 f823 	bl	8004a6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002a26:	bf00      	nop
 8002a28:	bd80      	pop	{r7, pc}
 8002a2a:	bf00      	nop
 8002a2c:	20000234 	.word	0x20000234

08002a30 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002a34:	4802      	ldr	r0, [pc, #8]	; (8002a40 <USART1_IRQHandler+0x10>)
 8002a36:	f002 ff3f 	bl	80058b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002a3a:	bf00      	nop
 8002a3c:	bd80      	pop	{r7, pc}
 8002a3e:	bf00      	nop
 8002a40:	2000027c 	.word	0x2000027c

08002a44 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002a48:	4802      	ldr	r0, [pc, #8]	; (8002a54 <USART2_IRQHandler+0x10>)
 8002a4a:	f002 ff35 	bl	80058b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002a4e:	bf00      	nop
 8002a50:	bd80      	pop	{r7, pc}
 8002a52:	bf00      	nop
 8002a54:	200002c0 	.word	0x200002c0

08002a58 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	af00      	add	r7, sp, #0
	return 1;
 8002a5c:	2301      	movs	r3, #1
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	46bd      	mov	sp, r7
 8002a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a66:	4770      	bx	lr

08002a68 <_kill>:

int _kill(int pid, int sig)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b082      	sub	sp, #8
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
 8002a70:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002a72:	f00c fef1 	bl	800f858 <__errno>
 8002a76:	4603      	mov	r3, r0
 8002a78:	2216      	movs	r2, #22
 8002a7a:	601a      	str	r2, [r3, #0]
	return -1;
 8002a7c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a80:	4618      	mov	r0, r3
 8002a82:	3708      	adds	r7, #8
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}

08002a88 <_exit>:

void _exit (int status)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b082      	sub	sp, #8
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002a90:	f04f 31ff 	mov.w	r1, #4294967295
 8002a94:	6878      	ldr	r0, [r7, #4]
 8002a96:	f7ff ffe7 	bl	8002a68 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002a9a:	e7fe      	b.n	8002a9a <_exit+0x12>

08002a9c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b086      	sub	sp, #24
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	60f8      	str	r0, [r7, #12]
 8002aa4:	60b9      	str	r1, [r7, #8]
 8002aa6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	617b      	str	r3, [r7, #20]
 8002aac:	e00a      	b.n	8002ac4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002aae:	f3af 8000 	nop.w
 8002ab2:	4601      	mov	r1, r0
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	1c5a      	adds	r2, r3, #1
 8002ab8:	60ba      	str	r2, [r7, #8]
 8002aba:	b2ca      	uxtb	r2, r1
 8002abc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	3301      	adds	r3, #1
 8002ac2:	617b      	str	r3, [r7, #20]
 8002ac4:	697a      	ldr	r2, [r7, #20]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	429a      	cmp	r2, r3
 8002aca:	dbf0      	blt.n	8002aae <_read+0x12>
	}

return len;
 8002acc:	687b      	ldr	r3, [r7, #4]
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	3718      	adds	r7, #24
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}

08002ad6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002ad6:	b580      	push	{r7, lr}
 8002ad8:	b086      	sub	sp, #24
 8002ada:	af00      	add	r7, sp, #0
 8002adc:	60f8      	str	r0, [r7, #12]
 8002ade:	60b9      	str	r1, [r7, #8]
 8002ae0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	617b      	str	r3, [r7, #20]
 8002ae6:	e009      	b.n	8002afc <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	1c5a      	adds	r2, r3, #1
 8002aec:	60ba      	str	r2, [r7, #8]
 8002aee:	781b      	ldrb	r3, [r3, #0]
 8002af0:	4618      	mov	r0, r3
 8002af2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	3301      	adds	r3, #1
 8002afa:	617b      	str	r3, [r7, #20]
 8002afc:	697a      	ldr	r2, [r7, #20]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	429a      	cmp	r2, r3
 8002b02:	dbf1      	blt.n	8002ae8 <_write+0x12>
	}
	return len;
 8002b04:	687b      	ldr	r3, [r7, #4]
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	3718      	adds	r7, #24
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}

08002b0e <_close>:

int _close(int file)
{
 8002b0e:	b480      	push	{r7}
 8002b10:	b083      	sub	sp, #12
 8002b12:	af00      	add	r7, sp, #0
 8002b14:	6078      	str	r0, [r7, #4]
	return -1;
 8002b16:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	370c      	adds	r7, #12
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b24:	4770      	bx	lr

08002b26 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002b26:	b480      	push	{r7}
 8002b28:	b083      	sub	sp, #12
 8002b2a:	af00      	add	r7, sp, #0
 8002b2c:	6078      	str	r0, [r7, #4]
 8002b2e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002b36:	605a      	str	r2, [r3, #4]
	return 0;
 8002b38:	2300      	movs	r3, #0
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	370c      	adds	r7, #12
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b44:	4770      	bx	lr

08002b46 <_isatty>:

int _isatty(int file)
{
 8002b46:	b480      	push	{r7}
 8002b48:	b083      	sub	sp, #12
 8002b4a:	af00      	add	r7, sp, #0
 8002b4c:	6078      	str	r0, [r7, #4]
	return 1;
 8002b4e:	2301      	movs	r3, #1
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	370c      	adds	r7, #12
 8002b54:	46bd      	mov	sp, r7
 8002b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5a:	4770      	bx	lr

08002b5c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b085      	sub	sp, #20
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	60f8      	str	r0, [r7, #12]
 8002b64:	60b9      	str	r1, [r7, #8]
 8002b66:	607a      	str	r2, [r7, #4]
	return 0;
 8002b68:	2300      	movs	r3, #0
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	3714      	adds	r7, #20
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b74:	4770      	bx	lr
	...

08002b78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b086      	sub	sp, #24
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b80:	4a14      	ldr	r2, [pc, #80]	; (8002bd4 <_sbrk+0x5c>)
 8002b82:	4b15      	ldr	r3, [pc, #84]	; (8002bd8 <_sbrk+0x60>)
 8002b84:	1ad3      	subs	r3, r2, r3
 8002b86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b8c:	4b13      	ldr	r3, [pc, #76]	; (8002bdc <_sbrk+0x64>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d102      	bne.n	8002b9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002b94:	4b11      	ldr	r3, [pc, #68]	; (8002bdc <_sbrk+0x64>)
 8002b96:	4a12      	ldr	r2, [pc, #72]	; (8002be0 <_sbrk+0x68>)
 8002b98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002b9a:	4b10      	ldr	r3, [pc, #64]	; (8002bdc <_sbrk+0x64>)
 8002b9c:	681a      	ldr	r2, [r3, #0]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	4413      	add	r3, r2
 8002ba2:	693a      	ldr	r2, [r7, #16]
 8002ba4:	429a      	cmp	r2, r3
 8002ba6:	d207      	bcs.n	8002bb8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002ba8:	f00c fe56 	bl	800f858 <__errno>
 8002bac:	4603      	mov	r3, r0
 8002bae:	220c      	movs	r2, #12
 8002bb0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002bb2:	f04f 33ff 	mov.w	r3, #4294967295
 8002bb6:	e009      	b.n	8002bcc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002bb8:	4b08      	ldr	r3, [pc, #32]	; (8002bdc <_sbrk+0x64>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002bbe:	4b07      	ldr	r3, [pc, #28]	; (8002bdc <_sbrk+0x64>)
 8002bc0:	681a      	ldr	r2, [r3, #0]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	4413      	add	r3, r2
 8002bc6:	4a05      	ldr	r2, [pc, #20]	; (8002bdc <_sbrk+0x64>)
 8002bc8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002bca:	68fb      	ldr	r3, [r7, #12]
}
 8002bcc:	4618      	mov	r0, r3
 8002bce:	3718      	adds	r7, #24
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd80      	pop	{r7, pc}
 8002bd4:	20020000 	.word	0x20020000
 8002bd8:	00000400 	.word	0x00000400
 8002bdc:	2000406c 	.word	0x2000406c
 8002be0:	200041c0 	.word	0x200041c0

08002be4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002be4:	b480      	push	{r7}
 8002be6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002be8:	4b06      	ldr	r3, [pc, #24]	; (8002c04 <SystemInit+0x20>)
 8002bea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bee:	4a05      	ldr	r2, [pc, #20]	; (8002c04 <SystemInit+0x20>)
 8002bf0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002bf4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002bf8:	bf00      	nop
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c00:	4770      	bx	lr
 8002c02:	bf00      	nop
 8002c04:	e000ed00 	.word	0xe000ed00

08002c08 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002c08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002c40 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002c0c:	480d      	ldr	r0, [pc, #52]	; (8002c44 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002c0e:	490e      	ldr	r1, [pc, #56]	; (8002c48 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002c10:	4a0e      	ldr	r2, [pc, #56]	; (8002c4c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002c12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c14:	e002      	b.n	8002c1c <LoopCopyDataInit>

08002c16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c1a:	3304      	adds	r3, #4

08002c1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c20:	d3f9      	bcc.n	8002c16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c22:	4a0b      	ldr	r2, [pc, #44]	; (8002c50 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002c24:	4c0b      	ldr	r4, [pc, #44]	; (8002c54 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002c26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c28:	e001      	b.n	8002c2e <LoopFillZerobss>

08002c2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c2c:	3204      	adds	r2, #4

08002c2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c30:	d3fb      	bcc.n	8002c2a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002c32:	f7ff ffd7 	bl	8002be4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002c36:	f00c fe15 	bl	800f864 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002c3a:	f7fd fd2b 	bl	8000694 <main>
  bx  lr    
 8002c3e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002c40:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002c44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c48:	20000178 	.word	0x20000178
  ldr r2, =_sidata
 8002c4c:	08011210 	.word	0x08011210
  ldr r2, =_sbss
 8002c50:	20000178 	.word	0x20000178
  ldr r4, =_ebss
 8002c54:	200041c0 	.word	0x200041c0

08002c58 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002c58:	e7fe      	b.n	8002c58 <ADC_IRQHandler>
	...

08002c5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002c60:	4b0e      	ldr	r3, [pc, #56]	; (8002c9c <HAL_Init+0x40>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a0d      	ldr	r2, [pc, #52]	; (8002c9c <HAL_Init+0x40>)
 8002c66:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c6a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002c6c:	4b0b      	ldr	r3, [pc, #44]	; (8002c9c <HAL_Init+0x40>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a0a      	ldr	r2, [pc, #40]	; (8002c9c <HAL_Init+0x40>)
 8002c72:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c76:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c78:	4b08      	ldr	r3, [pc, #32]	; (8002c9c <HAL_Init+0x40>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a07      	ldr	r2, [pc, #28]	; (8002c9c <HAL_Init+0x40>)
 8002c7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c82:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c84:	2003      	movs	r0, #3
 8002c86:	f000 f973 	bl	8002f70 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002c8a:	200f      	movs	r0, #15
 8002c8c:	f000 f808 	bl	8002ca0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002c90:	f7ff fcd6 	bl	8002640 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c94:	2300      	movs	r3, #0
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	bd80      	pop	{r7, pc}
 8002c9a:	bf00      	nop
 8002c9c:	40023c00 	.word	0x40023c00

08002ca0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b082      	sub	sp, #8
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002ca8:	4b12      	ldr	r3, [pc, #72]	; (8002cf4 <HAL_InitTick+0x54>)
 8002caa:	681a      	ldr	r2, [r3, #0]
 8002cac:	4b12      	ldr	r3, [pc, #72]	; (8002cf8 <HAL_InitTick+0x58>)
 8002cae:	781b      	ldrb	r3, [r3, #0]
 8002cb0:	4619      	mov	r1, r3
 8002cb2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002cb6:	fbb3 f3f1 	udiv	r3, r3, r1
 8002cba:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f000 f999 	bl	8002ff6 <HAL_SYSTICK_Config>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d001      	beq.n	8002cce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e00e      	b.n	8002cec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2b0f      	cmp	r3, #15
 8002cd2:	d80a      	bhi.n	8002cea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	6879      	ldr	r1, [r7, #4]
 8002cd8:	f04f 30ff 	mov.w	r0, #4294967295
 8002cdc:	f000 f953 	bl	8002f86 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ce0:	4a06      	ldr	r2, [pc, #24]	; (8002cfc <HAL_InitTick+0x5c>)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	e000      	b.n	8002cec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
}
 8002cec:	4618      	mov	r0, r3
 8002cee:	3708      	adds	r7, #8
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd80      	pop	{r7, pc}
 8002cf4:	20000084 	.word	0x20000084
 8002cf8:	2000008c 	.word	0x2000008c
 8002cfc:	20000088 	.word	0x20000088

08002d00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d00:	b480      	push	{r7}
 8002d02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d04:	4b06      	ldr	r3, [pc, #24]	; (8002d20 <HAL_IncTick+0x20>)
 8002d06:	781b      	ldrb	r3, [r3, #0]
 8002d08:	461a      	mov	r2, r3
 8002d0a:	4b06      	ldr	r3, [pc, #24]	; (8002d24 <HAL_IncTick+0x24>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4413      	add	r3, r2
 8002d10:	4a04      	ldr	r2, [pc, #16]	; (8002d24 <HAL_IncTick+0x24>)
 8002d12:	6013      	str	r3, [r2, #0]
}
 8002d14:	bf00      	nop
 8002d16:	46bd      	mov	sp, r7
 8002d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1c:	4770      	bx	lr
 8002d1e:	bf00      	nop
 8002d20:	2000008c 	.word	0x2000008c
 8002d24:	20004070 	.word	0x20004070

08002d28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	af00      	add	r7, sp, #0
  return uwTick;
 8002d2c:	4b03      	ldr	r3, [pc, #12]	; (8002d3c <HAL_GetTick+0x14>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
}
 8002d30:	4618      	mov	r0, r3
 8002d32:	46bd      	mov	sp, r7
 8002d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d38:	4770      	bx	lr
 8002d3a:	bf00      	nop
 8002d3c:	20004070 	.word	0x20004070

08002d40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b084      	sub	sp, #16
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d48:	f7ff ffee 	bl	8002d28 <HAL_GetTick>
 8002d4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d58:	d005      	beq.n	8002d66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d5a:	4b0a      	ldr	r3, [pc, #40]	; (8002d84 <HAL_Delay+0x44>)
 8002d5c:	781b      	ldrb	r3, [r3, #0]
 8002d5e:	461a      	mov	r2, r3
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	4413      	add	r3, r2
 8002d64:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002d66:	bf00      	nop
 8002d68:	f7ff ffde 	bl	8002d28 <HAL_GetTick>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	1ad3      	subs	r3, r2, r3
 8002d72:	68fa      	ldr	r2, [r7, #12]
 8002d74:	429a      	cmp	r2, r3
 8002d76:	d8f7      	bhi.n	8002d68 <HAL_Delay+0x28>
  {
  }
}
 8002d78:	bf00      	nop
 8002d7a:	bf00      	nop
 8002d7c:	3710      	adds	r7, #16
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}
 8002d82:	bf00      	nop
 8002d84:	2000008c 	.word	0x2000008c

08002d88 <__NVIC_SetPriorityGrouping>:
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b085      	sub	sp, #20
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	f003 0307 	and.w	r3, r3, #7
 8002d96:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d98:	4b0c      	ldr	r3, [pc, #48]	; (8002dcc <__NVIC_SetPriorityGrouping+0x44>)
 8002d9a:	68db      	ldr	r3, [r3, #12]
 8002d9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d9e:	68ba      	ldr	r2, [r7, #8]
 8002da0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002da4:	4013      	ands	r3, r2
 8002da6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002db0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002db4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002db8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002dba:	4a04      	ldr	r2, [pc, #16]	; (8002dcc <__NVIC_SetPriorityGrouping+0x44>)
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	60d3      	str	r3, [r2, #12]
}
 8002dc0:	bf00      	nop
 8002dc2:	3714      	adds	r7, #20
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dca:	4770      	bx	lr
 8002dcc:	e000ed00 	.word	0xe000ed00

08002dd0 <__NVIC_GetPriorityGrouping>:
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002dd4:	4b04      	ldr	r3, [pc, #16]	; (8002de8 <__NVIC_GetPriorityGrouping+0x18>)
 8002dd6:	68db      	ldr	r3, [r3, #12]
 8002dd8:	0a1b      	lsrs	r3, r3, #8
 8002dda:	f003 0307 	and.w	r3, r3, #7
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	46bd      	mov	sp, r7
 8002de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de6:	4770      	bx	lr
 8002de8:	e000ed00 	.word	0xe000ed00

08002dec <__NVIC_EnableIRQ>:
{
 8002dec:	b480      	push	{r7}
 8002dee:	b083      	sub	sp, #12
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	4603      	mov	r3, r0
 8002df4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002df6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	db0b      	blt.n	8002e16 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002dfe:	79fb      	ldrb	r3, [r7, #7]
 8002e00:	f003 021f 	and.w	r2, r3, #31
 8002e04:	4907      	ldr	r1, [pc, #28]	; (8002e24 <__NVIC_EnableIRQ+0x38>)
 8002e06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e0a:	095b      	lsrs	r3, r3, #5
 8002e0c:	2001      	movs	r0, #1
 8002e0e:	fa00 f202 	lsl.w	r2, r0, r2
 8002e12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002e16:	bf00      	nop
 8002e18:	370c      	adds	r7, #12
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e20:	4770      	bx	lr
 8002e22:	bf00      	nop
 8002e24:	e000e100 	.word	0xe000e100

08002e28 <__NVIC_DisableIRQ>:
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b083      	sub	sp, #12
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	4603      	mov	r3, r0
 8002e30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	db12      	blt.n	8002e60 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e3a:	79fb      	ldrb	r3, [r7, #7]
 8002e3c:	f003 021f 	and.w	r2, r3, #31
 8002e40:	490a      	ldr	r1, [pc, #40]	; (8002e6c <__NVIC_DisableIRQ+0x44>)
 8002e42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e46:	095b      	lsrs	r3, r3, #5
 8002e48:	2001      	movs	r0, #1
 8002e4a:	fa00 f202 	lsl.w	r2, r0, r2
 8002e4e:	3320      	adds	r3, #32
 8002e50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002e54:	f3bf 8f4f 	dsb	sy
}
 8002e58:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002e5a:	f3bf 8f6f 	isb	sy
}
 8002e5e:	bf00      	nop
}
 8002e60:	bf00      	nop
 8002e62:	370c      	adds	r7, #12
 8002e64:	46bd      	mov	sp, r7
 8002e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6a:	4770      	bx	lr
 8002e6c:	e000e100 	.word	0xe000e100

08002e70 <__NVIC_SetPriority>:
{
 8002e70:	b480      	push	{r7}
 8002e72:	b083      	sub	sp, #12
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	4603      	mov	r3, r0
 8002e78:	6039      	str	r1, [r7, #0]
 8002e7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	db0a      	blt.n	8002e9a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	b2da      	uxtb	r2, r3
 8002e88:	490c      	ldr	r1, [pc, #48]	; (8002ebc <__NVIC_SetPriority+0x4c>)
 8002e8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e8e:	0112      	lsls	r2, r2, #4
 8002e90:	b2d2      	uxtb	r2, r2
 8002e92:	440b      	add	r3, r1
 8002e94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002e98:	e00a      	b.n	8002eb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	b2da      	uxtb	r2, r3
 8002e9e:	4908      	ldr	r1, [pc, #32]	; (8002ec0 <__NVIC_SetPriority+0x50>)
 8002ea0:	79fb      	ldrb	r3, [r7, #7]
 8002ea2:	f003 030f 	and.w	r3, r3, #15
 8002ea6:	3b04      	subs	r3, #4
 8002ea8:	0112      	lsls	r2, r2, #4
 8002eaa:	b2d2      	uxtb	r2, r2
 8002eac:	440b      	add	r3, r1
 8002eae:	761a      	strb	r2, [r3, #24]
}
 8002eb0:	bf00      	nop
 8002eb2:	370c      	adds	r7, #12
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eba:	4770      	bx	lr
 8002ebc:	e000e100 	.word	0xe000e100
 8002ec0:	e000ed00 	.word	0xe000ed00

08002ec4 <NVIC_EncodePriority>:
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b089      	sub	sp, #36	; 0x24
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	60f8      	str	r0, [r7, #12]
 8002ecc:	60b9      	str	r1, [r7, #8]
 8002ece:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	f003 0307 	and.w	r3, r3, #7
 8002ed6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ed8:	69fb      	ldr	r3, [r7, #28]
 8002eda:	f1c3 0307 	rsb	r3, r3, #7
 8002ede:	2b04      	cmp	r3, #4
 8002ee0:	bf28      	it	cs
 8002ee2:	2304      	movcs	r3, #4
 8002ee4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ee6:	69fb      	ldr	r3, [r7, #28]
 8002ee8:	3304      	adds	r3, #4
 8002eea:	2b06      	cmp	r3, #6
 8002eec:	d902      	bls.n	8002ef4 <NVIC_EncodePriority+0x30>
 8002eee:	69fb      	ldr	r3, [r7, #28]
 8002ef0:	3b03      	subs	r3, #3
 8002ef2:	e000      	b.n	8002ef6 <NVIC_EncodePriority+0x32>
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ef8:	f04f 32ff 	mov.w	r2, #4294967295
 8002efc:	69bb      	ldr	r3, [r7, #24]
 8002efe:	fa02 f303 	lsl.w	r3, r2, r3
 8002f02:	43da      	mvns	r2, r3
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	401a      	ands	r2, r3
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f0c:	f04f 31ff 	mov.w	r1, #4294967295
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	fa01 f303 	lsl.w	r3, r1, r3
 8002f16:	43d9      	mvns	r1, r3
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f1c:	4313      	orrs	r3, r2
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	3724      	adds	r7, #36	; 0x24
 8002f22:	46bd      	mov	sp, r7
 8002f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f28:	4770      	bx	lr
	...

08002f2c <SysTick_Config>:
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b082      	sub	sp, #8
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	3b01      	subs	r3, #1
 8002f38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f3c:	d301      	bcc.n	8002f42 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e00f      	b.n	8002f62 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f42:	4a0a      	ldr	r2, [pc, #40]	; (8002f6c <SysTick_Config+0x40>)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	3b01      	subs	r3, #1
 8002f48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f4a:	210f      	movs	r1, #15
 8002f4c:	f04f 30ff 	mov.w	r0, #4294967295
 8002f50:	f7ff ff8e 	bl	8002e70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f54:	4b05      	ldr	r3, [pc, #20]	; (8002f6c <SysTick_Config+0x40>)
 8002f56:	2200      	movs	r2, #0
 8002f58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f5a:	4b04      	ldr	r3, [pc, #16]	; (8002f6c <SysTick_Config+0x40>)
 8002f5c:	2207      	movs	r2, #7
 8002f5e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002f60:	2300      	movs	r3, #0
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	3708      	adds	r7, #8
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}
 8002f6a:	bf00      	nop
 8002f6c:	e000e010 	.word	0xe000e010

08002f70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b082      	sub	sp, #8
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f78:	6878      	ldr	r0, [r7, #4]
 8002f7a:	f7ff ff05 	bl	8002d88 <__NVIC_SetPriorityGrouping>
}
 8002f7e:	bf00      	nop
 8002f80:	3708      	adds	r7, #8
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}

08002f86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f86:	b580      	push	{r7, lr}
 8002f88:	b086      	sub	sp, #24
 8002f8a:	af00      	add	r7, sp, #0
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	60b9      	str	r1, [r7, #8]
 8002f90:	607a      	str	r2, [r7, #4]
 8002f92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f94:	2300      	movs	r3, #0
 8002f96:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f98:	f7ff ff1a 	bl	8002dd0 <__NVIC_GetPriorityGrouping>
 8002f9c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f9e:	687a      	ldr	r2, [r7, #4]
 8002fa0:	68b9      	ldr	r1, [r7, #8]
 8002fa2:	6978      	ldr	r0, [r7, #20]
 8002fa4:	f7ff ff8e 	bl	8002ec4 <NVIC_EncodePriority>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fae:	4611      	mov	r1, r2
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	f7ff ff5d 	bl	8002e70 <__NVIC_SetPriority>
}
 8002fb6:	bf00      	nop
 8002fb8:	3718      	adds	r7, #24
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}

08002fbe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fbe:	b580      	push	{r7, lr}
 8002fc0:	b082      	sub	sp, #8
 8002fc2:	af00      	add	r7, sp, #0
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002fc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fcc:	4618      	mov	r0, r3
 8002fce:	f7ff ff0d 	bl	8002dec <__NVIC_EnableIRQ>
}
 8002fd2:	bf00      	nop
 8002fd4:	3708      	adds	r7, #8
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}

08002fda <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002fda:	b580      	push	{r7, lr}
 8002fdc:	b082      	sub	sp, #8
 8002fde:	af00      	add	r7, sp, #0
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002fe4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f7ff ff1d 	bl	8002e28 <__NVIC_DisableIRQ>
}
 8002fee:	bf00      	nop
 8002ff0:	3708      	adds	r7, #8
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}

08002ff6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ff6:	b580      	push	{r7, lr}
 8002ff8:	b082      	sub	sp, #8
 8002ffa:	af00      	add	r7, sp, #0
 8002ffc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ffe:	6878      	ldr	r0, [r7, #4]
 8003000:	f7ff ff94 	bl	8002f2c <SysTick_Config>
 8003004:	4603      	mov	r3, r0
}
 8003006:	4618      	mov	r0, r3
 8003008:	3708      	adds	r7, #8
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}

0800300e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800300e:	b580      	push	{r7, lr}
 8003010:	b084      	sub	sp, #16
 8003012:	af00      	add	r7, sp, #0
 8003014:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800301a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800301c:	f7ff fe84 	bl	8002d28 <HAL_GetTick>
 8003020:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003028:	b2db      	uxtb	r3, r3
 800302a:	2b02      	cmp	r3, #2
 800302c:	d008      	beq.n	8003040 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2280      	movs	r2, #128	; 0x80
 8003032:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2200      	movs	r2, #0
 8003038:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800303c:	2301      	movs	r3, #1
 800303e:	e052      	b.n	80030e6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f022 0216 	bic.w	r2, r2, #22
 800304e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	695a      	ldr	r2, [r3, #20]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800305e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003064:	2b00      	cmp	r3, #0
 8003066:	d103      	bne.n	8003070 <HAL_DMA_Abort+0x62>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800306c:	2b00      	cmp	r3, #0
 800306e:	d007      	beq.n	8003080 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	681a      	ldr	r2, [r3, #0]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f022 0208 	bic.w	r2, r2, #8
 800307e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	681a      	ldr	r2, [r3, #0]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f022 0201 	bic.w	r2, r2, #1
 800308e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003090:	e013      	b.n	80030ba <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003092:	f7ff fe49 	bl	8002d28 <HAL_GetTick>
 8003096:	4602      	mov	r2, r0
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	1ad3      	subs	r3, r2, r3
 800309c:	2b05      	cmp	r3, #5
 800309e:	d90c      	bls.n	80030ba <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2220      	movs	r2, #32
 80030a4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2203      	movs	r2, #3
 80030aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2200      	movs	r2, #0
 80030b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80030b6:	2303      	movs	r3, #3
 80030b8:	e015      	b.n	80030e6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f003 0301 	and.w	r3, r3, #1
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d1e4      	bne.n	8003092 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030cc:	223f      	movs	r2, #63	; 0x3f
 80030ce:	409a      	lsls	r2, r3
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2201      	movs	r2, #1
 80030d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2200      	movs	r2, #0
 80030e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80030e4:	2300      	movs	r3, #0
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	3710      	adds	r7, #16
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}

080030ee <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80030ee:	b480      	push	{r7}
 80030f0:	b083      	sub	sp, #12
 80030f2:	af00      	add	r7, sp, #0
 80030f4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	2b02      	cmp	r3, #2
 8003100:	d004      	beq.n	800310c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2280      	movs	r2, #128	; 0x80
 8003106:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	e00c      	b.n	8003126 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2205      	movs	r2, #5
 8003110:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f022 0201 	bic.w	r2, r2, #1
 8003122:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003124:	2300      	movs	r3, #0
}
 8003126:	4618      	mov	r0, r3
 8003128:	370c      	adds	r7, #12
 800312a:	46bd      	mov	sp, r7
 800312c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003130:	4770      	bx	lr
	...

08003134 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003134:	b480      	push	{r7}
 8003136:	b089      	sub	sp, #36	; 0x24
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
 800313c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800313e:	2300      	movs	r3, #0
 8003140:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003142:	2300      	movs	r3, #0
 8003144:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003146:	2300      	movs	r3, #0
 8003148:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800314a:	2300      	movs	r3, #0
 800314c:	61fb      	str	r3, [r7, #28]
 800314e:	e159      	b.n	8003404 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003150:	2201      	movs	r2, #1
 8003152:	69fb      	ldr	r3, [r7, #28]
 8003154:	fa02 f303 	lsl.w	r3, r2, r3
 8003158:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	697a      	ldr	r2, [r7, #20]
 8003160:	4013      	ands	r3, r2
 8003162:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003164:	693a      	ldr	r2, [r7, #16]
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	429a      	cmp	r2, r3
 800316a:	f040 8148 	bne.w	80033fe <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	f003 0303 	and.w	r3, r3, #3
 8003176:	2b01      	cmp	r3, #1
 8003178:	d005      	beq.n	8003186 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003182:	2b02      	cmp	r3, #2
 8003184:	d130      	bne.n	80031e8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	689b      	ldr	r3, [r3, #8]
 800318a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800318c:	69fb      	ldr	r3, [r7, #28]
 800318e:	005b      	lsls	r3, r3, #1
 8003190:	2203      	movs	r2, #3
 8003192:	fa02 f303 	lsl.w	r3, r2, r3
 8003196:	43db      	mvns	r3, r3
 8003198:	69ba      	ldr	r2, [r7, #24]
 800319a:	4013      	ands	r3, r2
 800319c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	68da      	ldr	r2, [r3, #12]
 80031a2:	69fb      	ldr	r3, [r7, #28]
 80031a4:	005b      	lsls	r3, r3, #1
 80031a6:	fa02 f303 	lsl.w	r3, r2, r3
 80031aa:	69ba      	ldr	r2, [r7, #24]
 80031ac:	4313      	orrs	r3, r2
 80031ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	69ba      	ldr	r2, [r7, #24]
 80031b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80031bc:	2201      	movs	r2, #1
 80031be:	69fb      	ldr	r3, [r7, #28]
 80031c0:	fa02 f303 	lsl.w	r3, r2, r3
 80031c4:	43db      	mvns	r3, r3
 80031c6:	69ba      	ldr	r2, [r7, #24]
 80031c8:	4013      	ands	r3, r2
 80031ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	091b      	lsrs	r3, r3, #4
 80031d2:	f003 0201 	and.w	r2, r3, #1
 80031d6:	69fb      	ldr	r3, [r7, #28]
 80031d8:	fa02 f303 	lsl.w	r3, r2, r3
 80031dc:	69ba      	ldr	r2, [r7, #24]
 80031de:	4313      	orrs	r3, r2
 80031e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	69ba      	ldr	r2, [r7, #24]
 80031e6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	f003 0303 	and.w	r3, r3, #3
 80031f0:	2b03      	cmp	r3, #3
 80031f2:	d017      	beq.n	8003224 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	68db      	ldr	r3, [r3, #12]
 80031f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80031fa:	69fb      	ldr	r3, [r7, #28]
 80031fc:	005b      	lsls	r3, r3, #1
 80031fe:	2203      	movs	r2, #3
 8003200:	fa02 f303 	lsl.w	r3, r2, r3
 8003204:	43db      	mvns	r3, r3
 8003206:	69ba      	ldr	r2, [r7, #24]
 8003208:	4013      	ands	r3, r2
 800320a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	689a      	ldr	r2, [r3, #8]
 8003210:	69fb      	ldr	r3, [r7, #28]
 8003212:	005b      	lsls	r3, r3, #1
 8003214:	fa02 f303 	lsl.w	r3, r2, r3
 8003218:	69ba      	ldr	r2, [r7, #24]
 800321a:	4313      	orrs	r3, r2
 800321c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	69ba      	ldr	r2, [r7, #24]
 8003222:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	f003 0303 	and.w	r3, r3, #3
 800322c:	2b02      	cmp	r3, #2
 800322e:	d123      	bne.n	8003278 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003230:	69fb      	ldr	r3, [r7, #28]
 8003232:	08da      	lsrs	r2, r3, #3
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	3208      	adds	r2, #8
 8003238:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800323c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800323e:	69fb      	ldr	r3, [r7, #28]
 8003240:	f003 0307 	and.w	r3, r3, #7
 8003244:	009b      	lsls	r3, r3, #2
 8003246:	220f      	movs	r2, #15
 8003248:	fa02 f303 	lsl.w	r3, r2, r3
 800324c:	43db      	mvns	r3, r3
 800324e:	69ba      	ldr	r2, [r7, #24]
 8003250:	4013      	ands	r3, r2
 8003252:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	691a      	ldr	r2, [r3, #16]
 8003258:	69fb      	ldr	r3, [r7, #28]
 800325a:	f003 0307 	and.w	r3, r3, #7
 800325e:	009b      	lsls	r3, r3, #2
 8003260:	fa02 f303 	lsl.w	r3, r2, r3
 8003264:	69ba      	ldr	r2, [r7, #24]
 8003266:	4313      	orrs	r3, r2
 8003268:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800326a:	69fb      	ldr	r3, [r7, #28]
 800326c:	08da      	lsrs	r2, r3, #3
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	3208      	adds	r2, #8
 8003272:	69b9      	ldr	r1, [r7, #24]
 8003274:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800327e:	69fb      	ldr	r3, [r7, #28]
 8003280:	005b      	lsls	r3, r3, #1
 8003282:	2203      	movs	r2, #3
 8003284:	fa02 f303 	lsl.w	r3, r2, r3
 8003288:	43db      	mvns	r3, r3
 800328a:	69ba      	ldr	r2, [r7, #24]
 800328c:	4013      	ands	r3, r2
 800328e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	f003 0203 	and.w	r2, r3, #3
 8003298:	69fb      	ldr	r3, [r7, #28]
 800329a:	005b      	lsls	r3, r3, #1
 800329c:	fa02 f303 	lsl.w	r3, r2, r3
 80032a0:	69ba      	ldr	r2, [r7, #24]
 80032a2:	4313      	orrs	r3, r2
 80032a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	69ba      	ldr	r2, [r7, #24]
 80032aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	f000 80a2 	beq.w	80033fe <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032ba:	2300      	movs	r3, #0
 80032bc:	60fb      	str	r3, [r7, #12]
 80032be:	4b57      	ldr	r3, [pc, #348]	; (800341c <HAL_GPIO_Init+0x2e8>)
 80032c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032c2:	4a56      	ldr	r2, [pc, #344]	; (800341c <HAL_GPIO_Init+0x2e8>)
 80032c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80032c8:	6453      	str	r3, [r2, #68]	; 0x44
 80032ca:	4b54      	ldr	r3, [pc, #336]	; (800341c <HAL_GPIO_Init+0x2e8>)
 80032cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032d2:	60fb      	str	r3, [r7, #12]
 80032d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80032d6:	4a52      	ldr	r2, [pc, #328]	; (8003420 <HAL_GPIO_Init+0x2ec>)
 80032d8:	69fb      	ldr	r3, [r7, #28]
 80032da:	089b      	lsrs	r3, r3, #2
 80032dc:	3302      	adds	r3, #2
 80032de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80032e4:	69fb      	ldr	r3, [r7, #28]
 80032e6:	f003 0303 	and.w	r3, r3, #3
 80032ea:	009b      	lsls	r3, r3, #2
 80032ec:	220f      	movs	r2, #15
 80032ee:	fa02 f303 	lsl.w	r3, r2, r3
 80032f2:	43db      	mvns	r3, r3
 80032f4:	69ba      	ldr	r2, [r7, #24]
 80032f6:	4013      	ands	r3, r2
 80032f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	4a49      	ldr	r2, [pc, #292]	; (8003424 <HAL_GPIO_Init+0x2f0>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d019      	beq.n	8003336 <HAL_GPIO_Init+0x202>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	4a48      	ldr	r2, [pc, #288]	; (8003428 <HAL_GPIO_Init+0x2f4>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d013      	beq.n	8003332 <HAL_GPIO_Init+0x1fe>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	4a47      	ldr	r2, [pc, #284]	; (800342c <HAL_GPIO_Init+0x2f8>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d00d      	beq.n	800332e <HAL_GPIO_Init+0x1fa>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	4a46      	ldr	r2, [pc, #280]	; (8003430 <HAL_GPIO_Init+0x2fc>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d007      	beq.n	800332a <HAL_GPIO_Init+0x1f6>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	4a45      	ldr	r2, [pc, #276]	; (8003434 <HAL_GPIO_Init+0x300>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d101      	bne.n	8003326 <HAL_GPIO_Init+0x1f2>
 8003322:	2304      	movs	r3, #4
 8003324:	e008      	b.n	8003338 <HAL_GPIO_Init+0x204>
 8003326:	2307      	movs	r3, #7
 8003328:	e006      	b.n	8003338 <HAL_GPIO_Init+0x204>
 800332a:	2303      	movs	r3, #3
 800332c:	e004      	b.n	8003338 <HAL_GPIO_Init+0x204>
 800332e:	2302      	movs	r3, #2
 8003330:	e002      	b.n	8003338 <HAL_GPIO_Init+0x204>
 8003332:	2301      	movs	r3, #1
 8003334:	e000      	b.n	8003338 <HAL_GPIO_Init+0x204>
 8003336:	2300      	movs	r3, #0
 8003338:	69fa      	ldr	r2, [r7, #28]
 800333a:	f002 0203 	and.w	r2, r2, #3
 800333e:	0092      	lsls	r2, r2, #2
 8003340:	4093      	lsls	r3, r2
 8003342:	69ba      	ldr	r2, [r7, #24]
 8003344:	4313      	orrs	r3, r2
 8003346:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003348:	4935      	ldr	r1, [pc, #212]	; (8003420 <HAL_GPIO_Init+0x2ec>)
 800334a:	69fb      	ldr	r3, [r7, #28]
 800334c:	089b      	lsrs	r3, r3, #2
 800334e:	3302      	adds	r3, #2
 8003350:	69ba      	ldr	r2, [r7, #24]
 8003352:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003356:	4b38      	ldr	r3, [pc, #224]	; (8003438 <HAL_GPIO_Init+0x304>)
 8003358:	689b      	ldr	r3, [r3, #8]
 800335a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	43db      	mvns	r3, r3
 8003360:	69ba      	ldr	r2, [r7, #24]
 8003362:	4013      	ands	r3, r2
 8003364:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800336e:	2b00      	cmp	r3, #0
 8003370:	d003      	beq.n	800337a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003372:	69ba      	ldr	r2, [r7, #24]
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	4313      	orrs	r3, r2
 8003378:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800337a:	4a2f      	ldr	r2, [pc, #188]	; (8003438 <HAL_GPIO_Init+0x304>)
 800337c:	69bb      	ldr	r3, [r7, #24]
 800337e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003380:	4b2d      	ldr	r3, [pc, #180]	; (8003438 <HAL_GPIO_Init+0x304>)
 8003382:	68db      	ldr	r3, [r3, #12]
 8003384:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	43db      	mvns	r3, r3
 800338a:	69ba      	ldr	r2, [r7, #24]
 800338c:	4013      	ands	r3, r2
 800338e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003398:	2b00      	cmp	r3, #0
 800339a:	d003      	beq.n	80033a4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800339c:	69ba      	ldr	r2, [r7, #24]
 800339e:	693b      	ldr	r3, [r7, #16]
 80033a0:	4313      	orrs	r3, r2
 80033a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80033a4:	4a24      	ldr	r2, [pc, #144]	; (8003438 <HAL_GPIO_Init+0x304>)
 80033a6:	69bb      	ldr	r3, [r7, #24]
 80033a8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80033aa:	4b23      	ldr	r3, [pc, #140]	; (8003438 <HAL_GPIO_Init+0x304>)
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	43db      	mvns	r3, r3
 80033b4:	69ba      	ldr	r2, [r7, #24]
 80033b6:	4013      	ands	r3, r2
 80033b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d003      	beq.n	80033ce <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80033c6:	69ba      	ldr	r2, [r7, #24]
 80033c8:	693b      	ldr	r3, [r7, #16]
 80033ca:	4313      	orrs	r3, r2
 80033cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80033ce:	4a1a      	ldr	r2, [pc, #104]	; (8003438 <HAL_GPIO_Init+0x304>)
 80033d0:	69bb      	ldr	r3, [r7, #24]
 80033d2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80033d4:	4b18      	ldr	r3, [pc, #96]	; (8003438 <HAL_GPIO_Init+0x304>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	43db      	mvns	r3, r3
 80033de:	69ba      	ldr	r2, [r7, #24]
 80033e0:	4013      	ands	r3, r2
 80033e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d003      	beq.n	80033f8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80033f0:	69ba      	ldr	r2, [r7, #24]
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	4313      	orrs	r3, r2
 80033f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80033f8:	4a0f      	ldr	r2, [pc, #60]	; (8003438 <HAL_GPIO_Init+0x304>)
 80033fa:	69bb      	ldr	r3, [r7, #24]
 80033fc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80033fe:	69fb      	ldr	r3, [r7, #28]
 8003400:	3301      	adds	r3, #1
 8003402:	61fb      	str	r3, [r7, #28]
 8003404:	69fb      	ldr	r3, [r7, #28]
 8003406:	2b0f      	cmp	r3, #15
 8003408:	f67f aea2 	bls.w	8003150 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800340c:	bf00      	nop
 800340e:	bf00      	nop
 8003410:	3724      	adds	r7, #36	; 0x24
 8003412:	46bd      	mov	sp, r7
 8003414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003418:	4770      	bx	lr
 800341a:	bf00      	nop
 800341c:	40023800 	.word	0x40023800
 8003420:	40013800 	.word	0x40013800
 8003424:	40020000 	.word	0x40020000
 8003428:	40020400 	.word	0x40020400
 800342c:	40020800 	.word	0x40020800
 8003430:	40020c00 	.word	0x40020c00
 8003434:	40021000 	.word	0x40021000
 8003438:	40013c00 	.word	0x40013c00

0800343c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800343c:	b480      	push	{r7}
 800343e:	b087      	sub	sp, #28
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
 8003444:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003446:	2300      	movs	r3, #0
 8003448:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800344a:	2300      	movs	r3, #0
 800344c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800344e:	2300      	movs	r3, #0
 8003450:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003452:	2300      	movs	r3, #0
 8003454:	617b      	str	r3, [r7, #20]
 8003456:	e0bb      	b.n	80035d0 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003458:	2201      	movs	r2, #1
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	fa02 f303 	lsl.w	r3, r2, r3
 8003460:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8003462:	683a      	ldr	r2, [r7, #0]
 8003464:	693b      	ldr	r3, [r7, #16]
 8003466:	4013      	ands	r3, r2
 8003468:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800346a:	68fa      	ldr	r2, [r7, #12]
 800346c:	693b      	ldr	r3, [r7, #16]
 800346e:	429a      	cmp	r2, r3
 8003470:	f040 80ab 	bne.w	80035ca <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8003474:	4a5c      	ldr	r2, [pc, #368]	; (80035e8 <HAL_GPIO_DeInit+0x1ac>)
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	089b      	lsrs	r3, r3, #2
 800347a:	3302      	adds	r3, #2
 800347c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003480:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	f003 0303 	and.w	r3, r3, #3
 8003488:	009b      	lsls	r3, r3, #2
 800348a:	220f      	movs	r2, #15
 800348c:	fa02 f303 	lsl.w	r3, r2, r3
 8003490:	68ba      	ldr	r2, [r7, #8]
 8003492:	4013      	ands	r3, r2
 8003494:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	4a54      	ldr	r2, [pc, #336]	; (80035ec <HAL_GPIO_DeInit+0x1b0>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d019      	beq.n	80034d2 <HAL_GPIO_DeInit+0x96>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	4a53      	ldr	r2, [pc, #332]	; (80035f0 <HAL_GPIO_DeInit+0x1b4>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d013      	beq.n	80034ce <HAL_GPIO_DeInit+0x92>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	4a52      	ldr	r2, [pc, #328]	; (80035f4 <HAL_GPIO_DeInit+0x1b8>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d00d      	beq.n	80034ca <HAL_GPIO_DeInit+0x8e>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	4a51      	ldr	r2, [pc, #324]	; (80035f8 <HAL_GPIO_DeInit+0x1bc>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d007      	beq.n	80034c6 <HAL_GPIO_DeInit+0x8a>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	4a50      	ldr	r2, [pc, #320]	; (80035fc <HAL_GPIO_DeInit+0x1c0>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d101      	bne.n	80034c2 <HAL_GPIO_DeInit+0x86>
 80034be:	2304      	movs	r3, #4
 80034c0:	e008      	b.n	80034d4 <HAL_GPIO_DeInit+0x98>
 80034c2:	2307      	movs	r3, #7
 80034c4:	e006      	b.n	80034d4 <HAL_GPIO_DeInit+0x98>
 80034c6:	2303      	movs	r3, #3
 80034c8:	e004      	b.n	80034d4 <HAL_GPIO_DeInit+0x98>
 80034ca:	2302      	movs	r3, #2
 80034cc:	e002      	b.n	80034d4 <HAL_GPIO_DeInit+0x98>
 80034ce:	2301      	movs	r3, #1
 80034d0:	e000      	b.n	80034d4 <HAL_GPIO_DeInit+0x98>
 80034d2:	2300      	movs	r3, #0
 80034d4:	697a      	ldr	r2, [r7, #20]
 80034d6:	f002 0203 	and.w	r2, r2, #3
 80034da:	0092      	lsls	r2, r2, #2
 80034dc:	4093      	lsls	r3, r2
 80034de:	68ba      	ldr	r2, [r7, #8]
 80034e0:	429a      	cmp	r2, r3
 80034e2:	d132      	bne.n	800354a <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80034e4:	4b46      	ldr	r3, [pc, #280]	; (8003600 <HAL_GPIO_DeInit+0x1c4>)
 80034e6:	681a      	ldr	r2, [r3, #0]
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	43db      	mvns	r3, r3
 80034ec:	4944      	ldr	r1, [pc, #272]	; (8003600 <HAL_GPIO_DeInit+0x1c4>)
 80034ee:	4013      	ands	r3, r2
 80034f0:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80034f2:	4b43      	ldr	r3, [pc, #268]	; (8003600 <HAL_GPIO_DeInit+0x1c4>)
 80034f4:	685a      	ldr	r2, [r3, #4]
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	43db      	mvns	r3, r3
 80034fa:	4941      	ldr	r1, [pc, #260]	; (8003600 <HAL_GPIO_DeInit+0x1c4>)
 80034fc:	4013      	ands	r3, r2
 80034fe:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003500:	4b3f      	ldr	r3, [pc, #252]	; (8003600 <HAL_GPIO_DeInit+0x1c4>)
 8003502:	68da      	ldr	r2, [r3, #12]
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	43db      	mvns	r3, r3
 8003508:	493d      	ldr	r1, [pc, #244]	; (8003600 <HAL_GPIO_DeInit+0x1c4>)
 800350a:	4013      	ands	r3, r2
 800350c:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800350e:	4b3c      	ldr	r3, [pc, #240]	; (8003600 <HAL_GPIO_DeInit+0x1c4>)
 8003510:	689a      	ldr	r2, [r3, #8]
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	43db      	mvns	r3, r3
 8003516:	493a      	ldr	r1, [pc, #232]	; (8003600 <HAL_GPIO_DeInit+0x1c4>)
 8003518:	4013      	ands	r3, r2
 800351a:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	f003 0303 	and.w	r3, r3, #3
 8003522:	009b      	lsls	r3, r3, #2
 8003524:	220f      	movs	r2, #15
 8003526:	fa02 f303 	lsl.w	r3, r2, r3
 800352a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800352c:	4a2e      	ldr	r2, [pc, #184]	; (80035e8 <HAL_GPIO_DeInit+0x1ac>)
 800352e:	697b      	ldr	r3, [r7, #20]
 8003530:	089b      	lsrs	r3, r3, #2
 8003532:	3302      	adds	r3, #2
 8003534:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	43da      	mvns	r2, r3
 800353c:	482a      	ldr	r0, [pc, #168]	; (80035e8 <HAL_GPIO_DeInit+0x1ac>)
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	089b      	lsrs	r3, r3, #2
 8003542:	400a      	ands	r2, r1
 8003544:	3302      	adds	r3, #2
 8003546:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681a      	ldr	r2, [r3, #0]
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	005b      	lsls	r3, r3, #1
 8003552:	2103      	movs	r1, #3
 8003554:	fa01 f303 	lsl.w	r3, r1, r3
 8003558:	43db      	mvns	r3, r3
 800355a:	401a      	ands	r2, r3
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	08da      	lsrs	r2, r3, #3
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	3208      	adds	r2, #8
 8003568:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	f003 0307 	and.w	r3, r3, #7
 8003572:	009b      	lsls	r3, r3, #2
 8003574:	220f      	movs	r2, #15
 8003576:	fa02 f303 	lsl.w	r3, r2, r3
 800357a:	43db      	mvns	r3, r3
 800357c:	697a      	ldr	r2, [r7, #20]
 800357e:	08d2      	lsrs	r2, r2, #3
 8003580:	4019      	ands	r1, r3
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	3208      	adds	r2, #8
 8003586:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	68da      	ldr	r2, [r3, #12]
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	005b      	lsls	r3, r3, #1
 8003592:	2103      	movs	r1, #3
 8003594:	fa01 f303 	lsl.w	r3, r1, r3
 8003598:	43db      	mvns	r3, r3
 800359a:	401a      	ands	r2, r3
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	685a      	ldr	r2, [r3, #4]
 80035a4:	2101      	movs	r1, #1
 80035a6:	697b      	ldr	r3, [r7, #20]
 80035a8:	fa01 f303 	lsl.w	r3, r1, r3
 80035ac:	43db      	mvns	r3, r3
 80035ae:	401a      	ands	r2, r3
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	689a      	ldr	r2, [r3, #8]
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	005b      	lsls	r3, r3, #1
 80035bc:	2103      	movs	r1, #3
 80035be:	fa01 f303 	lsl.w	r3, r1, r3
 80035c2:	43db      	mvns	r3, r3
 80035c4:	401a      	ands	r2, r3
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	3301      	adds	r3, #1
 80035ce:	617b      	str	r3, [r7, #20]
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	2b0f      	cmp	r3, #15
 80035d4:	f67f af40 	bls.w	8003458 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80035d8:	bf00      	nop
 80035da:	bf00      	nop
 80035dc:	371c      	adds	r7, #28
 80035de:	46bd      	mov	sp, r7
 80035e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e4:	4770      	bx	lr
 80035e6:	bf00      	nop
 80035e8:	40013800 	.word	0x40013800
 80035ec:	40020000 	.word	0x40020000
 80035f0:	40020400 	.word	0x40020400
 80035f4:	40020800 	.word	0x40020800
 80035f8:	40020c00 	.word	0x40020c00
 80035fc:	40021000 	.word	0x40021000
 8003600:	40013c00 	.word	0x40013c00

08003604 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003604:	b480      	push	{r7}
 8003606:	b083      	sub	sp, #12
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
 800360c:	460b      	mov	r3, r1
 800360e:	807b      	strh	r3, [r7, #2]
 8003610:	4613      	mov	r3, r2
 8003612:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003614:	787b      	ldrb	r3, [r7, #1]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d003      	beq.n	8003622 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800361a:	887a      	ldrh	r2, [r7, #2]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003620:	e003      	b.n	800362a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003622:	887b      	ldrh	r3, [r7, #2]
 8003624:	041a      	lsls	r2, r3, #16
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	619a      	str	r2, [r3, #24]
}
 800362a:	bf00      	nop
 800362c:	370c      	adds	r7, #12
 800362e:	46bd      	mov	sp, r7
 8003630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003634:	4770      	bx	lr

08003636 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003636:	b480      	push	{r7}
 8003638:	b085      	sub	sp, #20
 800363a:	af00      	add	r7, sp, #0
 800363c:	6078      	str	r0, [r7, #4]
 800363e:	460b      	mov	r3, r1
 8003640:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	695b      	ldr	r3, [r3, #20]
 8003646:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003648:	887a      	ldrh	r2, [r7, #2]
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	4013      	ands	r3, r2
 800364e:	041a      	lsls	r2, r3, #16
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	43d9      	mvns	r1, r3
 8003654:	887b      	ldrh	r3, [r7, #2]
 8003656:	400b      	ands	r3, r1
 8003658:	431a      	orrs	r2, r3
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	619a      	str	r2, [r3, #24]
}
 800365e:	bf00      	nop
 8003660:	3714      	adds	r7, #20
 8003662:	46bd      	mov	sp, r7
 8003664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003668:	4770      	bx	lr
	...

0800366c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b086      	sub	sp, #24
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d101      	bne.n	800367e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	e267      	b.n	8003b4e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f003 0301 	and.w	r3, r3, #1
 8003686:	2b00      	cmp	r3, #0
 8003688:	d075      	beq.n	8003776 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800368a:	4b88      	ldr	r3, [pc, #544]	; (80038ac <HAL_RCC_OscConfig+0x240>)
 800368c:	689b      	ldr	r3, [r3, #8]
 800368e:	f003 030c 	and.w	r3, r3, #12
 8003692:	2b04      	cmp	r3, #4
 8003694:	d00c      	beq.n	80036b0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003696:	4b85      	ldr	r3, [pc, #532]	; (80038ac <HAL_RCC_OscConfig+0x240>)
 8003698:	689b      	ldr	r3, [r3, #8]
 800369a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800369e:	2b08      	cmp	r3, #8
 80036a0:	d112      	bne.n	80036c8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80036a2:	4b82      	ldr	r3, [pc, #520]	; (80038ac <HAL_RCC_OscConfig+0x240>)
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036ae:	d10b      	bne.n	80036c8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036b0:	4b7e      	ldr	r3, [pc, #504]	; (80038ac <HAL_RCC_OscConfig+0x240>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d05b      	beq.n	8003774 <HAL_RCC_OscConfig+0x108>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d157      	bne.n	8003774 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80036c4:	2301      	movs	r3, #1
 80036c6:	e242      	b.n	8003b4e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036d0:	d106      	bne.n	80036e0 <HAL_RCC_OscConfig+0x74>
 80036d2:	4b76      	ldr	r3, [pc, #472]	; (80038ac <HAL_RCC_OscConfig+0x240>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a75      	ldr	r2, [pc, #468]	; (80038ac <HAL_RCC_OscConfig+0x240>)
 80036d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036dc:	6013      	str	r3, [r2, #0]
 80036de:	e01d      	b.n	800371c <HAL_RCC_OscConfig+0xb0>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80036e8:	d10c      	bne.n	8003704 <HAL_RCC_OscConfig+0x98>
 80036ea:	4b70      	ldr	r3, [pc, #448]	; (80038ac <HAL_RCC_OscConfig+0x240>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a6f      	ldr	r2, [pc, #444]	; (80038ac <HAL_RCC_OscConfig+0x240>)
 80036f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80036f4:	6013      	str	r3, [r2, #0]
 80036f6:	4b6d      	ldr	r3, [pc, #436]	; (80038ac <HAL_RCC_OscConfig+0x240>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a6c      	ldr	r2, [pc, #432]	; (80038ac <HAL_RCC_OscConfig+0x240>)
 80036fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003700:	6013      	str	r3, [r2, #0]
 8003702:	e00b      	b.n	800371c <HAL_RCC_OscConfig+0xb0>
 8003704:	4b69      	ldr	r3, [pc, #420]	; (80038ac <HAL_RCC_OscConfig+0x240>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a68      	ldr	r2, [pc, #416]	; (80038ac <HAL_RCC_OscConfig+0x240>)
 800370a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800370e:	6013      	str	r3, [r2, #0]
 8003710:	4b66      	ldr	r3, [pc, #408]	; (80038ac <HAL_RCC_OscConfig+0x240>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a65      	ldr	r2, [pc, #404]	; (80038ac <HAL_RCC_OscConfig+0x240>)
 8003716:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800371a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d013      	beq.n	800374c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003724:	f7ff fb00 	bl	8002d28 <HAL_GetTick>
 8003728:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800372a:	e008      	b.n	800373e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800372c:	f7ff fafc 	bl	8002d28 <HAL_GetTick>
 8003730:	4602      	mov	r2, r0
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	1ad3      	subs	r3, r2, r3
 8003736:	2b64      	cmp	r3, #100	; 0x64
 8003738:	d901      	bls.n	800373e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800373a:	2303      	movs	r3, #3
 800373c:	e207      	b.n	8003b4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800373e:	4b5b      	ldr	r3, [pc, #364]	; (80038ac <HAL_RCC_OscConfig+0x240>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003746:	2b00      	cmp	r3, #0
 8003748:	d0f0      	beq.n	800372c <HAL_RCC_OscConfig+0xc0>
 800374a:	e014      	b.n	8003776 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800374c:	f7ff faec 	bl	8002d28 <HAL_GetTick>
 8003750:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003752:	e008      	b.n	8003766 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003754:	f7ff fae8 	bl	8002d28 <HAL_GetTick>
 8003758:	4602      	mov	r2, r0
 800375a:	693b      	ldr	r3, [r7, #16]
 800375c:	1ad3      	subs	r3, r2, r3
 800375e:	2b64      	cmp	r3, #100	; 0x64
 8003760:	d901      	bls.n	8003766 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003762:	2303      	movs	r3, #3
 8003764:	e1f3      	b.n	8003b4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003766:	4b51      	ldr	r3, [pc, #324]	; (80038ac <HAL_RCC_OscConfig+0x240>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800376e:	2b00      	cmp	r3, #0
 8003770:	d1f0      	bne.n	8003754 <HAL_RCC_OscConfig+0xe8>
 8003772:	e000      	b.n	8003776 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003774:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f003 0302 	and.w	r3, r3, #2
 800377e:	2b00      	cmp	r3, #0
 8003780:	d063      	beq.n	800384a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003782:	4b4a      	ldr	r3, [pc, #296]	; (80038ac <HAL_RCC_OscConfig+0x240>)
 8003784:	689b      	ldr	r3, [r3, #8]
 8003786:	f003 030c 	and.w	r3, r3, #12
 800378a:	2b00      	cmp	r3, #0
 800378c:	d00b      	beq.n	80037a6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800378e:	4b47      	ldr	r3, [pc, #284]	; (80038ac <HAL_RCC_OscConfig+0x240>)
 8003790:	689b      	ldr	r3, [r3, #8]
 8003792:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003796:	2b08      	cmp	r3, #8
 8003798:	d11c      	bne.n	80037d4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800379a:	4b44      	ldr	r3, [pc, #272]	; (80038ac <HAL_RCC_OscConfig+0x240>)
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d116      	bne.n	80037d4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037a6:	4b41      	ldr	r3, [pc, #260]	; (80038ac <HAL_RCC_OscConfig+0x240>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f003 0302 	and.w	r3, r3, #2
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d005      	beq.n	80037be <HAL_RCC_OscConfig+0x152>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	68db      	ldr	r3, [r3, #12]
 80037b6:	2b01      	cmp	r3, #1
 80037b8:	d001      	beq.n	80037be <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	e1c7      	b.n	8003b4e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037be:	4b3b      	ldr	r3, [pc, #236]	; (80038ac <HAL_RCC_OscConfig+0x240>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	691b      	ldr	r3, [r3, #16]
 80037ca:	00db      	lsls	r3, r3, #3
 80037cc:	4937      	ldr	r1, [pc, #220]	; (80038ac <HAL_RCC_OscConfig+0x240>)
 80037ce:	4313      	orrs	r3, r2
 80037d0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037d2:	e03a      	b.n	800384a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	68db      	ldr	r3, [r3, #12]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d020      	beq.n	800381e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80037dc:	4b34      	ldr	r3, [pc, #208]	; (80038b0 <HAL_RCC_OscConfig+0x244>)
 80037de:	2201      	movs	r2, #1
 80037e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037e2:	f7ff faa1 	bl	8002d28 <HAL_GetTick>
 80037e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037e8:	e008      	b.n	80037fc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80037ea:	f7ff fa9d 	bl	8002d28 <HAL_GetTick>
 80037ee:	4602      	mov	r2, r0
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	1ad3      	subs	r3, r2, r3
 80037f4:	2b02      	cmp	r3, #2
 80037f6:	d901      	bls.n	80037fc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80037f8:	2303      	movs	r3, #3
 80037fa:	e1a8      	b.n	8003b4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037fc:	4b2b      	ldr	r3, [pc, #172]	; (80038ac <HAL_RCC_OscConfig+0x240>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f003 0302 	and.w	r3, r3, #2
 8003804:	2b00      	cmp	r3, #0
 8003806:	d0f0      	beq.n	80037ea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003808:	4b28      	ldr	r3, [pc, #160]	; (80038ac <HAL_RCC_OscConfig+0x240>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	691b      	ldr	r3, [r3, #16]
 8003814:	00db      	lsls	r3, r3, #3
 8003816:	4925      	ldr	r1, [pc, #148]	; (80038ac <HAL_RCC_OscConfig+0x240>)
 8003818:	4313      	orrs	r3, r2
 800381a:	600b      	str	r3, [r1, #0]
 800381c:	e015      	b.n	800384a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800381e:	4b24      	ldr	r3, [pc, #144]	; (80038b0 <HAL_RCC_OscConfig+0x244>)
 8003820:	2200      	movs	r2, #0
 8003822:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003824:	f7ff fa80 	bl	8002d28 <HAL_GetTick>
 8003828:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800382a:	e008      	b.n	800383e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800382c:	f7ff fa7c 	bl	8002d28 <HAL_GetTick>
 8003830:	4602      	mov	r2, r0
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	1ad3      	subs	r3, r2, r3
 8003836:	2b02      	cmp	r3, #2
 8003838:	d901      	bls.n	800383e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800383a:	2303      	movs	r3, #3
 800383c:	e187      	b.n	8003b4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800383e:	4b1b      	ldr	r3, [pc, #108]	; (80038ac <HAL_RCC_OscConfig+0x240>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f003 0302 	and.w	r3, r3, #2
 8003846:	2b00      	cmp	r3, #0
 8003848:	d1f0      	bne.n	800382c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f003 0308 	and.w	r3, r3, #8
 8003852:	2b00      	cmp	r3, #0
 8003854:	d036      	beq.n	80038c4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	695b      	ldr	r3, [r3, #20]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d016      	beq.n	800388c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800385e:	4b15      	ldr	r3, [pc, #84]	; (80038b4 <HAL_RCC_OscConfig+0x248>)
 8003860:	2201      	movs	r2, #1
 8003862:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003864:	f7ff fa60 	bl	8002d28 <HAL_GetTick>
 8003868:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800386a:	e008      	b.n	800387e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800386c:	f7ff fa5c 	bl	8002d28 <HAL_GetTick>
 8003870:	4602      	mov	r2, r0
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	1ad3      	subs	r3, r2, r3
 8003876:	2b02      	cmp	r3, #2
 8003878:	d901      	bls.n	800387e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800387a:	2303      	movs	r3, #3
 800387c:	e167      	b.n	8003b4e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800387e:	4b0b      	ldr	r3, [pc, #44]	; (80038ac <HAL_RCC_OscConfig+0x240>)
 8003880:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003882:	f003 0302 	and.w	r3, r3, #2
 8003886:	2b00      	cmp	r3, #0
 8003888:	d0f0      	beq.n	800386c <HAL_RCC_OscConfig+0x200>
 800388a:	e01b      	b.n	80038c4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800388c:	4b09      	ldr	r3, [pc, #36]	; (80038b4 <HAL_RCC_OscConfig+0x248>)
 800388e:	2200      	movs	r2, #0
 8003890:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003892:	f7ff fa49 	bl	8002d28 <HAL_GetTick>
 8003896:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003898:	e00e      	b.n	80038b8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800389a:	f7ff fa45 	bl	8002d28 <HAL_GetTick>
 800389e:	4602      	mov	r2, r0
 80038a0:	693b      	ldr	r3, [r7, #16]
 80038a2:	1ad3      	subs	r3, r2, r3
 80038a4:	2b02      	cmp	r3, #2
 80038a6:	d907      	bls.n	80038b8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80038a8:	2303      	movs	r3, #3
 80038aa:	e150      	b.n	8003b4e <HAL_RCC_OscConfig+0x4e2>
 80038ac:	40023800 	.word	0x40023800
 80038b0:	42470000 	.word	0x42470000
 80038b4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038b8:	4b88      	ldr	r3, [pc, #544]	; (8003adc <HAL_RCC_OscConfig+0x470>)
 80038ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038bc:	f003 0302 	and.w	r3, r3, #2
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d1ea      	bne.n	800389a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f003 0304 	and.w	r3, r3, #4
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	f000 8097 	beq.w	8003a00 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038d2:	2300      	movs	r3, #0
 80038d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038d6:	4b81      	ldr	r3, [pc, #516]	; (8003adc <HAL_RCC_OscConfig+0x470>)
 80038d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d10f      	bne.n	8003902 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038e2:	2300      	movs	r3, #0
 80038e4:	60bb      	str	r3, [r7, #8]
 80038e6:	4b7d      	ldr	r3, [pc, #500]	; (8003adc <HAL_RCC_OscConfig+0x470>)
 80038e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ea:	4a7c      	ldr	r2, [pc, #496]	; (8003adc <HAL_RCC_OscConfig+0x470>)
 80038ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038f0:	6413      	str	r3, [r2, #64]	; 0x40
 80038f2:	4b7a      	ldr	r3, [pc, #488]	; (8003adc <HAL_RCC_OscConfig+0x470>)
 80038f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038fa:	60bb      	str	r3, [r7, #8]
 80038fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038fe:	2301      	movs	r3, #1
 8003900:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003902:	4b77      	ldr	r3, [pc, #476]	; (8003ae0 <HAL_RCC_OscConfig+0x474>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800390a:	2b00      	cmp	r3, #0
 800390c:	d118      	bne.n	8003940 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800390e:	4b74      	ldr	r3, [pc, #464]	; (8003ae0 <HAL_RCC_OscConfig+0x474>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a73      	ldr	r2, [pc, #460]	; (8003ae0 <HAL_RCC_OscConfig+0x474>)
 8003914:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003918:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800391a:	f7ff fa05 	bl	8002d28 <HAL_GetTick>
 800391e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003920:	e008      	b.n	8003934 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003922:	f7ff fa01 	bl	8002d28 <HAL_GetTick>
 8003926:	4602      	mov	r2, r0
 8003928:	693b      	ldr	r3, [r7, #16]
 800392a:	1ad3      	subs	r3, r2, r3
 800392c:	2b02      	cmp	r3, #2
 800392e:	d901      	bls.n	8003934 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003930:	2303      	movs	r3, #3
 8003932:	e10c      	b.n	8003b4e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003934:	4b6a      	ldr	r3, [pc, #424]	; (8003ae0 <HAL_RCC_OscConfig+0x474>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800393c:	2b00      	cmp	r3, #0
 800393e:	d0f0      	beq.n	8003922 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	689b      	ldr	r3, [r3, #8]
 8003944:	2b01      	cmp	r3, #1
 8003946:	d106      	bne.n	8003956 <HAL_RCC_OscConfig+0x2ea>
 8003948:	4b64      	ldr	r3, [pc, #400]	; (8003adc <HAL_RCC_OscConfig+0x470>)
 800394a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800394c:	4a63      	ldr	r2, [pc, #396]	; (8003adc <HAL_RCC_OscConfig+0x470>)
 800394e:	f043 0301 	orr.w	r3, r3, #1
 8003952:	6713      	str	r3, [r2, #112]	; 0x70
 8003954:	e01c      	b.n	8003990 <HAL_RCC_OscConfig+0x324>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	689b      	ldr	r3, [r3, #8]
 800395a:	2b05      	cmp	r3, #5
 800395c:	d10c      	bne.n	8003978 <HAL_RCC_OscConfig+0x30c>
 800395e:	4b5f      	ldr	r3, [pc, #380]	; (8003adc <HAL_RCC_OscConfig+0x470>)
 8003960:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003962:	4a5e      	ldr	r2, [pc, #376]	; (8003adc <HAL_RCC_OscConfig+0x470>)
 8003964:	f043 0304 	orr.w	r3, r3, #4
 8003968:	6713      	str	r3, [r2, #112]	; 0x70
 800396a:	4b5c      	ldr	r3, [pc, #368]	; (8003adc <HAL_RCC_OscConfig+0x470>)
 800396c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800396e:	4a5b      	ldr	r2, [pc, #364]	; (8003adc <HAL_RCC_OscConfig+0x470>)
 8003970:	f043 0301 	orr.w	r3, r3, #1
 8003974:	6713      	str	r3, [r2, #112]	; 0x70
 8003976:	e00b      	b.n	8003990 <HAL_RCC_OscConfig+0x324>
 8003978:	4b58      	ldr	r3, [pc, #352]	; (8003adc <HAL_RCC_OscConfig+0x470>)
 800397a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800397c:	4a57      	ldr	r2, [pc, #348]	; (8003adc <HAL_RCC_OscConfig+0x470>)
 800397e:	f023 0301 	bic.w	r3, r3, #1
 8003982:	6713      	str	r3, [r2, #112]	; 0x70
 8003984:	4b55      	ldr	r3, [pc, #340]	; (8003adc <HAL_RCC_OscConfig+0x470>)
 8003986:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003988:	4a54      	ldr	r2, [pc, #336]	; (8003adc <HAL_RCC_OscConfig+0x470>)
 800398a:	f023 0304 	bic.w	r3, r3, #4
 800398e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	689b      	ldr	r3, [r3, #8]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d015      	beq.n	80039c4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003998:	f7ff f9c6 	bl	8002d28 <HAL_GetTick>
 800399c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800399e:	e00a      	b.n	80039b6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039a0:	f7ff f9c2 	bl	8002d28 <HAL_GetTick>
 80039a4:	4602      	mov	r2, r0
 80039a6:	693b      	ldr	r3, [r7, #16]
 80039a8:	1ad3      	subs	r3, r2, r3
 80039aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d901      	bls.n	80039b6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80039b2:	2303      	movs	r3, #3
 80039b4:	e0cb      	b.n	8003b4e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039b6:	4b49      	ldr	r3, [pc, #292]	; (8003adc <HAL_RCC_OscConfig+0x470>)
 80039b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039ba:	f003 0302 	and.w	r3, r3, #2
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d0ee      	beq.n	80039a0 <HAL_RCC_OscConfig+0x334>
 80039c2:	e014      	b.n	80039ee <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039c4:	f7ff f9b0 	bl	8002d28 <HAL_GetTick>
 80039c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039ca:	e00a      	b.n	80039e2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039cc:	f7ff f9ac 	bl	8002d28 <HAL_GetTick>
 80039d0:	4602      	mov	r2, r0
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	1ad3      	subs	r3, r2, r3
 80039d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80039da:	4293      	cmp	r3, r2
 80039dc:	d901      	bls.n	80039e2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80039de:	2303      	movs	r3, #3
 80039e0:	e0b5      	b.n	8003b4e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039e2:	4b3e      	ldr	r3, [pc, #248]	; (8003adc <HAL_RCC_OscConfig+0x470>)
 80039e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039e6:	f003 0302 	and.w	r3, r3, #2
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d1ee      	bne.n	80039cc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80039ee:	7dfb      	ldrb	r3, [r7, #23]
 80039f0:	2b01      	cmp	r3, #1
 80039f2:	d105      	bne.n	8003a00 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039f4:	4b39      	ldr	r3, [pc, #228]	; (8003adc <HAL_RCC_OscConfig+0x470>)
 80039f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039f8:	4a38      	ldr	r2, [pc, #224]	; (8003adc <HAL_RCC_OscConfig+0x470>)
 80039fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039fe:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	699b      	ldr	r3, [r3, #24]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	f000 80a1 	beq.w	8003b4c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003a0a:	4b34      	ldr	r3, [pc, #208]	; (8003adc <HAL_RCC_OscConfig+0x470>)
 8003a0c:	689b      	ldr	r3, [r3, #8]
 8003a0e:	f003 030c 	and.w	r3, r3, #12
 8003a12:	2b08      	cmp	r3, #8
 8003a14:	d05c      	beq.n	8003ad0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	699b      	ldr	r3, [r3, #24]
 8003a1a:	2b02      	cmp	r3, #2
 8003a1c:	d141      	bne.n	8003aa2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a1e:	4b31      	ldr	r3, [pc, #196]	; (8003ae4 <HAL_RCC_OscConfig+0x478>)
 8003a20:	2200      	movs	r2, #0
 8003a22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a24:	f7ff f980 	bl	8002d28 <HAL_GetTick>
 8003a28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a2a:	e008      	b.n	8003a3e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a2c:	f7ff f97c 	bl	8002d28 <HAL_GetTick>
 8003a30:	4602      	mov	r2, r0
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	1ad3      	subs	r3, r2, r3
 8003a36:	2b02      	cmp	r3, #2
 8003a38:	d901      	bls.n	8003a3e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003a3a:	2303      	movs	r3, #3
 8003a3c:	e087      	b.n	8003b4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a3e:	4b27      	ldr	r3, [pc, #156]	; (8003adc <HAL_RCC_OscConfig+0x470>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d1f0      	bne.n	8003a2c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	69da      	ldr	r2, [r3, #28]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6a1b      	ldr	r3, [r3, #32]
 8003a52:	431a      	orrs	r2, r3
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a58:	019b      	lsls	r3, r3, #6
 8003a5a:	431a      	orrs	r2, r3
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a60:	085b      	lsrs	r3, r3, #1
 8003a62:	3b01      	subs	r3, #1
 8003a64:	041b      	lsls	r3, r3, #16
 8003a66:	431a      	orrs	r2, r3
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a6c:	061b      	lsls	r3, r3, #24
 8003a6e:	491b      	ldr	r1, [pc, #108]	; (8003adc <HAL_RCC_OscConfig+0x470>)
 8003a70:	4313      	orrs	r3, r2
 8003a72:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a74:	4b1b      	ldr	r3, [pc, #108]	; (8003ae4 <HAL_RCC_OscConfig+0x478>)
 8003a76:	2201      	movs	r2, #1
 8003a78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a7a:	f7ff f955 	bl	8002d28 <HAL_GetTick>
 8003a7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a80:	e008      	b.n	8003a94 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a82:	f7ff f951 	bl	8002d28 <HAL_GetTick>
 8003a86:	4602      	mov	r2, r0
 8003a88:	693b      	ldr	r3, [r7, #16]
 8003a8a:	1ad3      	subs	r3, r2, r3
 8003a8c:	2b02      	cmp	r3, #2
 8003a8e:	d901      	bls.n	8003a94 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003a90:	2303      	movs	r3, #3
 8003a92:	e05c      	b.n	8003b4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a94:	4b11      	ldr	r3, [pc, #68]	; (8003adc <HAL_RCC_OscConfig+0x470>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d0f0      	beq.n	8003a82 <HAL_RCC_OscConfig+0x416>
 8003aa0:	e054      	b.n	8003b4c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003aa2:	4b10      	ldr	r3, [pc, #64]	; (8003ae4 <HAL_RCC_OscConfig+0x478>)
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aa8:	f7ff f93e 	bl	8002d28 <HAL_GetTick>
 8003aac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003aae:	e008      	b.n	8003ac2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ab0:	f7ff f93a 	bl	8002d28 <HAL_GetTick>
 8003ab4:	4602      	mov	r2, r0
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	1ad3      	subs	r3, r2, r3
 8003aba:	2b02      	cmp	r3, #2
 8003abc:	d901      	bls.n	8003ac2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003abe:	2303      	movs	r3, #3
 8003ac0:	e045      	b.n	8003b4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ac2:	4b06      	ldr	r3, [pc, #24]	; (8003adc <HAL_RCC_OscConfig+0x470>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d1f0      	bne.n	8003ab0 <HAL_RCC_OscConfig+0x444>
 8003ace:	e03d      	b.n	8003b4c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	699b      	ldr	r3, [r3, #24]
 8003ad4:	2b01      	cmp	r3, #1
 8003ad6:	d107      	bne.n	8003ae8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	e038      	b.n	8003b4e <HAL_RCC_OscConfig+0x4e2>
 8003adc:	40023800 	.word	0x40023800
 8003ae0:	40007000 	.word	0x40007000
 8003ae4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003ae8:	4b1b      	ldr	r3, [pc, #108]	; (8003b58 <HAL_RCC_OscConfig+0x4ec>)
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	699b      	ldr	r3, [r3, #24]
 8003af2:	2b01      	cmp	r3, #1
 8003af4:	d028      	beq.n	8003b48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b00:	429a      	cmp	r2, r3
 8003b02:	d121      	bne.n	8003b48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b0e:	429a      	cmp	r2, r3
 8003b10:	d11a      	bne.n	8003b48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b12:	68fa      	ldr	r2, [r7, #12]
 8003b14:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003b18:	4013      	ands	r3, r2
 8003b1a:	687a      	ldr	r2, [r7, #4]
 8003b1c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003b1e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d111      	bne.n	8003b48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b2e:	085b      	lsrs	r3, r3, #1
 8003b30:	3b01      	subs	r3, #1
 8003b32:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b34:	429a      	cmp	r2, r3
 8003b36:	d107      	bne.n	8003b48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b42:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b44:	429a      	cmp	r2, r3
 8003b46:	d001      	beq.n	8003b4c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	e000      	b.n	8003b4e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003b4c:	2300      	movs	r3, #0
}
 8003b4e:	4618      	mov	r0, r3
 8003b50:	3718      	adds	r7, #24
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd80      	pop	{r7, pc}
 8003b56:	bf00      	nop
 8003b58:	40023800 	.word	0x40023800

08003b5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b084      	sub	sp, #16
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
 8003b64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d101      	bne.n	8003b70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	e0cc      	b.n	8003d0a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b70:	4b68      	ldr	r3, [pc, #416]	; (8003d14 <HAL_RCC_ClockConfig+0x1b8>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f003 0307 	and.w	r3, r3, #7
 8003b78:	683a      	ldr	r2, [r7, #0]
 8003b7a:	429a      	cmp	r2, r3
 8003b7c:	d90c      	bls.n	8003b98 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b7e:	4b65      	ldr	r3, [pc, #404]	; (8003d14 <HAL_RCC_ClockConfig+0x1b8>)
 8003b80:	683a      	ldr	r2, [r7, #0]
 8003b82:	b2d2      	uxtb	r2, r2
 8003b84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b86:	4b63      	ldr	r3, [pc, #396]	; (8003d14 <HAL_RCC_ClockConfig+0x1b8>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f003 0307 	and.w	r3, r3, #7
 8003b8e:	683a      	ldr	r2, [r7, #0]
 8003b90:	429a      	cmp	r2, r3
 8003b92:	d001      	beq.n	8003b98 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003b94:	2301      	movs	r3, #1
 8003b96:	e0b8      	b.n	8003d0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f003 0302 	and.w	r3, r3, #2
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d020      	beq.n	8003be6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f003 0304 	and.w	r3, r3, #4
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d005      	beq.n	8003bbc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003bb0:	4b59      	ldr	r3, [pc, #356]	; (8003d18 <HAL_RCC_ClockConfig+0x1bc>)
 8003bb2:	689b      	ldr	r3, [r3, #8]
 8003bb4:	4a58      	ldr	r2, [pc, #352]	; (8003d18 <HAL_RCC_ClockConfig+0x1bc>)
 8003bb6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003bba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f003 0308 	and.w	r3, r3, #8
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d005      	beq.n	8003bd4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003bc8:	4b53      	ldr	r3, [pc, #332]	; (8003d18 <HAL_RCC_ClockConfig+0x1bc>)
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	4a52      	ldr	r2, [pc, #328]	; (8003d18 <HAL_RCC_ClockConfig+0x1bc>)
 8003bce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003bd2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bd4:	4b50      	ldr	r3, [pc, #320]	; (8003d18 <HAL_RCC_ClockConfig+0x1bc>)
 8003bd6:	689b      	ldr	r3, [r3, #8]
 8003bd8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	494d      	ldr	r1, [pc, #308]	; (8003d18 <HAL_RCC_ClockConfig+0x1bc>)
 8003be2:	4313      	orrs	r3, r2
 8003be4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f003 0301 	and.w	r3, r3, #1
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d044      	beq.n	8003c7c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	2b01      	cmp	r3, #1
 8003bf8:	d107      	bne.n	8003c0a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bfa:	4b47      	ldr	r3, [pc, #284]	; (8003d18 <HAL_RCC_ClockConfig+0x1bc>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d119      	bne.n	8003c3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c06:	2301      	movs	r3, #1
 8003c08:	e07f      	b.n	8003d0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	2b02      	cmp	r3, #2
 8003c10:	d003      	beq.n	8003c1a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c16:	2b03      	cmp	r3, #3
 8003c18:	d107      	bne.n	8003c2a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c1a:	4b3f      	ldr	r3, [pc, #252]	; (8003d18 <HAL_RCC_ClockConfig+0x1bc>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d109      	bne.n	8003c3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c26:	2301      	movs	r3, #1
 8003c28:	e06f      	b.n	8003d0a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c2a:	4b3b      	ldr	r3, [pc, #236]	; (8003d18 <HAL_RCC_ClockConfig+0x1bc>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f003 0302 	and.w	r3, r3, #2
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d101      	bne.n	8003c3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	e067      	b.n	8003d0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c3a:	4b37      	ldr	r3, [pc, #220]	; (8003d18 <HAL_RCC_ClockConfig+0x1bc>)
 8003c3c:	689b      	ldr	r3, [r3, #8]
 8003c3e:	f023 0203 	bic.w	r2, r3, #3
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	4934      	ldr	r1, [pc, #208]	; (8003d18 <HAL_RCC_ClockConfig+0x1bc>)
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c4c:	f7ff f86c 	bl	8002d28 <HAL_GetTick>
 8003c50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c52:	e00a      	b.n	8003c6a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c54:	f7ff f868 	bl	8002d28 <HAL_GetTick>
 8003c58:	4602      	mov	r2, r0
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	1ad3      	subs	r3, r2, r3
 8003c5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d901      	bls.n	8003c6a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003c66:	2303      	movs	r3, #3
 8003c68:	e04f      	b.n	8003d0a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c6a:	4b2b      	ldr	r3, [pc, #172]	; (8003d18 <HAL_RCC_ClockConfig+0x1bc>)
 8003c6c:	689b      	ldr	r3, [r3, #8]
 8003c6e:	f003 020c 	and.w	r2, r3, #12
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	009b      	lsls	r3, r3, #2
 8003c78:	429a      	cmp	r2, r3
 8003c7a:	d1eb      	bne.n	8003c54 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c7c:	4b25      	ldr	r3, [pc, #148]	; (8003d14 <HAL_RCC_ClockConfig+0x1b8>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f003 0307 	and.w	r3, r3, #7
 8003c84:	683a      	ldr	r2, [r7, #0]
 8003c86:	429a      	cmp	r2, r3
 8003c88:	d20c      	bcs.n	8003ca4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c8a:	4b22      	ldr	r3, [pc, #136]	; (8003d14 <HAL_RCC_ClockConfig+0x1b8>)
 8003c8c:	683a      	ldr	r2, [r7, #0]
 8003c8e:	b2d2      	uxtb	r2, r2
 8003c90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c92:	4b20      	ldr	r3, [pc, #128]	; (8003d14 <HAL_RCC_ClockConfig+0x1b8>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f003 0307 	and.w	r3, r3, #7
 8003c9a:	683a      	ldr	r2, [r7, #0]
 8003c9c:	429a      	cmp	r2, r3
 8003c9e:	d001      	beq.n	8003ca4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	e032      	b.n	8003d0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f003 0304 	and.w	r3, r3, #4
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d008      	beq.n	8003cc2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003cb0:	4b19      	ldr	r3, [pc, #100]	; (8003d18 <HAL_RCC_ClockConfig+0x1bc>)
 8003cb2:	689b      	ldr	r3, [r3, #8]
 8003cb4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	68db      	ldr	r3, [r3, #12]
 8003cbc:	4916      	ldr	r1, [pc, #88]	; (8003d18 <HAL_RCC_ClockConfig+0x1bc>)
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f003 0308 	and.w	r3, r3, #8
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d009      	beq.n	8003ce2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003cce:	4b12      	ldr	r3, [pc, #72]	; (8003d18 <HAL_RCC_ClockConfig+0x1bc>)
 8003cd0:	689b      	ldr	r3, [r3, #8]
 8003cd2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	691b      	ldr	r3, [r3, #16]
 8003cda:	00db      	lsls	r3, r3, #3
 8003cdc:	490e      	ldr	r1, [pc, #56]	; (8003d18 <HAL_RCC_ClockConfig+0x1bc>)
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003ce2:	f000 f821 	bl	8003d28 <HAL_RCC_GetSysClockFreq>
 8003ce6:	4602      	mov	r2, r0
 8003ce8:	4b0b      	ldr	r3, [pc, #44]	; (8003d18 <HAL_RCC_ClockConfig+0x1bc>)
 8003cea:	689b      	ldr	r3, [r3, #8]
 8003cec:	091b      	lsrs	r3, r3, #4
 8003cee:	f003 030f 	and.w	r3, r3, #15
 8003cf2:	490a      	ldr	r1, [pc, #40]	; (8003d1c <HAL_RCC_ClockConfig+0x1c0>)
 8003cf4:	5ccb      	ldrb	r3, [r1, r3]
 8003cf6:	fa22 f303 	lsr.w	r3, r2, r3
 8003cfa:	4a09      	ldr	r2, [pc, #36]	; (8003d20 <HAL_RCC_ClockConfig+0x1c4>)
 8003cfc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003cfe:	4b09      	ldr	r3, [pc, #36]	; (8003d24 <HAL_RCC_ClockConfig+0x1c8>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4618      	mov	r0, r3
 8003d04:	f7fe ffcc 	bl	8002ca0 <HAL_InitTick>

  return HAL_OK;
 8003d08:	2300      	movs	r3, #0
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	3710      	adds	r7, #16
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd80      	pop	{r7, pc}
 8003d12:	bf00      	nop
 8003d14:	40023c00 	.word	0x40023c00
 8003d18:	40023800 	.word	0x40023800
 8003d1c:	08010fe0 	.word	0x08010fe0
 8003d20:	20000084 	.word	0x20000084
 8003d24:	20000088 	.word	0x20000088

08003d28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d2c:	b090      	sub	sp, #64	; 0x40
 8003d2e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003d30:	2300      	movs	r3, #0
 8003d32:	637b      	str	r3, [r7, #52]	; 0x34
 8003d34:	2300      	movs	r3, #0
 8003d36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d38:	2300      	movs	r3, #0
 8003d3a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d40:	4b59      	ldr	r3, [pc, #356]	; (8003ea8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003d42:	689b      	ldr	r3, [r3, #8]
 8003d44:	f003 030c 	and.w	r3, r3, #12
 8003d48:	2b08      	cmp	r3, #8
 8003d4a:	d00d      	beq.n	8003d68 <HAL_RCC_GetSysClockFreq+0x40>
 8003d4c:	2b08      	cmp	r3, #8
 8003d4e:	f200 80a1 	bhi.w	8003e94 <HAL_RCC_GetSysClockFreq+0x16c>
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d002      	beq.n	8003d5c <HAL_RCC_GetSysClockFreq+0x34>
 8003d56:	2b04      	cmp	r3, #4
 8003d58:	d003      	beq.n	8003d62 <HAL_RCC_GetSysClockFreq+0x3a>
 8003d5a:	e09b      	b.n	8003e94 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003d5c:	4b53      	ldr	r3, [pc, #332]	; (8003eac <HAL_RCC_GetSysClockFreq+0x184>)
 8003d5e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003d60:	e09b      	b.n	8003e9a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003d62:	4b53      	ldr	r3, [pc, #332]	; (8003eb0 <HAL_RCC_GetSysClockFreq+0x188>)
 8003d64:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003d66:	e098      	b.n	8003e9a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d68:	4b4f      	ldr	r3, [pc, #316]	; (8003ea8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d70:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003d72:	4b4d      	ldr	r3, [pc, #308]	; (8003ea8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d028      	beq.n	8003dd0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d7e:	4b4a      	ldr	r3, [pc, #296]	; (8003ea8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	099b      	lsrs	r3, r3, #6
 8003d84:	2200      	movs	r2, #0
 8003d86:	623b      	str	r3, [r7, #32]
 8003d88:	627a      	str	r2, [r7, #36]	; 0x24
 8003d8a:	6a3b      	ldr	r3, [r7, #32]
 8003d8c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003d90:	2100      	movs	r1, #0
 8003d92:	4b47      	ldr	r3, [pc, #284]	; (8003eb0 <HAL_RCC_GetSysClockFreq+0x188>)
 8003d94:	fb03 f201 	mul.w	r2, r3, r1
 8003d98:	2300      	movs	r3, #0
 8003d9a:	fb00 f303 	mul.w	r3, r0, r3
 8003d9e:	4413      	add	r3, r2
 8003da0:	4a43      	ldr	r2, [pc, #268]	; (8003eb0 <HAL_RCC_GetSysClockFreq+0x188>)
 8003da2:	fba0 1202 	umull	r1, r2, r0, r2
 8003da6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003da8:	460a      	mov	r2, r1
 8003daa:	62ba      	str	r2, [r7, #40]	; 0x28
 8003dac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003dae:	4413      	add	r3, r2
 8003db0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003db2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003db4:	2200      	movs	r2, #0
 8003db6:	61bb      	str	r3, [r7, #24]
 8003db8:	61fa      	str	r2, [r7, #28]
 8003dba:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003dbe:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003dc2:	f7fc fa75 	bl	80002b0 <__aeabi_uldivmod>
 8003dc6:	4602      	mov	r2, r0
 8003dc8:	460b      	mov	r3, r1
 8003dca:	4613      	mov	r3, r2
 8003dcc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003dce:	e053      	b.n	8003e78 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003dd0:	4b35      	ldr	r3, [pc, #212]	; (8003ea8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	099b      	lsrs	r3, r3, #6
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	613b      	str	r3, [r7, #16]
 8003dda:	617a      	str	r2, [r7, #20]
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003de2:	f04f 0b00 	mov.w	fp, #0
 8003de6:	4652      	mov	r2, sl
 8003de8:	465b      	mov	r3, fp
 8003dea:	f04f 0000 	mov.w	r0, #0
 8003dee:	f04f 0100 	mov.w	r1, #0
 8003df2:	0159      	lsls	r1, r3, #5
 8003df4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003df8:	0150      	lsls	r0, r2, #5
 8003dfa:	4602      	mov	r2, r0
 8003dfc:	460b      	mov	r3, r1
 8003dfe:	ebb2 080a 	subs.w	r8, r2, sl
 8003e02:	eb63 090b 	sbc.w	r9, r3, fp
 8003e06:	f04f 0200 	mov.w	r2, #0
 8003e0a:	f04f 0300 	mov.w	r3, #0
 8003e0e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003e12:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003e16:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003e1a:	ebb2 0408 	subs.w	r4, r2, r8
 8003e1e:	eb63 0509 	sbc.w	r5, r3, r9
 8003e22:	f04f 0200 	mov.w	r2, #0
 8003e26:	f04f 0300 	mov.w	r3, #0
 8003e2a:	00eb      	lsls	r3, r5, #3
 8003e2c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003e30:	00e2      	lsls	r2, r4, #3
 8003e32:	4614      	mov	r4, r2
 8003e34:	461d      	mov	r5, r3
 8003e36:	eb14 030a 	adds.w	r3, r4, sl
 8003e3a:	603b      	str	r3, [r7, #0]
 8003e3c:	eb45 030b 	adc.w	r3, r5, fp
 8003e40:	607b      	str	r3, [r7, #4]
 8003e42:	f04f 0200 	mov.w	r2, #0
 8003e46:	f04f 0300 	mov.w	r3, #0
 8003e4a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003e4e:	4629      	mov	r1, r5
 8003e50:	028b      	lsls	r3, r1, #10
 8003e52:	4621      	mov	r1, r4
 8003e54:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003e58:	4621      	mov	r1, r4
 8003e5a:	028a      	lsls	r2, r1, #10
 8003e5c:	4610      	mov	r0, r2
 8003e5e:	4619      	mov	r1, r3
 8003e60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e62:	2200      	movs	r2, #0
 8003e64:	60bb      	str	r3, [r7, #8]
 8003e66:	60fa      	str	r2, [r7, #12]
 8003e68:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003e6c:	f7fc fa20 	bl	80002b0 <__aeabi_uldivmod>
 8003e70:	4602      	mov	r2, r0
 8003e72:	460b      	mov	r3, r1
 8003e74:	4613      	mov	r3, r2
 8003e76:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003e78:	4b0b      	ldr	r3, [pc, #44]	; (8003ea8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	0c1b      	lsrs	r3, r3, #16
 8003e7e:	f003 0303 	and.w	r3, r3, #3
 8003e82:	3301      	adds	r3, #1
 8003e84:	005b      	lsls	r3, r3, #1
 8003e86:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003e88:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e90:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003e92:	e002      	b.n	8003e9a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003e94:	4b05      	ldr	r3, [pc, #20]	; (8003eac <HAL_RCC_GetSysClockFreq+0x184>)
 8003e96:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003e98:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	3740      	adds	r7, #64	; 0x40
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ea6:	bf00      	nop
 8003ea8:	40023800 	.word	0x40023800
 8003eac:	00f42400 	.word	0x00f42400
 8003eb0:	017d7840 	.word	0x017d7840

08003eb4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003eb8:	4b03      	ldr	r3, [pc, #12]	; (8003ec8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003eba:	681b      	ldr	r3, [r3, #0]
}
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec4:	4770      	bx	lr
 8003ec6:	bf00      	nop
 8003ec8:	20000084 	.word	0x20000084

08003ecc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003ed0:	f7ff fff0 	bl	8003eb4 <HAL_RCC_GetHCLKFreq>
 8003ed4:	4602      	mov	r2, r0
 8003ed6:	4b05      	ldr	r3, [pc, #20]	; (8003eec <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ed8:	689b      	ldr	r3, [r3, #8]
 8003eda:	0a9b      	lsrs	r3, r3, #10
 8003edc:	f003 0307 	and.w	r3, r3, #7
 8003ee0:	4903      	ldr	r1, [pc, #12]	; (8003ef0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ee2:	5ccb      	ldrb	r3, [r1, r3]
 8003ee4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ee8:	4618      	mov	r0, r3
 8003eea:	bd80      	pop	{r7, pc}
 8003eec:	40023800 	.word	0x40023800
 8003ef0:	08010ff0 	.word	0x08010ff0

08003ef4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003ef8:	f7ff ffdc 	bl	8003eb4 <HAL_RCC_GetHCLKFreq>
 8003efc:	4602      	mov	r2, r0
 8003efe:	4b05      	ldr	r3, [pc, #20]	; (8003f14 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003f00:	689b      	ldr	r3, [r3, #8]
 8003f02:	0b5b      	lsrs	r3, r3, #13
 8003f04:	f003 0307 	and.w	r3, r3, #7
 8003f08:	4903      	ldr	r1, [pc, #12]	; (8003f18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f0a:	5ccb      	ldrb	r3, [r1, r3]
 8003f0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f10:	4618      	mov	r0, r3
 8003f12:	bd80      	pop	{r7, pc}
 8003f14:	40023800 	.word	0x40023800
 8003f18:	08010ff0 	.word	0x08010ff0

08003f1c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b082      	sub	sp, #8
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d101      	bne.n	8003f2e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	e07b      	b.n	8004026 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d108      	bne.n	8003f48 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f3e:	d009      	beq.n	8003f54 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2200      	movs	r2, #0
 8003f44:	61da      	str	r2, [r3, #28]
 8003f46:	e005      	b.n	8003f54 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2200      	movs	r2, #0
 8003f52:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2200      	movs	r2, #0
 8003f58:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003f60:	b2db      	uxtb	r3, r3
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d106      	bne.n	8003f74 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2200      	movs	r2, #0
 8003f6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003f6e:	6878      	ldr	r0, [r7, #4]
 8003f70:	f7fe fb8e 	bl	8002690 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2202      	movs	r2, #2
 8003f78:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	681a      	ldr	r2, [r3, #0]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f8a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	689b      	ldr	r3, [r3, #8]
 8003f98:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003f9c:	431a      	orrs	r2, r3
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	68db      	ldr	r3, [r3, #12]
 8003fa2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fa6:	431a      	orrs	r2, r3
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	691b      	ldr	r3, [r3, #16]
 8003fac:	f003 0302 	and.w	r3, r3, #2
 8003fb0:	431a      	orrs	r2, r3
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	695b      	ldr	r3, [r3, #20]
 8003fb6:	f003 0301 	and.w	r3, r3, #1
 8003fba:	431a      	orrs	r2, r3
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	699b      	ldr	r3, [r3, #24]
 8003fc0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003fc4:	431a      	orrs	r2, r3
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	69db      	ldr	r3, [r3, #28]
 8003fca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003fce:	431a      	orrs	r2, r3
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6a1b      	ldr	r3, [r3, #32]
 8003fd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fd8:	ea42 0103 	orr.w	r1, r2, r3
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fe0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	430a      	orrs	r2, r1
 8003fea:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	699b      	ldr	r3, [r3, #24]
 8003ff0:	0c1b      	lsrs	r3, r3, #16
 8003ff2:	f003 0104 	and.w	r1, r3, #4
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ffa:	f003 0210 	and.w	r2, r3, #16
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	430a      	orrs	r2, r1
 8004004:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	69da      	ldr	r2, [r3, #28]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004014:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2200      	movs	r2, #0
 800401a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2201      	movs	r2, #1
 8004020:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004024:	2300      	movs	r3, #0
}
 8004026:	4618      	mov	r0, r3
 8004028:	3708      	adds	r7, #8
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}

0800402e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800402e:	b580      	push	{r7, lr}
 8004030:	b08c      	sub	sp, #48	; 0x30
 8004032:	af00      	add	r7, sp, #0
 8004034:	60f8      	str	r0, [r7, #12]
 8004036:	60b9      	str	r1, [r7, #8]
 8004038:	607a      	str	r2, [r7, #4]
 800403a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800403c:	2301      	movs	r3, #1
 800403e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004040:	2300      	movs	r3, #0
 8004042:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800404c:	2b01      	cmp	r3, #1
 800404e:	d101      	bne.n	8004054 <HAL_SPI_TransmitReceive+0x26>
 8004050:	2302      	movs	r3, #2
 8004052:	e18a      	b.n	800436a <HAL_SPI_TransmitReceive+0x33c>
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	2201      	movs	r2, #1
 8004058:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800405c:	f7fe fe64 	bl	8002d28 <HAL_GetTick>
 8004060:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004068:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004072:	887b      	ldrh	r3, [r7, #2]
 8004074:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004076:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800407a:	2b01      	cmp	r3, #1
 800407c:	d00f      	beq.n	800409e <HAL_SPI_TransmitReceive+0x70>
 800407e:	69fb      	ldr	r3, [r7, #28]
 8004080:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004084:	d107      	bne.n	8004096 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	689b      	ldr	r3, [r3, #8]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d103      	bne.n	8004096 <HAL_SPI_TransmitReceive+0x68>
 800408e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004092:	2b04      	cmp	r3, #4
 8004094:	d003      	beq.n	800409e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004096:	2302      	movs	r3, #2
 8004098:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800409c:	e15b      	b.n	8004356 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d005      	beq.n	80040b0 <HAL_SPI_TransmitReceive+0x82>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d002      	beq.n	80040b0 <HAL_SPI_TransmitReceive+0x82>
 80040aa:	887b      	ldrh	r3, [r7, #2]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d103      	bne.n	80040b8 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80040b0:	2301      	movs	r3, #1
 80040b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80040b6:	e14e      	b.n	8004356 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80040be:	b2db      	uxtb	r3, r3
 80040c0:	2b04      	cmp	r3, #4
 80040c2:	d003      	beq.n	80040cc <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	2205      	movs	r2, #5
 80040c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	2200      	movs	r2, #0
 80040d0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	687a      	ldr	r2, [r7, #4]
 80040d6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	887a      	ldrh	r2, [r7, #2]
 80040dc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	887a      	ldrh	r2, [r7, #2]
 80040e2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	68ba      	ldr	r2, [r7, #8]
 80040e8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	887a      	ldrh	r2, [r7, #2]
 80040ee:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	887a      	ldrh	r2, [r7, #2]
 80040f4:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	2200      	movs	r2, #0
 80040fa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	2200      	movs	r2, #0
 8004100:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800410c:	2b40      	cmp	r3, #64	; 0x40
 800410e:	d007      	beq.n	8004120 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	681a      	ldr	r2, [r3, #0]
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800411e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	68db      	ldr	r3, [r3, #12]
 8004124:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004128:	d178      	bne.n	800421c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d002      	beq.n	8004138 <HAL_SPI_TransmitReceive+0x10a>
 8004132:	8b7b      	ldrh	r3, [r7, #26]
 8004134:	2b01      	cmp	r3, #1
 8004136:	d166      	bne.n	8004206 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800413c:	881a      	ldrh	r2, [r3, #0]
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004148:	1c9a      	adds	r2, r3, #2
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004152:	b29b      	uxth	r3, r3
 8004154:	3b01      	subs	r3, #1
 8004156:	b29a      	uxth	r2, r3
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800415c:	e053      	b.n	8004206 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	689b      	ldr	r3, [r3, #8]
 8004164:	f003 0302 	and.w	r3, r3, #2
 8004168:	2b02      	cmp	r3, #2
 800416a:	d11b      	bne.n	80041a4 <HAL_SPI_TransmitReceive+0x176>
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004170:	b29b      	uxth	r3, r3
 8004172:	2b00      	cmp	r3, #0
 8004174:	d016      	beq.n	80041a4 <HAL_SPI_TransmitReceive+0x176>
 8004176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004178:	2b01      	cmp	r3, #1
 800417a:	d113      	bne.n	80041a4 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004180:	881a      	ldrh	r2, [r3, #0]
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800418c:	1c9a      	adds	r2, r3, #2
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004196:	b29b      	uxth	r3, r3
 8004198:	3b01      	subs	r3, #1
 800419a:	b29a      	uxth	r2, r3
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80041a0:	2300      	movs	r3, #0
 80041a2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	689b      	ldr	r3, [r3, #8]
 80041aa:	f003 0301 	and.w	r3, r3, #1
 80041ae:	2b01      	cmp	r3, #1
 80041b0:	d119      	bne.n	80041e6 <HAL_SPI_TransmitReceive+0x1b8>
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041b6:	b29b      	uxth	r3, r3
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d014      	beq.n	80041e6 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	68da      	ldr	r2, [r3, #12]
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041c6:	b292      	uxth	r2, r2
 80041c8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ce:	1c9a      	adds	r2, r3, #2
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041d8:	b29b      	uxth	r3, r3
 80041da:	3b01      	subs	r3, #1
 80041dc:	b29a      	uxth	r2, r3
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80041e2:	2301      	movs	r3, #1
 80041e4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80041e6:	f7fe fd9f 	bl	8002d28 <HAL_GetTick>
 80041ea:	4602      	mov	r2, r0
 80041ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ee:	1ad3      	subs	r3, r2, r3
 80041f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80041f2:	429a      	cmp	r2, r3
 80041f4:	d807      	bhi.n	8004206 <HAL_SPI_TransmitReceive+0x1d8>
 80041f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041fc:	d003      	beq.n	8004206 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80041fe:	2303      	movs	r3, #3
 8004200:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004204:	e0a7      	b.n	8004356 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800420a:	b29b      	uxth	r3, r3
 800420c:	2b00      	cmp	r3, #0
 800420e:	d1a6      	bne.n	800415e <HAL_SPI_TransmitReceive+0x130>
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004214:	b29b      	uxth	r3, r3
 8004216:	2b00      	cmp	r3, #0
 8004218:	d1a1      	bne.n	800415e <HAL_SPI_TransmitReceive+0x130>
 800421a:	e07c      	b.n	8004316 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d002      	beq.n	800422a <HAL_SPI_TransmitReceive+0x1fc>
 8004224:	8b7b      	ldrh	r3, [r7, #26]
 8004226:	2b01      	cmp	r3, #1
 8004228:	d16b      	bne.n	8004302 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	330c      	adds	r3, #12
 8004234:	7812      	ldrb	r2, [r2, #0]
 8004236:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800423c:	1c5a      	adds	r2, r3, #1
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004246:	b29b      	uxth	r3, r3
 8004248:	3b01      	subs	r3, #1
 800424a:	b29a      	uxth	r2, r3
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004250:	e057      	b.n	8004302 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	689b      	ldr	r3, [r3, #8]
 8004258:	f003 0302 	and.w	r3, r3, #2
 800425c:	2b02      	cmp	r3, #2
 800425e:	d11c      	bne.n	800429a <HAL_SPI_TransmitReceive+0x26c>
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004264:	b29b      	uxth	r3, r3
 8004266:	2b00      	cmp	r3, #0
 8004268:	d017      	beq.n	800429a <HAL_SPI_TransmitReceive+0x26c>
 800426a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800426c:	2b01      	cmp	r3, #1
 800426e:	d114      	bne.n	800429a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	330c      	adds	r3, #12
 800427a:	7812      	ldrb	r2, [r2, #0]
 800427c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004282:	1c5a      	adds	r2, r3, #1
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800428c:	b29b      	uxth	r3, r3
 800428e:	3b01      	subs	r3, #1
 8004290:	b29a      	uxth	r2, r3
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004296:	2300      	movs	r3, #0
 8004298:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	689b      	ldr	r3, [r3, #8]
 80042a0:	f003 0301 	and.w	r3, r3, #1
 80042a4:	2b01      	cmp	r3, #1
 80042a6:	d119      	bne.n	80042dc <HAL_SPI_TransmitReceive+0x2ae>
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042ac:	b29b      	uxth	r3, r3
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d014      	beq.n	80042dc <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	68da      	ldr	r2, [r3, #12]
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042bc:	b2d2      	uxtb	r2, r2
 80042be:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042c4:	1c5a      	adds	r2, r3, #1
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042ce:	b29b      	uxth	r3, r3
 80042d0:	3b01      	subs	r3, #1
 80042d2:	b29a      	uxth	r2, r3
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80042d8:	2301      	movs	r3, #1
 80042da:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80042dc:	f7fe fd24 	bl	8002d28 <HAL_GetTick>
 80042e0:	4602      	mov	r2, r0
 80042e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e4:	1ad3      	subs	r3, r2, r3
 80042e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80042e8:	429a      	cmp	r2, r3
 80042ea:	d803      	bhi.n	80042f4 <HAL_SPI_TransmitReceive+0x2c6>
 80042ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042f2:	d102      	bne.n	80042fa <HAL_SPI_TransmitReceive+0x2cc>
 80042f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d103      	bne.n	8004302 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80042fa:	2303      	movs	r3, #3
 80042fc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004300:	e029      	b.n	8004356 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004306:	b29b      	uxth	r3, r3
 8004308:	2b00      	cmp	r3, #0
 800430a:	d1a2      	bne.n	8004252 <HAL_SPI_TransmitReceive+0x224>
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004310:	b29b      	uxth	r3, r3
 8004312:	2b00      	cmp	r3, #0
 8004314:	d19d      	bne.n	8004252 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004316:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004318:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800431a:	68f8      	ldr	r0, [r7, #12]
 800431c:	f000 f8b2 	bl	8004484 <SPI_EndRxTxTransaction>
 8004320:	4603      	mov	r3, r0
 8004322:	2b00      	cmp	r3, #0
 8004324:	d006      	beq.n	8004334 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004326:	2301      	movs	r3, #1
 8004328:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	2220      	movs	r2, #32
 8004330:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004332:	e010      	b.n	8004356 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	689b      	ldr	r3, [r3, #8]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d10b      	bne.n	8004354 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800433c:	2300      	movs	r3, #0
 800433e:	617b      	str	r3, [r7, #20]
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	68db      	ldr	r3, [r3, #12]
 8004346:	617b      	str	r3, [r7, #20]
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	617b      	str	r3, [r7, #20]
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	e000      	b.n	8004356 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004354:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	2201      	movs	r2, #1
 800435a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	2200      	movs	r2, #0
 8004362:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004366:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800436a:	4618      	mov	r0, r3
 800436c:	3730      	adds	r7, #48	; 0x30
 800436e:	46bd      	mov	sp, r7
 8004370:	bd80      	pop	{r7, pc}
	...

08004374 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b088      	sub	sp, #32
 8004378:	af00      	add	r7, sp, #0
 800437a:	60f8      	str	r0, [r7, #12]
 800437c:	60b9      	str	r1, [r7, #8]
 800437e:	603b      	str	r3, [r7, #0]
 8004380:	4613      	mov	r3, r2
 8004382:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004384:	f7fe fcd0 	bl	8002d28 <HAL_GetTick>
 8004388:	4602      	mov	r2, r0
 800438a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800438c:	1a9b      	subs	r3, r3, r2
 800438e:	683a      	ldr	r2, [r7, #0]
 8004390:	4413      	add	r3, r2
 8004392:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004394:	f7fe fcc8 	bl	8002d28 <HAL_GetTick>
 8004398:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800439a:	4b39      	ldr	r3, [pc, #228]	; (8004480 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	015b      	lsls	r3, r3, #5
 80043a0:	0d1b      	lsrs	r3, r3, #20
 80043a2:	69fa      	ldr	r2, [r7, #28]
 80043a4:	fb02 f303 	mul.w	r3, r2, r3
 80043a8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80043aa:	e054      	b.n	8004456 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043b2:	d050      	beq.n	8004456 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80043b4:	f7fe fcb8 	bl	8002d28 <HAL_GetTick>
 80043b8:	4602      	mov	r2, r0
 80043ba:	69bb      	ldr	r3, [r7, #24]
 80043bc:	1ad3      	subs	r3, r2, r3
 80043be:	69fa      	ldr	r2, [r7, #28]
 80043c0:	429a      	cmp	r2, r3
 80043c2:	d902      	bls.n	80043ca <SPI_WaitFlagStateUntilTimeout+0x56>
 80043c4:	69fb      	ldr	r3, [r7, #28]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d13d      	bne.n	8004446 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	685a      	ldr	r2, [r3, #4]
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80043d8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80043e2:	d111      	bne.n	8004408 <SPI_WaitFlagStateUntilTimeout+0x94>
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	689b      	ldr	r3, [r3, #8]
 80043e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043ec:	d004      	beq.n	80043f8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	689b      	ldr	r3, [r3, #8]
 80043f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043f6:	d107      	bne.n	8004408 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	681a      	ldr	r2, [r3, #0]
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004406:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800440c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004410:	d10f      	bne.n	8004432 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	681a      	ldr	r2, [r3, #0]
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004420:	601a      	str	r2, [r3, #0]
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	681a      	ldr	r2, [r3, #0]
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004430:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	2201      	movs	r2, #1
 8004436:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	2200      	movs	r2, #0
 800443e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004442:	2303      	movs	r3, #3
 8004444:	e017      	b.n	8004476 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004446:	697b      	ldr	r3, [r7, #20]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d101      	bne.n	8004450 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800444c:	2300      	movs	r3, #0
 800444e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	3b01      	subs	r3, #1
 8004454:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	689a      	ldr	r2, [r3, #8]
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	4013      	ands	r3, r2
 8004460:	68ba      	ldr	r2, [r7, #8]
 8004462:	429a      	cmp	r2, r3
 8004464:	bf0c      	ite	eq
 8004466:	2301      	moveq	r3, #1
 8004468:	2300      	movne	r3, #0
 800446a:	b2db      	uxtb	r3, r3
 800446c:	461a      	mov	r2, r3
 800446e:	79fb      	ldrb	r3, [r7, #7]
 8004470:	429a      	cmp	r2, r3
 8004472:	d19b      	bne.n	80043ac <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004474:	2300      	movs	r3, #0
}
 8004476:	4618      	mov	r0, r3
 8004478:	3720      	adds	r7, #32
 800447a:	46bd      	mov	sp, r7
 800447c:	bd80      	pop	{r7, pc}
 800447e:	bf00      	nop
 8004480:	20000084 	.word	0x20000084

08004484 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b088      	sub	sp, #32
 8004488:	af02      	add	r7, sp, #8
 800448a:	60f8      	str	r0, [r7, #12]
 800448c:	60b9      	str	r1, [r7, #8]
 800448e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004490:	4b1b      	ldr	r3, [pc, #108]	; (8004500 <SPI_EndRxTxTransaction+0x7c>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a1b      	ldr	r2, [pc, #108]	; (8004504 <SPI_EndRxTxTransaction+0x80>)
 8004496:	fba2 2303 	umull	r2, r3, r2, r3
 800449a:	0d5b      	lsrs	r3, r3, #21
 800449c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80044a0:	fb02 f303 	mul.w	r3, r2, r3
 80044a4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80044ae:	d112      	bne.n	80044d6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	9300      	str	r3, [sp, #0]
 80044b4:	68bb      	ldr	r3, [r7, #8]
 80044b6:	2200      	movs	r2, #0
 80044b8:	2180      	movs	r1, #128	; 0x80
 80044ba:	68f8      	ldr	r0, [r7, #12]
 80044bc:	f7ff ff5a 	bl	8004374 <SPI_WaitFlagStateUntilTimeout>
 80044c0:	4603      	mov	r3, r0
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d016      	beq.n	80044f4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044ca:	f043 0220 	orr.w	r2, r3, #32
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80044d2:	2303      	movs	r3, #3
 80044d4:	e00f      	b.n	80044f6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d00a      	beq.n	80044f2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	3b01      	subs	r3, #1
 80044e0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	689b      	ldr	r3, [r3, #8]
 80044e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044ec:	2b80      	cmp	r3, #128	; 0x80
 80044ee:	d0f2      	beq.n	80044d6 <SPI_EndRxTxTransaction+0x52>
 80044f0:	e000      	b.n	80044f4 <SPI_EndRxTxTransaction+0x70>
        break;
 80044f2:	bf00      	nop
  }

  return HAL_OK;
 80044f4:	2300      	movs	r3, #0
}
 80044f6:	4618      	mov	r0, r3
 80044f8:	3718      	adds	r7, #24
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bd80      	pop	{r7, pc}
 80044fe:	bf00      	nop
 8004500:	20000084 	.word	0x20000084
 8004504:	165e9f81 	.word	0x165e9f81

08004508 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b082      	sub	sp, #8
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d101      	bne.n	800451a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004516:	2301      	movs	r3, #1
 8004518:	e041      	b.n	800459e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004520:	b2db      	uxtb	r3, r3
 8004522:	2b00      	cmp	r3, #0
 8004524:	d106      	bne.n	8004534 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2200      	movs	r2, #0
 800452a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800452e:	6878      	ldr	r0, [r7, #4]
 8004530:	f7fe f8f6 	bl	8002720 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2202      	movs	r2, #2
 8004538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681a      	ldr	r2, [r3, #0]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	3304      	adds	r3, #4
 8004544:	4619      	mov	r1, r3
 8004546:	4610      	mov	r0, r2
 8004548:	f000 fce4 	bl	8004f14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2201      	movs	r2, #1
 8004550:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2201      	movs	r2, #1
 8004558:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2201      	movs	r2, #1
 8004560:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2201      	movs	r2, #1
 8004568:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2201      	movs	r2, #1
 8004570:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2201      	movs	r2, #1
 8004578:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2201      	movs	r2, #1
 8004580:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2201      	movs	r2, #1
 8004588:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2201      	movs	r2, #1
 8004590:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2201      	movs	r2, #1
 8004598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800459c:	2300      	movs	r3, #0
}
 800459e:	4618      	mov	r0, r3
 80045a0:	3708      	adds	r7, #8
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bd80      	pop	{r7, pc}

080045a6 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80045a6:	b580      	push	{r7, lr}
 80045a8:	b082      	sub	sp, #8
 80045aa:	af00      	add	r7, sp, #0
 80045ac:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d101      	bne.n	80045b8 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80045b4:	2301      	movs	r3, #1
 80045b6:	e041      	b.n	800463c <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045be:	b2db      	uxtb	r3, r3
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d106      	bne.n	80045d2 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2200      	movs	r2, #0
 80045c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80045cc:	6878      	ldr	r0, [r7, #4]
 80045ce:	f000 f839 	bl	8004644 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2202      	movs	r2, #2
 80045d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681a      	ldr	r2, [r3, #0]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	3304      	adds	r3, #4
 80045e2:	4619      	mov	r1, r3
 80045e4:	4610      	mov	r0, r2
 80045e6:	f000 fc95 	bl	8004f14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2201      	movs	r2, #1
 80045ee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2201      	movs	r2, #1
 80045f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2201      	movs	r2, #1
 80045fe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2201      	movs	r2, #1
 8004606:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2201      	movs	r2, #1
 800460e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2201      	movs	r2, #1
 8004616:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2201      	movs	r2, #1
 800461e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2201      	movs	r2, #1
 8004626:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2201      	movs	r2, #1
 800462e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2201      	movs	r2, #1
 8004636:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800463a:	2300      	movs	r3, #0
}
 800463c:	4618      	mov	r0, r3
 800463e:	3708      	adds	r7, #8
 8004640:	46bd      	mov	sp, r7
 8004642:	bd80      	pop	{r7, pc}

08004644 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8004644:	b480      	push	{r7}
 8004646:	b083      	sub	sp, #12
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800464c:	bf00      	nop
 800464e:	370c      	adds	r7, #12
 8004650:	46bd      	mov	sp, r7
 8004652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004656:	4770      	bx	lr

08004658 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b084      	sub	sp, #16
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
 8004660:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004662:	2300      	movs	r3, #0
 8004664:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d109      	bne.n	8004680 <HAL_TIM_OC_Start_IT+0x28>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004672:	b2db      	uxtb	r3, r3
 8004674:	2b01      	cmp	r3, #1
 8004676:	bf14      	ite	ne
 8004678:	2301      	movne	r3, #1
 800467a:	2300      	moveq	r3, #0
 800467c:	b2db      	uxtb	r3, r3
 800467e:	e022      	b.n	80046c6 <HAL_TIM_OC_Start_IT+0x6e>
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	2b04      	cmp	r3, #4
 8004684:	d109      	bne.n	800469a <HAL_TIM_OC_Start_IT+0x42>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800468c:	b2db      	uxtb	r3, r3
 800468e:	2b01      	cmp	r3, #1
 8004690:	bf14      	ite	ne
 8004692:	2301      	movne	r3, #1
 8004694:	2300      	moveq	r3, #0
 8004696:	b2db      	uxtb	r3, r3
 8004698:	e015      	b.n	80046c6 <HAL_TIM_OC_Start_IT+0x6e>
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	2b08      	cmp	r3, #8
 800469e:	d109      	bne.n	80046b4 <HAL_TIM_OC_Start_IT+0x5c>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80046a6:	b2db      	uxtb	r3, r3
 80046a8:	2b01      	cmp	r3, #1
 80046aa:	bf14      	ite	ne
 80046ac:	2301      	movne	r3, #1
 80046ae:	2300      	moveq	r3, #0
 80046b0:	b2db      	uxtb	r3, r3
 80046b2:	e008      	b.n	80046c6 <HAL_TIM_OC_Start_IT+0x6e>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80046ba:	b2db      	uxtb	r3, r3
 80046bc:	2b01      	cmp	r3, #1
 80046be:	bf14      	ite	ne
 80046c0:	2301      	movne	r3, #1
 80046c2:	2300      	moveq	r3, #0
 80046c4:	b2db      	uxtb	r3, r3
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d001      	beq.n	80046ce <HAL_TIM_OC_Start_IT+0x76>
  {
    return HAL_ERROR;
 80046ca:	2301      	movs	r3, #1
 80046cc:	e0b3      	b.n	8004836 <HAL_TIM_OC_Start_IT+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d104      	bne.n	80046de <HAL_TIM_OC_Start_IT+0x86>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2202      	movs	r2, #2
 80046d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80046dc:	e013      	b.n	8004706 <HAL_TIM_OC_Start_IT+0xae>
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	2b04      	cmp	r3, #4
 80046e2:	d104      	bne.n	80046ee <HAL_TIM_OC_Start_IT+0x96>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2202      	movs	r2, #2
 80046e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80046ec:	e00b      	b.n	8004706 <HAL_TIM_OC_Start_IT+0xae>
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	2b08      	cmp	r3, #8
 80046f2:	d104      	bne.n	80046fe <HAL_TIM_OC_Start_IT+0xa6>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2202      	movs	r2, #2
 80046f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80046fc:	e003      	b.n	8004706 <HAL_TIM_OC_Start_IT+0xae>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2202      	movs	r2, #2
 8004702:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	2b0c      	cmp	r3, #12
 800470a:	d841      	bhi.n	8004790 <HAL_TIM_OC_Start_IT+0x138>
 800470c:	a201      	add	r2, pc, #4	; (adr r2, 8004714 <HAL_TIM_OC_Start_IT+0xbc>)
 800470e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004712:	bf00      	nop
 8004714:	08004749 	.word	0x08004749
 8004718:	08004791 	.word	0x08004791
 800471c:	08004791 	.word	0x08004791
 8004720:	08004791 	.word	0x08004791
 8004724:	0800475b 	.word	0x0800475b
 8004728:	08004791 	.word	0x08004791
 800472c:	08004791 	.word	0x08004791
 8004730:	08004791 	.word	0x08004791
 8004734:	0800476d 	.word	0x0800476d
 8004738:	08004791 	.word	0x08004791
 800473c:	08004791 	.word	0x08004791
 8004740:	08004791 	.word	0x08004791
 8004744:	0800477f 	.word	0x0800477f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	68da      	ldr	r2, [r3, #12]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f042 0202 	orr.w	r2, r2, #2
 8004756:	60da      	str	r2, [r3, #12]
      break;
 8004758:	e01d      	b.n	8004796 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	68da      	ldr	r2, [r3, #12]
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f042 0204 	orr.w	r2, r2, #4
 8004768:	60da      	str	r2, [r3, #12]
      break;
 800476a:	e014      	b.n	8004796 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	68da      	ldr	r2, [r3, #12]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f042 0208 	orr.w	r2, r2, #8
 800477a:	60da      	str	r2, [r3, #12]
      break;
 800477c:	e00b      	b.n	8004796 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	68da      	ldr	r2, [r3, #12]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f042 0210 	orr.w	r2, r2, #16
 800478c:	60da      	str	r2, [r3, #12]
      break;
 800478e:	e002      	b.n	8004796 <HAL_TIM_OC_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8004790:	2301      	movs	r3, #1
 8004792:	73fb      	strb	r3, [r7, #15]
      break;
 8004794:	bf00      	nop
  }

  if (status == HAL_OK)
 8004796:	7bfb      	ldrb	r3, [r7, #15]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d14b      	bne.n	8004834 <HAL_TIM_OC_Start_IT+0x1dc>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	2201      	movs	r2, #1
 80047a2:	6839      	ldr	r1, [r7, #0]
 80047a4:	4618      	mov	r0, r3
 80047a6:	f000 fe5b 	bl	8005460 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4a24      	ldr	r2, [pc, #144]	; (8004840 <HAL_TIM_OC_Start_IT+0x1e8>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d107      	bne.n	80047c4 <HAL_TIM_OC_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80047c2:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4a1d      	ldr	r2, [pc, #116]	; (8004840 <HAL_TIM_OC_Start_IT+0x1e8>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d018      	beq.n	8004800 <HAL_TIM_OC_Start_IT+0x1a8>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047d6:	d013      	beq.n	8004800 <HAL_TIM_OC_Start_IT+0x1a8>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a19      	ldr	r2, [pc, #100]	; (8004844 <HAL_TIM_OC_Start_IT+0x1ec>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d00e      	beq.n	8004800 <HAL_TIM_OC_Start_IT+0x1a8>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4a18      	ldr	r2, [pc, #96]	; (8004848 <HAL_TIM_OC_Start_IT+0x1f0>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d009      	beq.n	8004800 <HAL_TIM_OC_Start_IT+0x1a8>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4a16      	ldr	r2, [pc, #88]	; (800484c <HAL_TIM_OC_Start_IT+0x1f4>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d004      	beq.n	8004800 <HAL_TIM_OC_Start_IT+0x1a8>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4a15      	ldr	r2, [pc, #84]	; (8004850 <HAL_TIM_OC_Start_IT+0x1f8>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d111      	bne.n	8004824 <HAL_TIM_OC_Start_IT+0x1cc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	689b      	ldr	r3, [r3, #8]
 8004806:	f003 0307 	and.w	r3, r3, #7
 800480a:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	2b06      	cmp	r3, #6
 8004810:	d010      	beq.n	8004834 <HAL_TIM_OC_Start_IT+0x1dc>
      {
        __HAL_TIM_ENABLE(htim);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	681a      	ldr	r2, [r3, #0]
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f042 0201 	orr.w	r2, r2, #1
 8004820:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004822:	e007      	b.n	8004834 <HAL_TIM_OC_Start_IT+0x1dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	681a      	ldr	r2, [r3, #0]
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f042 0201 	orr.w	r2, r2, #1
 8004832:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004834:	7bfb      	ldrb	r3, [r7, #15]
}
 8004836:	4618      	mov	r0, r3
 8004838:	3710      	adds	r7, #16
 800483a:	46bd      	mov	sp, r7
 800483c:	bd80      	pop	{r7, pc}
 800483e:	bf00      	nop
 8004840:	40010000 	.word	0x40010000
 8004844:	40000400 	.word	0x40000400
 8004848:	40000800 	.word	0x40000800
 800484c:	40000c00 	.word	0x40000c00
 8004850:	40014000 	.word	0x40014000

08004854 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b084      	sub	sp, #16
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
 800485c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800485e:	2300      	movs	r3, #0
 8004860:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	2b0c      	cmp	r3, #12
 8004866:	d841      	bhi.n	80048ec <HAL_TIM_OC_Stop_IT+0x98>
 8004868:	a201      	add	r2, pc, #4	; (adr r2, 8004870 <HAL_TIM_OC_Stop_IT+0x1c>)
 800486a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800486e:	bf00      	nop
 8004870:	080048a5 	.word	0x080048a5
 8004874:	080048ed 	.word	0x080048ed
 8004878:	080048ed 	.word	0x080048ed
 800487c:	080048ed 	.word	0x080048ed
 8004880:	080048b7 	.word	0x080048b7
 8004884:	080048ed 	.word	0x080048ed
 8004888:	080048ed 	.word	0x080048ed
 800488c:	080048ed 	.word	0x080048ed
 8004890:	080048c9 	.word	0x080048c9
 8004894:	080048ed 	.word	0x080048ed
 8004898:	080048ed 	.word	0x080048ed
 800489c:	080048ed 	.word	0x080048ed
 80048a0:	080048db 	.word	0x080048db
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	68da      	ldr	r2, [r3, #12]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f022 0202 	bic.w	r2, r2, #2
 80048b2:	60da      	str	r2, [r3, #12]
      break;
 80048b4:	e01d      	b.n	80048f2 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	68da      	ldr	r2, [r3, #12]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f022 0204 	bic.w	r2, r2, #4
 80048c4:	60da      	str	r2, [r3, #12]
      break;
 80048c6:	e014      	b.n	80048f2 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	68da      	ldr	r2, [r3, #12]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f022 0208 	bic.w	r2, r2, #8
 80048d6:	60da      	str	r2, [r3, #12]
      break;
 80048d8:	e00b      	b.n	80048f2 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	68da      	ldr	r2, [r3, #12]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f022 0210 	bic.w	r2, r2, #16
 80048e8:	60da      	str	r2, [r3, #12]
      break;
 80048ea:	e002      	b.n	80048f2 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 80048ec:	2301      	movs	r3, #1
 80048ee:	73fb      	strb	r3, [r7, #15]
      break;
 80048f0:	bf00      	nop
  }

  if (status == HAL_OK)
 80048f2:	7bfb      	ldrb	r3, [r7, #15]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d157      	bne.n	80049a8 <HAL_TIM_OC_Stop_IT+0x154>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	2200      	movs	r2, #0
 80048fe:	6839      	ldr	r1, [r7, #0]
 8004900:	4618      	mov	r0, r3
 8004902:	f000 fdad 	bl	8005460 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4a2a      	ldr	r2, [pc, #168]	; (80049b4 <HAL_TIM_OC_Stop_IT+0x160>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d117      	bne.n	8004940 <HAL_TIM_OC_Stop_IT+0xec>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	6a1a      	ldr	r2, [r3, #32]
 8004916:	f241 1311 	movw	r3, #4369	; 0x1111
 800491a:	4013      	ands	r3, r2
 800491c:	2b00      	cmp	r3, #0
 800491e:	d10f      	bne.n	8004940 <HAL_TIM_OC_Stop_IT+0xec>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	6a1a      	ldr	r2, [r3, #32]
 8004926:	f240 4344 	movw	r3, #1092	; 0x444
 800492a:	4013      	ands	r3, r2
 800492c:	2b00      	cmp	r3, #0
 800492e:	d107      	bne.n	8004940 <HAL_TIM_OC_Stop_IT+0xec>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800493e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	6a1a      	ldr	r2, [r3, #32]
 8004946:	f241 1311 	movw	r3, #4369	; 0x1111
 800494a:	4013      	ands	r3, r2
 800494c:	2b00      	cmp	r3, #0
 800494e:	d10f      	bne.n	8004970 <HAL_TIM_OC_Stop_IT+0x11c>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	6a1a      	ldr	r2, [r3, #32]
 8004956:	f240 4344 	movw	r3, #1092	; 0x444
 800495a:	4013      	ands	r3, r2
 800495c:	2b00      	cmp	r3, #0
 800495e:	d107      	bne.n	8004970 <HAL_TIM_OC_Stop_IT+0x11c>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	681a      	ldr	r2, [r3, #0]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f022 0201 	bic.w	r2, r2, #1
 800496e:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d104      	bne.n	8004980 <HAL_TIM_OC_Stop_IT+0x12c>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2201      	movs	r2, #1
 800497a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800497e:	e013      	b.n	80049a8 <HAL_TIM_OC_Stop_IT+0x154>
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	2b04      	cmp	r3, #4
 8004984:	d104      	bne.n	8004990 <HAL_TIM_OC_Stop_IT+0x13c>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2201      	movs	r2, #1
 800498a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800498e:	e00b      	b.n	80049a8 <HAL_TIM_OC_Stop_IT+0x154>
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	2b08      	cmp	r3, #8
 8004994:	d104      	bne.n	80049a0 <HAL_TIM_OC_Stop_IT+0x14c>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2201      	movs	r2, #1
 800499a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800499e:	e003      	b.n	80049a8 <HAL_TIM_OC_Stop_IT+0x154>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2201      	movs	r2, #1
 80049a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 80049a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80049aa:	4618      	mov	r0, r3
 80049ac:	3710      	adds	r7, #16
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bd80      	pop	{r7, pc}
 80049b2:	bf00      	nop
 80049b4:	40010000 	.word	0x40010000

080049b8 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b082      	sub	sp, #8
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
 80049c0:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d101      	bne.n	80049cc <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 80049c8:	2301      	movs	r3, #1
 80049ca:	e041      	b.n	8004a50 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049d2:	b2db      	uxtb	r3, r3
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d106      	bne.n	80049e6 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2200      	movs	r2, #0
 80049dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 80049e0:	6878      	ldr	r0, [r7, #4]
 80049e2:	f000 f839 	bl	8004a58 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2202      	movs	r2, #2
 80049ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681a      	ldr	r2, [r3, #0]
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	3304      	adds	r3, #4
 80049f6:	4619      	mov	r1, r3
 80049f8:	4610      	mov	r0, r2
 80049fa:	f000 fa8b 	bl	8004f14 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	681a      	ldr	r2, [r3, #0]
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f022 0208 	bic.w	r2, r2, #8
 8004a0c:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	6819      	ldr	r1, [r3, #0]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	683a      	ldr	r2, [r7, #0]
 8004a1a:	430a      	orrs	r2, r1
 8004a1c:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2201      	movs	r2, #1
 8004a22:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2201      	movs	r2, #1
 8004a2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2201      	movs	r2, #1
 8004a32:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2201      	movs	r2, #1
 8004a3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2201      	movs	r2, #1
 8004a42:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2201      	movs	r2, #1
 8004a4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a4e:	2300      	movs	r3, #0
}
 8004a50:	4618      	mov	r0, r3
 8004a52:	3708      	adds	r7, #8
 8004a54:	46bd      	mov	sp, r7
 8004a56:	bd80      	pop	{r7, pc}

08004a58 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	b083      	sub	sp, #12
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8004a60:	bf00      	nop
 8004a62:	370c      	adds	r7, #12
 8004a64:	46bd      	mov	sp, r7
 8004a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6a:	4770      	bx	lr

08004a6c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b082      	sub	sp, #8
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	691b      	ldr	r3, [r3, #16]
 8004a7a:	f003 0302 	and.w	r3, r3, #2
 8004a7e:	2b02      	cmp	r3, #2
 8004a80:	d122      	bne.n	8004ac8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	68db      	ldr	r3, [r3, #12]
 8004a88:	f003 0302 	and.w	r3, r3, #2
 8004a8c:	2b02      	cmp	r3, #2
 8004a8e:	d11b      	bne.n	8004ac8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f06f 0202 	mvn.w	r2, #2
 8004a98:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2201      	movs	r2, #1
 8004a9e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	699b      	ldr	r3, [r3, #24]
 8004aa6:	f003 0303 	and.w	r3, r3, #3
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d003      	beq.n	8004ab6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004aae:	6878      	ldr	r0, [r7, #4]
 8004ab0:	f000 fa11 	bl	8004ed6 <HAL_TIM_IC_CaptureCallback>
 8004ab4:	e005      	b.n	8004ac2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ab6:	6878      	ldr	r0, [r7, #4]
 8004ab8:	f7fd fc36 	bl	8002328 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004abc:	6878      	ldr	r0, [r7, #4]
 8004abe:	f000 fa14 	bl	8004eea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	691b      	ldr	r3, [r3, #16]
 8004ace:	f003 0304 	and.w	r3, r3, #4
 8004ad2:	2b04      	cmp	r3, #4
 8004ad4:	d122      	bne.n	8004b1c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	68db      	ldr	r3, [r3, #12]
 8004adc:	f003 0304 	and.w	r3, r3, #4
 8004ae0:	2b04      	cmp	r3, #4
 8004ae2:	d11b      	bne.n	8004b1c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f06f 0204 	mvn.w	r2, #4
 8004aec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2202      	movs	r2, #2
 8004af2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	699b      	ldr	r3, [r3, #24]
 8004afa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d003      	beq.n	8004b0a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b02:	6878      	ldr	r0, [r7, #4]
 8004b04:	f000 f9e7 	bl	8004ed6 <HAL_TIM_IC_CaptureCallback>
 8004b08:	e005      	b.n	8004b16 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b0a:	6878      	ldr	r0, [r7, #4]
 8004b0c:	f7fd fc0c 	bl	8002328 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b10:	6878      	ldr	r0, [r7, #4]
 8004b12:	f000 f9ea 	bl	8004eea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	691b      	ldr	r3, [r3, #16]
 8004b22:	f003 0308 	and.w	r3, r3, #8
 8004b26:	2b08      	cmp	r3, #8
 8004b28:	d122      	bne.n	8004b70 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	68db      	ldr	r3, [r3, #12]
 8004b30:	f003 0308 	and.w	r3, r3, #8
 8004b34:	2b08      	cmp	r3, #8
 8004b36:	d11b      	bne.n	8004b70 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f06f 0208 	mvn.w	r2, #8
 8004b40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2204      	movs	r2, #4
 8004b46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	69db      	ldr	r3, [r3, #28]
 8004b4e:	f003 0303 	and.w	r3, r3, #3
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d003      	beq.n	8004b5e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b56:	6878      	ldr	r0, [r7, #4]
 8004b58:	f000 f9bd 	bl	8004ed6 <HAL_TIM_IC_CaptureCallback>
 8004b5c:	e005      	b.n	8004b6a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b5e:	6878      	ldr	r0, [r7, #4]
 8004b60:	f7fd fbe2 	bl	8002328 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b64:	6878      	ldr	r0, [r7, #4]
 8004b66:	f000 f9c0 	bl	8004eea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	691b      	ldr	r3, [r3, #16]
 8004b76:	f003 0310 	and.w	r3, r3, #16
 8004b7a:	2b10      	cmp	r3, #16
 8004b7c:	d122      	bne.n	8004bc4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	68db      	ldr	r3, [r3, #12]
 8004b84:	f003 0310 	and.w	r3, r3, #16
 8004b88:	2b10      	cmp	r3, #16
 8004b8a:	d11b      	bne.n	8004bc4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f06f 0210 	mvn.w	r2, #16
 8004b94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2208      	movs	r2, #8
 8004b9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	69db      	ldr	r3, [r3, #28]
 8004ba2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d003      	beq.n	8004bb2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004baa:	6878      	ldr	r0, [r7, #4]
 8004bac:	f000 f993 	bl	8004ed6 <HAL_TIM_IC_CaptureCallback>
 8004bb0:	e005      	b.n	8004bbe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bb2:	6878      	ldr	r0, [r7, #4]
 8004bb4:	f7fd fbb8 	bl	8002328 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bb8:	6878      	ldr	r0, [r7, #4]
 8004bba:	f000 f996 	bl	8004eea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	691b      	ldr	r3, [r3, #16]
 8004bca:	f003 0301 	and.w	r3, r3, #1
 8004bce:	2b01      	cmp	r3, #1
 8004bd0:	d10e      	bne.n	8004bf0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	68db      	ldr	r3, [r3, #12]
 8004bd8:	f003 0301 	and.w	r3, r3, #1
 8004bdc:	2b01      	cmp	r3, #1
 8004bde:	d107      	bne.n	8004bf0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f06f 0201 	mvn.w	r2, #1
 8004be8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004bea:	6878      	ldr	r0, [r7, #4]
 8004bec:	f000 f969 	bl	8004ec2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	691b      	ldr	r3, [r3, #16]
 8004bf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bfa:	2b80      	cmp	r3, #128	; 0x80
 8004bfc:	d10e      	bne.n	8004c1c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	68db      	ldr	r3, [r3, #12]
 8004c04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c08:	2b80      	cmp	r3, #128	; 0x80
 8004c0a:	d107      	bne.n	8004c1c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004c14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004c16:	6878      	ldr	r0, [r7, #4]
 8004c18:	f000 fcc0 	bl	800559c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	691b      	ldr	r3, [r3, #16]
 8004c22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c26:	2b40      	cmp	r3, #64	; 0x40
 8004c28:	d10e      	bne.n	8004c48 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	68db      	ldr	r3, [r3, #12]
 8004c30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c34:	2b40      	cmp	r3, #64	; 0x40
 8004c36:	d107      	bne.n	8004c48 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004c40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004c42:	6878      	ldr	r0, [r7, #4]
 8004c44:	f000 f95b 	bl	8004efe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	691b      	ldr	r3, [r3, #16]
 8004c4e:	f003 0320 	and.w	r3, r3, #32
 8004c52:	2b20      	cmp	r3, #32
 8004c54:	d10e      	bne.n	8004c74 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	68db      	ldr	r3, [r3, #12]
 8004c5c:	f003 0320 	and.w	r3, r3, #32
 8004c60:	2b20      	cmp	r3, #32
 8004c62:	d107      	bne.n	8004c74 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f06f 0220 	mvn.w	r2, #32
 8004c6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004c6e:	6878      	ldr	r0, [r7, #4]
 8004c70:	f000 fc8a 	bl	8005588 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004c74:	bf00      	nop
 8004c76:	3708      	adds	r7, #8
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	bd80      	pop	{r7, pc}

08004c7c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b086      	sub	sp, #24
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	60f8      	str	r0, [r7, #12]
 8004c84:	60b9      	str	r1, [r7, #8]
 8004c86:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c88:	2300      	movs	r3, #0
 8004c8a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c92:	2b01      	cmp	r3, #1
 8004c94:	d101      	bne.n	8004c9a <HAL_TIM_OC_ConfigChannel+0x1e>
 8004c96:	2302      	movs	r3, #2
 8004c98:	e048      	b.n	8004d2c <HAL_TIM_OC_ConfigChannel+0xb0>
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	2201      	movs	r2, #1
 8004c9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2b0c      	cmp	r3, #12
 8004ca6:	d839      	bhi.n	8004d1c <HAL_TIM_OC_ConfigChannel+0xa0>
 8004ca8:	a201      	add	r2, pc, #4	; (adr r2, 8004cb0 <HAL_TIM_OC_ConfigChannel+0x34>)
 8004caa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cae:	bf00      	nop
 8004cb0:	08004ce5 	.word	0x08004ce5
 8004cb4:	08004d1d 	.word	0x08004d1d
 8004cb8:	08004d1d 	.word	0x08004d1d
 8004cbc:	08004d1d 	.word	0x08004d1d
 8004cc0:	08004cf3 	.word	0x08004cf3
 8004cc4:	08004d1d 	.word	0x08004d1d
 8004cc8:	08004d1d 	.word	0x08004d1d
 8004ccc:	08004d1d 	.word	0x08004d1d
 8004cd0:	08004d01 	.word	0x08004d01
 8004cd4:	08004d1d 	.word	0x08004d1d
 8004cd8:	08004d1d 	.word	0x08004d1d
 8004cdc:	08004d1d 	.word	0x08004d1d
 8004ce0:	08004d0f 	.word	0x08004d0f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	68b9      	ldr	r1, [r7, #8]
 8004cea:	4618      	mov	r0, r3
 8004cec:	f000 f992 	bl	8005014 <TIM_OC1_SetConfig>
      break;
 8004cf0:	e017      	b.n	8004d22 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	68b9      	ldr	r1, [r7, #8]
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	f000 f9f1 	bl	80050e0 <TIM_OC2_SetConfig>
      break;
 8004cfe:	e010      	b.n	8004d22 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	68b9      	ldr	r1, [r7, #8]
 8004d06:	4618      	mov	r0, r3
 8004d08:	f000 fa56 	bl	80051b8 <TIM_OC3_SetConfig>
      break;
 8004d0c:	e009      	b.n	8004d22 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	68b9      	ldr	r1, [r7, #8]
 8004d14:	4618      	mov	r0, r3
 8004d16:	f000 fab9 	bl	800528c <TIM_OC4_SetConfig>
      break;
 8004d1a:	e002      	b.n	8004d22 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	75fb      	strb	r3, [r7, #23]
      break;
 8004d20:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	2200      	movs	r2, #0
 8004d26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004d2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	3718      	adds	r7, #24
 8004d30:	46bd      	mov	sp, r7
 8004d32:	bd80      	pop	{r7, pc}

08004d34 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b084      	sub	sp, #16
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
 8004d3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d3e:	2300      	movs	r3, #0
 8004d40:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d48:	2b01      	cmp	r3, #1
 8004d4a:	d101      	bne.n	8004d50 <HAL_TIM_ConfigClockSource+0x1c>
 8004d4c:	2302      	movs	r3, #2
 8004d4e:	e0b4      	b.n	8004eba <HAL_TIM_ConfigClockSource+0x186>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2201      	movs	r2, #1
 8004d54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2202      	movs	r2, #2
 8004d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	689b      	ldr	r3, [r3, #8]
 8004d66:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004d6e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004d76:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	68ba      	ldr	r2, [r7, #8]
 8004d7e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d88:	d03e      	beq.n	8004e08 <HAL_TIM_ConfigClockSource+0xd4>
 8004d8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d8e:	f200 8087 	bhi.w	8004ea0 <HAL_TIM_ConfigClockSource+0x16c>
 8004d92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d96:	f000 8086 	beq.w	8004ea6 <HAL_TIM_ConfigClockSource+0x172>
 8004d9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d9e:	d87f      	bhi.n	8004ea0 <HAL_TIM_ConfigClockSource+0x16c>
 8004da0:	2b70      	cmp	r3, #112	; 0x70
 8004da2:	d01a      	beq.n	8004dda <HAL_TIM_ConfigClockSource+0xa6>
 8004da4:	2b70      	cmp	r3, #112	; 0x70
 8004da6:	d87b      	bhi.n	8004ea0 <HAL_TIM_ConfigClockSource+0x16c>
 8004da8:	2b60      	cmp	r3, #96	; 0x60
 8004daa:	d050      	beq.n	8004e4e <HAL_TIM_ConfigClockSource+0x11a>
 8004dac:	2b60      	cmp	r3, #96	; 0x60
 8004dae:	d877      	bhi.n	8004ea0 <HAL_TIM_ConfigClockSource+0x16c>
 8004db0:	2b50      	cmp	r3, #80	; 0x50
 8004db2:	d03c      	beq.n	8004e2e <HAL_TIM_ConfigClockSource+0xfa>
 8004db4:	2b50      	cmp	r3, #80	; 0x50
 8004db6:	d873      	bhi.n	8004ea0 <HAL_TIM_ConfigClockSource+0x16c>
 8004db8:	2b40      	cmp	r3, #64	; 0x40
 8004dba:	d058      	beq.n	8004e6e <HAL_TIM_ConfigClockSource+0x13a>
 8004dbc:	2b40      	cmp	r3, #64	; 0x40
 8004dbe:	d86f      	bhi.n	8004ea0 <HAL_TIM_ConfigClockSource+0x16c>
 8004dc0:	2b30      	cmp	r3, #48	; 0x30
 8004dc2:	d064      	beq.n	8004e8e <HAL_TIM_ConfigClockSource+0x15a>
 8004dc4:	2b30      	cmp	r3, #48	; 0x30
 8004dc6:	d86b      	bhi.n	8004ea0 <HAL_TIM_ConfigClockSource+0x16c>
 8004dc8:	2b20      	cmp	r3, #32
 8004dca:	d060      	beq.n	8004e8e <HAL_TIM_ConfigClockSource+0x15a>
 8004dcc:	2b20      	cmp	r3, #32
 8004dce:	d867      	bhi.n	8004ea0 <HAL_TIM_ConfigClockSource+0x16c>
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d05c      	beq.n	8004e8e <HAL_TIM_ConfigClockSource+0x15a>
 8004dd4:	2b10      	cmp	r3, #16
 8004dd6:	d05a      	beq.n	8004e8e <HAL_TIM_ConfigClockSource+0x15a>
 8004dd8:	e062      	b.n	8004ea0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6818      	ldr	r0, [r3, #0]
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	6899      	ldr	r1, [r3, #8]
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	685a      	ldr	r2, [r3, #4]
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	68db      	ldr	r3, [r3, #12]
 8004dea:	f000 fb19 	bl	8005420 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	689b      	ldr	r3, [r3, #8]
 8004df4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004dfc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	68ba      	ldr	r2, [r7, #8]
 8004e04:	609a      	str	r2, [r3, #8]
      break;
 8004e06:	e04f      	b.n	8004ea8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6818      	ldr	r0, [r3, #0]
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	6899      	ldr	r1, [r3, #8]
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	685a      	ldr	r2, [r3, #4]
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	68db      	ldr	r3, [r3, #12]
 8004e18:	f000 fb02 	bl	8005420 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	689a      	ldr	r2, [r3, #8]
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004e2a:	609a      	str	r2, [r3, #8]
      break;
 8004e2c:	e03c      	b.n	8004ea8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6818      	ldr	r0, [r3, #0]
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	6859      	ldr	r1, [r3, #4]
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	68db      	ldr	r3, [r3, #12]
 8004e3a:	461a      	mov	r2, r3
 8004e3c:	f000 fa76 	bl	800532c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	2150      	movs	r1, #80	; 0x50
 8004e46:	4618      	mov	r0, r3
 8004e48:	f000 facf 	bl	80053ea <TIM_ITRx_SetConfig>
      break;
 8004e4c:	e02c      	b.n	8004ea8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6818      	ldr	r0, [r3, #0]
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	6859      	ldr	r1, [r3, #4]
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	68db      	ldr	r3, [r3, #12]
 8004e5a:	461a      	mov	r2, r3
 8004e5c:	f000 fa95 	bl	800538a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	2160      	movs	r1, #96	; 0x60
 8004e66:	4618      	mov	r0, r3
 8004e68:	f000 fabf 	bl	80053ea <TIM_ITRx_SetConfig>
      break;
 8004e6c:	e01c      	b.n	8004ea8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6818      	ldr	r0, [r3, #0]
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	6859      	ldr	r1, [r3, #4]
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	68db      	ldr	r3, [r3, #12]
 8004e7a:	461a      	mov	r2, r3
 8004e7c:	f000 fa56 	bl	800532c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	2140      	movs	r1, #64	; 0x40
 8004e86:	4618      	mov	r0, r3
 8004e88:	f000 faaf 	bl	80053ea <TIM_ITRx_SetConfig>
      break;
 8004e8c:	e00c      	b.n	8004ea8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681a      	ldr	r2, [r3, #0]
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4619      	mov	r1, r3
 8004e98:	4610      	mov	r0, r2
 8004e9a:	f000 faa6 	bl	80053ea <TIM_ITRx_SetConfig>
      break;
 8004e9e:	e003      	b.n	8004ea8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	73fb      	strb	r3, [r7, #15]
      break;
 8004ea4:	e000      	b.n	8004ea8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004ea6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2201      	movs	r2, #1
 8004eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004eb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004eba:	4618      	mov	r0, r3
 8004ebc:	3710      	adds	r7, #16
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bd80      	pop	{r7, pc}

08004ec2 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004ec2:	b480      	push	{r7}
 8004ec4:	b083      	sub	sp, #12
 8004ec6:	af00      	add	r7, sp, #0
 8004ec8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004eca:	bf00      	nop
 8004ecc:	370c      	adds	r7, #12
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed4:	4770      	bx	lr

08004ed6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004ed6:	b480      	push	{r7}
 8004ed8:	b083      	sub	sp, #12
 8004eda:	af00      	add	r7, sp, #0
 8004edc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004ede:	bf00      	nop
 8004ee0:	370c      	adds	r7, #12
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee8:	4770      	bx	lr

08004eea <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004eea:	b480      	push	{r7}
 8004eec:	b083      	sub	sp, #12
 8004eee:	af00      	add	r7, sp, #0
 8004ef0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004ef2:	bf00      	nop
 8004ef4:	370c      	adds	r7, #12
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efc:	4770      	bx	lr

08004efe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004efe:	b480      	push	{r7}
 8004f00:	b083      	sub	sp, #12
 8004f02:	af00      	add	r7, sp, #0
 8004f04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004f06:	bf00      	nop
 8004f08:	370c      	adds	r7, #12
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f10:	4770      	bx	lr
	...

08004f14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004f14:	b480      	push	{r7}
 8004f16:	b085      	sub	sp, #20
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
 8004f1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	4a34      	ldr	r2, [pc, #208]	; (8004ff8 <TIM_Base_SetConfig+0xe4>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d00f      	beq.n	8004f4c <TIM_Base_SetConfig+0x38>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f32:	d00b      	beq.n	8004f4c <TIM_Base_SetConfig+0x38>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	4a31      	ldr	r2, [pc, #196]	; (8004ffc <TIM_Base_SetConfig+0xe8>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d007      	beq.n	8004f4c <TIM_Base_SetConfig+0x38>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	4a30      	ldr	r2, [pc, #192]	; (8005000 <TIM_Base_SetConfig+0xec>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d003      	beq.n	8004f4c <TIM_Base_SetConfig+0x38>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	4a2f      	ldr	r2, [pc, #188]	; (8005004 <TIM_Base_SetConfig+0xf0>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d108      	bne.n	8004f5e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f52:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	685b      	ldr	r3, [r3, #4]
 8004f58:	68fa      	ldr	r2, [r7, #12]
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	4a25      	ldr	r2, [pc, #148]	; (8004ff8 <TIM_Base_SetConfig+0xe4>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d01b      	beq.n	8004f9e <TIM_Base_SetConfig+0x8a>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f6c:	d017      	beq.n	8004f9e <TIM_Base_SetConfig+0x8a>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	4a22      	ldr	r2, [pc, #136]	; (8004ffc <TIM_Base_SetConfig+0xe8>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d013      	beq.n	8004f9e <TIM_Base_SetConfig+0x8a>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	4a21      	ldr	r2, [pc, #132]	; (8005000 <TIM_Base_SetConfig+0xec>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d00f      	beq.n	8004f9e <TIM_Base_SetConfig+0x8a>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	4a20      	ldr	r2, [pc, #128]	; (8005004 <TIM_Base_SetConfig+0xf0>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d00b      	beq.n	8004f9e <TIM_Base_SetConfig+0x8a>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	4a1f      	ldr	r2, [pc, #124]	; (8005008 <TIM_Base_SetConfig+0xf4>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d007      	beq.n	8004f9e <TIM_Base_SetConfig+0x8a>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	4a1e      	ldr	r2, [pc, #120]	; (800500c <TIM_Base_SetConfig+0xf8>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d003      	beq.n	8004f9e <TIM_Base_SetConfig+0x8a>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	4a1d      	ldr	r2, [pc, #116]	; (8005010 <TIM_Base_SetConfig+0xfc>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d108      	bne.n	8004fb0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fa4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	68db      	ldr	r3, [r3, #12]
 8004faa:	68fa      	ldr	r2, [r7, #12]
 8004fac:	4313      	orrs	r3, r2
 8004fae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	695b      	ldr	r3, [r3, #20]
 8004fba:	4313      	orrs	r3, r2
 8004fbc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	68fa      	ldr	r2, [r7, #12]
 8004fc2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	689a      	ldr	r2, [r3, #8]
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	681a      	ldr	r2, [r3, #0]
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	4a08      	ldr	r2, [pc, #32]	; (8004ff8 <TIM_Base_SetConfig+0xe4>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d103      	bne.n	8004fe4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	691a      	ldr	r2, [r3, #16]
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2201      	movs	r2, #1
 8004fe8:	615a      	str	r2, [r3, #20]
}
 8004fea:	bf00      	nop
 8004fec:	3714      	adds	r7, #20
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff4:	4770      	bx	lr
 8004ff6:	bf00      	nop
 8004ff8:	40010000 	.word	0x40010000
 8004ffc:	40000400 	.word	0x40000400
 8005000:	40000800 	.word	0x40000800
 8005004:	40000c00 	.word	0x40000c00
 8005008:	40014000 	.word	0x40014000
 800500c:	40014400 	.word	0x40014400
 8005010:	40014800 	.word	0x40014800

08005014 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005014:	b480      	push	{r7}
 8005016:	b087      	sub	sp, #28
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
 800501c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6a1b      	ldr	r3, [r3, #32]
 8005022:	f023 0201 	bic.w	r2, r3, #1
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6a1b      	ldr	r3, [r3, #32]
 800502e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	685b      	ldr	r3, [r3, #4]
 8005034:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	699b      	ldr	r3, [r3, #24]
 800503a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005042:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	f023 0303 	bic.w	r3, r3, #3
 800504a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	68fa      	ldr	r2, [r7, #12]
 8005052:	4313      	orrs	r3, r2
 8005054:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005056:	697b      	ldr	r3, [r7, #20]
 8005058:	f023 0302 	bic.w	r3, r3, #2
 800505c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	689b      	ldr	r3, [r3, #8]
 8005062:	697a      	ldr	r2, [r7, #20]
 8005064:	4313      	orrs	r3, r2
 8005066:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	4a1c      	ldr	r2, [pc, #112]	; (80050dc <TIM_OC1_SetConfig+0xc8>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d10c      	bne.n	800508a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005070:	697b      	ldr	r3, [r7, #20]
 8005072:	f023 0308 	bic.w	r3, r3, #8
 8005076:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	68db      	ldr	r3, [r3, #12]
 800507c:	697a      	ldr	r2, [r7, #20]
 800507e:	4313      	orrs	r3, r2
 8005080:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005082:	697b      	ldr	r3, [r7, #20]
 8005084:	f023 0304 	bic.w	r3, r3, #4
 8005088:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	4a13      	ldr	r2, [pc, #76]	; (80050dc <TIM_OC1_SetConfig+0xc8>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d111      	bne.n	80050b6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005098:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800509a:	693b      	ldr	r3, [r7, #16]
 800509c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80050a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	695b      	ldr	r3, [r3, #20]
 80050a6:	693a      	ldr	r2, [r7, #16]
 80050a8:	4313      	orrs	r3, r2
 80050aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	699b      	ldr	r3, [r3, #24]
 80050b0:	693a      	ldr	r2, [r7, #16]
 80050b2:	4313      	orrs	r3, r2
 80050b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	693a      	ldr	r2, [r7, #16]
 80050ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	68fa      	ldr	r2, [r7, #12]
 80050c0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	685a      	ldr	r2, [r3, #4]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	697a      	ldr	r2, [r7, #20]
 80050ce:	621a      	str	r2, [r3, #32]
}
 80050d0:	bf00      	nop
 80050d2:	371c      	adds	r7, #28
 80050d4:	46bd      	mov	sp, r7
 80050d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050da:	4770      	bx	lr
 80050dc:	40010000 	.word	0x40010000

080050e0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80050e0:	b480      	push	{r7}
 80050e2:	b087      	sub	sp, #28
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
 80050e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6a1b      	ldr	r3, [r3, #32]
 80050ee:	f023 0210 	bic.w	r2, r3, #16
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6a1b      	ldr	r3, [r3, #32]
 80050fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	685b      	ldr	r3, [r3, #4]
 8005100:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	699b      	ldr	r3, [r3, #24]
 8005106:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800510e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005116:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	021b      	lsls	r3, r3, #8
 800511e:	68fa      	ldr	r2, [r7, #12]
 8005120:	4313      	orrs	r3, r2
 8005122:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005124:	697b      	ldr	r3, [r7, #20]
 8005126:	f023 0320 	bic.w	r3, r3, #32
 800512a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	689b      	ldr	r3, [r3, #8]
 8005130:	011b      	lsls	r3, r3, #4
 8005132:	697a      	ldr	r2, [r7, #20]
 8005134:	4313      	orrs	r3, r2
 8005136:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	4a1e      	ldr	r2, [pc, #120]	; (80051b4 <TIM_OC2_SetConfig+0xd4>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d10d      	bne.n	800515c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005140:	697b      	ldr	r3, [r7, #20]
 8005142:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005146:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	68db      	ldr	r3, [r3, #12]
 800514c:	011b      	lsls	r3, r3, #4
 800514e:	697a      	ldr	r2, [r7, #20]
 8005150:	4313      	orrs	r3, r2
 8005152:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005154:	697b      	ldr	r3, [r7, #20]
 8005156:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800515a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	4a15      	ldr	r2, [pc, #84]	; (80051b4 <TIM_OC2_SetConfig+0xd4>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d113      	bne.n	800518c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005164:	693b      	ldr	r3, [r7, #16]
 8005166:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800516a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800516c:	693b      	ldr	r3, [r7, #16]
 800516e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005172:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	695b      	ldr	r3, [r3, #20]
 8005178:	009b      	lsls	r3, r3, #2
 800517a:	693a      	ldr	r2, [r7, #16]
 800517c:	4313      	orrs	r3, r2
 800517e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	699b      	ldr	r3, [r3, #24]
 8005184:	009b      	lsls	r3, r3, #2
 8005186:	693a      	ldr	r2, [r7, #16]
 8005188:	4313      	orrs	r3, r2
 800518a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	693a      	ldr	r2, [r7, #16]
 8005190:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	68fa      	ldr	r2, [r7, #12]
 8005196:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	685a      	ldr	r2, [r3, #4]
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	697a      	ldr	r2, [r7, #20]
 80051a4:	621a      	str	r2, [r3, #32]
}
 80051a6:	bf00      	nop
 80051a8:	371c      	adds	r7, #28
 80051aa:	46bd      	mov	sp, r7
 80051ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b0:	4770      	bx	lr
 80051b2:	bf00      	nop
 80051b4:	40010000 	.word	0x40010000

080051b8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80051b8:	b480      	push	{r7}
 80051ba:	b087      	sub	sp, #28
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
 80051c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6a1b      	ldr	r3, [r3, #32]
 80051c6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6a1b      	ldr	r3, [r3, #32]
 80051d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	69db      	ldr	r3, [r3, #28]
 80051de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	f023 0303 	bic.w	r3, r3, #3
 80051ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	68fa      	ldr	r2, [r7, #12]
 80051f6:	4313      	orrs	r3, r2
 80051f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80051fa:	697b      	ldr	r3, [r7, #20]
 80051fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005200:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	689b      	ldr	r3, [r3, #8]
 8005206:	021b      	lsls	r3, r3, #8
 8005208:	697a      	ldr	r2, [r7, #20]
 800520a:	4313      	orrs	r3, r2
 800520c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	4a1d      	ldr	r2, [pc, #116]	; (8005288 <TIM_OC3_SetConfig+0xd0>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d10d      	bne.n	8005232 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005216:	697b      	ldr	r3, [r7, #20]
 8005218:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800521c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	68db      	ldr	r3, [r3, #12]
 8005222:	021b      	lsls	r3, r3, #8
 8005224:	697a      	ldr	r2, [r7, #20]
 8005226:	4313      	orrs	r3, r2
 8005228:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800522a:	697b      	ldr	r3, [r7, #20]
 800522c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005230:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	4a14      	ldr	r2, [pc, #80]	; (8005288 <TIM_OC3_SetConfig+0xd0>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d113      	bne.n	8005262 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800523a:	693b      	ldr	r3, [r7, #16]
 800523c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005240:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005242:	693b      	ldr	r3, [r7, #16]
 8005244:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005248:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	695b      	ldr	r3, [r3, #20]
 800524e:	011b      	lsls	r3, r3, #4
 8005250:	693a      	ldr	r2, [r7, #16]
 8005252:	4313      	orrs	r3, r2
 8005254:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	699b      	ldr	r3, [r3, #24]
 800525a:	011b      	lsls	r3, r3, #4
 800525c:	693a      	ldr	r2, [r7, #16]
 800525e:	4313      	orrs	r3, r2
 8005260:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	693a      	ldr	r2, [r7, #16]
 8005266:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	68fa      	ldr	r2, [r7, #12]
 800526c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	685a      	ldr	r2, [r3, #4]
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	697a      	ldr	r2, [r7, #20]
 800527a:	621a      	str	r2, [r3, #32]
}
 800527c:	bf00      	nop
 800527e:	371c      	adds	r7, #28
 8005280:	46bd      	mov	sp, r7
 8005282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005286:	4770      	bx	lr
 8005288:	40010000 	.word	0x40010000

0800528c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800528c:	b480      	push	{r7}
 800528e:	b087      	sub	sp, #28
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
 8005294:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6a1b      	ldr	r3, [r3, #32]
 800529a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6a1b      	ldr	r3, [r3, #32]
 80052a6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	685b      	ldr	r3, [r3, #4]
 80052ac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	69db      	ldr	r3, [r3, #28]
 80052b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	021b      	lsls	r3, r3, #8
 80052ca:	68fa      	ldr	r2, [r7, #12]
 80052cc:	4313      	orrs	r3, r2
 80052ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80052d0:	693b      	ldr	r3, [r7, #16]
 80052d2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80052d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	689b      	ldr	r3, [r3, #8]
 80052dc:	031b      	lsls	r3, r3, #12
 80052de:	693a      	ldr	r2, [r7, #16]
 80052e0:	4313      	orrs	r3, r2
 80052e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	4a10      	ldr	r2, [pc, #64]	; (8005328 <TIM_OC4_SetConfig+0x9c>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d109      	bne.n	8005300 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80052ec:	697b      	ldr	r3, [r7, #20]
 80052ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80052f2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	695b      	ldr	r3, [r3, #20]
 80052f8:	019b      	lsls	r3, r3, #6
 80052fa:	697a      	ldr	r2, [r7, #20]
 80052fc:	4313      	orrs	r3, r2
 80052fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	697a      	ldr	r2, [r7, #20]
 8005304:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	68fa      	ldr	r2, [r7, #12]
 800530a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	685a      	ldr	r2, [r3, #4]
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	693a      	ldr	r2, [r7, #16]
 8005318:	621a      	str	r2, [r3, #32]
}
 800531a:	bf00      	nop
 800531c:	371c      	adds	r7, #28
 800531e:	46bd      	mov	sp, r7
 8005320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005324:	4770      	bx	lr
 8005326:	bf00      	nop
 8005328:	40010000 	.word	0x40010000

0800532c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800532c:	b480      	push	{r7}
 800532e:	b087      	sub	sp, #28
 8005330:	af00      	add	r7, sp, #0
 8005332:	60f8      	str	r0, [r7, #12]
 8005334:	60b9      	str	r1, [r7, #8]
 8005336:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	6a1b      	ldr	r3, [r3, #32]
 800533c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	6a1b      	ldr	r3, [r3, #32]
 8005342:	f023 0201 	bic.w	r2, r3, #1
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	699b      	ldr	r3, [r3, #24]
 800534e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005350:	693b      	ldr	r3, [r7, #16]
 8005352:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005356:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	011b      	lsls	r3, r3, #4
 800535c:	693a      	ldr	r2, [r7, #16]
 800535e:	4313      	orrs	r3, r2
 8005360:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005362:	697b      	ldr	r3, [r7, #20]
 8005364:	f023 030a 	bic.w	r3, r3, #10
 8005368:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800536a:	697a      	ldr	r2, [r7, #20]
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	4313      	orrs	r3, r2
 8005370:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	693a      	ldr	r2, [r7, #16]
 8005376:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	697a      	ldr	r2, [r7, #20]
 800537c:	621a      	str	r2, [r3, #32]
}
 800537e:	bf00      	nop
 8005380:	371c      	adds	r7, #28
 8005382:	46bd      	mov	sp, r7
 8005384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005388:	4770      	bx	lr

0800538a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800538a:	b480      	push	{r7}
 800538c:	b087      	sub	sp, #28
 800538e:	af00      	add	r7, sp, #0
 8005390:	60f8      	str	r0, [r7, #12]
 8005392:	60b9      	str	r1, [r7, #8]
 8005394:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	6a1b      	ldr	r3, [r3, #32]
 800539a:	f023 0210 	bic.w	r2, r3, #16
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	699b      	ldr	r3, [r3, #24]
 80053a6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	6a1b      	ldr	r3, [r3, #32]
 80053ac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80053ae:	697b      	ldr	r3, [r7, #20]
 80053b0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80053b4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	031b      	lsls	r3, r3, #12
 80053ba:	697a      	ldr	r2, [r7, #20]
 80053bc:	4313      	orrs	r3, r2
 80053be:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80053c0:	693b      	ldr	r3, [r7, #16]
 80053c2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80053c6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80053c8:	68bb      	ldr	r3, [r7, #8]
 80053ca:	011b      	lsls	r3, r3, #4
 80053cc:	693a      	ldr	r2, [r7, #16]
 80053ce:	4313      	orrs	r3, r2
 80053d0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	697a      	ldr	r2, [r7, #20]
 80053d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	693a      	ldr	r2, [r7, #16]
 80053dc:	621a      	str	r2, [r3, #32]
}
 80053de:	bf00      	nop
 80053e0:	371c      	adds	r7, #28
 80053e2:	46bd      	mov	sp, r7
 80053e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e8:	4770      	bx	lr

080053ea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80053ea:	b480      	push	{r7}
 80053ec:	b085      	sub	sp, #20
 80053ee:	af00      	add	r7, sp, #0
 80053f0:	6078      	str	r0, [r7, #4]
 80053f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	689b      	ldr	r3, [r3, #8]
 80053f8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005400:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005402:	683a      	ldr	r2, [r7, #0]
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	4313      	orrs	r3, r2
 8005408:	f043 0307 	orr.w	r3, r3, #7
 800540c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	68fa      	ldr	r2, [r7, #12]
 8005412:	609a      	str	r2, [r3, #8]
}
 8005414:	bf00      	nop
 8005416:	3714      	adds	r7, #20
 8005418:	46bd      	mov	sp, r7
 800541a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541e:	4770      	bx	lr

08005420 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005420:	b480      	push	{r7}
 8005422:	b087      	sub	sp, #28
 8005424:	af00      	add	r7, sp, #0
 8005426:	60f8      	str	r0, [r7, #12]
 8005428:	60b9      	str	r1, [r7, #8]
 800542a:	607a      	str	r2, [r7, #4]
 800542c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	689b      	ldr	r3, [r3, #8]
 8005432:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005434:	697b      	ldr	r3, [r7, #20]
 8005436:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800543a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	021a      	lsls	r2, r3, #8
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	431a      	orrs	r2, r3
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	4313      	orrs	r3, r2
 8005448:	697a      	ldr	r2, [r7, #20]
 800544a:	4313      	orrs	r3, r2
 800544c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	697a      	ldr	r2, [r7, #20]
 8005452:	609a      	str	r2, [r3, #8]
}
 8005454:	bf00      	nop
 8005456:	371c      	adds	r7, #28
 8005458:	46bd      	mov	sp, r7
 800545a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545e:	4770      	bx	lr

08005460 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005460:	b480      	push	{r7}
 8005462:	b087      	sub	sp, #28
 8005464:	af00      	add	r7, sp, #0
 8005466:	60f8      	str	r0, [r7, #12]
 8005468:	60b9      	str	r1, [r7, #8]
 800546a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	f003 031f 	and.w	r3, r3, #31
 8005472:	2201      	movs	r2, #1
 8005474:	fa02 f303 	lsl.w	r3, r2, r3
 8005478:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	6a1a      	ldr	r2, [r3, #32]
 800547e:	697b      	ldr	r3, [r7, #20]
 8005480:	43db      	mvns	r3, r3
 8005482:	401a      	ands	r2, r3
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	6a1a      	ldr	r2, [r3, #32]
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	f003 031f 	and.w	r3, r3, #31
 8005492:	6879      	ldr	r1, [r7, #4]
 8005494:	fa01 f303 	lsl.w	r3, r1, r3
 8005498:	431a      	orrs	r2, r3
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	621a      	str	r2, [r3, #32]
}
 800549e:	bf00      	nop
 80054a0:	371c      	adds	r7, #28
 80054a2:	46bd      	mov	sp, r7
 80054a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a8:	4770      	bx	lr
	...

080054ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80054ac:	b480      	push	{r7}
 80054ae:	b085      	sub	sp, #20
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
 80054b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054bc:	2b01      	cmp	r3, #1
 80054be:	d101      	bne.n	80054c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80054c0:	2302      	movs	r3, #2
 80054c2:	e050      	b.n	8005566 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2201      	movs	r2, #1
 80054c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2202      	movs	r2, #2
 80054d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	685b      	ldr	r3, [r3, #4]
 80054da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	689b      	ldr	r3, [r3, #8]
 80054e2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054ea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	68fa      	ldr	r2, [r7, #12]
 80054f2:	4313      	orrs	r3, r2
 80054f4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	68fa      	ldr	r2, [r7, #12]
 80054fc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4a1c      	ldr	r2, [pc, #112]	; (8005574 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d018      	beq.n	800553a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005510:	d013      	beq.n	800553a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4a18      	ldr	r2, [pc, #96]	; (8005578 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d00e      	beq.n	800553a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4a16      	ldr	r2, [pc, #88]	; (800557c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d009      	beq.n	800553a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	4a15      	ldr	r2, [pc, #84]	; (8005580 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d004      	beq.n	800553a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a13      	ldr	r2, [pc, #76]	; (8005584 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d10c      	bne.n	8005554 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800553a:	68bb      	ldr	r3, [r7, #8]
 800553c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005540:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	685b      	ldr	r3, [r3, #4]
 8005546:	68ba      	ldr	r2, [r7, #8]
 8005548:	4313      	orrs	r3, r2
 800554a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	68ba      	ldr	r2, [r7, #8]
 8005552:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2201      	movs	r2, #1
 8005558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2200      	movs	r2, #0
 8005560:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005564:	2300      	movs	r3, #0
}
 8005566:	4618      	mov	r0, r3
 8005568:	3714      	adds	r7, #20
 800556a:	46bd      	mov	sp, r7
 800556c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005570:	4770      	bx	lr
 8005572:	bf00      	nop
 8005574:	40010000 	.word	0x40010000
 8005578:	40000400 	.word	0x40000400
 800557c:	40000800 	.word	0x40000800
 8005580:	40000c00 	.word	0x40000c00
 8005584:	40014000 	.word	0x40014000

08005588 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005588:	b480      	push	{r7}
 800558a:	b083      	sub	sp, #12
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005590:	bf00      	nop
 8005592:	370c      	adds	r7, #12
 8005594:	46bd      	mov	sp, r7
 8005596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559a:	4770      	bx	lr

0800559c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800559c:	b480      	push	{r7}
 800559e:	b083      	sub	sp, #12
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80055a4:	bf00      	nop
 80055a6:	370c      	adds	r7, #12
 80055a8:	46bd      	mov	sp, r7
 80055aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ae:	4770      	bx	lr

080055b0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b082      	sub	sp, #8
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d101      	bne.n	80055c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80055be:	2301      	movs	r3, #1
 80055c0:	e03f      	b.n	8005642 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055c8:	b2db      	uxtb	r3, r3
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d106      	bne.n	80055dc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2200      	movs	r2, #0
 80055d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80055d6:	6878      	ldr	r0, [r7, #4]
 80055d8:	f7fd f8e6 	bl	80027a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2224      	movs	r2, #36	; 0x24
 80055e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	68da      	ldr	r2, [r3, #12]
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80055f2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80055f4:	6878      	ldr	r0, [r7, #4]
 80055f6:	f000 fe49 	bl	800628c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	691a      	ldr	r2, [r3, #16]
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005608:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	695a      	ldr	r2, [r3, #20]
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005618:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	68da      	ldr	r2, [r3, #12]
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005628:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2200      	movs	r2, #0
 800562e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2220      	movs	r2, #32
 8005634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2220      	movs	r2, #32
 800563c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005640:	2300      	movs	r3, #0
}
 8005642:	4618      	mov	r0, r3
 8005644:	3708      	adds	r7, #8
 8005646:	46bd      	mov	sp, r7
 8005648:	bd80      	pop	{r7, pc}

0800564a <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800564a:	b580      	push	{r7, lr}
 800564c:	b082      	sub	sp, #8
 800564e:	af00      	add	r7, sp, #0
 8005650:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d101      	bne.n	800565c <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8005658:	2301      	movs	r3, #1
 800565a:	e021      	b.n	80056a0 <HAL_UART_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2224      	movs	r2, #36	; 0x24
 8005660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	68da      	ldr	r2, [r3, #12]
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005672:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8005674:	6878      	ldr	r0, [r7, #4]
 8005676:	f7fd f959 	bl	800292c <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2200      	movs	r2, #0
 800567e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_RESET;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2200      	movs	r2, #0
 8005684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_RESET;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2200      	movs	r2, #0
 800568c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2200      	movs	r2, #0
 8005694:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2200      	movs	r2, #0
 800569a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800569e:	2300      	movs	r3, #0
}
 80056a0:	4618      	mov	r0, r3
 80056a2:	3708      	adds	r7, #8
 80056a4:	46bd      	mov	sp, r7
 80056a6:	bd80      	pop	{r7, pc}

080056a8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b08a      	sub	sp, #40	; 0x28
 80056ac:	af02      	add	r7, sp, #8
 80056ae:	60f8      	str	r0, [r7, #12]
 80056b0:	60b9      	str	r1, [r7, #8]
 80056b2:	603b      	str	r3, [r7, #0]
 80056b4:	4613      	mov	r3, r2
 80056b6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80056b8:	2300      	movs	r3, #0
 80056ba:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056c2:	b2db      	uxtb	r3, r3
 80056c4:	2b20      	cmp	r3, #32
 80056c6:	d17c      	bne.n	80057c2 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80056c8:	68bb      	ldr	r3, [r7, #8]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d002      	beq.n	80056d4 <HAL_UART_Transmit+0x2c>
 80056ce:	88fb      	ldrh	r3, [r7, #6]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d101      	bne.n	80056d8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80056d4:	2301      	movs	r3, #1
 80056d6:	e075      	b.n	80057c4 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056de:	2b01      	cmp	r3, #1
 80056e0:	d101      	bne.n	80056e6 <HAL_UART_Transmit+0x3e>
 80056e2:	2302      	movs	r3, #2
 80056e4:	e06e      	b.n	80057c4 <HAL_UART_Transmit+0x11c>
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	2201      	movs	r2, #1
 80056ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	2200      	movs	r2, #0
 80056f2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	2221      	movs	r2, #33	; 0x21
 80056f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80056fc:	f7fd fb14 	bl	8002d28 <HAL_GetTick>
 8005700:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	88fa      	ldrh	r2, [r7, #6]
 8005706:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	88fa      	ldrh	r2, [r7, #6]
 800570c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	689b      	ldr	r3, [r3, #8]
 8005712:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005716:	d108      	bne.n	800572a <HAL_UART_Transmit+0x82>
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	691b      	ldr	r3, [r3, #16]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d104      	bne.n	800572a <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005720:	2300      	movs	r3, #0
 8005722:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	61bb      	str	r3, [r7, #24]
 8005728:	e003      	b.n	8005732 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800572a:	68bb      	ldr	r3, [r7, #8]
 800572c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800572e:	2300      	movs	r3, #0
 8005730:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	2200      	movs	r2, #0
 8005736:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800573a:	e02a      	b.n	8005792 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	9300      	str	r3, [sp, #0]
 8005740:	697b      	ldr	r3, [r7, #20]
 8005742:	2200      	movs	r2, #0
 8005744:	2180      	movs	r1, #128	; 0x80
 8005746:	68f8      	ldr	r0, [r7, #12]
 8005748:	f000 fb5a 	bl	8005e00 <UART_WaitOnFlagUntilTimeout>
 800574c:	4603      	mov	r3, r0
 800574e:	2b00      	cmp	r3, #0
 8005750:	d001      	beq.n	8005756 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005752:	2303      	movs	r3, #3
 8005754:	e036      	b.n	80057c4 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005756:	69fb      	ldr	r3, [r7, #28]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d10b      	bne.n	8005774 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800575c:	69bb      	ldr	r3, [r7, #24]
 800575e:	881b      	ldrh	r3, [r3, #0]
 8005760:	461a      	mov	r2, r3
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800576a:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800576c:	69bb      	ldr	r3, [r7, #24]
 800576e:	3302      	adds	r3, #2
 8005770:	61bb      	str	r3, [r7, #24]
 8005772:	e007      	b.n	8005784 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005774:	69fb      	ldr	r3, [r7, #28]
 8005776:	781a      	ldrb	r2, [r3, #0]
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800577e:	69fb      	ldr	r3, [r7, #28]
 8005780:	3301      	adds	r3, #1
 8005782:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005788:	b29b      	uxth	r3, r3
 800578a:	3b01      	subs	r3, #1
 800578c:	b29a      	uxth	r2, r3
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005796:	b29b      	uxth	r3, r3
 8005798:	2b00      	cmp	r3, #0
 800579a:	d1cf      	bne.n	800573c <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	9300      	str	r3, [sp, #0]
 80057a0:	697b      	ldr	r3, [r7, #20]
 80057a2:	2200      	movs	r2, #0
 80057a4:	2140      	movs	r1, #64	; 0x40
 80057a6:	68f8      	ldr	r0, [r7, #12]
 80057a8:	f000 fb2a 	bl	8005e00 <UART_WaitOnFlagUntilTimeout>
 80057ac:	4603      	mov	r3, r0
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d001      	beq.n	80057b6 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80057b2:	2303      	movs	r3, #3
 80057b4:	e006      	b.n	80057c4 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	2220      	movs	r2, #32
 80057ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80057be:	2300      	movs	r3, #0
 80057c0:	e000      	b.n	80057c4 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80057c2:	2302      	movs	r3, #2
  }
}
 80057c4:	4618      	mov	r0, r3
 80057c6:	3720      	adds	r7, #32
 80057c8:	46bd      	mov	sp, r7
 80057ca:	bd80      	pop	{r7, pc}

080057cc <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80057cc:	b480      	push	{r7}
 80057ce:	b085      	sub	sp, #20
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	60f8      	str	r0, [r7, #12]
 80057d4:	60b9      	str	r1, [r7, #8]
 80057d6:	4613      	mov	r3, r2
 80057d8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057e0:	b2db      	uxtb	r3, r3
 80057e2:	2b20      	cmp	r3, #32
 80057e4:	d130      	bne.n	8005848 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80057e6:	68bb      	ldr	r3, [r7, #8]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d002      	beq.n	80057f2 <HAL_UART_Transmit_IT+0x26>
 80057ec:	88fb      	ldrh	r3, [r7, #6]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d101      	bne.n	80057f6 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80057f2:	2301      	movs	r3, #1
 80057f4:	e029      	b.n	800584a <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057fc:	2b01      	cmp	r3, #1
 80057fe:	d101      	bne.n	8005804 <HAL_UART_Transmit_IT+0x38>
 8005800:	2302      	movs	r3, #2
 8005802:	e022      	b.n	800584a <HAL_UART_Transmit_IT+0x7e>
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	2201      	movs	r2, #1
 8005808:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	68ba      	ldr	r2, [r7, #8]
 8005810:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	88fa      	ldrh	r2, [r7, #6]
 8005816:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	88fa      	ldrh	r2, [r7, #6]
 800581c:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	2200      	movs	r2, #0
 8005822:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	2221      	movs	r2, #33	; 0x21
 8005828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	2200      	movs	r2, #0
 8005830:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	68da      	ldr	r2, [r3, #12]
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005842:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8005844:	2300      	movs	r3, #0
 8005846:	e000      	b.n	800584a <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8005848:	2302      	movs	r3, #2
  }
}
 800584a:	4618      	mov	r0, r3
 800584c:	3714      	adds	r7, #20
 800584e:	46bd      	mov	sp, r7
 8005850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005854:	4770      	bx	lr

08005856 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005856:	b580      	push	{r7, lr}
 8005858:	b084      	sub	sp, #16
 800585a:	af00      	add	r7, sp, #0
 800585c:	60f8      	str	r0, [r7, #12]
 800585e:	60b9      	str	r1, [r7, #8]
 8005860:	4613      	mov	r3, r2
 8005862:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800586a:	b2db      	uxtb	r3, r3
 800586c:	2b20      	cmp	r3, #32
 800586e:	d11d      	bne.n	80058ac <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005870:	68bb      	ldr	r3, [r7, #8]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d002      	beq.n	800587c <HAL_UART_Receive_IT+0x26>
 8005876:	88fb      	ldrh	r3, [r7, #6]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d101      	bne.n	8005880 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800587c:	2301      	movs	r3, #1
 800587e:	e016      	b.n	80058ae <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005886:	2b01      	cmp	r3, #1
 8005888:	d101      	bne.n	800588e <HAL_UART_Receive_IT+0x38>
 800588a:	2302      	movs	r3, #2
 800588c:	e00f      	b.n	80058ae <HAL_UART_Receive_IT+0x58>
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	2201      	movs	r2, #1
 8005892:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	2200      	movs	r2, #0
 800589a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800589c:	88fb      	ldrh	r3, [r7, #6]
 800589e:	461a      	mov	r2, r3
 80058a0:	68b9      	ldr	r1, [r7, #8]
 80058a2:	68f8      	ldr	r0, [r7, #12]
 80058a4:	f000 fb1a 	bl	8005edc <UART_Start_Receive_IT>
 80058a8:	4603      	mov	r3, r0
 80058aa:	e000      	b.n	80058ae <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80058ac:	2302      	movs	r3, #2
  }
}
 80058ae:	4618      	mov	r0, r3
 80058b0:	3710      	adds	r7, #16
 80058b2:	46bd      	mov	sp, r7
 80058b4:	bd80      	pop	{r7, pc}
	...

080058b8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b0ba      	sub	sp, #232	; 0xe8
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	68db      	ldr	r3, [r3, #12]
 80058d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	695b      	ldr	r3, [r3, #20]
 80058da:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80058de:	2300      	movs	r3, #0
 80058e0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80058e4:	2300      	movs	r3, #0
 80058e6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80058ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058ee:	f003 030f 	and.w	r3, r3, #15
 80058f2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80058f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d10f      	bne.n	800591e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80058fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005902:	f003 0320 	and.w	r3, r3, #32
 8005906:	2b00      	cmp	r3, #0
 8005908:	d009      	beq.n	800591e <HAL_UART_IRQHandler+0x66>
 800590a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800590e:	f003 0320 	and.w	r3, r3, #32
 8005912:	2b00      	cmp	r3, #0
 8005914:	d003      	beq.n	800591e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005916:	6878      	ldr	r0, [r7, #4]
 8005918:	f000 fbfd 	bl	8006116 <UART_Receive_IT>
      return;
 800591c:	e256      	b.n	8005dcc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800591e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005922:	2b00      	cmp	r3, #0
 8005924:	f000 80de 	beq.w	8005ae4 <HAL_UART_IRQHandler+0x22c>
 8005928:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800592c:	f003 0301 	and.w	r3, r3, #1
 8005930:	2b00      	cmp	r3, #0
 8005932:	d106      	bne.n	8005942 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005934:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005938:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800593c:	2b00      	cmp	r3, #0
 800593e:	f000 80d1 	beq.w	8005ae4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005942:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005946:	f003 0301 	and.w	r3, r3, #1
 800594a:	2b00      	cmp	r3, #0
 800594c:	d00b      	beq.n	8005966 <HAL_UART_IRQHandler+0xae>
 800594e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005952:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005956:	2b00      	cmp	r3, #0
 8005958:	d005      	beq.n	8005966 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800595e:	f043 0201 	orr.w	r2, r3, #1
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005966:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800596a:	f003 0304 	and.w	r3, r3, #4
 800596e:	2b00      	cmp	r3, #0
 8005970:	d00b      	beq.n	800598a <HAL_UART_IRQHandler+0xd2>
 8005972:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005976:	f003 0301 	and.w	r3, r3, #1
 800597a:	2b00      	cmp	r3, #0
 800597c:	d005      	beq.n	800598a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005982:	f043 0202 	orr.w	r2, r3, #2
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800598a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800598e:	f003 0302 	and.w	r3, r3, #2
 8005992:	2b00      	cmp	r3, #0
 8005994:	d00b      	beq.n	80059ae <HAL_UART_IRQHandler+0xf6>
 8005996:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800599a:	f003 0301 	and.w	r3, r3, #1
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d005      	beq.n	80059ae <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059a6:	f043 0204 	orr.w	r2, r3, #4
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80059ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059b2:	f003 0308 	and.w	r3, r3, #8
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d011      	beq.n	80059de <HAL_UART_IRQHandler+0x126>
 80059ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059be:	f003 0320 	and.w	r3, r3, #32
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d105      	bne.n	80059d2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80059c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80059ca:	f003 0301 	and.w	r3, r3, #1
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d005      	beq.n	80059de <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059d6:	f043 0208 	orr.w	r2, r3, #8
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	f000 81ed 	beq.w	8005dc2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80059e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059ec:	f003 0320 	and.w	r3, r3, #32
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d008      	beq.n	8005a06 <HAL_UART_IRQHandler+0x14e>
 80059f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059f8:	f003 0320 	and.w	r3, r3, #32
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d002      	beq.n	8005a06 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005a00:	6878      	ldr	r0, [r7, #4]
 8005a02:	f000 fb88 	bl	8006116 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	695b      	ldr	r3, [r3, #20]
 8005a0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a10:	2b40      	cmp	r3, #64	; 0x40
 8005a12:	bf0c      	ite	eq
 8005a14:	2301      	moveq	r3, #1
 8005a16:	2300      	movne	r3, #0
 8005a18:	b2db      	uxtb	r3, r3
 8005a1a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a22:	f003 0308 	and.w	r3, r3, #8
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d103      	bne.n	8005a32 <HAL_UART_IRQHandler+0x17a>
 8005a2a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d04f      	beq.n	8005ad2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005a32:	6878      	ldr	r0, [r7, #4]
 8005a34:	f000 fa90 	bl	8005f58 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	695b      	ldr	r3, [r3, #20]
 8005a3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a42:	2b40      	cmp	r3, #64	; 0x40
 8005a44:	d141      	bne.n	8005aca <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	3314      	adds	r3, #20
 8005a4c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a50:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005a54:	e853 3f00 	ldrex	r3, [r3]
 8005a58:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005a5c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005a60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a64:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	3314      	adds	r3, #20
 8005a6e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005a72:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005a76:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a7a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005a7e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005a82:	e841 2300 	strex	r3, r2, [r1]
 8005a86:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005a8a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d1d9      	bne.n	8005a46 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d013      	beq.n	8005ac2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a9e:	4a7d      	ldr	r2, [pc, #500]	; (8005c94 <HAL_UART_IRQHandler+0x3dc>)
 8005aa0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	f7fd fb21 	bl	80030ee <HAL_DMA_Abort_IT>
 8005aac:	4603      	mov	r3, r0
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d016      	beq.n	8005ae0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ab6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ab8:	687a      	ldr	r2, [r7, #4]
 8005aba:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005abc:	4610      	mov	r0, r2
 8005abe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ac0:	e00e      	b.n	8005ae0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005ac2:	6878      	ldr	r0, [r7, #4]
 8005ac4:	f7fc fb60 	bl	8002188 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ac8:	e00a      	b.n	8005ae0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005aca:	6878      	ldr	r0, [r7, #4]
 8005acc:	f7fc fb5c 	bl	8002188 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ad0:	e006      	b.n	8005ae0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005ad2:	6878      	ldr	r0, [r7, #4]
 8005ad4:	f7fc fb58 	bl	8002188 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2200      	movs	r2, #0
 8005adc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005ade:	e170      	b.n	8005dc2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ae0:	bf00      	nop
    return;
 8005ae2:	e16e      	b.n	8005dc2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ae8:	2b01      	cmp	r3, #1
 8005aea:	f040 814a 	bne.w	8005d82 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005aee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005af2:	f003 0310 	and.w	r3, r3, #16
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	f000 8143 	beq.w	8005d82 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005afc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b00:	f003 0310 	and.w	r3, r3, #16
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	f000 813c 	beq.w	8005d82 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	60bb      	str	r3, [r7, #8]
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	60bb      	str	r3, [r7, #8]
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	685b      	ldr	r3, [r3, #4]
 8005b1c:	60bb      	str	r3, [r7, #8]
 8005b1e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	695b      	ldr	r3, [r3, #20]
 8005b26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b2a:	2b40      	cmp	r3, #64	; 0x40
 8005b2c:	f040 80b4 	bne.w	8005c98 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	685b      	ldr	r3, [r3, #4]
 8005b38:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005b3c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	f000 8140 	beq.w	8005dc6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005b4a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005b4e:	429a      	cmp	r2, r3
 8005b50:	f080 8139 	bcs.w	8005dc6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005b5a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b60:	69db      	ldr	r3, [r3, #28]
 8005b62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b66:	f000 8088 	beq.w	8005c7a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	330c      	adds	r3, #12
 8005b70:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b74:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005b78:	e853 3f00 	ldrex	r3, [r3]
 8005b7c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005b80:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005b84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b88:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	330c      	adds	r3, #12
 8005b92:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005b96:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005b9a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b9e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005ba2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005ba6:	e841 2300 	strex	r3, r2, [r1]
 8005baa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005bae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d1d9      	bne.n	8005b6a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	3314      	adds	r3, #20
 8005bbc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bbe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005bc0:	e853 3f00 	ldrex	r3, [r3]
 8005bc4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005bc6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005bc8:	f023 0301 	bic.w	r3, r3, #1
 8005bcc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	3314      	adds	r3, #20
 8005bd6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005bda:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005bde:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005be0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005be2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005be6:	e841 2300 	strex	r3, r2, [r1]
 8005bea:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005bec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d1e1      	bne.n	8005bb6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	3314      	adds	r3, #20
 8005bf8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bfa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005bfc:	e853 3f00 	ldrex	r3, [r3]
 8005c00:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005c02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c08:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	3314      	adds	r3, #20
 8005c12:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005c16:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005c18:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c1a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005c1c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005c1e:	e841 2300 	strex	r3, r2, [r1]
 8005c22:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005c24:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d1e3      	bne.n	8005bf2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2220      	movs	r2, #32
 8005c2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2200      	movs	r2, #0
 8005c36:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	330c      	adds	r3, #12
 8005c3e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c42:	e853 3f00 	ldrex	r3, [r3]
 8005c46:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005c48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c4a:	f023 0310 	bic.w	r3, r3, #16
 8005c4e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	330c      	adds	r3, #12
 8005c58:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005c5c:	65ba      	str	r2, [r7, #88]	; 0x58
 8005c5e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c60:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005c62:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005c64:	e841 2300 	strex	r3, r2, [r1]
 8005c68:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005c6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d1e3      	bne.n	8005c38 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c74:	4618      	mov	r0, r3
 8005c76:	f7fd f9ca 	bl	800300e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005c82:	b29b      	uxth	r3, r3
 8005c84:	1ad3      	subs	r3, r2, r3
 8005c86:	b29b      	uxth	r3, r3
 8005c88:	4619      	mov	r1, r3
 8005c8a:	6878      	ldr	r0, [r7, #4]
 8005c8c:	f000 f8ac 	bl	8005de8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005c90:	e099      	b.n	8005dc6 <HAL_UART_IRQHandler+0x50e>
 8005c92:	bf00      	nop
 8005c94:	0800601f 	.word	0x0800601f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005ca0:	b29b      	uxth	r3, r3
 8005ca2:	1ad3      	subs	r3, r2, r3
 8005ca4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005cac:	b29b      	uxth	r3, r3
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	f000 808b 	beq.w	8005dca <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005cb4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	f000 8086 	beq.w	8005dca <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	330c      	adds	r3, #12
 8005cc4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cc8:	e853 3f00 	ldrex	r3, [r3]
 8005ccc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005cce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cd0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005cd4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	330c      	adds	r3, #12
 8005cde:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005ce2:	647a      	str	r2, [r7, #68]	; 0x44
 8005ce4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ce6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005ce8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005cea:	e841 2300 	strex	r3, r2, [r1]
 8005cee:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005cf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d1e3      	bne.n	8005cbe <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	3314      	adds	r3, #20
 8005cfc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d00:	e853 3f00 	ldrex	r3, [r3]
 8005d04:	623b      	str	r3, [r7, #32]
   return(result);
 8005d06:	6a3b      	ldr	r3, [r7, #32]
 8005d08:	f023 0301 	bic.w	r3, r3, #1
 8005d0c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	3314      	adds	r3, #20
 8005d16:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005d1a:	633a      	str	r2, [r7, #48]	; 0x30
 8005d1c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d1e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005d20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d22:	e841 2300 	strex	r3, r2, [r1]
 8005d26:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d1e3      	bne.n	8005cf6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2220      	movs	r2, #32
 8005d32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2200      	movs	r2, #0
 8005d3a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	330c      	adds	r3, #12
 8005d42:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d44:	693b      	ldr	r3, [r7, #16]
 8005d46:	e853 3f00 	ldrex	r3, [r3]
 8005d4a:	60fb      	str	r3, [r7, #12]
   return(result);
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	f023 0310 	bic.w	r3, r3, #16
 8005d52:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	330c      	adds	r3, #12
 8005d5c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005d60:	61fa      	str	r2, [r7, #28]
 8005d62:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d64:	69b9      	ldr	r1, [r7, #24]
 8005d66:	69fa      	ldr	r2, [r7, #28]
 8005d68:	e841 2300 	strex	r3, r2, [r1]
 8005d6c:	617b      	str	r3, [r7, #20]
   return(result);
 8005d6e:	697b      	ldr	r3, [r7, #20]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d1e3      	bne.n	8005d3c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005d74:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005d78:	4619      	mov	r1, r3
 8005d7a:	6878      	ldr	r0, [r7, #4]
 8005d7c:	f000 f834 	bl	8005de8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005d80:	e023      	b.n	8005dca <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005d82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d009      	beq.n	8005da2 <HAL_UART_IRQHandler+0x4ea>
 8005d8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d003      	beq.n	8005da2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005d9a:	6878      	ldr	r0, [r7, #4]
 8005d9c:	f000 f953 	bl	8006046 <UART_Transmit_IT>
    return;
 8005da0:	e014      	b.n	8005dcc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005da2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005da6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d00e      	beq.n	8005dcc <HAL_UART_IRQHandler+0x514>
 8005dae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005db2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d008      	beq.n	8005dcc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005dba:	6878      	ldr	r0, [r7, #4]
 8005dbc:	f000 f993 	bl	80060e6 <UART_EndTransmit_IT>
    return;
 8005dc0:	e004      	b.n	8005dcc <HAL_UART_IRQHandler+0x514>
    return;
 8005dc2:	bf00      	nop
 8005dc4:	e002      	b.n	8005dcc <HAL_UART_IRQHandler+0x514>
      return;
 8005dc6:	bf00      	nop
 8005dc8:	e000      	b.n	8005dcc <HAL_UART_IRQHandler+0x514>
      return;
 8005dca:	bf00      	nop
  }
}
 8005dcc:	37e8      	adds	r7, #232	; 0xe8
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	bd80      	pop	{r7, pc}
 8005dd2:	bf00      	nop

08005dd4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005dd4:	b480      	push	{r7}
 8005dd6:	b083      	sub	sp, #12
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005ddc:	bf00      	nop
 8005dde:	370c      	adds	r7, #12
 8005de0:	46bd      	mov	sp, r7
 8005de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de6:	4770      	bx	lr

08005de8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005de8:	b480      	push	{r7}
 8005dea:	b083      	sub	sp, #12
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
 8005df0:	460b      	mov	r3, r1
 8005df2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005df4:	bf00      	nop
 8005df6:	370c      	adds	r7, #12
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfe:	4770      	bx	lr

08005e00 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b090      	sub	sp, #64	; 0x40
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	60f8      	str	r0, [r7, #12]
 8005e08:	60b9      	str	r1, [r7, #8]
 8005e0a:	603b      	str	r3, [r7, #0]
 8005e0c:	4613      	mov	r3, r2
 8005e0e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e10:	e050      	b.n	8005eb4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e18:	d04c      	beq.n	8005eb4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005e1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d007      	beq.n	8005e30 <UART_WaitOnFlagUntilTimeout+0x30>
 8005e20:	f7fc ff82 	bl	8002d28 <HAL_GetTick>
 8005e24:	4602      	mov	r2, r0
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	1ad3      	subs	r3, r2, r3
 8005e2a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005e2c:	429a      	cmp	r2, r3
 8005e2e:	d241      	bcs.n	8005eb4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	330c      	adds	r3, #12
 8005e36:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e3a:	e853 3f00 	ldrex	r3, [r3]
 8005e3e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e42:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005e46:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	330c      	adds	r3, #12
 8005e4e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005e50:	637a      	str	r2, [r7, #52]	; 0x34
 8005e52:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e54:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005e56:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005e58:	e841 2300 	strex	r3, r2, [r1]
 8005e5c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005e5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d1e5      	bne.n	8005e30 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	3314      	adds	r3, #20
 8005e6a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e6c:	697b      	ldr	r3, [r7, #20]
 8005e6e:	e853 3f00 	ldrex	r3, [r3]
 8005e72:	613b      	str	r3, [r7, #16]
   return(result);
 8005e74:	693b      	ldr	r3, [r7, #16]
 8005e76:	f023 0301 	bic.w	r3, r3, #1
 8005e7a:	63bb      	str	r3, [r7, #56]	; 0x38
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	3314      	adds	r3, #20
 8005e82:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005e84:	623a      	str	r2, [r7, #32]
 8005e86:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e88:	69f9      	ldr	r1, [r7, #28]
 8005e8a:	6a3a      	ldr	r2, [r7, #32]
 8005e8c:	e841 2300 	strex	r3, r2, [r1]
 8005e90:	61bb      	str	r3, [r7, #24]
   return(result);
 8005e92:	69bb      	ldr	r3, [r7, #24]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d1e5      	bne.n	8005e64 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	2220      	movs	r2, #32
 8005e9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	2220      	movs	r2, #32
 8005ea4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	2200      	movs	r2, #0
 8005eac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005eb0:	2303      	movs	r3, #3
 8005eb2:	e00f      	b.n	8005ed4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	681a      	ldr	r2, [r3, #0]
 8005eba:	68bb      	ldr	r3, [r7, #8]
 8005ebc:	4013      	ands	r3, r2
 8005ebe:	68ba      	ldr	r2, [r7, #8]
 8005ec0:	429a      	cmp	r2, r3
 8005ec2:	bf0c      	ite	eq
 8005ec4:	2301      	moveq	r3, #1
 8005ec6:	2300      	movne	r3, #0
 8005ec8:	b2db      	uxtb	r3, r3
 8005eca:	461a      	mov	r2, r3
 8005ecc:	79fb      	ldrb	r3, [r7, #7]
 8005ece:	429a      	cmp	r2, r3
 8005ed0:	d09f      	beq.n	8005e12 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005ed2:	2300      	movs	r3, #0
}
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	3740      	adds	r7, #64	; 0x40
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	bd80      	pop	{r7, pc}

08005edc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005edc:	b480      	push	{r7}
 8005ede:	b085      	sub	sp, #20
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	60f8      	str	r0, [r7, #12]
 8005ee4:	60b9      	str	r1, [r7, #8]
 8005ee6:	4613      	mov	r3, r2
 8005ee8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	68ba      	ldr	r2, [r7, #8]
 8005eee:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	88fa      	ldrh	r2, [r7, #6]
 8005ef4:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	88fa      	ldrh	r2, [r7, #6]
 8005efa:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	2200      	movs	r2, #0
 8005f00:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	2222      	movs	r2, #34	; 0x22
 8005f06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	691b      	ldr	r3, [r3, #16]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d007      	beq.n	8005f2a <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	68da      	ldr	r2, [r3, #12]
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005f28:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	695a      	ldr	r2, [r3, #20]
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f042 0201 	orr.w	r2, r2, #1
 8005f38:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	68da      	ldr	r2, [r3, #12]
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f042 0220 	orr.w	r2, r2, #32
 8005f48:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005f4a:	2300      	movs	r3, #0
}
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	3714      	adds	r7, #20
 8005f50:	46bd      	mov	sp, r7
 8005f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f56:	4770      	bx	lr

08005f58 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005f58:	b480      	push	{r7}
 8005f5a:	b095      	sub	sp, #84	; 0x54
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	330c      	adds	r3, #12
 8005f66:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f6a:	e853 3f00 	ldrex	r3, [r3]
 8005f6e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005f70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f72:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005f76:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	330c      	adds	r3, #12
 8005f7e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005f80:	643a      	str	r2, [r7, #64]	; 0x40
 8005f82:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f84:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005f86:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005f88:	e841 2300 	strex	r3, r2, [r1]
 8005f8c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005f8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d1e5      	bne.n	8005f60 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	3314      	adds	r3, #20
 8005f9a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f9c:	6a3b      	ldr	r3, [r7, #32]
 8005f9e:	e853 3f00 	ldrex	r3, [r3]
 8005fa2:	61fb      	str	r3, [r7, #28]
   return(result);
 8005fa4:	69fb      	ldr	r3, [r7, #28]
 8005fa6:	f023 0301 	bic.w	r3, r3, #1
 8005faa:	64bb      	str	r3, [r7, #72]	; 0x48
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	3314      	adds	r3, #20
 8005fb2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005fb4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005fb6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fb8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005fba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005fbc:	e841 2300 	strex	r3, r2, [r1]
 8005fc0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d1e5      	bne.n	8005f94 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fcc:	2b01      	cmp	r3, #1
 8005fce:	d119      	bne.n	8006004 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	330c      	adds	r3, #12
 8005fd6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	e853 3f00 	ldrex	r3, [r3]
 8005fde:	60bb      	str	r3, [r7, #8]
   return(result);
 8005fe0:	68bb      	ldr	r3, [r7, #8]
 8005fe2:	f023 0310 	bic.w	r3, r3, #16
 8005fe6:	647b      	str	r3, [r7, #68]	; 0x44
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	330c      	adds	r3, #12
 8005fee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005ff0:	61ba      	str	r2, [r7, #24]
 8005ff2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ff4:	6979      	ldr	r1, [r7, #20]
 8005ff6:	69ba      	ldr	r2, [r7, #24]
 8005ff8:	e841 2300 	strex	r3, r2, [r1]
 8005ffc:	613b      	str	r3, [r7, #16]
   return(result);
 8005ffe:	693b      	ldr	r3, [r7, #16]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d1e5      	bne.n	8005fd0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2220      	movs	r2, #32
 8006008:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2200      	movs	r2, #0
 8006010:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006012:	bf00      	nop
 8006014:	3754      	adds	r7, #84	; 0x54
 8006016:	46bd      	mov	sp, r7
 8006018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601c:	4770      	bx	lr

0800601e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800601e:	b580      	push	{r7, lr}
 8006020:	b084      	sub	sp, #16
 8006022:	af00      	add	r7, sp, #0
 8006024:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800602a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	2200      	movs	r2, #0
 8006030:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	2200      	movs	r2, #0
 8006036:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006038:	68f8      	ldr	r0, [r7, #12]
 800603a:	f7fc f8a5 	bl	8002188 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800603e:	bf00      	nop
 8006040:	3710      	adds	r7, #16
 8006042:	46bd      	mov	sp, r7
 8006044:	bd80      	pop	{r7, pc}

08006046 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006046:	b480      	push	{r7}
 8006048:	b085      	sub	sp, #20
 800604a:	af00      	add	r7, sp, #0
 800604c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006054:	b2db      	uxtb	r3, r3
 8006056:	2b21      	cmp	r3, #33	; 0x21
 8006058:	d13e      	bne.n	80060d8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	689b      	ldr	r3, [r3, #8]
 800605e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006062:	d114      	bne.n	800608e <UART_Transmit_IT+0x48>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	691b      	ldr	r3, [r3, #16]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d110      	bne.n	800608e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	6a1b      	ldr	r3, [r3, #32]
 8006070:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	881b      	ldrh	r3, [r3, #0]
 8006076:	461a      	mov	r2, r3
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006080:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6a1b      	ldr	r3, [r3, #32]
 8006086:	1c9a      	adds	r2, r3, #2
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	621a      	str	r2, [r3, #32]
 800608c:	e008      	b.n	80060a0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6a1b      	ldr	r3, [r3, #32]
 8006092:	1c59      	adds	r1, r3, #1
 8006094:	687a      	ldr	r2, [r7, #4]
 8006096:	6211      	str	r1, [r2, #32]
 8006098:	781a      	ldrb	r2, [r3, #0]
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80060a4:	b29b      	uxth	r3, r3
 80060a6:	3b01      	subs	r3, #1
 80060a8:	b29b      	uxth	r3, r3
 80060aa:	687a      	ldr	r2, [r7, #4]
 80060ac:	4619      	mov	r1, r3
 80060ae:	84d1      	strh	r1, [r2, #38]	; 0x26
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d10f      	bne.n	80060d4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	68da      	ldr	r2, [r3, #12]
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80060c2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	68da      	ldr	r2, [r3, #12]
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80060d2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80060d4:	2300      	movs	r3, #0
 80060d6:	e000      	b.n	80060da <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80060d8:	2302      	movs	r3, #2
  }
}
 80060da:	4618      	mov	r0, r3
 80060dc:	3714      	adds	r7, #20
 80060de:	46bd      	mov	sp, r7
 80060e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e4:	4770      	bx	lr

080060e6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80060e6:	b580      	push	{r7, lr}
 80060e8:	b082      	sub	sp, #8
 80060ea:	af00      	add	r7, sp, #0
 80060ec:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	68da      	ldr	r2, [r3, #12]
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80060fc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2220      	movs	r2, #32
 8006102:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006106:	6878      	ldr	r0, [r7, #4]
 8006108:	f7ff fe64 	bl	8005dd4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800610c:	2300      	movs	r3, #0
}
 800610e:	4618      	mov	r0, r3
 8006110:	3708      	adds	r7, #8
 8006112:	46bd      	mov	sp, r7
 8006114:	bd80      	pop	{r7, pc}

08006116 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006116:	b580      	push	{r7, lr}
 8006118:	b08c      	sub	sp, #48	; 0x30
 800611a:	af00      	add	r7, sp, #0
 800611c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006124:	b2db      	uxtb	r3, r3
 8006126:	2b22      	cmp	r3, #34	; 0x22
 8006128:	f040 80ab 	bne.w	8006282 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	689b      	ldr	r3, [r3, #8]
 8006130:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006134:	d117      	bne.n	8006166 <UART_Receive_IT+0x50>
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	691b      	ldr	r3, [r3, #16]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d113      	bne.n	8006166 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800613e:	2300      	movs	r3, #0
 8006140:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006146:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	685b      	ldr	r3, [r3, #4]
 800614e:	b29b      	uxth	r3, r3
 8006150:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006154:	b29a      	uxth	r2, r3
 8006156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006158:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800615e:	1c9a      	adds	r2, r3, #2
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	629a      	str	r2, [r3, #40]	; 0x28
 8006164:	e026      	b.n	80061b4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800616a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800616c:	2300      	movs	r3, #0
 800616e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	689b      	ldr	r3, [r3, #8]
 8006174:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006178:	d007      	beq.n	800618a <UART_Receive_IT+0x74>
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	689b      	ldr	r3, [r3, #8]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d10a      	bne.n	8006198 <UART_Receive_IT+0x82>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	691b      	ldr	r3, [r3, #16]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d106      	bne.n	8006198 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	685b      	ldr	r3, [r3, #4]
 8006190:	b2da      	uxtb	r2, r3
 8006192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006194:	701a      	strb	r2, [r3, #0]
 8006196:	e008      	b.n	80061aa <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	685b      	ldr	r3, [r3, #4]
 800619e:	b2db      	uxtb	r3, r3
 80061a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80061a4:	b2da      	uxtb	r2, r3
 80061a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061a8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061ae:	1c5a      	adds	r2, r3, #1
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80061b8:	b29b      	uxth	r3, r3
 80061ba:	3b01      	subs	r3, #1
 80061bc:	b29b      	uxth	r3, r3
 80061be:	687a      	ldr	r2, [r7, #4]
 80061c0:	4619      	mov	r1, r3
 80061c2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d15a      	bne.n	800627e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	68da      	ldr	r2, [r3, #12]
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f022 0220 	bic.w	r2, r2, #32
 80061d6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	68da      	ldr	r2, [r3, #12]
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80061e6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	695a      	ldr	r2, [r3, #20]
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f022 0201 	bic.w	r2, r2, #1
 80061f6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2220      	movs	r2, #32
 80061fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006204:	2b01      	cmp	r3, #1
 8006206:	d135      	bne.n	8006274 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2200      	movs	r2, #0
 800620c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	330c      	adds	r3, #12
 8006214:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006216:	697b      	ldr	r3, [r7, #20]
 8006218:	e853 3f00 	ldrex	r3, [r3]
 800621c:	613b      	str	r3, [r7, #16]
   return(result);
 800621e:	693b      	ldr	r3, [r7, #16]
 8006220:	f023 0310 	bic.w	r3, r3, #16
 8006224:	627b      	str	r3, [r7, #36]	; 0x24
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	330c      	adds	r3, #12
 800622c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800622e:	623a      	str	r2, [r7, #32]
 8006230:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006232:	69f9      	ldr	r1, [r7, #28]
 8006234:	6a3a      	ldr	r2, [r7, #32]
 8006236:	e841 2300 	strex	r3, r2, [r1]
 800623a:	61bb      	str	r3, [r7, #24]
   return(result);
 800623c:	69bb      	ldr	r3, [r7, #24]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d1e5      	bne.n	800620e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f003 0310 	and.w	r3, r3, #16
 800624c:	2b10      	cmp	r3, #16
 800624e:	d10a      	bne.n	8006266 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006250:	2300      	movs	r3, #0
 8006252:	60fb      	str	r3, [r7, #12]
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	60fb      	str	r3, [r7, #12]
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	685b      	ldr	r3, [r3, #4]
 8006262:	60fb      	str	r3, [r7, #12]
 8006264:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800626a:	4619      	mov	r1, r3
 800626c:	6878      	ldr	r0, [r7, #4]
 800626e:	f7ff fdbb 	bl	8005de8 <HAL_UARTEx_RxEventCallback>
 8006272:	e002      	b.n	800627a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006274:	6878      	ldr	r0, [r7, #4]
 8006276:	f7fb ffdb 	bl	8002230 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800627a:	2300      	movs	r3, #0
 800627c:	e002      	b.n	8006284 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800627e:	2300      	movs	r3, #0
 8006280:	e000      	b.n	8006284 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006282:	2302      	movs	r3, #2
  }
}
 8006284:	4618      	mov	r0, r3
 8006286:	3730      	adds	r7, #48	; 0x30
 8006288:	46bd      	mov	sp, r7
 800628a:	bd80      	pop	{r7, pc}

0800628c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800628c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006290:	b0c0      	sub	sp, #256	; 0x100
 8006292:	af00      	add	r7, sp, #0
 8006294:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006298:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	691b      	ldr	r3, [r3, #16]
 80062a0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80062a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062a8:	68d9      	ldr	r1, [r3, #12]
 80062aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062ae:	681a      	ldr	r2, [r3, #0]
 80062b0:	ea40 0301 	orr.w	r3, r0, r1
 80062b4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80062b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062ba:	689a      	ldr	r2, [r3, #8]
 80062bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062c0:	691b      	ldr	r3, [r3, #16]
 80062c2:	431a      	orrs	r2, r3
 80062c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062c8:	695b      	ldr	r3, [r3, #20]
 80062ca:	431a      	orrs	r2, r3
 80062cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062d0:	69db      	ldr	r3, [r3, #28]
 80062d2:	4313      	orrs	r3, r2
 80062d4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80062d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	68db      	ldr	r3, [r3, #12]
 80062e0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80062e4:	f021 010c 	bic.w	r1, r1, #12
 80062e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062ec:	681a      	ldr	r2, [r3, #0]
 80062ee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80062f2:	430b      	orrs	r3, r1
 80062f4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80062f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	695b      	ldr	r3, [r3, #20]
 80062fe:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006302:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006306:	6999      	ldr	r1, [r3, #24]
 8006308:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800630c:	681a      	ldr	r2, [r3, #0]
 800630e:	ea40 0301 	orr.w	r3, r0, r1
 8006312:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006314:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006318:	681a      	ldr	r2, [r3, #0]
 800631a:	4b8f      	ldr	r3, [pc, #572]	; (8006558 <UART_SetConfig+0x2cc>)
 800631c:	429a      	cmp	r2, r3
 800631e:	d005      	beq.n	800632c <UART_SetConfig+0xa0>
 8006320:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006324:	681a      	ldr	r2, [r3, #0]
 8006326:	4b8d      	ldr	r3, [pc, #564]	; (800655c <UART_SetConfig+0x2d0>)
 8006328:	429a      	cmp	r2, r3
 800632a:	d104      	bne.n	8006336 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800632c:	f7fd fde2 	bl	8003ef4 <HAL_RCC_GetPCLK2Freq>
 8006330:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006334:	e003      	b.n	800633e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006336:	f7fd fdc9 	bl	8003ecc <HAL_RCC_GetPCLK1Freq>
 800633a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800633e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006342:	69db      	ldr	r3, [r3, #28]
 8006344:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006348:	f040 810c 	bne.w	8006564 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800634c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006350:	2200      	movs	r2, #0
 8006352:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006356:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800635a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800635e:	4622      	mov	r2, r4
 8006360:	462b      	mov	r3, r5
 8006362:	1891      	adds	r1, r2, r2
 8006364:	65b9      	str	r1, [r7, #88]	; 0x58
 8006366:	415b      	adcs	r3, r3
 8006368:	65fb      	str	r3, [r7, #92]	; 0x5c
 800636a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800636e:	4621      	mov	r1, r4
 8006370:	eb12 0801 	adds.w	r8, r2, r1
 8006374:	4629      	mov	r1, r5
 8006376:	eb43 0901 	adc.w	r9, r3, r1
 800637a:	f04f 0200 	mov.w	r2, #0
 800637e:	f04f 0300 	mov.w	r3, #0
 8006382:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006386:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800638a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800638e:	4690      	mov	r8, r2
 8006390:	4699      	mov	r9, r3
 8006392:	4623      	mov	r3, r4
 8006394:	eb18 0303 	adds.w	r3, r8, r3
 8006398:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800639c:	462b      	mov	r3, r5
 800639e:	eb49 0303 	adc.w	r3, r9, r3
 80063a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80063a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063aa:	685b      	ldr	r3, [r3, #4]
 80063ac:	2200      	movs	r2, #0
 80063ae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80063b2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80063b6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80063ba:	460b      	mov	r3, r1
 80063bc:	18db      	adds	r3, r3, r3
 80063be:	653b      	str	r3, [r7, #80]	; 0x50
 80063c0:	4613      	mov	r3, r2
 80063c2:	eb42 0303 	adc.w	r3, r2, r3
 80063c6:	657b      	str	r3, [r7, #84]	; 0x54
 80063c8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80063cc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80063d0:	f7f9 ff6e 	bl	80002b0 <__aeabi_uldivmod>
 80063d4:	4602      	mov	r2, r0
 80063d6:	460b      	mov	r3, r1
 80063d8:	4b61      	ldr	r3, [pc, #388]	; (8006560 <UART_SetConfig+0x2d4>)
 80063da:	fba3 2302 	umull	r2, r3, r3, r2
 80063de:	095b      	lsrs	r3, r3, #5
 80063e0:	011c      	lsls	r4, r3, #4
 80063e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80063e6:	2200      	movs	r2, #0
 80063e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80063ec:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80063f0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80063f4:	4642      	mov	r2, r8
 80063f6:	464b      	mov	r3, r9
 80063f8:	1891      	adds	r1, r2, r2
 80063fa:	64b9      	str	r1, [r7, #72]	; 0x48
 80063fc:	415b      	adcs	r3, r3
 80063fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006400:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006404:	4641      	mov	r1, r8
 8006406:	eb12 0a01 	adds.w	sl, r2, r1
 800640a:	4649      	mov	r1, r9
 800640c:	eb43 0b01 	adc.w	fp, r3, r1
 8006410:	f04f 0200 	mov.w	r2, #0
 8006414:	f04f 0300 	mov.w	r3, #0
 8006418:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800641c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006420:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006424:	4692      	mov	sl, r2
 8006426:	469b      	mov	fp, r3
 8006428:	4643      	mov	r3, r8
 800642a:	eb1a 0303 	adds.w	r3, sl, r3
 800642e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006432:	464b      	mov	r3, r9
 8006434:	eb4b 0303 	adc.w	r3, fp, r3
 8006438:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800643c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006440:	685b      	ldr	r3, [r3, #4]
 8006442:	2200      	movs	r2, #0
 8006444:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006448:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800644c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006450:	460b      	mov	r3, r1
 8006452:	18db      	adds	r3, r3, r3
 8006454:	643b      	str	r3, [r7, #64]	; 0x40
 8006456:	4613      	mov	r3, r2
 8006458:	eb42 0303 	adc.w	r3, r2, r3
 800645c:	647b      	str	r3, [r7, #68]	; 0x44
 800645e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006462:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006466:	f7f9 ff23 	bl	80002b0 <__aeabi_uldivmod>
 800646a:	4602      	mov	r2, r0
 800646c:	460b      	mov	r3, r1
 800646e:	4611      	mov	r1, r2
 8006470:	4b3b      	ldr	r3, [pc, #236]	; (8006560 <UART_SetConfig+0x2d4>)
 8006472:	fba3 2301 	umull	r2, r3, r3, r1
 8006476:	095b      	lsrs	r3, r3, #5
 8006478:	2264      	movs	r2, #100	; 0x64
 800647a:	fb02 f303 	mul.w	r3, r2, r3
 800647e:	1acb      	subs	r3, r1, r3
 8006480:	00db      	lsls	r3, r3, #3
 8006482:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006486:	4b36      	ldr	r3, [pc, #216]	; (8006560 <UART_SetConfig+0x2d4>)
 8006488:	fba3 2302 	umull	r2, r3, r3, r2
 800648c:	095b      	lsrs	r3, r3, #5
 800648e:	005b      	lsls	r3, r3, #1
 8006490:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006494:	441c      	add	r4, r3
 8006496:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800649a:	2200      	movs	r2, #0
 800649c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80064a0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80064a4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80064a8:	4642      	mov	r2, r8
 80064aa:	464b      	mov	r3, r9
 80064ac:	1891      	adds	r1, r2, r2
 80064ae:	63b9      	str	r1, [r7, #56]	; 0x38
 80064b0:	415b      	adcs	r3, r3
 80064b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80064b4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80064b8:	4641      	mov	r1, r8
 80064ba:	1851      	adds	r1, r2, r1
 80064bc:	6339      	str	r1, [r7, #48]	; 0x30
 80064be:	4649      	mov	r1, r9
 80064c0:	414b      	adcs	r3, r1
 80064c2:	637b      	str	r3, [r7, #52]	; 0x34
 80064c4:	f04f 0200 	mov.w	r2, #0
 80064c8:	f04f 0300 	mov.w	r3, #0
 80064cc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80064d0:	4659      	mov	r1, fp
 80064d2:	00cb      	lsls	r3, r1, #3
 80064d4:	4651      	mov	r1, sl
 80064d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80064da:	4651      	mov	r1, sl
 80064dc:	00ca      	lsls	r2, r1, #3
 80064de:	4610      	mov	r0, r2
 80064e0:	4619      	mov	r1, r3
 80064e2:	4603      	mov	r3, r0
 80064e4:	4642      	mov	r2, r8
 80064e6:	189b      	adds	r3, r3, r2
 80064e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80064ec:	464b      	mov	r3, r9
 80064ee:	460a      	mov	r2, r1
 80064f0:	eb42 0303 	adc.w	r3, r2, r3
 80064f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80064f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064fc:	685b      	ldr	r3, [r3, #4]
 80064fe:	2200      	movs	r2, #0
 8006500:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006504:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006508:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800650c:	460b      	mov	r3, r1
 800650e:	18db      	adds	r3, r3, r3
 8006510:	62bb      	str	r3, [r7, #40]	; 0x28
 8006512:	4613      	mov	r3, r2
 8006514:	eb42 0303 	adc.w	r3, r2, r3
 8006518:	62fb      	str	r3, [r7, #44]	; 0x2c
 800651a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800651e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006522:	f7f9 fec5 	bl	80002b0 <__aeabi_uldivmod>
 8006526:	4602      	mov	r2, r0
 8006528:	460b      	mov	r3, r1
 800652a:	4b0d      	ldr	r3, [pc, #52]	; (8006560 <UART_SetConfig+0x2d4>)
 800652c:	fba3 1302 	umull	r1, r3, r3, r2
 8006530:	095b      	lsrs	r3, r3, #5
 8006532:	2164      	movs	r1, #100	; 0x64
 8006534:	fb01 f303 	mul.w	r3, r1, r3
 8006538:	1ad3      	subs	r3, r2, r3
 800653a:	00db      	lsls	r3, r3, #3
 800653c:	3332      	adds	r3, #50	; 0x32
 800653e:	4a08      	ldr	r2, [pc, #32]	; (8006560 <UART_SetConfig+0x2d4>)
 8006540:	fba2 2303 	umull	r2, r3, r2, r3
 8006544:	095b      	lsrs	r3, r3, #5
 8006546:	f003 0207 	and.w	r2, r3, #7
 800654a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	4422      	add	r2, r4
 8006552:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006554:	e106      	b.n	8006764 <UART_SetConfig+0x4d8>
 8006556:	bf00      	nop
 8006558:	40011000 	.word	0x40011000
 800655c:	40011400 	.word	0x40011400
 8006560:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006564:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006568:	2200      	movs	r2, #0
 800656a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800656e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006572:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006576:	4642      	mov	r2, r8
 8006578:	464b      	mov	r3, r9
 800657a:	1891      	adds	r1, r2, r2
 800657c:	6239      	str	r1, [r7, #32]
 800657e:	415b      	adcs	r3, r3
 8006580:	627b      	str	r3, [r7, #36]	; 0x24
 8006582:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006586:	4641      	mov	r1, r8
 8006588:	1854      	adds	r4, r2, r1
 800658a:	4649      	mov	r1, r9
 800658c:	eb43 0501 	adc.w	r5, r3, r1
 8006590:	f04f 0200 	mov.w	r2, #0
 8006594:	f04f 0300 	mov.w	r3, #0
 8006598:	00eb      	lsls	r3, r5, #3
 800659a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800659e:	00e2      	lsls	r2, r4, #3
 80065a0:	4614      	mov	r4, r2
 80065a2:	461d      	mov	r5, r3
 80065a4:	4643      	mov	r3, r8
 80065a6:	18e3      	adds	r3, r4, r3
 80065a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80065ac:	464b      	mov	r3, r9
 80065ae:	eb45 0303 	adc.w	r3, r5, r3
 80065b2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80065b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065ba:	685b      	ldr	r3, [r3, #4]
 80065bc:	2200      	movs	r2, #0
 80065be:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80065c2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80065c6:	f04f 0200 	mov.w	r2, #0
 80065ca:	f04f 0300 	mov.w	r3, #0
 80065ce:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80065d2:	4629      	mov	r1, r5
 80065d4:	008b      	lsls	r3, r1, #2
 80065d6:	4621      	mov	r1, r4
 80065d8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80065dc:	4621      	mov	r1, r4
 80065de:	008a      	lsls	r2, r1, #2
 80065e0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80065e4:	f7f9 fe64 	bl	80002b0 <__aeabi_uldivmod>
 80065e8:	4602      	mov	r2, r0
 80065ea:	460b      	mov	r3, r1
 80065ec:	4b60      	ldr	r3, [pc, #384]	; (8006770 <UART_SetConfig+0x4e4>)
 80065ee:	fba3 2302 	umull	r2, r3, r3, r2
 80065f2:	095b      	lsrs	r3, r3, #5
 80065f4:	011c      	lsls	r4, r3, #4
 80065f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80065fa:	2200      	movs	r2, #0
 80065fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006600:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006604:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006608:	4642      	mov	r2, r8
 800660a:	464b      	mov	r3, r9
 800660c:	1891      	adds	r1, r2, r2
 800660e:	61b9      	str	r1, [r7, #24]
 8006610:	415b      	adcs	r3, r3
 8006612:	61fb      	str	r3, [r7, #28]
 8006614:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006618:	4641      	mov	r1, r8
 800661a:	1851      	adds	r1, r2, r1
 800661c:	6139      	str	r1, [r7, #16]
 800661e:	4649      	mov	r1, r9
 8006620:	414b      	adcs	r3, r1
 8006622:	617b      	str	r3, [r7, #20]
 8006624:	f04f 0200 	mov.w	r2, #0
 8006628:	f04f 0300 	mov.w	r3, #0
 800662c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006630:	4659      	mov	r1, fp
 8006632:	00cb      	lsls	r3, r1, #3
 8006634:	4651      	mov	r1, sl
 8006636:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800663a:	4651      	mov	r1, sl
 800663c:	00ca      	lsls	r2, r1, #3
 800663e:	4610      	mov	r0, r2
 8006640:	4619      	mov	r1, r3
 8006642:	4603      	mov	r3, r0
 8006644:	4642      	mov	r2, r8
 8006646:	189b      	adds	r3, r3, r2
 8006648:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800664c:	464b      	mov	r3, r9
 800664e:	460a      	mov	r2, r1
 8006650:	eb42 0303 	adc.w	r3, r2, r3
 8006654:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006658:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800665c:	685b      	ldr	r3, [r3, #4]
 800665e:	2200      	movs	r2, #0
 8006660:	67bb      	str	r3, [r7, #120]	; 0x78
 8006662:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006664:	f04f 0200 	mov.w	r2, #0
 8006668:	f04f 0300 	mov.w	r3, #0
 800666c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006670:	4649      	mov	r1, r9
 8006672:	008b      	lsls	r3, r1, #2
 8006674:	4641      	mov	r1, r8
 8006676:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800667a:	4641      	mov	r1, r8
 800667c:	008a      	lsls	r2, r1, #2
 800667e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006682:	f7f9 fe15 	bl	80002b0 <__aeabi_uldivmod>
 8006686:	4602      	mov	r2, r0
 8006688:	460b      	mov	r3, r1
 800668a:	4611      	mov	r1, r2
 800668c:	4b38      	ldr	r3, [pc, #224]	; (8006770 <UART_SetConfig+0x4e4>)
 800668e:	fba3 2301 	umull	r2, r3, r3, r1
 8006692:	095b      	lsrs	r3, r3, #5
 8006694:	2264      	movs	r2, #100	; 0x64
 8006696:	fb02 f303 	mul.w	r3, r2, r3
 800669a:	1acb      	subs	r3, r1, r3
 800669c:	011b      	lsls	r3, r3, #4
 800669e:	3332      	adds	r3, #50	; 0x32
 80066a0:	4a33      	ldr	r2, [pc, #204]	; (8006770 <UART_SetConfig+0x4e4>)
 80066a2:	fba2 2303 	umull	r2, r3, r2, r3
 80066a6:	095b      	lsrs	r3, r3, #5
 80066a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80066ac:	441c      	add	r4, r3
 80066ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80066b2:	2200      	movs	r2, #0
 80066b4:	673b      	str	r3, [r7, #112]	; 0x70
 80066b6:	677a      	str	r2, [r7, #116]	; 0x74
 80066b8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80066bc:	4642      	mov	r2, r8
 80066be:	464b      	mov	r3, r9
 80066c0:	1891      	adds	r1, r2, r2
 80066c2:	60b9      	str	r1, [r7, #8]
 80066c4:	415b      	adcs	r3, r3
 80066c6:	60fb      	str	r3, [r7, #12]
 80066c8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80066cc:	4641      	mov	r1, r8
 80066ce:	1851      	adds	r1, r2, r1
 80066d0:	6039      	str	r1, [r7, #0]
 80066d2:	4649      	mov	r1, r9
 80066d4:	414b      	adcs	r3, r1
 80066d6:	607b      	str	r3, [r7, #4]
 80066d8:	f04f 0200 	mov.w	r2, #0
 80066dc:	f04f 0300 	mov.w	r3, #0
 80066e0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80066e4:	4659      	mov	r1, fp
 80066e6:	00cb      	lsls	r3, r1, #3
 80066e8:	4651      	mov	r1, sl
 80066ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80066ee:	4651      	mov	r1, sl
 80066f0:	00ca      	lsls	r2, r1, #3
 80066f2:	4610      	mov	r0, r2
 80066f4:	4619      	mov	r1, r3
 80066f6:	4603      	mov	r3, r0
 80066f8:	4642      	mov	r2, r8
 80066fa:	189b      	adds	r3, r3, r2
 80066fc:	66bb      	str	r3, [r7, #104]	; 0x68
 80066fe:	464b      	mov	r3, r9
 8006700:	460a      	mov	r2, r1
 8006702:	eb42 0303 	adc.w	r3, r2, r3
 8006706:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006708:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800670c:	685b      	ldr	r3, [r3, #4]
 800670e:	2200      	movs	r2, #0
 8006710:	663b      	str	r3, [r7, #96]	; 0x60
 8006712:	667a      	str	r2, [r7, #100]	; 0x64
 8006714:	f04f 0200 	mov.w	r2, #0
 8006718:	f04f 0300 	mov.w	r3, #0
 800671c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006720:	4649      	mov	r1, r9
 8006722:	008b      	lsls	r3, r1, #2
 8006724:	4641      	mov	r1, r8
 8006726:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800672a:	4641      	mov	r1, r8
 800672c:	008a      	lsls	r2, r1, #2
 800672e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006732:	f7f9 fdbd 	bl	80002b0 <__aeabi_uldivmod>
 8006736:	4602      	mov	r2, r0
 8006738:	460b      	mov	r3, r1
 800673a:	4b0d      	ldr	r3, [pc, #52]	; (8006770 <UART_SetConfig+0x4e4>)
 800673c:	fba3 1302 	umull	r1, r3, r3, r2
 8006740:	095b      	lsrs	r3, r3, #5
 8006742:	2164      	movs	r1, #100	; 0x64
 8006744:	fb01 f303 	mul.w	r3, r1, r3
 8006748:	1ad3      	subs	r3, r2, r3
 800674a:	011b      	lsls	r3, r3, #4
 800674c:	3332      	adds	r3, #50	; 0x32
 800674e:	4a08      	ldr	r2, [pc, #32]	; (8006770 <UART_SetConfig+0x4e4>)
 8006750:	fba2 2303 	umull	r2, r3, r2, r3
 8006754:	095b      	lsrs	r3, r3, #5
 8006756:	f003 020f 	and.w	r2, r3, #15
 800675a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	4422      	add	r2, r4
 8006762:	609a      	str	r2, [r3, #8]
}
 8006764:	bf00      	nop
 8006766:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800676a:	46bd      	mov	sp, r7
 800676c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006770:	51eb851f 	.word	0x51eb851f

08006774 <HW_RESET>:


//No se puede quedar esperano en las funciones, hay que detectar a situaci�n y salir del bucle.
//pensar que solo entra cuando recibe datos, si no vuelve a entrar queda ah� eternamentes.
void HW_RESET(struct WIFI *a)
{
 8006774:	b580      	push	{r7, lr}
 8006776:	b082      	sub	sp, #8
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(a->RESET_PORT, a->RESET_PIN, GPIO_PIN_RESET);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	6818      	ldr	r0, [r3, #0]
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	889b      	ldrh	r3, [r3, #4]
 8006784:	2200      	movs	r2, #0
 8006786:	4619      	mov	r1, r3
 8006788:	f7fc ff3c 	bl	8003604 <HAL_GPIO_WritePin>
    ITM0_Write("\r\n ESP HW Resetting\r\n",strlen("\r\n ESP HW Resetting\r\n"));
 800678c:	2115      	movs	r1, #21
 800678e:	480b      	ldr	r0, [pc, #44]	; (80067bc <HW_RESET+0x48>)
 8006790:	f7fa ff4e 	bl	8001630 <ITM0_Write>
    HAL_Delay(2000);											//Tiempo de reset del módulo
 8006794:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8006798:	f7fc fad2 	bl	8002d40 <HAL_Delay>
    ITM0_Write("\r\n ESP Reset\r\n",strlen("\r\n ESP Reset\r\n"));
 800679c:	210e      	movs	r1, #14
 800679e:	4808      	ldr	r0, [pc, #32]	; (80067c0 <HW_RESET+0x4c>)
 80067a0:	f7fa ff46 	bl	8001630 <ITM0_Write>
    HAL_GPIO_WritePin(a->RESET_PORT, a->RESET_PIN, GPIO_PIN_SET);		//Habilito módulo
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	6818      	ldr	r0, [r3, #0]
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	889b      	ldrh	r3, [r3, #4]
 80067ac:	2201      	movs	r2, #1
 80067ae:	4619      	mov	r1, r3
 80067b0:	f7fc ff28 	bl	8003604 <HAL_GPIO_WritePin>
}
 80067b4:	bf00      	nop
 80067b6:	3708      	adds	r7, #8
 80067b8:	46bd      	mov	sp, r7
 80067ba:	bd80      	pop	{r7, pc}
 80067bc:	08010b20 	.word	0x08010b20
 80067c0:	08010b38 	.word	0x08010b38

080067c4 <NOP>:
void NOP(struct WIFI *a)
{
 80067c4:	b480      	push	{r7}
 80067c6:	b083      	sub	sp, #12
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
	a->_instruccion=0;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2200      	movs	r2, #0
 80067d0:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
	a->_enviaruart=0;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2200      	movs	r2, #0
 80067d8:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
	a->_pasos=0;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2200      	movs	r2, #0
 80067e0:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
}
 80067e4:	bf00      	nop
 80067e6:	370c      	adds	r7, #12
 80067e8:	46bd      	mov	sp, r7
 80067ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ee:	4770      	bx	lr

080067f0 <Cambiar_CWMODE>:
void Cambiar_CWMODE(struct WIFI *a)
{
 80067f0:	b480      	push	{r7}
 80067f2:	b083      	sub	sp, #12
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
	a->_instruccion=1;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2201      	movs	r2, #1
 80067fc:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
	a->_enviaruart=1;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2201      	movs	r2, #1
 8006804:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
	a->_pasos=0; //210416
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2200      	movs	r2, #0
 800680c:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
}
 8006810:	bf00      	nop
 8006812:	370c      	adds	r7, #12
 8006814:	46bd      	mov	sp, r7
 8006816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681a:	4770      	bx	lr

0800681c <ConectarWIFI>:
	a->_instruccion=-1;
	a->_enviaruart=1;
	a->_pasos=0; //210416
}
void ConectarWIFI(struct WIFI *a)
{
 800681c:	b480      	push	{r7}
 800681e:	b083      	sub	sp, #12
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
	a->_instruccion=2;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2202      	movs	r2, #2
 8006828:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
	a->_enviaruart=1;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2201      	movs	r2, #1
 8006830:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
	a->_pasos=0; //210416
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2200      	movs	r2, #0
 8006838:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
}
 800683c:	bf00      	nop
 800683e:	370c      	adds	r7, #12
 8006840:	46bd      	mov	sp, r7
 8006842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006846:	4770      	bx	lr

08006848 <MUX>:
void MUX(struct WIFI *a)
{
 8006848:	b480      	push	{r7}
 800684a:	b083      	sub	sp, #12
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
	a->_instruccion=4;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2204      	movs	r2, #4
 8006854:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
	a->_enviaruart=1;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2201      	movs	r2, #1
 800685c:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
	a->_pasos=0; //210416
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2200      	movs	r2, #0
 8006864:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
}
 8006868:	bf00      	nop
 800686a:	370c      	adds	r7, #12
 800686c:	46bd      	mov	sp, r7
 800686e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006872:	4770      	bx	lr

08006874 <IPDef>:
void IPDef(struct WIFI *a)
{
 8006874:	b480      	push	{r7}
 8006876:	b083      	sub	sp, #12
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
	a->_instruccion=5;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2205      	movs	r2, #5
 8006880:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
	a->_enviaruart=1;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2201      	movs	r2, #1
 8006888:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
	a->_pasos=0; //210416
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2200      	movs	r2, #0
 8006890:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
}
 8006894:	bf00      	nop
 8006896:	370c      	adds	r7, #12
 8006898:	46bd      	mov	sp, r7
 800689a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689e:	4770      	bx	lr

080068a0 <DesconectarWIFI>:
void DesconectarWIFI(struct WIFI *a)
	{
 80068a0:	b480      	push	{r7}
 80068a2:	b083      	sub	sp, #12
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
	a->_instruccion=0;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2200      	movs	r2, #0
 80068ac:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
	a->_enviaruart=1;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2201      	movs	r2, #1
 80068b4:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
	a->_pasos=0; //210416
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2200      	movs	r2, #0
 80068bc:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	}
 80068c0:	bf00      	nop
 80068c2:	370c      	adds	r7, #12
 80068c4:	46bd      	mov	sp, r7
 80068c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ca:	4770      	bx	lr

080068cc <ConectarTCP>:
void ConectarTCP(struct WIFI *a)
	{
 80068cc:	b480      	push	{r7}
 80068ce:	b083      	sub	sp, #12
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
	a->_instruccion=6;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2206      	movs	r2, #6
 80068d8:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
	a->_enviaruart=1;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2201      	movs	r2, #1
 80068e0:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
	a->_pasos=0; //210416
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2200      	movs	r2, #0
 80068e8:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	}
 80068ec:	bf00      	nop
 80068ee:	370c      	adds	r7, #12
 80068f0:	46bd      	mov	sp, r7
 80068f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f6:	4770      	bx	lr

080068f8 <CrearServidorTCP>:
void CrearServidorTCP(struct WIFI *a)
	{
 80068f8:	b480      	push	{r7}
 80068fa:	b083      	sub	sp, #12
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
	a->_instruccion=8;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2208      	movs	r2, #8
 8006904:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
	a->_enviaruart=1;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2201      	movs	r2, #1
 800690c:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
	a->_pasos=0; //210416
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2200      	movs	r2, #0
 8006914:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	}
 8006918:	bf00      	nop
 800691a:	370c      	adds	r7, #12
 800691c:	46bd      	mov	sp, r7
 800691e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006922:	4770      	bx	lr

08006924 <EnviarDatosSRVR>:
void EnviarDatosSRVR(struct WIFI *a)
	{
 8006924:	b480      	push	{r7}
 8006926:	b083      	sub	sp, #12
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
	a->_instruccion=9;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2209      	movs	r2, #9
 8006930:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
	a->_enviaruart=1;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2201      	movs	r2, #1
 8006938:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
	a->_pasos=0; //210416
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2200      	movs	r2, #0
 8006940:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	}
 8006944:	bf00      	nop
 8006946:	370c      	adds	r7, #12
 8006948:	46bd      	mov	sp, r7
 800694a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694e:	4770      	bx	lr

08006950 <EnviarDatos>:
	//a->_instruccion=4;
	a->_enviaruart=1;
	a->_pasos=0; //210416
	}
void EnviarDatos(struct WIFI *a)
	{
 8006950:	b480      	push	{r7}
 8006952:	b083      	sub	sp, #12
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
	a->_instruccion=7;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2207      	movs	r2, #7
 800695c:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
	a->_enviaruart=1;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2201      	movs	r2, #1
 8006964:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
	a->_pasos=0; //210416
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2200      	movs	r2, #0
 800696c:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	}
 8006970:	bf00      	nop
 8006972:	370c      	adds	r7, #12
 8006974:	46bd      	mov	sp, r7
 8006976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697a:	4770      	bx	lr

0800697c <Inicializar>:
void Inicializar(struct WIFI *a)
{
 800697c:	b480      	push	{r7}
 800697e:	b083      	sub	sp, #12
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
a->_WF_Net[32]='\0';				//Nombre de la red WIFI  a conectaraurt
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2200      	movs	r2, #0
 8006988:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
a->_WF_Pass[16]='\0';				//Password de la red WIFI
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2200      	movs	r2, #0
 8006990:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
a->_TCP_Remote_Server_IP[16]='\0';			//IP del Servidor TCP al que me voy a conectar
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2200      	movs	r2, #0
 8006998:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
a->_TCP_Remote_Server_Port[6]='\0';			//Puerto del Servidor TCP al que me voy a conectar
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2200      	movs	r2, #0
 80069a0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
a->_TCP_Local_Server_IP[16]='\0';		//IP del Servidor TCP Local
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2200      	movs	r2, #0
 80069a8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
a->_TCP_Local_Server_Port[6]='\0';		//Puerto del Servidor TCP local
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2200      	movs	r2, #0
 80069b0:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
a->_TCP_Local_Server_GWY[16]='\0';		//Gateway de red
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2200      	movs	r2, #0
 80069b8:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
a->_TCP_Local_Server_MSK[16]='\0';		//Mascara de red
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2200      	movs	r2, #0
 80069c0:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
a->_TCP_Local_Server_Initiated=0;		//Servidor TCP no iniciado
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2200      	movs	r2, #0
 80069c8:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
a->_estado=0;					//Estado de m�dulo WIFI
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2200      	movs	r2, #0
 80069d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
a->_estado_rcv_data=0;			//Estado de Recepcion de datos
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2200      	movs	r2, #0
 80069d8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
a->_dataRCV[512]='\0';			//Data recibida por TCP   SOLO PARA EVITAR SOBREESCRITURA VALOR ORIGINAL 64 RESTRINGIR EN EL .C
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2200      	movs	r2, #0
 80069e0:	f883 2298 	strb.w	r2, [r3, #664]	; 0x298
a->_data2SND[64]='\0';			//Data a enviar por TCP
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2200      	movs	r2, #0
 80069e8:	f883 22d8 	strb.w	r2, [r3, #728]	; 0x2d8
a->_uart2snd[512]='\0';			//Datos a enviar por UART
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2200      	movs	r2, #0
 80069f0:	f883 2698 	strb.w	r2, [r3, #1688]	; 0x698
a->_uartRCVD[512]='\0';			//Datos recibidos de UART
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2200      	movs	r2, #0
 80069f8:	f883 2898 	strb.w	r2, [r3, #2200]	; 0x898
a->_uartRCVD_tok[512]='\0';		//Datos recibidos de UART
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2200      	movs	r2, #0
 8006a00:	f883 2a98 	strb.w	r2, [r3, #2712]	; 0xa98
a->_uartCHrcvd=0;				//Cantidad de caracteres recibidos por la uart
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2200      	movs	r2, #0
 8006a08:	f8c3 2aa0 	str.w	r2, [r3, #2720]	; 0xaa0
a->_TCPchRCVD=0;				//Caracteres recibidos por TCP
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2200      	movs	r2, #0
 8006a10:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
a->_enviaruart=0;				//Envia _uart2snd por puerto serie
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2200      	movs	r2, #0
 8006a18:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
a->_pasos=0;					//Pasos por la maquina de estados no se puede manejar como variable local porque hay que almacenarlos cuando entra y sale de la llamada
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2200      	movs	r2, #0
 8006a20:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
a->_instruccion=0;				//Funcion que se desea realizar
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2200      	movs	r2, #0
 8006a28:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
a->_ejecucion=0;				//Funcion en ejecucion	
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2200      	movs	r2, #0
 8006a30:	f8c3 2ab4 	str.w	r2, [r3, #2740]	; 0xab4
a->_okenvio[64]='\0';			//String para enviao de datos, comparacion de enviado y recibido strings variables
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2200      	movs	r2, #0
 8006a38:	f883 2af8 	strb.w	r2, [r3, #2808]	; 0xaf8
a->_ticks=0;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2200      	movs	r2, #0
 8006a40:	f8c3 2cb8 	str.w	r2, [r3, #3256]	; 0xcb8
a->_ticks2=0;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2200      	movs	r2, #0
 8006a48:	f8c3 2cbc 	str.w	r2, [r3, #3260]	; 0xcbc
a->_debug=0;					//utilizada par fines de debugging
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2200      	movs	r2, #0
 8006a50:	f8c3 2cc8 	str.w	r2, [r3, #3272]	; 0xcc8
a->_debug_str=0;				//utilizada par fines de debugging
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2200      	movs	r2, #0
 8006a58:	f8c3 2ccc 	str.w	r2, [r3, #3276]	; 0xccc
a->_debug_pos=0;				//utilizada par fines de debugging
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2200      	movs	r2, #0
 8006a60:	f8c3 2cd0 	str.w	r2, [r3, #3280]	; 0xcd0
a->_debug_chrs=0;				//utilizada par fines de debugging
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2200      	movs	r2, #0
 8006a68:	f8c3 2cd4 	str.w	r2, [r3, #3284]	; 0xcd4
a->_debug_rx_ok=0;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2200      	movs	r2, #0
 8006a70:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
a->_debug_rx_no_ok=0;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2200      	movs	r2, #0
 8006a78:	f8c3 2ce0 	str.w	r2, [r3, #3296]	; 0xce0
a->_debug_SEND_OK=0;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2200      	movs	r2, #0
 8006a80:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
a->_debug_CLOSED=0;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2200      	movs	r2, #0
 8006a88:	f8c3 2d38 	str.w	r2, [r3, #3384]	; 0xd38
a->_debug_WF_DISCONNECT=0;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2200      	movs	r2, #0
 8006a90:	f8c3 2d3c 	str.w	r2, [r3, #3388]	; 0xd3c
a->_debug_FAIL=0;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2200      	movs	r2, #0
 8006a98:	f8c3 2d40 	str.w	r2, [r3, #3392]	; 0xd40
a->_debug_CONNECT=0;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	f8c3 2d34 	str.w	r2, [r3, #3380]	; 0xd34
a->_debug_count=0;				//Cuento la catidad de ipds	
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
a->_debug_count_old=0;			//Cuento la catidad de ipds
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2200      	movs	r2, #0
 8006ab0:	f8c3 2d08 	str.w	r2, [r3, #3336]	; 0xd08
a->_debug_count2=0;				//SEND OK para enviar datos
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c
a->_debug_count3=0;				//SEND OK recuperado de un IPD	
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2200      	movs	r2, #0
 8006ac0:	f8c3 2d10 	str.w	r2, [r3, #3344]	; 0xd10
a->_debug_count4=0;				//SEDN OK recibido directo
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
a->_debug_count5=0;				//Cuento la catidad de ipds	
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2200      	movs	r2, #0
 8006ad0:	f8c3 2d18 	str.w	r2, [r3, #3352]	; 0xd18
a->_debug_count6=0;				//Cuento la catidad de ipds	
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	f8c3 2d1c 	str.w	r2, [r3, #3356]	; 0xd1c
a->_debug_count7=0;				//Cuento la catidad de ipds
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2200      	movs	r2, #0
 8006ae0:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20
a->_debug_count8=0;				//Cuento la catidad de ipds
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	f8c3 2d24 	str.w	r2, [r3, #3364]	; 0xd24
a->_debug_count9=0;				//Cuento la catidad de ipds
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2200      	movs	r2, #0
 8006af0:	f8c3 2d28 	str.w	r2, [r3, #3368]	; 0xd28
a->_debug_count10=0;			//Cuento la catidad de ipds
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2200      	movs	r2, #0
 8006af8:	f8c3 2d2c 	str.w	r2, [r3, #3372]	; 0xd2c
a->_subpaso=0;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2200      	movs	r2, #0
 8006b00:	f8c3 2d50 	str.w	r2, [r3, #3408]	; 0xd50
a->_overflowVector=512;			//Maximo tamaño del vector al procesar un +IPD
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006b0a:	f8c3 2d54 	str.w	r2, [r3, #3412]	; 0xd54
}
 8006b0e:	bf00      	nop
 8006b10:	370c      	adds	r7, #12
 8006b12:	46bd      	mov	sp, r7
 8006b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b18:	4770      	bx	lr
	...

08006b1c <AT_ESP8266_ND>:

 // estado no cambia a->estado salvo que dicho estado sea algun valor esperado en la funcion
 //	la recepcion de datos no afecta la variable a->estado, pero puede afectar el registro recibido, en tal caso la funci�n de cae por timeout de rpta a->ticks=5eg
 /*--------------------------------------------------------------*/
int AT_ESP8266_ND( struct WIFI *a )
 {
 8006b1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b1e:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8006b22:	af06      	add	r7, sp, #24
 8006b24:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006b28:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006b2c:	6018      	str	r0, [r3, #0]
	 int l3=0, AT_decode=0, estado=0, str=0,chr_pos_fnc=0;
 8006b2e:	2300      	movs	r3, #0
 8006b30:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 8006b34:	2300      	movs	r3, #0
 8006b36:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 8006b40:	2300      	movs	r3, #0
 8006b42:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
 8006b46:	2300      	movs	r3, #0
 8006b48:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230
	 char *token;
	 char memstr=' ';
 8006b4c:	2320      	movs	r3, #32
 8006b4e:	f887 323f 	strb.w	r3, [r7, #575]	; 0x23f
		char comillas='"';
 8006b52:	2322      	movs	r3, #34	; 0x22
 8006b54:	f887 322f 	strb.w	r3, [r7, #559]	; 0x22f
		char separador[]={'"',',','"','\0'};
 8006b58:	4b7c      	ldr	r3, [pc, #496]	; (8006d4c <AT_ESP8266_ND+0x230>)
 8006b5a:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
		char finalizar[]={'"','\r','\n'};
 8006b5e:	4a7c      	ldr	r2, [pc, #496]	; (8006d50 <AT_ESP8266_ND+0x234>)
 8006b60:	f507 7309 	add.w	r3, r7, #548	; 0x224
 8006b64:	6812      	ldr	r2, [r2, #0]
 8006b66:	4611      	mov	r1, r2
 8006b68:	8019      	strh	r1, [r3, #0]
 8006b6a:	3302      	adds	r3, #2
 8006b6c:	0c12      	lsrs	r2, r2, #16
 8006b6e:	701a      	strb	r2, [r3, #0]
		char separador2[]={'"',','};
 8006b70:	f642 4322 	movw	r3, #11298	; 0x2c22
 8006b74:	f8a7 3220 	strh.w	r3, [r7, #544]	; 0x220
		char finalizar2[]={'\r','\n'};
 8006b78:	f640 230d 	movw	r3, #2573	; 0xa0d
 8006b7c:	f8a7 321c 	strh.w	r3, [r7, #540]	; 0x21c
		char vectorcopia[512];
	 //Agregar condicion de falla al conectar strcmp(a->_uartRCVD,"+CWJAP 1\r\n\r\nFAIL\r\n")
	 //a->_estado=0;
//--------BUSCO ERRRORES DE SOLPAMIENTO------------//
int pos=0, pos2=0;
 8006b80:	2300      	movs	r3, #0
 8006b82:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
 8006b86:	2300      	movs	r3, #0
 8006b88:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
a->_debug_pos=0;
 8006b8c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006b90:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	2200      	movs	r2, #0
 8006b98:	f8c3 2cd0 	str.w	r2, [r3, #3280]	; 0xcd0
a->_debug_str=strlen(a->_uartRCVD);//str=strlen(a->_uartRCVD)-1;
 8006b9c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006ba0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f503 63d3 	add.w	r3, r3, #1688	; 0x698
 8006baa:	4618      	mov	r0, r3
 8006bac:	f7f9 fb22 	bl	80001f4 <strlen>
 8006bb0:	4603      	mov	r3, r0
 8006bb2:	461a      	mov	r2, r3
 8006bb4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006bb8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f8c3 2ccc 	str.w	r2, [r3, #3276]	; 0xccc
a->_estado_data=0; //Al entrar, nunca se como se recibió la info
 8006bc2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006bc6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	2200      	movs	r2, #0
 8006bce:	f8c3 2cfc 	str.w	r2, [r3, #3324]	; 0xcfc

	 a->_uartCHrcvd=strlen(a->_uartRCVD);
 8006bd2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006bd6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f503 63d3 	add.w	r3, r3, #1688	; 0x698
 8006be0:	4618      	mov	r0, r3
 8006be2:	f7f9 fb07 	bl	80001f4 <strlen>
 8006be6:	4603      	mov	r3, r0
 8006be8:	461a      	mov	r2, r3
 8006bea:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006bee:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f8c3 2aa0 	str.w	r2, [r3, #2720]	; 0xaa0
//------------------PREGUNTO RECEPCION DE DATOS------------------//
//***************************************************************//

	 // Si tiene datos recibidos los +IPD proceso y dejo el vector original

	 a->_n_fcomp=strlen("\r\n+IPD");
 8006bf8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006bfc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	2206      	movs	r2, #6
 8006c04:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
	 if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\n+IPD",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8006c08:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c0c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 8006c16:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c1a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 8006c24:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c28:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 8006c32:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c36:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f603 0398 	addw	r3, r3, #2200	; 0x898
 8006c40:	603b      	str	r3, [r7, #0]
 8006c42:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006c46:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006c4a:	6812      	ldr	r2, [r2, #0]
 8006c4c:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 8006c50:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006c54:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006c58:	6809      	ldr	r1, [r1, #0]
 8006c5a:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 8006c5e:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8006c62:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8006c66:	6800      	ldr	r0, [r0, #0]
 8006c68:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	9305      	str	r3, [sp, #20]
 8006c70:	9004      	str	r0, [sp, #16]
 8006c72:	9103      	str	r1, [sp, #12]
 8006c74:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006c78:	9102      	str	r1, [sp, #8]
 8006c7a:	9201      	str	r2, [sp, #4]
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	9300      	str	r3, [sp, #0]
 8006c80:	4633      	mov	r3, r6
 8006c82:	4a34      	ldr	r2, [pc, #208]	; (8006d54 <AT_ESP8266_ND+0x238>)
 8006c84:	4629      	mov	r1, r5
 8006c86:	4620      	mov	r0, r4
 8006c88:	f007 ff62 	bl	800eb50 <FT_String_ND>
 8006c8c:	4603      	mov	r3, r0
 8006c8e:	2b01      	cmp	r3, #1
 8006c90:	f040 8140 	bne.w	8006f14 <AT_ESP8266_ND+0x3f8>
		 {
			a->_n_fcomp=strlen("\r\n+IPD");
 8006c94:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c98:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	2206      	movs	r2, #6
 8006ca0:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
			if(a->_TCP_Local_Server_EN==0)
 8006ca4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006ca8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d150      	bne.n	8006d58 <AT_ESP8266_ND+0x23c>
				{
					a->_estado_data=FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\n+IPD",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,TOKIPDDATA);
 8006cb6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006cba:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 8006cc4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006cc8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 8006cd2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006cd6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 8006ce0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006ce4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f603 0398 	addw	r3, r3, #2200	; 0x898
 8006cee:	603b      	str	r3, [r7, #0]
 8006cf0:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006cf4:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006cf8:	6812      	ldr	r2, [r2, #0]
 8006cfa:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 8006cfe:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006d02:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006d06:	6809      	ldr	r1, [r1, #0]
 8006d08:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 8006d0c:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8006d10:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8006d14:	6800      	ldr	r0, [r0, #0]
 8006d16:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 8006d1a:	2304      	movs	r3, #4
 8006d1c:	9305      	str	r3, [sp, #20]
 8006d1e:	9004      	str	r0, [sp, #16]
 8006d20:	9103      	str	r1, [sp, #12]
 8006d22:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006d26:	9102      	str	r1, [sp, #8]
 8006d28:	9201      	str	r2, [sp, #4]
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	9300      	str	r3, [sp, #0]
 8006d2e:	4633      	mov	r3, r6
 8006d30:	4a08      	ldr	r2, [pc, #32]	; (8006d54 <AT_ESP8266_ND+0x238>)
 8006d32:	4629      	mov	r1, r5
 8006d34:	4620      	mov	r0, r4
 8006d36:	f007 ff0b 	bl	800eb50 <FT_String_ND>
 8006d3a:	4602      	mov	r2, r0
 8006d3c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006d40:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f8c3 2cfc 	str.w	r2, [r3, #3324]	; 0xcfc
 8006d4a:	e04f      	b.n	8006dec <AT_ESP8266_ND+0x2d0>
 8006d4c:	00222c22 	.word	0x00222c22
 8006d50:	08010d34 	.word	0x08010d34
 8006d54:	08010b48 	.word	0x08010b48
				}
				else
				{
					a->_estado_data=FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\n+IPD",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,TOKIPDDATASRVR);
 8006d58:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006d5c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 8006d66:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006d6a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 8006d74:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006d78:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 8006d82:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006d86:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f603 0398 	addw	r3, r3, #2200	; 0x898
 8006d90:	603b      	str	r3, [r7, #0]
 8006d92:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006d96:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006d9a:	6812      	ldr	r2, [r2, #0]
 8006d9c:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 8006da0:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006da4:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006da8:	6809      	ldr	r1, [r1, #0]
 8006daa:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 8006dae:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8006db2:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8006db6:	6800      	ldr	r0, [r0, #0]
 8006db8:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 8006dbc:	2305      	movs	r3, #5
 8006dbe:	9305      	str	r3, [sp, #20]
 8006dc0:	9004      	str	r0, [sp, #16]
 8006dc2:	9103      	str	r1, [sp, #12]
 8006dc4:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006dc8:	9102      	str	r1, [sp, #8]
 8006dca:	9201      	str	r2, [sp, #4]
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	9300      	str	r3, [sp, #0]
 8006dd0:	4633      	mov	r3, r6
 8006dd2:	4ad2      	ldr	r2, [pc, #840]	; (800711c <AT_ESP8266_ND+0x600>)
 8006dd4:	4629      	mov	r1, r5
 8006dd6:	4620      	mov	r0, r4
 8006dd8:	f007 feba 	bl	800eb50 <FT_String_ND>
 8006ddc:	4602      	mov	r2, r0
 8006dde:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006de2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f8c3 2cfc 	str.w	r2, [r3, #3324]	; 0xcfc
				}

			if(a->_estado_data==4)
 8006dec:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006df0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f8d3 3cfc 	ldr.w	r3, [r3, #3324]	; 0xcfc
 8006dfa:	2b04      	cmp	r3, #4
 8006dfc:	d15a      	bne.n	8006eb4 <AT_ESP8266_ND+0x398>
				{
					a->_estado_rcv_data=99;
 8006dfe:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006e02:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	2263      	movs	r2, #99	; 0x63
 8006e0a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
					a->_n_dataRCV=a->_n_tok;
 8006e0e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006e12:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f8d3 2cec 	ldr.w	r2, [r3, #3308]	; 0xcec
 8006e1c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006e20:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00
					CopiaVector(a->_dataRCV,a->_uartRCVD_tok,a->_n_tok,0,'A');  //Solo copio la info si es correcta
 8006e2a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006e2e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f103 0098 	add.w	r0, r3, #152	; 0x98
 8006e38:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006e3c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f603 0198 	addw	r1, r3, #2200	; 0x898
 8006e46:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006e4a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f8d3 2cec 	ldr.w	r2, [r3, #3308]	; 0xcec
 8006e54:	2341      	movs	r3, #65	; 0x41
 8006e56:	9300      	str	r3, [sp, #0]
 8006e58:	2300      	movs	r3, #0
 8006e5a:	f008 f9f5 	bl	800f248 <CopiaVector>
					CopiaVector(a->_data2SND,a->_uartRCVD_tok,5,0,'A');  //Solo copio la info si es correcta
 8006e5e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006e62:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	f503 7026 	add.w	r0, r3, #664	; 0x298
 8006e6c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006e70:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	f603 0198 	addw	r1, r3, #2200	; 0x898
 8006e7a:	2341      	movs	r3, #65	; 0x41
 8006e7c:	9300      	str	r3, [sp, #0]
 8006e7e:	2300      	movs	r3, #0
 8006e80:	2205      	movs	r2, #5
 8006e82:	f008 f9e1 	bl	800f248 <CopiaVector>

					a->_debug_rx_ok++;
 8006e86:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006e8a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	f8d3 3cd8 	ldr.w	r3, [r3, #3288]	; 0xcd8
 8006e94:	1c5a      	adds	r2, r3, #1
 8006e96:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006e9a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
					a->_new_data_rcv=1;
 8006ea4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006ea8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	2201      	movs	r2, #1
 8006eb0:	f8c3 2cdc 	str.w	r2, [r3, #3292]	; 0xcdc
				}
			if(a->_estado_data==5)
 8006eb4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006eb8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	f8d3 3cfc 	ldr.w	r3, [r3, #3324]	; 0xcfc
 8006ec2:	2b05      	cmp	r3, #5
 8006ec4:	d126      	bne.n	8006f14 <AT_ESP8266_ND+0x3f8>
				{
					a->_estado_rcv_data=55;
 8006ec6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006eca:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	2237      	movs	r2, #55	; 0x37
 8006ed2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
					a->_n_dataRCV=0;
 8006ed6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006eda:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00
					a->_debug_rx_no_ok++;
 8006ee6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006eea:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f8d3 3ce0 	ldr.w	r3, [r3, #3296]	; 0xce0
 8006ef4:	1c5a      	adds	r2, r3, #1
 8006ef6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006efa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	f8c3 2ce0 	str.w	r2, [r3, #3296]	; 0xce0
					a->_new_data_rcv=1;
 8006f04:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006f08:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	2201      	movs	r2, #1
 8006f10:	f8c3 2cdc 	str.w	r2, [r3, #3292]	; 0xcdc
		 }

	 //--------------------------------------------------------------------------------------------------------------//
	 // 	Arranco preguntando por la sentencia OK, y luego busco otros string dentro de lo recibido     			 //
	 //--------------------------------------------------------------------------------------------------------------//
	 a->_n_fcomp=strlen("OK\r\n");
 8006f14:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006f18:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	2204      	movs	r2, #4
 8006f20:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
	if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"OK\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8006f24:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006f28:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 8006f32:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006f36:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 8006f40:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006f44:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 8006f4e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006f52:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f603 0398 	addw	r3, r3, #2200	; 0x898
 8006f5c:	603b      	str	r3, [r7, #0]
 8006f5e:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006f62:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006f66:	6812      	ldr	r2, [r2, #0]
 8006f68:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 8006f6c:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006f70:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006f74:	6809      	ldr	r1, [r1, #0]
 8006f76:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 8006f7a:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8006f7e:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8006f82:	6800      	ldr	r0, [r0, #0]
 8006f84:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 8006f88:	2300      	movs	r3, #0
 8006f8a:	9305      	str	r3, [sp, #20]
 8006f8c:	9004      	str	r0, [sp, #16]
 8006f8e:	9103      	str	r1, [sp, #12]
 8006f90:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006f94:	9102      	str	r1, [sp, #8]
 8006f96:	9201      	str	r2, [sp, #4]
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	9300      	str	r3, [sp, #0]
 8006f9c:	4633      	mov	r3, r6
 8006f9e:	4a60      	ldr	r2, [pc, #384]	; (8007120 <AT_ESP8266_ND+0x604>)
 8006fa0:	4629      	mov	r1, r5
 8006fa2:	4620      	mov	r0, r4
 8006fa4:	f007 fdd4 	bl	800eb50 <FT_String_ND>
 8006fa8:	4603      	mov	r3, r0
 8006faa:	2b01      	cmp	r3, #1
 8006fac:	f040 83ab 	bne.w	8007706 <AT_ESP8266_ND+0xbea>
	{
		AT_decode=at_ok;
 8006fb0:	2301      	movs	r3, #1
 8006fb2:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
		//------------------CONFIRMO ENVIO DE INFO OK ------------------//
		a->_n_fcomp=strlen("\r\nSEND OK\r\n");
 8006fb6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006fba:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	220b      	movs	r2, #11
 8006fc2:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
		 if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\nSEND OK\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//Transmision ok
 8006fc6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006fca:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 8006fd4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006fd8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 8006fe2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006fe6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 8006ff0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006ff4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f603 0398 	addw	r3, r3, #2200	; 0x898
 8006ffe:	603b      	str	r3, [r7, #0]
 8007000:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007004:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007008:	6812      	ldr	r2, [r2, #0]
 800700a:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 800700e:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007012:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007016:	6809      	ldr	r1, [r1, #0]
 8007018:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 800701c:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007020:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007024:	6800      	ldr	r0, [r0, #0]
 8007026:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 800702a:	2300      	movs	r3, #0
 800702c:	9305      	str	r3, [sp, #20]
 800702e:	9004      	str	r0, [sp, #16]
 8007030:	9103      	str	r1, [sp, #12]
 8007032:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007036:	9102      	str	r1, [sp, #8]
 8007038:	9201      	str	r2, [sp, #4]
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	9300      	str	r3, [sp, #0]
 800703e:	4633      	mov	r3, r6
 8007040:	4a38      	ldr	r2, [pc, #224]	; (8007124 <AT_ESP8266_ND+0x608>)
 8007042:	4629      	mov	r1, r5
 8007044:	4620      	mov	r0, r4
 8007046:	f007 fd83 	bl	800eb50 <FT_String_ND>
 800704a:	4603      	mov	r3, r0
 800704c:	2b01      	cmp	r3, #1
 800704e:	d113      	bne.n	8007078 <AT_ESP8266_ND+0x55c>
			 {
			 AT_decode=at_tcp_enviado_ok;
 8007050:	2313      	movs	r3, #19
 8007052:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
			 a->_debug_SEND_OK++;
 8007056:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800705a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8007064:	1c5a      	adds	r2, r3, #1
 8007066:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800706a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
 8007074:	f001 badf 	b.w	8008636 <AT_ESP8266_ND+0x1b1a>
			 }
		 else
		 {
			//------------------CONFIRMO CIERRE DE  CONEXION------------------//
			a->_n_fcomp=strlen("AT+CWQAP");
 8007078:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800707c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	2208      	movs	r2, #8
 8007084:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CWQAP",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8007088:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800708c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 8007096:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800709a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 80070a4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80070a8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 80070b2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80070b6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f603 0398 	addw	r3, r3, #2200	; 0x898
 80070c0:	603b      	str	r3, [r7, #0]
 80070c2:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80070c6:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80070ca:	6812      	ldr	r2, [r2, #0]
 80070cc:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 80070d0:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80070d4:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80070d8:	6809      	ldr	r1, [r1, #0]
 80070da:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 80070de:	f507 7014 	add.w	r0, r7, #592	; 0x250
 80070e2:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 80070e6:	6800      	ldr	r0, [r0, #0]
 80070e8:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 80070ec:	2300      	movs	r3, #0
 80070ee:	9305      	str	r3, [sp, #20]
 80070f0:	9004      	str	r0, [sp, #16]
 80070f2:	9103      	str	r1, [sp, #12]
 80070f4:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80070f8:	9102      	str	r1, [sp, #8]
 80070fa:	9201      	str	r2, [sp, #4]
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	9300      	str	r3, [sp, #0]
 8007100:	4633      	mov	r3, r6
 8007102:	4a09      	ldr	r2, [pc, #36]	; (8007128 <AT_ESP8266_ND+0x60c>)
 8007104:	4629      	mov	r1, r5
 8007106:	4620      	mov	r0, r4
 8007108:	f007 fd22 	bl	800eb50 <FT_String_ND>
 800710c:	4603      	mov	r3, r0
 800710e:	2b01      	cmp	r3, #1
 8007110:	d10c      	bne.n	800712c <AT_ESP8266_ND+0x610>
				{
				AT_decode=at_deconectar_ok;
 8007112:	230d      	movs	r3, #13
 8007114:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007118:	f001 ba8d 	b.w	8008636 <AT_ESP8266_ND+0x1b1a>
 800711c:	08010b48 	.word	0x08010b48
 8007120:	08010b50 	.word	0x08010b50
 8007124:	08010b58 	.word	0x08010b58
 8007128:	08010b64 	.word	0x08010b64
				}
			else
			{
				//------------------CAMBIAR MODO DE FUNCIONAMIENTO------------------//
				a->_n_fcomp=strlen("AT+CWMODE=");
 800712c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007130:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	220a      	movs	r2, #10
 8007138:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CWMODE=",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//Error desconectar TCP ya desconectado
 800713c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007140:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 800714a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800714e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 8007158:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800715c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 8007166:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800716a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	f603 0398 	addw	r3, r3, #2200	; 0x898
 8007174:	603b      	str	r3, [r7, #0]
 8007176:	f507 7214 	add.w	r2, r7, #592	; 0x250
 800717a:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 800717e:	6812      	ldr	r2, [r2, #0]
 8007180:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 8007184:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007188:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 800718c:	6809      	ldr	r1, [r1, #0]
 800718e:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 8007192:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007196:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 800719a:	6800      	ldr	r0, [r0, #0]
 800719c:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 80071a0:	2300      	movs	r3, #0
 80071a2:	9305      	str	r3, [sp, #20]
 80071a4:	9004      	str	r0, [sp, #16]
 80071a6:	9103      	str	r1, [sp, #12]
 80071a8:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80071ac:	9102      	str	r1, [sp, #8]
 80071ae:	9201      	str	r2, [sp, #4]
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	9300      	str	r3, [sp, #0]
 80071b4:	4633      	mov	r3, r6
 80071b6:	4aaa      	ldr	r2, [pc, #680]	; (8007460 <AT_ESP8266_ND+0x944>)
 80071b8:	4629      	mov	r1, r5
 80071ba:	4620      	mov	r0, r4
 80071bc:	f007 fcc8 	bl	800eb50 <FT_String_ND>
 80071c0:	4603      	mov	r3, r0
 80071c2:	2b01      	cmp	r3, #1
 80071c4:	d104      	bne.n	80071d0 <AT_ESP8266_ND+0x6b4>
					{
						AT_decode=at_cambiar_modo_ok;
 80071c6:	231c      	movs	r3, #28
 80071c8:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80071cc:	f001 ba33 	b.w	8008636 <AT_ESP8266_ND+0x1b1a>
					}
				else
				{
					//------------------INTENTO DE CREACION SEVER YA CREADO ------------------//
					a->_n_fcomp=strlen("no change\r\nOK\r\n");
 80071d0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80071d4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	220f      	movs	r2, #15
 80071dc:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
						if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"no change\r\nOK\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 80071e0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80071e4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 80071ee:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80071f2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 80071fc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007200:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 800720a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800720e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f603 0398 	addw	r3, r3, #2200	; 0x898
 8007218:	603b      	str	r3, [r7, #0]
 800721a:	f507 7214 	add.w	r2, r7, #592	; 0x250
 800721e:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007222:	6812      	ldr	r2, [r2, #0]
 8007224:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 8007228:	f507 7114 	add.w	r1, r7, #592	; 0x250
 800722c:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007230:	6809      	ldr	r1, [r1, #0]
 8007232:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 8007236:	f507 7014 	add.w	r0, r7, #592	; 0x250
 800723a:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 800723e:	6800      	ldr	r0, [r0, #0]
 8007240:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 8007244:	2300      	movs	r3, #0
 8007246:	9305      	str	r3, [sp, #20]
 8007248:	9004      	str	r0, [sp, #16]
 800724a:	9103      	str	r1, [sp, #12]
 800724c:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007250:	9102      	str	r1, [sp, #8]
 8007252:	9201      	str	r2, [sp, #4]
 8007254:	683b      	ldr	r3, [r7, #0]
 8007256:	9300      	str	r3, [sp, #0]
 8007258:	4633      	mov	r3, r6
 800725a:	4a82      	ldr	r2, [pc, #520]	; (8007464 <AT_ESP8266_ND+0x948>)
 800725c:	4629      	mov	r1, r5
 800725e:	4620      	mov	r0, r4
 8007260:	f007 fc76 	bl	800eb50 <FT_String_ND>
 8007264:	4603      	mov	r3, r0
 8007266:	2b01      	cmp	r3, #1
 8007268:	d104      	bne.n	8007274 <AT_ESP8266_ND+0x758>
						{
							AT_decode=at_tcp_srvr_ok_noch;
 800726a:	2317      	movs	r3, #23
 800726c:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007270:	f001 b9e1 	b.w	8008636 <AT_ESP8266_ND+0x1b1a>
						}
					else
					{
						//------------------OK PARA ENVIAR------------------//
						a->_n_fcomp=strlen("\r\n>");
 8007274:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007278:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	2203      	movs	r2, #3
 8007280:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
						if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\n>",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//Conectado desde el modulo
 8007284:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007288:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 8007292:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007296:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 80072a0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80072a4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 80072ae:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80072b2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	f603 0398 	addw	r3, r3, #2200	; 0x898
 80072bc:	603b      	str	r3, [r7, #0]
 80072be:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80072c2:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80072c6:	6812      	ldr	r2, [r2, #0]
 80072c8:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 80072cc:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80072d0:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80072d4:	6809      	ldr	r1, [r1, #0]
 80072d6:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 80072da:	f507 7014 	add.w	r0, r7, #592	; 0x250
 80072de:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 80072e2:	6800      	ldr	r0, [r0, #0]
 80072e4:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 80072e8:	2300      	movs	r3, #0
 80072ea:	9305      	str	r3, [sp, #20]
 80072ec:	9004      	str	r0, [sp, #16]
 80072ee:	9103      	str	r1, [sp, #12]
 80072f0:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80072f4:	9102      	str	r1, [sp, #8]
 80072f6:	9201      	str	r2, [sp, #4]
 80072f8:	683b      	ldr	r3, [r7, #0]
 80072fa:	9300      	str	r3, [sp, #0]
 80072fc:	4633      	mov	r3, r6
 80072fe:	4a5a      	ldr	r2, [pc, #360]	; (8007468 <AT_ESP8266_ND+0x94c>)
 8007300:	4629      	mov	r1, r5
 8007302:	4620      	mov	r0, r4
 8007304:	f007 fc24 	bl	800eb50 <FT_String_ND>
 8007308:	4603      	mov	r3, r0
 800730a:	2b01      	cmp	r3, #1
 800730c:	d104      	bne.n	8007318 <AT_ESP8266_ND+0x7fc>
							{
								AT_decode=at_tcp_ok_to_send;
 800730e:	2314      	movs	r3, #20
 8007310:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007314:	f001 b98f 	b.w	8008636 <AT_ESP8266_ND+0x1b1a>
							}
						else
						{
							//------------------OK SERVIDOR------------------//
							a->_n_fcomp=strlen("AT+CIPSERVER");
 8007318:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800731c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	220c      	movs	r2, #12
 8007324:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
							if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPSERVER",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8007328:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800732c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 8007336:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800733a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 8007344:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007348:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 8007352:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007356:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	f603 0398 	addw	r3, r3, #2200	; 0x898
 8007360:	603b      	str	r3, [r7, #0]
 8007362:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007366:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 800736a:	6812      	ldr	r2, [r2, #0]
 800736c:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 8007370:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007374:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007378:	6809      	ldr	r1, [r1, #0]
 800737a:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 800737e:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007382:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007386:	6800      	ldr	r0, [r0, #0]
 8007388:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 800738c:	2300      	movs	r3, #0
 800738e:	9305      	str	r3, [sp, #20]
 8007390:	9004      	str	r0, [sp, #16]
 8007392:	9103      	str	r1, [sp, #12]
 8007394:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007398:	9102      	str	r1, [sp, #8]
 800739a:	9201      	str	r2, [sp, #4]
 800739c:	683b      	ldr	r3, [r7, #0]
 800739e:	9300      	str	r3, [sp, #0]
 80073a0:	4633      	mov	r3, r6
 80073a2:	4a32      	ldr	r2, [pc, #200]	; (800746c <AT_ESP8266_ND+0x950>)
 80073a4:	4629      	mov	r1, r5
 80073a6:	4620      	mov	r0, r4
 80073a8:	f007 fbd2 	bl	800eb50 <FT_String_ND>
 80073ac:	4603      	mov	r3, r0
 80073ae:	2b01      	cmp	r3, #1
 80073b0:	d104      	bne.n	80073bc <AT_ESP8266_ND+0x8a0>
							{
								AT_decode=at_tcp_srvr_ok;
 80073b2:	2315      	movs	r3, #21
 80073b4:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80073b8:	f001 b93d 	b.w	8008636 <AT_ESP8266_ND+0x1b1a>
							}
							else
							{
								//------------------DESCONECTAR TCP CUANDOYA EST� DESCONECTADO------------------//
								a->_n_fcomp=strlen("AT+CIPCLOSE");
 80073bc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80073c0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	220b      	movs	r2, #11
 80073c8:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
								if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPCLOSE",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 80073cc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80073d0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 80073da:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80073de:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 80073e8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80073ec:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 80073f6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80073fa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	f603 0398 	addw	r3, r3, #2200	; 0x898
 8007404:	603b      	str	r3, [r7, #0]
 8007406:	f507 7214 	add.w	r2, r7, #592	; 0x250
 800740a:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 800740e:	6812      	ldr	r2, [r2, #0]
 8007410:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 8007414:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007418:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 800741c:	6809      	ldr	r1, [r1, #0]
 800741e:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 8007422:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007426:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 800742a:	6800      	ldr	r0, [r0, #0]
 800742c:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 8007430:	2300      	movs	r3, #0
 8007432:	9305      	str	r3, [sp, #20]
 8007434:	9004      	str	r0, [sp, #16]
 8007436:	9103      	str	r1, [sp, #12]
 8007438:	f507 710c 	add.w	r1, r7, #560	; 0x230
 800743c:	9102      	str	r1, [sp, #8]
 800743e:	9201      	str	r2, [sp, #4]
 8007440:	683b      	ldr	r3, [r7, #0]
 8007442:	9300      	str	r3, [sp, #0]
 8007444:	4633      	mov	r3, r6
 8007446:	4a0a      	ldr	r2, [pc, #40]	; (8007470 <AT_ESP8266_ND+0x954>)
 8007448:	4629      	mov	r1, r5
 800744a:	4620      	mov	r0, r4
 800744c:	f007 fb80 	bl	800eb50 <FT_String_ND>
 8007450:	4603      	mov	r3, r0
 8007452:	2b01      	cmp	r3, #1
 8007454:	d10e      	bne.n	8007474 <AT_ESP8266_ND+0x958>
									{
										AT_decode=at_tcp_closed_ok;
 8007456:	2309      	movs	r3, #9
 8007458:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 800745c:	f001 b8eb 	b.w	8008636 <AT_ESP8266_ND+0x1b1a>
 8007460:	08010b70 	.word	0x08010b70
 8007464:	08010b7c 	.word	0x08010b7c
 8007468:	08010b8c 	.word	0x08010b8c
 800746c:	08010b90 	.word	0x08010b90
 8007470:	08010ba0 	.word	0x08010ba0
									}
								else
								{
									//------------------DEFIIR MULTIPLES CONEXIONES OK------------------//
									a->_n_fcomp=strlen("AT+CIPMUX=1");
 8007474:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007478:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	220b      	movs	r2, #11
 8007480:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
									if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPMUX=1",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8007484:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007488:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 8007492:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007496:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 80074a0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80074a4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 80074ae:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80074b2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	f603 0398 	addw	r3, r3, #2200	; 0x898
 80074bc:	603b      	str	r3, [r7, #0]
 80074be:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80074c2:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80074c6:	6812      	ldr	r2, [r2, #0]
 80074c8:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 80074cc:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80074d0:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80074d4:	6809      	ldr	r1, [r1, #0]
 80074d6:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 80074da:	f507 7014 	add.w	r0, r7, #592	; 0x250
 80074de:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 80074e2:	6800      	ldr	r0, [r0, #0]
 80074e4:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 80074e8:	2300      	movs	r3, #0
 80074ea:	9305      	str	r3, [sp, #20]
 80074ec:	9004      	str	r0, [sp, #16]
 80074ee:	9103      	str	r1, [sp, #12]
 80074f0:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80074f4:	9102      	str	r1, [sp, #8]
 80074f6:	9201      	str	r2, [sp, #4]
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	9300      	str	r3, [sp, #0]
 80074fc:	4633      	mov	r3, r6
 80074fe:	4aaf      	ldr	r2, [pc, #700]	; (80077bc <AT_ESP8266_ND+0xca0>)
 8007500:	4629      	mov	r1, r5
 8007502:	4620      	mov	r0, r4
 8007504:	f007 fb24 	bl	800eb50 <FT_String_ND>
 8007508:	4603      	mov	r3, r0
 800750a:	2b01      	cmp	r3, #1
 800750c:	d104      	bne.n	8007518 <AT_ESP8266_ND+0x9fc>
										{
											AT_decode=at_multiple_conn_ok;
 800750e:	2307      	movs	r3, #7
 8007510:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007514:	f001 b88f 	b.w	8008636 <AT_ESP8266_ND+0x1b1a>
										}
									else
									{
										//------------------DEFIIR NO MULTIPLES CONEXIONES OK------------------//
										a->_n_fcomp=strlen("AT+CIPMUX=0");
 8007518:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800751c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	220b      	movs	r2, #11
 8007524:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
										if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPMUX=0",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8007528:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800752c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 8007536:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800753a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 8007544:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007548:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 8007552:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007556:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	f603 0398 	addw	r3, r3, #2200	; 0x898
 8007560:	603b      	str	r3, [r7, #0]
 8007562:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007566:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 800756a:	6812      	ldr	r2, [r2, #0]
 800756c:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 8007570:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007574:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007578:	6809      	ldr	r1, [r1, #0]
 800757a:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 800757e:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007582:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007586:	6800      	ldr	r0, [r0, #0]
 8007588:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 800758c:	2300      	movs	r3, #0
 800758e:	9305      	str	r3, [sp, #20]
 8007590:	9004      	str	r0, [sp, #16]
 8007592:	9103      	str	r1, [sp, #12]
 8007594:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007598:	9102      	str	r1, [sp, #8]
 800759a:	9201      	str	r2, [sp, #4]
 800759c:	683b      	ldr	r3, [r7, #0]
 800759e:	9300      	str	r3, [sp, #0]
 80075a0:	4633      	mov	r3, r6
 80075a2:	4a87      	ldr	r2, [pc, #540]	; (80077c0 <AT_ESP8266_ND+0xca4>)
 80075a4:	4629      	mov	r1, r5
 80075a6:	4620      	mov	r0, r4
 80075a8:	f007 fad2 	bl	800eb50 <FT_String_ND>
 80075ac:	4603      	mov	r3, r0
 80075ae:	2b01      	cmp	r3, #1
 80075b0:	d104      	bne.n	80075bc <AT_ESP8266_ND+0xaa0>
											{
												AT_decode=at_no_multiple_conn_ok;
 80075b2:	2308      	movs	r3, #8
 80075b4:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80075b8:	f001 b83d 	b.w	8008636 <AT_ESP8266_ND+0x1b1a>
											}
										else
										{
											//------------------DEFIIR IP OK------------------//
											a->_n_fcomp=strlen("AT+CIPSTA=");
 80075bc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80075c0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	220a      	movs	r2, #10
 80075c8:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
											if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPSTA=",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 80075cc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80075d0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 80075da:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80075de:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 80075e8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80075ec:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 80075f6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80075fa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	f603 0398 	addw	r3, r3, #2200	; 0x898
 8007604:	603b      	str	r3, [r7, #0]
 8007606:	f507 7214 	add.w	r2, r7, #592	; 0x250
 800760a:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 800760e:	6812      	ldr	r2, [r2, #0]
 8007610:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 8007614:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007618:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 800761c:	6809      	ldr	r1, [r1, #0]
 800761e:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 8007622:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007626:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 800762a:	6800      	ldr	r0, [r0, #0]
 800762c:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 8007630:	2300      	movs	r3, #0
 8007632:	9305      	str	r3, [sp, #20]
 8007634:	9004      	str	r0, [sp, #16]
 8007636:	9103      	str	r1, [sp, #12]
 8007638:	f507 710c 	add.w	r1, r7, #560	; 0x230
 800763c:	9102      	str	r1, [sp, #8]
 800763e:	9201      	str	r2, [sp, #4]
 8007640:	683b      	ldr	r3, [r7, #0]
 8007642:	9300      	str	r3, [sp, #0]
 8007644:	4633      	mov	r3, r6
 8007646:	4a5f      	ldr	r2, [pc, #380]	; (80077c4 <AT_ESP8266_ND+0xca8>)
 8007648:	4629      	mov	r1, r5
 800764a:	4620      	mov	r0, r4
 800764c:	f007 fa80 	bl	800eb50 <FT_String_ND>
 8007650:	4603      	mov	r3, r0
 8007652:	2b01      	cmp	r3, #1
 8007654:	d104      	bne.n	8007660 <AT_ESP8266_ND+0xb44>
												{
													AT_decode=at_def_ip_ok;
 8007656:	231b      	movs	r3, #27
 8007658:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 800765c:	f000 bfeb 	b.w	8008636 <AT_ESP8266_ND+0x1b1a>
												}
											else
											{
										//------------------TCP CONECTADO------------------//
										a->_n_fcomp=strlen("CONNECT");
 8007660:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007664:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	2207      	movs	r2, #7
 800766c:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
										if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"CONNECT",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//Conectado desde el modulo
 8007670:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007674:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 800767e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007682:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 800768c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007690:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 800769a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800769e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	f603 0398 	addw	r3, r3, #2200	; 0x898
 80076a8:	603b      	str	r3, [r7, #0]
 80076aa:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80076ae:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80076b2:	6812      	ldr	r2, [r2, #0]
 80076b4:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 80076b8:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80076bc:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80076c0:	6809      	ldr	r1, [r1, #0]
 80076c2:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 80076c6:	f507 7014 	add.w	r0, r7, #592	; 0x250
 80076ca:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 80076ce:	6800      	ldr	r0, [r0, #0]
 80076d0:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 80076d4:	2300      	movs	r3, #0
 80076d6:	9305      	str	r3, [sp, #20]
 80076d8:	9004      	str	r0, [sp, #16]
 80076da:	9103      	str	r1, [sp, #12]
 80076dc:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80076e0:	9102      	str	r1, [sp, #8]
 80076e2:	9201      	str	r2, [sp, #4]
 80076e4:	683b      	ldr	r3, [r7, #0]
 80076e6:	9300      	str	r3, [sp, #0]
 80076e8:	4633      	mov	r3, r6
 80076ea:	4a37      	ldr	r2, [pc, #220]	; (80077c8 <AT_ESP8266_ND+0xcac>)
 80076ec:	4629      	mov	r1, r5
 80076ee:	4620      	mov	r0, r4
 80076f0:	f007 fa2e 	bl	800eb50 <FT_String_ND>
 80076f4:	4603      	mov	r3, r0
 80076f6:	2b01      	cmp	r3, #1
 80076f8:	f040 879d 	bne.w	8008636 <AT_ESP8266_ND+0x1b1a>
											{
											AT_decode=at_tcp_conectado;
 80076fc:	230f      	movs	r3, #15
 80076fe:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007702:	f000 bf98 	b.w	8008636 <AT_ESP8266_ND+0x1b1a>
	else
	{
	//--------------------------------------------------------------------------------------------------------------//
	// 	Continuo preguntando por la sentencia ERROR, y luego busco otros string dentro de lo recibido     			 //
	//--------------------------------------------------------------------------------------------------------------//
		 a->_n_fcomp=strlen("ERROR\r\nCLOSED\r\n");
 8007706:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800770a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	220f      	movs	r2, #15
 8007712:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"ERROR\r\nCLOSED\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8007716:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800771a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 8007724:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007728:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 8007732:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007736:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 8007740:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007744:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	f603 0398 	addw	r3, r3, #2200	; 0x898
 800774e:	603b      	str	r3, [r7, #0]
 8007750:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007754:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007758:	6812      	ldr	r2, [r2, #0]
 800775a:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 800775e:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007762:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007766:	6809      	ldr	r1, [r1, #0]
 8007768:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 800776c:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007770:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007774:	6800      	ldr	r0, [r0, #0]
 8007776:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 800777a:	2300      	movs	r3, #0
 800777c:	9305      	str	r3, [sp, #20]
 800777e:	9004      	str	r0, [sp, #16]
 8007780:	9103      	str	r1, [sp, #12]
 8007782:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007786:	9102      	str	r1, [sp, #8]
 8007788:	9201      	str	r2, [sp, #4]
 800778a:	683b      	ldr	r3, [r7, #0]
 800778c:	9300      	str	r3, [sp, #0]
 800778e:	4633      	mov	r3, r6
 8007790:	4a0e      	ldr	r2, [pc, #56]	; (80077cc <AT_ESP8266_ND+0xcb0>)
 8007792:	4629      	mov	r1, r5
 8007794:	4620      	mov	r0, r4
 8007796:	f007 f9db 	bl	800eb50 <FT_String_ND>
 800779a:	4603      	mov	r3, r0
 800779c:	2b01      	cmp	r3, #1
 800779e:	d117      	bne.n	80077d0 <AT_ESP8266_ND+0xcb4>
		{
				AT_decode=at_tcp_conn_err;
 80077a0:	2306      	movs	r3, #6
 80077a2:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
				//------------------TCP CAIDO AL INTENTAR CONECTAR------------------//
				a->_n_fcomp=strlen("ERROR\r\nCLOSED\r\n");
 80077a6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80077aa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	220f      	movs	r2, #15
 80077b2:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
 80077b6:	f000 bf3e 	b.w	8008636 <AT_ESP8266_ND+0x1b1a>
 80077ba:	bf00      	nop
 80077bc:	08010bac 	.word	0x08010bac
 80077c0:	08010bb8 	.word	0x08010bb8
 80077c4:	08010bc4 	.word	0x08010bc4
 80077c8:	08010bd0 	.word	0x08010bd0
 80077cc:	08010bd8 	.word	0x08010bd8
		}
		else
		{
			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"ERROR",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//Intentando conectar con servidor TCP caido
 80077d0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80077d4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 80077de:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80077e2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 80077ec:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80077f0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 80077fa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80077fe:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	f603 0398 	addw	r3, r3, #2200	; 0x898
 8007808:	603b      	str	r3, [r7, #0]
 800780a:	f507 7214 	add.w	r2, r7, #592	; 0x250
 800780e:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007812:	6812      	ldr	r2, [r2, #0]
 8007814:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 8007818:	f507 7114 	add.w	r1, r7, #592	; 0x250
 800781c:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007820:	6809      	ldr	r1, [r1, #0]
 8007822:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 8007826:	f507 7014 	add.w	r0, r7, #592	; 0x250
 800782a:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 800782e:	6800      	ldr	r0, [r0, #0]
 8007830:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 8007834:	2300      	movs	r3, #0
 8007836:	9305      	str	r3, [sp, #20]
 8007838:	9004      	str	r0, [sp, #16]
 800783a:	9103      	str	r1, [sp, #12]
 800783c:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007840:	9102      	str	r1, [sp, #8]
 8007842:	9201      	str	r2, [sp, #4]
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	9300      	str	r3, [sp, #0]
 8007848:	4633      	mov	r3, r6
 800784a:	4aaa      	ldr	r2, [pc, #680]	; (8007af4 <AT_ESP8266_ND+0xfd8>)
 800784c:	4629      	mov	r1, r5
 800784e:	4620      	mov	r0, r4
 8007850:	f007 f97e 	bl	800eb50 <FT_String_ND>
 8007854:	4603      	mov	r3, r0
 8007856:	2b01      	cmp	r3, #1
 8007858:	d104      	bne.n	8007864 <AT_ESP8266_ND+0xd48>
			{
					AT_decode=at_error;
 800785a:	2302      	movs	r3, #2
 800785c:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007860:	f000 bee9 	b.w	8008636 <AT_ESP8266_ND+0x1b1a>
			}
			 else
			 {
				//------------------CONECTAR TCP YA CONECTADO------------------//
				a->_n_fcomp=strlen("\r\nALREADY CONNECTED\r\n");
 8007864:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007868:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	2215      	movs	r2, #21
 8007870:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\nALREADY CONNECTED\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//Error desconectar TCP ya desconectado
 8007874:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007878:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 8007882:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007886:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 8007890:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007894:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 800789e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80078a2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	f603 0398 	addw	r3, r3, #2200	; 0x898
 80078ac:	603b      	str	r3, [r7, #0]
 80078ae:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80078b2:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80078b6:	6812      	ldr	r2, [r2, #0]
 80078b8:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 80078bc:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80078c0:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80078c4:	6809      	ldr	r1, [r1, #0]
 80078c6:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 80078ca:	f507 7014 	add.w	r0, r7, #592	; 0x250
 80078ce:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 80078d2:	6800      	ldr	r0, [r0, #0]
 80078d4:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 80078d8:	2300      	movs	r3, #0
 80078da:	9305      	str	r3, [sp, #20]
 80078dc:	9004      	str	r0, [sp, #16]
 80078de:	9103      	str	r1, [sp, #12]
 80078e0:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80078e4:	9102      	str	r1, [sp, #8]
 80078e6:	9201      	str	r2, [sp, #4]
 80078e8:	683b      	ldr	r3, [r7, #0]
 80078ea:	9300      	str	r3, [sp, #0]
 80078ec:	4633      	mov	r3, r6
 80078ee:	4a82      	ldr	r2, [pc, #520]	; (8007af8 <AT_ESP8266_ND+0xfdc>)
 80078f0:	4629      	mov	r1, r5
 80078f2:	4620      	mov	r0, r4
 80078f4:	f007 f92c 	bl	800eb50 <FT_String_ND>
 80078f8:	4603      	mov	r3, r0
 80078fa:	2b01      	cmp	r3, #1
 80078fc:	d104      	bne.n	8007908 <AT_ESP8266_ND+0xdec>
				{
						AT_decode=at_tcp_alrdy_cnntd_err;
 80078fe:	230e      	movs	r3, #14
 8007900:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007904:	f000 be97 	b.w	8008636 <AT_ESP8266_ND+0x1b1a>
				}
				else
				{
					//------------------OK PARA ENVIAR------------------//
					a->_n_fcomp=strlen("AT+CIPSERVER");
 8007908:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800790c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	220c      	movs	r2, #12
 8007914:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
					if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPSERVER",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8007918:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800791c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 8007926:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800792a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 8007934:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007938:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 8007942:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007946:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	f603 0398 	addw	r3, r3, #2200	; 0x898
 8007950:	603b      	str	r3, [r7, #0]
 8007952:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007956:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 800795a:	6812      	ldr	r2, [r2, #0]
 800795c:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 8007960:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007964:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007968:	6809      	ldr	r1, [r1, #0]
 800796a:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 800796e:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007972:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007976:	6800      	ldr	r0, [r0, #0]
 8007978:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 800797c:	2300      	movs	r3, #0
 800797e:	9305      	str	r3, [sp, #20]
 8007980:	9004      	str	r0, [sp, #16]
 8007982:	9103      	str	r1, [sp, #12]
 8007984:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007988:	9102      	str	r1, [sp, #8]
 800798a:	9201      	str	r2, [sp, #4]
 800798c:	683b      	ldr	r3, [r7, #0]
 800798e:	9300      	str	r3, [sp, #0]
 8007990:	4633      	mov	r3, r6
 8007992:	4a5a      	ldr	r2, [pc, #360]	; (8007afc <AT_ESP8266_ND+0xfe0>)
 8007994:	4629      	mov	r1, r5
 8007996:	4620      	mov	r0, r4
 8007998:	f007 f8da 	bl	800eb50 <FT_String_ND>
 800799c:	4603      	mov	r3, r0
 800799e:	2b01      	cmp	r3, #1
 80079a0:	d104      	bne.n	80079ac <AT_ESP8266_ND+0xe90>
					{
						AT_decode=at_tcp_srvr_err;
 80079a2:	2316      	movs	r3, #22
 80079a4:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80079a8:	f000 be45 	b.w	8008636 <AT_ESP8266_ND+0x1b1a>
					}
					else
					{
						//------------------DESCONECTAR TCP CUANDOYA EST� DESCONECTADO------------------//
						a->_n_fcomp=strlen("AT+CIPCLOSE");
 80079ac:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80079b0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	220b      	movs	r2, #11
 80079b8:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
						if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPCLOSE",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//Error desconectar TCP ya desconectado
 80079bc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80079c0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 80079ca:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80079ce:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 80079d8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80079dc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 80079e6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80079ea:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	f603 0398 	addw	r3, r3, #2200	; 0x898
 80079f4:	603b      	str	r3, [r7, #0]
 80079f6:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80079fa:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80079fe:	6812      	ldr	r2, [r2, #0]
 8007a00:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 8007a04:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007a08:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007a0c:	6809      	ldr	r1, [r1, #0]
 8007a0e:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 8007a12:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007a16:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007a1a:	6800      	ldr	r0, [r0, #0]
 8007a1c:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 8007a20:	2300      	movs	r3, #0
 8007a22:	9305      	str	r3, [sp, #20]
 8007a24:	9004      	str	r0, [sp, #16]
 8007a26:	9103      	str	r1, [sp, #12]
 8007a28:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007a2c:	9102      	str	r1, [sp, #8]
 8007a2e:	9201      	str	r2, [sp, #4]
 8007a30:	683b      	ldr	r3, [r7, #0]
 8007a32:	9300      	str	r3, [sp, #0]
 8007a34:	4633      	mov	r3, r6
 8007a36:	4a32      	ldr	r2, [pc, #200]	; (8007b00 <AT_ESP8266_ND+0xfe4>)
 8007a38:	4629      	mov	r1, r5
 8007a3a:	4620      	mov	r0, r4
 8007a3c:	f007 f888 	bl	800eb50 <FT_String_ND>
 8007a40:	4603      	mov	r3, r0
 8007a42:	2b01      	cmp	r3, #1
 8007a44:	d104      	bne.n	8007a50 <AT_ESP8266_ND+0xf34>
							{
								AT_decode=at_tcp_close_err;
 8007a46:	231a      	movs	r3, #26
 8007a48:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007a4c:	f000 bdf3 	b.w	8008636 <AT_ESP8266_ND+0x1b1a>
							}
						else
							{
							//------------------INTENTAR ENVIAR DATOS EN TCP CAIDO------------------//
							a->_n_fcomp=strlen("link is not valid");
 8007a50:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007a54:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	2211      	movs	r2, #17
 8007a5c:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
							if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"link is not valid",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8007a60:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007a64:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 8007a6e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007a72:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 8007a7c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007a80:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 8007a8a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007a8e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	f603 0398 	addw	r3, r3, #2200	; 0x898
 8007a98:	603b      	str	r3, [r7, #0]
 8007a9a:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007a9e:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007aa2:	6812      	ldr	r2, [r2, #0]
 8007aa4:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 8007aa8:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007aac:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007ab0:	6809      	ldr	r1, [r1, #0]
 8007ab2:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 8007ab6:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007aba:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007abe:	6800      	ldr	r0, [r0, #0]
 8007ac0:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	9305      	str	r3, [sp, #20]
 8007ac8:	9004      	str	r0, [sp, #16]
 8007aca:	9103      	str	r1, [sp, #12]
 8007acc:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007ad0:	9102      	str	r1, [sp, #8]
 8007ad2:	9201      	str	r2, [sp, #4]
 8007ad4:	683b      	ldr	r3, [r7, #0]
 8007ad6:	9300      	str	r3, [sp, #0]
 8007ad8:	4633      	mov	r3, r6
 8007ada:	4a0a      	ldr	r2, [pc, #40]	; (8007b04 <AT_ESP8266_ND+0xfe8>)
 8007adc:	4629      	mov	r1, r5
 8007ade:	4620      	mov	r0, r4
 8007ae0:	f007 f836 	bl	800eb50 <FT_String_ND>
 8007ae4:	4603      	mov	r3, r0
 8007ae6:	2b01      	cmp	r3, #1
 8007ae8:	d10e      	bne.n	8007b08 <AT_ESP8266_ND+0xfec>
								{
									AT_decode=at_tcp_snd_err;
 8007aea:	2311      	movs	r3, #17
 8007aec:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007af0:	f000 bda1 	b.w	8008636 <AT_ESP8266_ND+0x1b1a>
 8007af4:	08010be8 	.word	0x08010be8
 8007af8:	08010bf0 	.word	0x08010bf0
 8007afc:	08010b90 	.word	0x08010b90
 8007b00:	08010ba0 	.word	0x08010ba0
 8007b04:	08010c08 	.word	0x08010c08
								}
							else
								{
								//------------------CAMBIAR MODO DE FUNCIONAMIENTO------------------//
								a->_n_fcomp=strlen("AT+CWMODE=");
 8007b08:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007b0c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	220a      	movs	r2, #10
 8007b14:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
								if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CWMODE=",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//Error desconectar TCP ya desconectado
 8007b18:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007b1c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 8007b26:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007b2a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 8007b34:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007b38:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 8007b42:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007b46:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	f603 0398 	addw	r3, r3, #2200	; 0x898
 8007b50:	603b      	str	r3, [r7, #0]
 8007b52:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007b56:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007b5a:	6812      	ldr	r2, [r2, #0]
 8007b5c:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 8007b60:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007b64:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007b68:	6809      	ldr	r1, [r1, #0]
 8007b6a:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 8007b6e:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007b72:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007b76:	6800      	ldr	r0, [r0, #0]
 8007b78:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	9305      	str	r3, [sp, #20]
 8007b80:	9004      	str	r0, [sp, #16]
 8007b82:	9103      	str	r1, [sp, #12]
 8007b84:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007b88:	9102      	str	r1, [sp, #8]
 8007b8a:	9201      	str	r2, [sp, #4]
 8007b8c:	683b      	ldr	r3, [r7, #0]
 8007b8e:	9300      	str	r3, [sp, #0]
 8007b90:	4633      	mov	r3, r6
 8007b92:	4aa8      	ldr	r2, [pc, #672]	; (8007e34 <AT_ESP8266_ND+0x1318>)
 8007b94:	4629      	mov	r1, r5
 8007b96:	4620      	mov	r0, r4
 8007b98:	f006 ffda 	bl	800eb50 <FT_String_ND>
 8007b9c:	4603      	mov	r3, r0
 8007b9e:	2b01      	cmp	r3, #1
 8007ba0:	d104      	bne.n	8007bac <AT_ESP8266_ND+0x1090>
									{
										AT_decode=at_cambiar_modo_err;
 8007ba2:	231d      	movs	r3, #29
 8007ba4:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007ba8:	f000 bd45 	b.w	8008636 <AT_ESP8266_ND+0x1b1a>
									}
								else
								{
									//------------------DEFIIR MULTIPLES CONEXIONES OK------------------//
									a->_n_fcomp=strlen("AT+CIPMUX=1");
 8007bac:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007bb0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	220b      	movs	r2, #11
 8007bb8:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
									if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPMUX=1",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8007bbc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007bc0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 8007bca:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007bce:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 8007bd8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007bdc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 8007be6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007bea:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	f603 0398 	addw	r3, r3, #2200	; 0x898
 8007bf4:	603b      	str	r3, [r7, #0]
 8007bf6:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007bfa:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007bfe:	6812      	ldr	r2, [r2, #0]
 8007c00:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 8007c04:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007c08:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007c0c:	6809      	ldr	r1, [r1, #0]
 8007c0e:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 8007c12:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007c16:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007c1a:	6800      	ldr	r0, [r0, #0]
 8007c1c:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 8007c20:	2300      	movs	r3, #0
 8007c22:	9305      	str	r3, [sp, #20]
 8007c24:	9004      	str	r0, [sp, #16]
 8007c26:	9103      	str	r1, [sp, #12]
 8007c28:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007c2c:	9102      	str	r1, [sp, #8]
 8007c2e:	9201      	str	r2, [sp, #4]
 8007c30:	683b      	ldr	r3, [r7, #0]
 8007c32:	9300      	str	r3, [sp, #0]
 8007c34:	4633      	mov	r3, r6
 8007c36:	4a80      	ldr	r2, [pc, #512]	; (8007e38 <AT_ESP8266_ND+0x131c>)
 8007c38:	4629      	mov	r1, r5
 8007c3a:	4620      	mov	r0, r4
 8007c3c:	f006 ff88 	bl	800eb50 <FT_String_ND>
 8007c40:	4603      	mov	r3, r0
 8007c42:	2b01      	cmp	r3, #1
 8007c44:	d104      	bne.n	8007c50 <AT_ESP8266_ND+0x1134>
										{
											AT_decode=at_multiple_conn_err;
 8007c46:	231e      	movs	r3, #30
 8007c48:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007c4c:	f000 bcf3 	b.w	8008636 <AT_ESP8266_ND+0x1b1a>
										}
									else
									{
										//------------------DEFIIR NO MULTIPLES CONEXIONES OK------------------//
										a->_n_fcomp=strlen("AT+CIPMUX=0");
 8007c50:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007c54:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	220b      	movs	r2, #11
 8007c5c:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
										if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPMUX=0",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8007c60:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007c64:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 8007c6e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007c72:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 8007c7c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007c80:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 8007c8a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007c8e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	f603 0398 	addw	r3, r3, #2200	; 0x898
 8007c98:	603b      	str	r3, [r7, #0]
 8007c9a:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007c9e:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007ca2:	6812      	ldr	r2, [r2, #0]
 8007ca4:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 8007ca8:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007cac:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007cb0:	6809      	ldr	r1, [r1, #0]
 8007cb2:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 8007cb6:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007cba:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007cbe:	6800      	ldr	r0, [r0, #0]
 8007cc0:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	9305      	str	r3, [sp, #20]
 8007cc8:	9004      	str	r0, [sp, #16]
 8007cca:	9103      	str	r1, [sp, #12]
 8007ccc:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007cd0:	9102      	str	r1, [sp, #8]
 8007cd2:	9201      	str	r2, [sp, #4]
 8007cd4:	683b      	ldr	r3, [r7, #0]
 8007cd6:	9300      	str	r3, [sp, #0]
 8007cd8:	4633      	mov	r3, r6
 8007cda:	4a58      	ldr	r2, [pc, #352]	; (8007e3c <AT_ESP8266_ND+0x1320>)
 8007cdc:	4629      	mov	r1, r5
 8007cde:	4620      	mov	r0, r4
 8007ce0:	f006 ff36 	bl	800eb50 <FT_String_ND>
 8007ce4:	4603      	mov	r3, r0
 8007ce6:	2b01      	cmp	r3, #1
 8007ce8:	f000 84a5 	beq.w	8008636 <AT_ESP8266_ND+0x1b1a>
												//AT_decode=at_no_multiple_conn_err;
											}
										else
										{
											//------------------ERROR AL CONECTAR WIFI------------------//
											a->_n_fcomp=strlen("AT+CWJAP");
 8007cec:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007cf0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	2208      	movs	r2, #8
 8007cf8:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
											if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CWJAP",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8007cfc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007d00:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 8007d0a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007d0e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 8007d18:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007d1c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 8007d26:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007d2a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	f603 0398 	addw	r3, r3, #2200	; 0x898
 8007d34:	603b      	str	r3, [r7, #0]
 8007d36:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007d3a:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007d3e:	6812      	ldr	r2, [r2, #0]
 8007d40:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 8007d44:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007d48:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007d4c:	6809      	ldr	r1, [r1, #0]
 8007d4e:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 8007d52:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007d56:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007d5a:	6800      	ldr	r0, [r0, #0]
 8007d5c:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 8007d60:	2300      	movs	r3, #0
 8007d62:	9305      	str	r3, [sp, #20]
 8007d64:	9004      	str	r0, [sp, #16]
 8007d66:	9103      	str	r1, [sp, #12]
 8007d68:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007d6c:	9102      	str	r1, [sp, #8]
 8007d6e:	9201      	str	r2, [sp, #4]
 8007d70:	683b      	ldr	r3, [r7, #0]
 8007d72:	9300      	str	r3, [sp, #0]
 8007d74:	4633      	mov	r3, r6
 8007d76:	4a32      	ldr	r2, [pc, #200]	; (8007e40 <AT_ESP8266_ND+0x1324>)
 8007d78:	4629      	mov	r1, r5
 8007d7a:	4620      	mov	r0, r4
 8007d7c:	f006 fee8 	bl	800eb50 <FT_String_ND>
 8007d80:	4603      	mov	r3, r0
 8007d82:	2b01      	cmp	r3, #1
 8007d84:	d104      	bne.n	8007d90 <AT_ESP8266_ND+0x1274>
												{
													AT_decode=at_conn_wifi_err;
 8007d86:	2320      	movs	r3, #32
 8007d88:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007d8c:	f000 bc53 	b.w	8008636 <AT_ESP8266_ND+0x1b1a>
												}
											else
											{
												//------------------ERROR AL CONECTAR WIFI------------------//
												a->_n_fcomp=strlen("AT+CIPSTA=");
 8007d90:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007d94:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	220a      	movs	r2, #10
 8007d9c:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
												if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPSTA=",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8007da0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007da4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 8007dae:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007db2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 8007dbc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007dc0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 8007dca:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007dce:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	f603 0398 	addw	r3, r3, #2200	; 0x898
 8007dd8:	603b      	str	r3, [r7, #0]
 8007dda:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007dde:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007de2:	6812      	ldr	r2, [r2, #0]
 8007de4:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 8007de8:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007dec:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007df0:	6809      	ldr	r1, [r1, #0]
 8007df2:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 8007df6:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007dfa:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007dfe:	6800      	ldr	r0, [r0, #0]
 8007e00:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 8007e04:	2300      	movs	r3, #0
 8007e06:	9305      	str	r3, [sp, #20]
 8007e08:	9004      	str	r0, [sp, #16]
 8007e0a:	9103      	str	r1, [sp, #12]
 8007e0c:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007e10:	9102      	str	r1, [sp, #8]
 8007e12:	9201      	str	r2, [sp, #4]
 8007e14:	683b      	ldr	r3, [r7, #0]
 8007e16:	9300      	str	r3, [sp, #0]
 8007e18:	4633      	mov	r3, r6
 8007e1a:	4a0a      	ldr	r2, [pc, #40]	; (8007e44 <AT_ESP8266_ND+0x1328>)
 8007e1c:	4629      	mov	r1, r5
 8007e1e:	4620      	mov	r0, r4
 8007e20:	f006 fe96 	bl	800eb50 <FT_String_ND>
 8007e24:	4603      	mov	r3, r0
 8007e26:	2b01      	cmp	r3, #1
 8007e28:	d10e      	bne.n	8007e48 <AT_ESP8266_ND+0x132c>
													{
														AT_decode=at_def_ip_err;
 8007e2a:	2321      	movs	r3, #33	; 0x21
 8007e2c:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007e30:	f000 bc01 	b.w	8008636 <AT_ESP8266_ND+0x1b1a>
 8007e34:	08010b70 	.word	0x08010b70
 8007e38:	08010bac 	.word	0x08010bac
 8007e3c:	08010bb8 	.word	0x08010bb8
 8007e40:	08010c1c 	.word	0x08010c1c
 8007e44:	08010bc4 	.word	0x08010bc4
													}
												else
												{
													//------------------ERROR AL CONECTAR WIFI------------------//
													a->_n_fcomp=strlen("no ip");
 8007e48:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007e4c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	2205      	movs	r2, #5
 8007e54:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
													if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"no ip",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8007e58:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007e5c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 8007e66:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007e6a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 8007e74:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007e78:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 8007e82:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007e86:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	f603 0398 	addw	r3, r3, #2200	; 0x898
 8007e90:	603b      	str	r3, [r7, #0]
 8007e92:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007e96:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007e9a:	6812      	ldr	r2, [r2, #0]
 8007e9c:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 8007ea0:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007ea4:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007ea8:	6809      	ldr	r1, [r1, #0]
 8007eaa:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 8007eae:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007eb2:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007eb6:	6800      	ldr	r0, [r0, #0]
 8007eb8:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	9305      	str	r3, [sp, #20]
 8007ec0:	9004      	str	r0, [sp, #16]
 8007ec2:	9103      	str	r1, [sp, #12]
 8007ec4:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007ec8:	9102      	str	r1, [sp, #8]
 8007eca:	9201      	str	r2, [sp, #4]
 8007ecc:	683b      	ldr	r3, [r7, #0]
 8007ece:	9300      	str	r3, [sp, #0]
 8007ed0:	4633      	mov	r3, r6
 8007ed2:	4abe      	ldr	r2, [pc, #760]	; (80081cc <AT_ESP8266_ND+0x16b0>)
 8007ed4:	4629      	mov	r1, r5
 8007ed6:	4620      	mov	r0, r4
 8007ed8:	f006 fe3a 	bl	800eb50 <FT_String_ND>
 8007edc:	4603      	mov	r3, r0
 8007ede:	2b01      	cmp	r3, #1
 8007ee0:	d103      	bne.n	8007eea <AT_ESP8266_ND+0x13ce>
														{
															AT_decode=at_tcp_noip_err;  //PROCESAR
 8007ee2:	2322      	movs	r3, #34	; 0x22
 8007ee4:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007ee8:	e3a5      	b.n	8008636 <AT_ESP8266_ND+0x1b1a>
													{

														 //--------------------------------------------------------------------------------------------------------------//
														 // 	Continuo preguntando por las string individuales, los que nos tienen datos comunes		     			 //
														 //--------------------------------------------------------------------------------------------------------------//
														a->_n_fcomp=strlen("WIFI DISCONNECT");
 8007eea:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007eee:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	220f      	movs	r2, #15
 8007ef6:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
														if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"WIFI DISCONNECT",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//if (strcmp(a->_uartRCVD,"WIFI DISCONNECT\r\n\r\nOK\r\n")==0)//WIFI DESCONECTADA
 8007efa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007efe:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 8007f08:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007f0c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 8007f16:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007f1a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 8007f24:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007f28:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	f603 0398 	addw	r3, r3, #2200	; 0x898
 8007f32:	603b      	str	r3, [r7, #0]
 8007f34:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007f38:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007f3c:	6812      	ldr	r2, [r2, #0]
 8007f3e:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 8007f42:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007f46:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007f4a:	6809      	ldr	r1, [r1, #0]
 8007f4c:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 8007f50:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007f54:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007f58:	6800      	ldr	r0, [r0, #0]
 8007f5a:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 8007f5e:	2300      	movs	r3, #0
 8007f60:	9305      	str	r3, [sp, #20]
 8007f62:	9004      	str	r0, [sp, #16]
 8007f64:	9103      	str	r1, [sp, #12]
 8007f66:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007f6a:	9102      	str	r1, [sp, #8]
 8007f6c:	9201      	str	r2, [sp, #4]
 8007f6e:	683b      	ldr	r3, [r7, #0]
 8007f70:	9300      	str	r3, [sp, #0]
 8007f72:	4633      	mov	r3, r6
 8007f74:	4a96      	ldr	r2, [pc, #600]	; (80081d0 <AT_ESP8266_ND+0x16b4>)
 8007f76:	4629      	mov	r1, r5
 8007f78:	4620      	mov	r0, r4
 8007f7a:	f006 fde9 	bl	800eb50 <FT_String_ND>
 8007f7e:	4603      	mov	r3, r0
 8007f80:	2b01      	cmp	r3, #1
 8007f82:	d112      	bne.n	8007faa <AT_ESP8266_ND+0x148e>
															{
																 AT_decode=at_wifi_disconnect;
 8007f84:	230a      	movs	r3, #10
 8007f86:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
																 a->_debug_WF_DISCONNECT++;
 8007f8a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007f8e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	f8d3 3d3c 	ldr.w	r3, [r3, #3388]	; 0xd3c
 8007f98:	1c5a      	adds	r2, r3, #1
 8007f9a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007f9e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	f8c3 2d3c 	str.w	r2, [r3, #3388]	; 0xd3c
 8007fa8:	e345      	b.n	8008636 <AT_ESP8266_ND+0x1b1a>
															}
														else
														{
															//------------------CLIENTE DESCONECTADO DEL SERVIDOR ------------------//
															a->_n_fcomp=strlen(",CLOSED\r\n");
 8007faa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007fae:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	2209      	movs	r2, #9
 8007fb6:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
															if (FT_String_ND(a->_uartRCVD,&a->_n_orig,",CLOSED\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8007fba:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007fbe:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 8007fc8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007fcc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 8007fd6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007fda:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 8007fe4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007fe8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	f603 0398 	addw	r3, r3, #2200	; 0x898
 8007ff2:	603b      	str	r3, [r7, #0]
 8007ff4:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007ff8:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007ffc:	6812      	ldr	r2, [r2, #0]
 8007ffe:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 8008002:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8008006:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 800800a:	6809      	ldr	r1, [r1, #0]
 800800c:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 8008010:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8008014:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8008018:	6800      	ldr	r0, [r0, #0]
 800801a:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 800801e:	2300      	movs	r3, #0
 8008020:	9305      	str	r3, [sp, #20]
 8008022:	9004      	str	r0, [sp, #16]
 8008024:	9103      	str	r1, [sp, #12]
 8008026:	f507 710c 	add.w	r1, r7, #560	; 0x230
 800802a:	9102      	str	r1, [sp, #8]
 800802c:	9201      	str	r2, [sp, #4]
 800802e:	683b      	ldr	r3, [r7, #0]
 8008030:	9300      	str	r3, [sp, #0]
 8008032:	4633      	mov	r3, r6
 8008034:	4a67      	ldr	r2, [pc, #412]	; (80081d4 <AT_ESP8266_ND+0x16b8>)
 8008036:	4629      	mov	r1, r5
 8008038:	4620      	mov	r0, r4
 800803a:	f006 fd89 	bl	800eb50 <FT_String_ND>
 800803e:	4603      	mov	r3, r0
 8008040:	2b01      	cmp	r3, #1
 8008042:	d112      	bne.n	800806a <AT_ESP8266_ND+0x154e>
																{
																	AT_decode=at_tcp_client_desc;
 8008044:	2319      	movs	r3, #25
 8008046:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
																	a->_debug_CLOSED++;
 800804a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800804e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	f8d3 3d38 	ldr.w	r3, [r3, #3384]	; 0xd38
 8008058:	1c5a      	adds	r2, r3, #1
 800805a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800805e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	f8c3 2d38 	str.w	r2, [r3, #3384]	; 0xd38
 8008068:	e2e5      	b.n	8008636 <AT_ESP8266_ND+0x1b1a>
																//------------------TCP CAIDO DESPUES DE CONECTADO------------------//
																// En el envío contínuo el CLOSED se concatena con el SEND OK y si //
																// primero ve el SEND OKse queda en el estado 705 por error al     //
																//  enviar														  //
																//-----------------------------------------------------------------//
																a->_n_fcomp=strlen("CLOSED\r\n");
 800806a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800806e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	2208      	movs	r2, #8
 8008076:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
																if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"CLOSED\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 800807a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800807e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 8008088:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800808c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 8008096:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800809a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 80080a4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80080a8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	f603 0398 	addw	r3, r3, #2200	; 0x898
 80080b2:	603b      	str	r3, [r7, #0]
 80080b4:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80080b8:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80080bc:	6812      	ldr	r2, [r2, #0]
 80080be:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 80080c2:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80080c6:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80080ca:	6809      	ldr	r1, [r1, #0]
 80080cc:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 80080d0:	f507 7014 	add.w	r0, r7, #592	; 0x250
 80080d4:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 80080d8:	6800      	ldr	r0, [r0, #0]
 80080da:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 80080de:	2300      	movs	r3, #0
 80080e0:	9305      	str	r3, [sp, #20]
 80080e2:	9004      	str	r0, [sp, #16]
 80080e4:	9103      	str	r1, [sp, #12]
 80080e6:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80080ea:	9102      	str	r1, [sp, #8]
 80080ec:	9201      	str	r2, [sp, #4]
 80080ee:	683b      	ldr	r3, [r7, #0]
 80080f0:	9300      	str	r3, [sp, #0]
 80080f2:	4633      	mov	r3, r6
 80080f4:	4a38      	ldr	r2, [pc, #224]	; (80081d8 <AT_ESP8266_ND+0x16bc>)
 80080f6:	4629      	mov	r1, r5
 80080f8:	4620      	mov	r0, r4
 80080fa:	f006 fd29 	bl	800eb50 <FT_String_ND>
 80080fe:	4603      	mov	r3, r0
 8008100:	2b01      	cmp	r3, #1
 8008102:	d103      	bne.n	800810c <AT_ESP8266_ND+0x15f0>
																	{
																		AT_decode=at_tcp_desconectado;
 8008104:	2310      	movs	r3, #16
 8008106:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 800810a:	e294      	b.n	8008636 <AT_ESP8266_ND+0x1b1a>
																	}
																else
																{

																	//------------------ENVIADO = RECIBIDO ------------------//
																	if (FT_String_ND(a->_uartRCVD,&a->_n_orig,a->_uart2snd,&a->_n_cmp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//if (strcmp(a->_uartRCVD,a->_uart2snd)==0)//Recibo OK para transmitir
 800810c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008110:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 800811a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800811e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 8008128:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800812c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	f503 6693 	add.w	r6, r3, #1176	; 0x498
 8008136:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800813a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	f603 4ce8 	addw	ip, r3, #3304	; 0xce8
 8008144:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008148:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	f603 0398 	addw	r3, r3, #2200	; 0x898
 8008152:	603b      	str	r3, [r7, #0]
 8008154:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8008158:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 800815c:	6812      	ldr	r2, [r2, #0]
 800815e:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 8008162:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8008166:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 800816a:	6809      	ldr	r1, [r1, #0]
 800816c:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 8008170:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8008174:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8008178:	6800      	ldr	r0, [r0, #0]
 800817a:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 800817e:	2300      	movs	r3, #0
 8008180:	9305      	str	r3, [sp, #20]
 8008182:	9004      	str	r0, [sp, #16]
 8008184:	9103      	str	r1, [sp, #12]
 8008186:	f507 710c 	add.w	r1, r7, #560	; 0x230
 800818a:	9102      	str	r1, [sp, #8]
 800818c:	9201      	str	r2, [sp, #4]
 800818e:	683b      	ldr	r3, [r7, #0]
 8008190:	9300      	str	r3, [sp, #0]
 8008192:	4663      	mov	r3, ip
 8008194:	4632      	mov	r2, r6
 8008196:	4629      	mov	r1, r5
 8008198:	4620      	mov	r0, r4
 800819a:	f006 fcd9 	bl	800eb50 <FT_String_ND>
 800819e:	4603      	mov	r3, r0
 80081a0:	2b01      	cmp	r3, #1
 80081a2:	d11b      	bne.n	80081dc <AT_ESP8266_ND+0x16c0>
																		 {
																			if (a->_uartRCVD[0] != '\0') //Borro el vector de recepción
 80081a4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80081a8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	f893 3698 	ldrb.w	r3, [r3, #1688]	; 0x698
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	f000 823f 	beq.w	8008636 <AT_ESP8266_ND+0x1b1a>
																				{
																				//AT_decode=10;
																				a->_n_orig=0;
 80081b8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80081bc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	2200      	movs	r2, #0
 80081c4:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
 80081c8:	e235      	b.n	8008636 <AT_ESP8266_ND+0x1b1a>
 80081ca:	bf00      	nop
 80081cc:	08010c28 	.word	0x08010c28
 80081d0:	08010c30 	.word	0x08010c30
 80081d4:	08010c40 	.word	0x08010c40
 80081d8:	08010c4c 	.word	0x08010c4c
																				}
																			}
																	else
																	{
																		//------------------PAQUETE ENVIADO EN FALLA--------------//
																		a->_n_fcomp=strlen("\r\nSEND FAIL\r\n");
 80081dc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80081e0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	220d      	movs	r2, #13
 80081e8:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
																		 if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\nSEND FAIL\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//if (strcmp(a->_uartRCVD,"\r\nSEND OK\r\n")==0)//Transmision ok
 80081ec:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80081f0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 80081fa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80081fe:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 8008208:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800820c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 8008216:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800821a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	f603 0398 	addw	r3, r3, #2200	; 0x898
 8008224:	603b      	str	r3, [r7, #0]
 8008226:	f507 7214 	add.w	r2, r7, #592	; 0x250
 800822a:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 800822e:	6812      	ldr	r2, [r2, #0]
 8008230:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 8008234:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8008238:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 800823c:	6809      	ldr	r1, [r1, #0]
 800823e:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 8008242:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8008246:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 800824a:	6800      	ldr	r0, [r0, #0]
 800824c:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 8008250:	2300      	movs	r3, #0
 8008252:	9305      	str	r3, [sp, #20]
 8008254:	9004      	str	r0, [sp, #16]
 8008256:	9103      	str	r1, [sp, #12]
 8008258:	f507 710c 	add.w	r1, r7, #560	; 0x230
 800825c:	9102      	str	r1, [sp, #8]
 800825e:	9201      	str	r2, [sp, #4]
 8008260:	683b      	ldr	r3, [r7, #0]
 8008262:	9300      	str	r3, [sp, #0]
 8008264:	4633      	mov	r3, r6
 8008266:	4ac6      	ldr	r2, [pc, #792]	; (8008580 <AT_ESP8266_ND+0x1a64>)
 8008268:	4629      	mov	r1, r5
 800826a:	4620      	mov	r0, r4
 800826c:	f006 fc70 	bl	800eb50 <FT_String_ND>
 8008270:	4603      	mov	r3, r0
 8008272:	2b01      	cmp	r3, #1
 8008274:	d112      	bne.n	800829c <AT_ESP8266_ND+0x1780>
																			{
																			 AT_decode=at_tcp_enviado_error;
 8008276:	2312      	movs	r3, #18
 8008278:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
																			 a->_debug_FAIL++;
 800827c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008280:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	f8d3 3d40 	ldr.w	r3, [r3, #3392]	; 0xd40
 800828a:	1c5a      	adds	r2, r3, #1
 800828c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008290:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	f8c3 2d40 	str.w	r2, [r3, #3392]	; 0xd40
 800829a:	e1cc      	b.n	8008636 <AT_ESP8266_ND+0x1b1a>



																			//------------------OBTENCI�N DE IP------------------//
																			// vienen concatenadas no logra ver el GOT IP se queda en el WIFI CONNECTED
																			a->_n_fcomp=strlen("WIFI GOT IP\r\n");
 800829c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80082a0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	220d      	movs	r2, #13
 80082a8:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
																			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"WIFI GOT IP\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//Obtiene IP
 80082ac:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80082b0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 80082ba:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80082be:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 80082c8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80082cc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 80082d6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80082da:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	f603 0398 	addw	r3, r3, #2200	; 0x898
 80082e4:	603b      	str	r3, [r7, #0]
 80082e6:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80082ea:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80082ee:	6812      	ldr	r2, [r2, #0]
 80082f0:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 80082f4:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80082f8:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80082fc:	6809      	ldr	r1, [r1, #0]
 80082fe:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 8008302:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8008306:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 800830a:	6800      	ldr	r0, [r0, #0]
 800830c:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 8008310:	2300      	movs	r3, #0
 8008312:	9305      	str	r3, [sp, #20]
 8008314:	9004      	str	r0, [sp, #16]
 8008316:	9103      	str	r1, [sp, #12]
 8008318:	f507 710c 	add.w	r1, r7, #560	; 0x230
 800831c:	9102      	str	r1, [sp, #8]
 800831e:	9201      	str	r2, [sp, #4]
 8008320:	683b      	ldr	r3, [r7, #0]
 8008322:	9300      	str	r3, [sp, #0]
 8008324:	4633      	mov	r3, r6
 8008326:	4a97      	ldr	r2, [pc, #604]	; (8008584 <AT_ESP8266_ND+0x1a68>)
 8008328:	4629      	mov	r1, r5
 800832a:	4620      	mov	r0, r4
 800832c:	f006 fc10 	bl	800eb50 <FT_String_ND>
 8008330:	4603      	mov	r3, r0
 8008332:	2b01      	cmp	r3, #1
 8008334:	d112      	bne.n	800835c <AT_ESP8266_ND+0x1840>
																				{
																					a->_debug_WF_GOTIP++;
 8008336:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800833a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	f8d3 3d4c 	ldr.w	r3, [r3, #3404]	; 0xd4c
 8008344:	1c5a      	adds	r2, r3, #1
 8008346:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800834a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	f8c3 2d4c 	str.w	r2, [r3, #3404]	; 0xd4c
																					AT_decode=at_wifi_gotip;
 8008354:	230c      	movs	r3, #12
 8008356:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 800835a:	e16c      	b.n	8008636 <AT_ESP8266_ND+0x1b1a>
																				}
																			else
																			{
																					//------------------WIFI CONECTADA------------------//
																				a->_n_fcomp=strlen("WIFI CONNECTED");
 800835c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008360:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	220e      	movs	r2, #14
 8008368:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
																				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"WIFI CONNECTED",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//WIFI CONECTADA
 800836c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008370:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 800837a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800837e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 8008388:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800838c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 8008396:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800839a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	f603 0398 	addw	r3, r3, #2200	; 0x898
 80083a4:	603b      	str	r3, [r7, #0]
 80083a6:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80083aa:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80083ae:	6812      	ldr	r2, [r2, #0]
 80083b0:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 80083b4:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80083b8:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80083bc:	6809      	ldr	r1, [r1, #0]
 80083be:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 80083c2:	f507 7014 	add.w	r0, r7, #592	; 0x250
 80083c6:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 80083ca:	6800      	ldr	r0, [r0, #0]
 80083cc:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 80083d0:	2300      	movs	r3, #0
 80083d2:	9305      	str	r3, [sp, #20]
 80083d4:	9004      	str	r0, [sp, #16]
 80083d6:	9103      	str	r1, [sp, #12]
 80083d8:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80083dc:	9102      	str	r1, [sp, #8]
 80083de:	9201      	str	r2, [sp, #4]
 80083e0:	683b      	ldr	r3, [r7, #0]
 80083e2:	9300      	str	r3, [sp, #0]
 80083e4:	4633      	mov	r3, r6
 80083e6:	4a68      	ldr	r2, [pc, #416]	; (8008588 <AT_ESP8266_ND+0x1a6c>)
 80083e8:	4629      	mov	r1, r5
 80083ea:	4620      	mov	r0, r4
 80083ec:	f006 fbb0 	bl	800eb50 <FT_String_ND>
 80083f0:	4603      	mov	r3, r0
 80083f2:	2b01      	cmp	r3, #1
 80083f4:	d112      	bne.n	800841c <AT_ESP8266_ND+0x1900>
																					{
																						a->_debug_WF_CNNCTD++;
 80083f6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80083fa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 8008404:	1c5a      	adds	r2, r3, #1
 8008406:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800840a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	f8c3 2d48 	str.w	r2, [r3, #3400]	; 0xd48
																							 AT_decode=at_wifi_connected;
 8008414:	230b      	movs	r3, #11
 8008416:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 800841a:	e10c      	b.n	8008636 <AT_ESP8266_ND+0x1b1a>
																					}
																				else
																				{

																					//------------------CLIENTE TCP CONECTADO------------------//
																					a->_n_fcomp=strlen(",CONNECT\r\n");
 800841c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008420:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	220a      	movs	r2, #10
 8008428:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
																					if (FT_String_ND(a->_uartRCVD,&a->_n_orig,",CONNECT\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//Conectado desde el modulo
 800842c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008430:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 800843a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800843e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 8008448:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800844c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 8008456:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800845a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	f603 0398 	addw	r3, r3, #2200	; 0x898
 8008464:	603b      	str	r3, [r7, #0]
 8008466:	f507 7214 	add.w	r2, r7, #592	; 0x250
 800846a:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 800846e:	6812      	ldr	r2, [r2, #0]
 8008470:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 8008474:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8008478:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 800847c:	6809      	ldr	r1, [r1, #0]
 800847e:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 8008482:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8008486:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 800848a:	6800      	ldr	r0, [r0, #0]
 800848c:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 8008490:	2300      	movs	r3, #0
 8008492:	9305      	str	r3, [sp, #20]
 8008494:	9004      	str	r0, [sp, #16]
 8008496:	9103      	str	r1, [sp, #12]
 8008498:	f507 710c 	add.w	r1, r7, #560	; 0x230
 800849c:	9102      	str	r1, [sp, #8]
 800849e:	9201      	str	r2, [sp, #4]
 80084a0:	683b      	ldr	r3, [r7, #0]
 80084a2:	9300      	str	r3, [sp, #0]
 80084a4:	4633      	mov	r3, r6
 80084a6:	4a39      	ldr	r2, [pc, #228]	; (800858c <AT_ESP8266_ND+0x1a70>)
 80084a8:	4629      	mov	r1, r5
 80084aa:	4620      	mov	r0, r4
 80084ac:	f006 fb50 	bl	800eb50 <FT_String_ND>
 80084b0:	4603      	mov	r3, r0
 80084b2:	2b01      	cmp	r3, #1
 80084b4:	d112      	bne.n	80084dc <AT_ESP8266_ND+0x19c0>
																						  {
																							  AT_decode=at_tcp_client_conectado;
 80084b6:	2318      	movs	r3, #24
 80084b8:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
																							  a->_debug_CONNECT++;
 80084bc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80084c0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	; 0xd34
 80084ca:	1c5a      	adds	r2, r3, #1
 80084cc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80084d0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	f8c3 2d34 	str.w	r2, [r3, #3380]	; 0xd34
 80084da:	e0ac      	b.n	8008636 <AT_ESP8266_ND+0x1b1a>
																						  }
																					else
																					{

																						//------------------FALLA------------------//
																						a->_n_fcomp=strlen("\r\nFAIL\r\n");
 80084dc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80084e0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	2208      	movs	r2, #8
 80084e8:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
																							if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\nFAIL\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//Conectado desde el modulo
 80084ec:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80084f0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 80084fa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80084fe:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 8008508:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800850c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 8008516:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800851a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	f603 0398 	addw	r3, r3, #2200	; 0x898
 8008524:	603b      	str	r3, [r7, #0]
 8008526:	f507 7214 	add.w	r2, r7, #592	; 0x250
 800852a:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 800852e:	6812      	ldr	r2, [r2, #0]
 8008530:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 8008534:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8008538:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 800853c:	6809      	ldr	r1, [r1, #0]
 800853e:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 8008542:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8008546:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 800854a:	6800      	ldr	r0, [r0, #0]
 800854c:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 8008550:	2300      	movs	r3, #0
 8008552:	9305      	str	r3, [sp, #20]
 8008554:	9004      	str	r0, [sp, #16]
 8008556:	9103      	str	r1, [sp, #12]
 8008558:	f507 710c 	add.w	r1, r7, #560	; 0x230
 800855c:	9102      	str	r1, [sp, #8]
 800855e:	9201      	str	r2, [sp, #4]
 8008560:	683b      	ldr	r3, [r7, #0]
 8008562:	9300      	str	r3, [sp, #0]
 8008564:	4633      	mov	r3, r6
 8008566:	4a0a      	ldr	r2, [pc, #40]	; (8008590 <AT_ESP8266_ND+0x1a74>)
 8008568:	4629      	mov	r1, r5
 800856a:	4620      	mov	r0, r4
 800856c:	f006 faf0 	bl	800eb50 <FT_String_ND>
 8008570:	4603      	mov	r3, r0
 8008572:	2b01      	cmp	r3, #1
 8008574:	d10e      	bne.n	8008594 <AT_ESP8266_ND+0x1a78>
																							{
																								AT_decode=at_fail;
 8008576:	2303      	movs	r3, #3
 8008578:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 800857c:	e05b      	b.n	8008636 <AT_ESP8266_ND+0x1b1a>
 800857e:	bf00      	nop
 8008580:	08010c58 	.word	0x08010c58
 8008584:	08010c68 	.word	0x08010c68
 8008588:	08010c78 	.word	0x08010c78
 800858c:	08010c88 	.word	0x08010c88
 8008590:	08010c94 	.word	0x08010c94
																							}
																						else
																						{
																						//------------------busy processing------------------//
																							a->_n_fcomp=strlen("busy p...");
 8008594:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008598:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	2209      	movs	r2, #9
 80085a0:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
																							if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"busy p...",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//Conectado desde el modulo
 80085a4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80085a8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 80085b2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80085b6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 80085c0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80085c4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 80085ce:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80085d2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	f603 0398 	addw	r3, r3, #2200	; 0x898
 80085dc:	603b      	str	r3, [r7, #0]
 80085de:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80085e2:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80085e6:	6812      	ldr	r2, [r2, #0]
 80085e8:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 80085ec:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80085f0:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80085f4:	6809      	ldr	r1, [r1, #0]
 80085f6:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 80085fa:	f507 7014 	add.w	r0, r7, #592	; 0x250
 80085fe:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8008602:	6800      	ldr	r0, [r0, #0]
 8008604:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 8008608:	2300      	movs	r3, #0
 800860a:	9305      	str	r3, [sp, #20]
 800860c:	9004      	str	r0, [sp, #16]
 800860e:	9103      	str	r1, [sp, #12]
 8008610:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8008614:	9102      	str	r1, [sp, #8]
 8008616:	9201      	str	r2, [sp, #4]
 8008618:	683b      	ldr	r3, [r7, #0]
 800861a:	9300      	str	r3, [sp, #0]
 800861c:	4633      	mov	r3, r6
 800861e:	4a78      	ldr	r2, [pc, #480]	; (8008800 <AT_ESP8266_ND+0x1ce4>)
 8008620:	4629      	mov	r1, r5
 8008622:	4620      	mov	r0, r4
 8008624:	f006 fa94 	bl	800eb50 <FT_String_ND>
 8008628:	4603      	mov	r3, r0
 800862a:	2b01      	cmp	r3, #1
 800862c:	d103      	bne.n	8008636 <AT_ESP8266_ND+0x1b1a>
																								{
																								AT_decode=at_busy_p;
 800862e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008632:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
		}
}

 //Eval�o todo lo recibido desde el puerto serie

		switch (a->_instruccion)
 8008636:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800863a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	f8d3 3ab0 	ldr.w	r3, [r3, #2736]	; 0xab0
 8008644:	3b01      	subs	r3, #1
 8008646:	2b08      	cmp	r3, #8
 8008648:	f201 84db 	bhi.w	800a002 <AT_ESP8266_ND+0x34e6>
 800864c:	a201      	add	r2, pc, #4	; (adr r2, 8008654 <AT_ESP8266_ND+0x1b38>)
 800864e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008652:	bf00      	nop
 8008654:	08008679 	.word	0x08008679
 8008658:	08008809 	.word	0x08008809
 800865c:	08008a8b 	.word	0x08008a8b
 8008660:	08008c09 	.word	0x08008c09
 8008664:	08008de1 	.word	0x08008de1
 8008668:	080090b5 	.word	0x080090b5
 800866c:	08009375 	.word	0x08009375
 8008670:	080098a5 	.word	0x080098a5
 8008674:	08009a7b 	.word	0x08009a7b
			//--------------------------------------------------------//
			//					Cambiar CWMODE						  //
		    //--------------------------------------------------------//
			case 1:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 8008678:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800867c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	2200      	movs	r2, #0
 8008684:	f883 2498 	strb.w	r2, [r3, #1176]	; 0x498
				if(( a->_enviaruart==1)&&(AT_decode!=at_ok)
 8008688:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800868c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8008696:	2b01      	cmp	r3, #1
 8008698:	d14f      	bne.n	800873a <AT_ESP8266_ND+0x1c1e>
 800869a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800869e:	2b01      	cmp	r3, #1
 80086a0:	d04b      	beq.n	800873a <AT_ESP8266_ND+0x1c1e>
									   &&(AT_decode!=at_error)
 80086a2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80086a6:	2b02      	cmp	r3, #2
 80086a8:	d047      	beq.n	800873a <AT_ESP8266_ND+0x1c1e>
									   &&(AT_decode!=at_restart)
 80086aa:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80086ae:	2b04      	cmp	r3, #4
 80086b0:	d043      	beq.n	800873a <AT_ESP8266_ND+0x1c1e>
									   &&(AT_decode!=at_tcp_enviado_ok))
 80086b2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80086b6:	2b13      	cmp	r3, #19
 80086b8:	d03f      	beq.n	800873a <AT_ESP8266_ND+0x1c1e>
						{
						a->_pasos=0;
 80086ba:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80086be:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	2200      	movs	r2, #0
 80086c6:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
						a->_ejecucion=1;
 80086ca:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80086ce:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	2201      	movs	r2, #1
 80086d6:	f8c3 2ab4 	str.w	r2, [r3, #2740]	; 0xab4
						strncat(a->_uart2snd,"AT+CWMODE=1\r\n",strlen("AT+CWMODE=1\r\n"));
 80086da:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80086de:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	f503 6493 	add.w	r4, r3, #1176	; 0x498
 80086e8:	4620      	mov	r0, r4
 80086ea:	f7f7 fd83 	bl	80001f4 <strlen>
 80086ee:	4603      	mov	r3, r0
 80086f0:	4423      	add	r3, r4
 80086f2:	4a44      	ldr	r2, [pc, #272]	; (8008804 <AT_ESP8266_ND+0x1ce8>)
 80086f4:	461c      	mov	r4, r3
 80086f6:	4613      	mov	r3, r2
 80086f8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80086fa:	6020      	str	r0, [r4, #0]
 80086fc:	6061      	str	r1, [r4, #4]
 80086fe:	60a2      	str	r2, [r4, #8]
 8008700:	881b      	ldrh	r3, [r3, #0]
 8008702:	81a3      	strh	r3, [r4, #12]
						a->_n_uart2SND=strlen(a->_uart2snd);
 8008704:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008708:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 8008712:	4618      	mov	r0, r3
 8008714:	f7f7 fd6e 	bl	80001f4 <strlen>
 8008718:	4603      	mov	r3, r0
 800871a:	461a      	mov	r2, r3
 800871c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008720:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	f8c3 2cf4 	str.w	r2, [r3, #3316]	; 0xcf4
						a->_estado=100;
 800872a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800872e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	2264      	movs	r2, #100	; 0x64
 8008736:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						}
				a->_pasos++;
 800873a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800873e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	f8d3 3aac 	ldr.w	r3, [r3, #2732]	; 0xaac
 8008748:	1c5a      	adds	r2, r3, #1
 800874a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800874e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
				if (((a->_enviaruart==0)&&((AT_decode==at_ok)||(AT_decode==at_cambiar_modo_ok)
 8008758:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800875c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8008766:	2b00      	cmp	r3, #0
 8008768:	d11b      	bne.n	80087a2 <AT_ESP8266_ND+0x1c86>
 800876a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800876e:	2b01      	cmp	r3, #1
 8008770:	d023      	beq.n	80087ba <AT_ESP8266_ND+0x1c9e>
 8008772:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008776:	2b1c      	cmp	r3, #28
 8008778:	d01f      	beq.n	80087ba <AT_ESP8266_ND+0x1c9e>
															 ||(AT_decode==at_error)
 800877a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800877e:	2b02      	cmp	r3, #2
 8008780:	d01b      	beq.n	80087ba <AT_ESP8266_ND+0x1c9e>
															 ||(AT_decode==at_restart)
 8008782:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008786:	2b04      	cmp	r3, #4
 8008788:	d017      	beq.n	80087ba <AT_ESP8266_ND+0x1c9e>
															 ||(AT_decode==at_wifi_connected)
 800878a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800878e:	2b0b      	cmp	r3, #11
 8008790:	d013      	beq.n	80087ba <AT_ESP8266_ND+0x1c9e>
															 ||(AT_decode==at_wifi_gotip)
 8008792:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008796:	2b0c      	cmp	r3, #12
 8008798:	d00f      	beq.n	80087ba <AT_ESP8266_ND+0x1c9e>
															 ||(AT_decode==at_tcp_enviado_ok)))
 800879a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800879e:	2b13      	cmp	r3, #19
 80087a0:	d00b      	beq.n	80087ba <AT_ESP8266_ND+0x1c9e>
															 ||(a->_ticks > 5000))//210630 Se agrega ATDecode 11 y 12 //Que analice luego de enviar por uart
 80087a2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80087a6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	f8d3 3cb8 	ldr.w	r3, [r3, #3256]	; 0xcb8
 80087b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80087b4:	4293      	cmp	r3, r2
 80087b6:	f341 842e 	ble.w	800a016 <AT_ESP8266_ND+0x34fa>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 80087ba:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80087be:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 80087c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						a->_instruccion=0;	//Finalizo la instrucci�n
 80087cc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80087d0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	2200      	movs	r2, #0
 80087d8:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						a->_ejecucion=0;
 80087dc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80087e0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	2200      	movs	r2, #0
 80087e8:	f8c3 2ab4 	str.w	r2, [r3, #2740]	; 0xab4
						a->_ticks=0;
 80087ec:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80087f0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	2200      	movs	r2, #0
 80087f8:	f8c3 2cb8 	str.w	r2, [r3, #3256]	; 0xcb8
					}

			}
			break;
 80087fc:	f001 bc0b 	b.w	800a016 <AT_ESP8266_ND+0x34fa>
 8008800:	08010ca0 	.word	0x08010ca0
 8008804:	08010cac 	.word	0x08010cac
			//--------------------------------------------------------//
			//					Conectar WiFi						  //
		    //--------------------------------------------------------//
			case 2:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 8008808:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800880c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	2200      	movs	r2, #0
 8008814:	f883 2498 	strb.w	r2, [r3, #1176]	; 0x498
				if(( a->_enviaruart==1)&&(AT_decode!=at_ok)
 8008818:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800881c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8008826:	2b01      	cmp	r3, #1
 8008828:	f040 80c8 	bne.w	80089bc <AT_ESP8266_ND+0x1ea0>
 800882c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008830:	2b01      	cmp	r3, #1
 8008832:	f000 80c3 	beq.w	80089bc <AT_ESP8266_ND+0x1ea0>
									   &&(AT_decode!=at_error)
 8008836:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800883a:	2b02      	cmp	r3, #2
 800883c:	f000 80be 	beq.w	80089bc <AT_ESP8266_ND+0x1ea0>
									   &&(AT_decode!=at_fail)
 8008840:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008844:	2b03      	cmp	r3, #3
 8008846:	f000 80b9 	beq.w	80089bc <AT_ESP8266_ND+0x1ea0>
									   &&(AT_decode!=at_restart)
 800884a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800884e:	2b04      	cmp	r3, #4
 8008850:	f000 80b4 	beq.w	80089bc <AT_ESP8266_ND+0x1ea0>
									   &&(AT_decode!=at_wifi_disconnect)
 8008854:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008858:	2b0a      	cmp	r3, #10
 800885a:	f000 80af 	beq.w	80089bc <AT_ESP8266_ND+0x1ea0>
									   &&(AT_decode!=at_wifi_connected)
 800885e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008862:	2b0b      	cmp	r3, #11
 8008864:	f000 80aa 	beq.w	80089bc <AT_ESP8266_ND+0x1ea0>
									   &&(AT_decode!=at_wifi_gotip))
 8008868:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800886c:	2b0c      	cmp	r3, #12
 800886e:	f000 80a5 	beq.w	80089bc <AT_ESP8266_ND+0x1ea0>
						{
						a->_pasos=0;
 8008872:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008876:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	2200      	movs	r2, #0
 800887e:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
						a->_ejecucion=1;
 8008882:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008886:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	2201      	movs	r2, #1
 800888e:	f8c3 2ab4 	str.w	r2, [r3, #2740]	; 0xab4
						////HAL_GPIO_WritePin(a->RESET_PORT, a->RESET_PIN , GPIO_PIN_SET);
						//------Generacion del comando para conectar---------//
						strncat(a->_uart2snd,"AT+CWJAP=",strlen("AT+CWJAP="));
 8008892:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008896:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	f503 6493 	add.w	r4, r3, #1176	; 0x498
 80088a0:	4620      	mov	r0, r4
 80088a2:	f7f7 fca7 	bl	80001f4 <strlen>
 80088a6:	4603      	mov	r3, r0
 80088a8:	4423      	add	r3, r4
 80088aa:	49d5      	ldr	r1, [pc, #852]	; (8008c00 <AT_ESP8266_ND+0x20e4>)
 80088ac:	461a      	mov	r2, r3
 80088ae:	460b      	mov	r3, r1
 80088b0:	cb03      	ldmia	r3!, {r0, r1}
 80088b2:	6010      	str	r0, [r2, #0]
 80088b4:	6051      	str	r1, [r2, #4]
 80088b6:	881b      	ldrh	r3, [r3, #0]
 80088b8:	8113      	strh	r3, [r2, #8]
						strncat(a->_uart2snd,&comillas,1);
 80088ba:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80088be:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 80088c8:	f207 212f 	addw	r1, r7, #559	; 0x22f
 80088cc:	2201      	movs	r2, #1
 80088ce:	4618      	mov	r0, r3
 80088d0:	f006 ff0d 	bl	800f6ee <strncat>
						strncat(a->_uart2snd,a->_WF_Net,strlen(a->_WF_Net));
 80088d4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80088d8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	f503 6493 	add.w	r4, r3, #1176	; 0x498
 80088e2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80088e6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	1d9d      	adds	r5, r3, #6
 80088ee:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80088f2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	3306      	adds	r3, #6
 80088fa:	4618      	mov	r0, r3
 80088fc:	f7f7 fc7a 	bl	80001f4 <strlen>
 8008900:	4603      	mov	r3, r0
 8008902:	461a      	mov	r2, r3
 8008904:	4629      	mov	r1, r5
 8008906:	4620      	mov	r0, r4
 8008908:	f006 fef1 	bl	800f6ee <strncat>
						strncat(a->_uart2snd,separador,strlen(separador));//strncat(a->_uart2snd,separador,3);//
 800890c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008910:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	f503 6493 	add.w	r4, r3, #1176	; 0x498
 800891a:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800891e:	4618      	mov	r0, r3
 8008920:	f7f7 fc68 	bl	80001f4 <strlen>
 8008924:	4602      	mov	r2, r0
 8008926:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800892a:	4619      	mov	r1, r3
 800892c:	4620      	mov	r0, r4
 800892e:	f006 fede 	bl	800f6ee <strncat>
						strncat(a->_uart2snd,a->_WF_Pass,strlen(a->_WF_Pass));
 8008932:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008936:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	f503 6493 	add.w	r4, r3, #1176	; 0x498
 8008940:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008944:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	f103 0526 	add.w	r5, r3, #38	; 0x26
 800894e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008952:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	3326      	adds	r3, #38	; 0x26
 800895a:	4618      	mov	r0, r3
 800895c:	f7f7 fc4a 	bl	80001f4 <strlen>
 8008960:	4603      	mov	r3, r0
 8008962:	461a      	mov	r2, r3
 8008964:	4629      	mov	r1, r5
 8008966:	4620      	mov	r0, r4
 8008968:	f006 fec1 	bl	800f6ee <strncat>
						strncat(a->_uart2snd,finalizar,3);//strncat(a->_uart2snd,finalizar,strlen(finalizar));
 800896c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008970:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 800897a:	f507 7109 	add.w	r1, r7, #548	; 0x224
 800897e:	2203      	movs	r2, #3
 8008980:	4618      	mov	r0, r3
 8008982:	f006 feb4 	bl	800f6ee <strncat>
						a->_n_uart2SND=strlen(a->_uart2snd);//210418
 8008986:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800898a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 8008994:	4618      	mov	r0, r3
 8008996:	f7f7 fc2d 	bl	80001f4 <strlen>
 800899a:	4603      	mov	r3, r0
 800899c:	461a      	mov	r2, r3
 800899e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80089a2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	f8c3 2cf4 	str.w	r2, [r3, #3316]	; 0xcf4
						a->_estado=200;
 80089ac:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80089b0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	22c8      	movs	r2, #200	; 0xc8
 80089b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						//------Generacion del comando para conectar---------//
						}

				a->_pasos++;
 80089bc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80089c0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	f8d3 3aac 	ldr.w	r3, [r3, #2732]	; 0xaac
 80089ca:	1c5a      	adds	r2, r3, #1
 80089cc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80089d0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac

				if (((a->_enviaruart==0)&&((AT_decode==at_ok)||(AT_decode==at_error)
 80089da:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80089de:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d11b      	bne.n	8008a24 <AT_ESP8266_ND+0x1f08>
 80089ec:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80089f0:	2b01      	cmp	r3, #1
 80089f2:	d023      	beq.n	8008a3c <AT_ESP8266_ND+0x1f20>
 80089f4:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80089f8:	2b02      	cmp	r3, #2
 80089fa:	d01f      	beq.n	8008a3c <AT_ESP8266_ND+0x1f20>
															||(AT_decode==at_fail)
 80089fc:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008a00:	2b03      	cmp	r3, #3
 8008a02:	d01b      	beq.n	8008a3c <AT_ESP8266_ND+0x1f20>
															||(AT_decode==at_restart)
 8008a04:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008a08:	2b04      	cmp	r3, #4
 8008a0a:	d017      	beq.n	8008a3c <AT_ESP8266_ND+0x1f20>
															||(AT_decode==at_wifi_disconnect)
 8008a0c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008a10:	2b0a      	cmp	r3, #10
 8008a12:	d013      	beq.n	8008a3c <AT_ESP8266_ND+0x1f20>
															||(AT_decode==at_wifi_connected)
 8008a14:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008a18:	2b0b      	cmp	r3, #11
 8008a1a:	d00f      	beq.n	8008a3c <AT_ESP8266_ND+0x1f20>
															||(AT_decode==at_wifi_gotip)))
 8008a1c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008a20:	2b0c      	cmp	r3, #12
 8008a22:	d00b      	beq.n	8008a3c <AT_ESP8266_ND+0x1f20>
															||(a->_ticks2 > 20000))  //Que analice luego de enviar por uart
 8008a24:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a28:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	f8d3 3cbc 	ldr.w	r3, [r3, #3260]	; 0xcbc
 8008a32:	f644 6220 	movw	r2, #20000	; 0x4e20
 8008a36:	4293      	cmp	r3, r2
 8008a38:	f341 82ef 	ble.w	800a01a <AT_ESP8266_ND+0x34fe>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 8008a3c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a40:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8008a4a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						if(AT_decode!=at_wifi_disconnect)
 8008a4e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008a52:	2b0a      	cmp	r3, #10
 8008a54:	d00f      	beq.n	8008a76 <AT_ESP8266_ND+0x1f5a>
						{
							a->_instruccion=0;	//Para que siga contando por timeout al recibir WIFI DISCONNECT//Finalizo la instrucci�n
 8008a56:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a5a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	2200      	movs	r2, #0
 8008a62:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
							a->_ejecucion=0;
 8008a66:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a6a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	2200      	movs	r2, #0
 8008a72:	f8c3 2ab4 	str.w	r2, [r3, #2740]	; 0xab4
							//HW_RESET(a);
							//HAL_GPIO_WritePin(a->RESET_PORT, a->RESET_PIN , GPIO_PIN_RESET);
							//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
						}

						a->_ticks2=0;
 8008a76:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a7a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	2200      	movs	r2, #0
 8008a82:	f8c3 2cbc 	str.w	r2, [r3, #3260]	; 0xcbc
					}

			}
			break;
 8008a86:	f001 bac8 	b.w	800a01a <AT_ESP8266_ND+0x34fe>
			//--------------------------------------------------------//
			//					Desconectar WiFi					  //
		    //--------------------------------------------------------//
			case 3:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 8008a8a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a8e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	2200      	movs	r2, #0
 8008a96:	f883 2498 	strb.w	r2, [r3, #1176]	; 0x498

				if(( a->_enviaruart==1)&&(AT_decode!=at_restart	)&&(AT_decode!=at_wifi_disconnect)&&(AT_decode!=at_deconectar_ok ))
 8008a9a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a9e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8008aa8:	2b01      	cmp	r3, #1
 8008aaa:	d14d      	bne.n	8008b48 <AT_ESP8266_ND+0x202c>
 8008aac:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008ab0:	2b04      	cmp	r3, #4
 8008ab2:	d049      	beq.n	8008b48 <AT_ESP8266_ND+0x202c>
 8008ab4:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008ab8:	2b0a      	cmp	r3, #10
 8008aba:	d045      	beq.n	8008b48 <AT_ESP8266_ND+0x202c>
 8008abc:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008ac0:	2b0d      	cmp	r3, #13
 8008ac2:	d041      	beq.n	8008b48 <AT_ESP8266_ND+0x202c>
						{
						a->_pasos=0;
 8008ac4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ac8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	2200      	movs	r2, #0
 8008ad0:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
						a->_ejecucion=1;
 8008ad4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ad8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	2201      	movs	r2, #1
 8008ae0:	f8c3 2ab4 	str.w	r2, [r3, #2740]	; 0xab4
						//------Generacion del comando para desconectar---------//
						strncat(a->_uart2snd,"AT+CWQAP\r\n",10);
 8008ae4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ae8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	f503 6493 	add.w	r4, r3, #1176	; 0x498
 8008af2:	4620      	mov	r0, r4
 8008af4:	f7f7 fb7e 	bl	80001f4 <strlen>
 8008af8:	4603      	mov	r3, r0
 8008afa:	4423      	add	r3, r4
 8008afc:	4941      	ldr	r1, [pc, #260]	; (8008c04 <AT_ESP8266_ND+0x20e8>)
 8008afe:	461a      	mov	r2, r3
 8008b00:	460b      	mov	r3, r1
 8008b02:	cb03      	ldmia	r3!, {r0, r1}
 8008b04:	6010      	str	r0, [r2, #0]
 8008b06:	6051      	str	r1, [r2, #4]
 8008b08:	8819      	ldrh	r1, [r3, #0]
 8008b0a:	789b      	ldrb	r3, [r3, #2]
 8008b0c:	8111      	strh	r1, [r2, #8]
 8008b0e:	7293      	strb	r3, [r2, #10]
						a->_n_uart2SND=strlen(a->_uart2snd);
 8008b10:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b14:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 8008b1e:	4618      	mov	r0, r3
 8008b20:	f7f7 fb68 	bl	80001f4 <strlen>
 8008b24:	4603      	mov	r3, r0
 8008b26:	461a      	mov	r2, r3
 8008b28:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b2c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	f8c3 2cf4 	str.w	r2, [r3, #3316]	; 0xcf4
						//------Generacion del comando para desconectar---------//
						a->_estado=300;
 8008b36:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b3a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8008b44:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						}

				a->_pasos++;
 8008b48:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b4c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	f8d3 3aac 	ldr.w	r3, [r3, #2732]	; 0xaac
 8008b56:	1c5a      	adds	r2, r3, #1
 8008b58:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b5c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
				if (((a->_enviaruart==0)&&((AT_decode==at_wifi_disconnect)||(AT_decode==at_wifi_connected)
 8008b66:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b6a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d113      	bne.n	8008ba0 <AT_ESP8266_ND+0x2084>
 8008b78:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008b7c:	2b0a      	cmp	r3, #10
 8008b7e:	d01b      	beq.n	8008bb8 <AT_ESP8266_ND+0x209c>
 8008b80:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008b84:	2b0b      	cmp	r3, #11
 8008b86:	d017      	beq.n	8008bb8 <AT_ESP8266_ND+0x209c>
																		  ||(AT_decode==at_wifi_gotip)
 8008b88:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008b8c:	2b0c      	cmp	r3, #12
 8008b8e:	d013      	beq.n	8008bb8 <AT_ESP8266_ND+0x209c>
																		  ||(AT_decode==at_restart	)
 8008b90:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008b94:	2b04      	cmp	r3, #4
 8008b96:	d00f      	beq.n	8008bb8 <AT_ESP8266_ND+0x209c>
																		  ||(AT_decode==at_deconectar_ok )))
 8008b98:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008b9c:	2b0d      	cmp	r3, #13
 8008b9e:	d00b      	beq.n	8008bb8 <AT_ESP8266_ND+0x209c>
																		  ||(a->_ticks > 5000))  //Que analice luego de enviar por uart
 8008ba0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ba4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	f8d3 3cb8 	ldr.w	r3, [r3, #3256]	; 0xcb8
 8008bae:	f241 3288 	movw	r2, #5000	; 0x1388
 8008bb2:	4293      	cmp	r3, r2
 8008bb4:	f341 8233 	ble.w	800a01e <AT_ESP8266_ND+0x3502>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 8008bb8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008bbc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8008bc6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						a->_instruccion=0;	//Finalizo la instrucci�n
 8008bca:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008bce:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	2200      	movs	r2, #0
 8008bd6:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						a->_ejecucion=0;
 8008bda:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008bde:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	2200      	movs	r2, #0
 8008be6:	f8c3 2ab4 	str.w	r2, [r3, #2740]	; 0xab4
						a->_ticks=0;
 8008bea:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008bee:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	2200      	movs	r2, #0
 8008bf6:	f8c3 2cb8 	str.w	r2, [r3, #3256]	; 0xcb8
					}
					//a->_ticks=0;						//Reseteo cada vez que entro
  		}
			break;
 8008bfa:	f001 ba10 	b.w	800a01e <AT_ESP8266_ND+0x3502>
 8008bfe:	bf00      	nop
 8008c00:	08010cbc 	.word	0x08010cbc
 8008c04:	08010cc8 	.word	0x08010cc8
			//--------------------------------------------------------//
			//					Multiples Conexiones     			  //
		    //--------------------------------------------------------//
			case 4:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 8008c08:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c0c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	2200      	movs	r2, #0
 8008c14:	f883 2498 	strb.w	r2, [r3, #1176]	; 0x498

				if(( a->_enviaruart==1)&&(AT_decode!=at_restart	)
 8008c18:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c1c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8008c26:	2b01      	cmp	r3, #1
 8008c28:	d16b      	bne.n	8008d02 <AT_ESP8266_ND+0x21e6>
 8008c2a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008c2e:	2b04      	cmp	r3, #4
 8008c30:	d067      	beq.n	8008d02 <AT_ESP8266_ND+0x21e6>
									   &&(AT_decode!=at_ok)
 8008c32:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008c36:	2b01      	cmp	r3, #1
 8008c38:	d063      	beq.n	8008d02 <AT_ESP8266_ND+0x21e6>
									   &&(AT_decode!=at_error))
 8008c3a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008c3e:	2b02      	cmp	r3, #2
 8008c40:	d05f      	beq.n	8008d02 <AT_ESP8266_ND+0x21e6>
						{
						a->_pasos=0;
 8008c42:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c46:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	2200      	movs	r2, #0
 8008c4e:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
						a->_ejecucion=1;
 8008c52:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c56:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	2201      	movs	r2, #1
 8008c5e:	f8c3 2ab4 	str.w	r2, [r3, #2740]	; 0xab4
						//------Generacion del comando para desconectar---------//
						if(a->_TCP_Local_Server_EN==1)
 8008c62:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c66:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8008c70:	2b01      	cmp	r3, #1
 8008c72:	d115      	bne.n	8008ca0 <AT_ESP8266_ND+0x2184>
						{
							strncat(a->_uart2snd,"AT+CIPMUX=1\r\n",strlen("AT+CIPMUX=1\r\n"));
 8008c74:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c78:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	f503 6493 	add.w	r4, r3, #1176	; 0x498
 8008c82:	4620      	mov	r0, r4
 8008c84:	f7f7 fab6 	bl	80001f4 <strlen>
 8008c88:	4603      	mov	r3, r0
 8008c8a:	4423      	add	r3, r4
 8008c8c:	4a52      	ldr	r2, [pc, #328]	; (8008dd8 <AT_ESP8266_ND+0x22bc>)
 8008c8e:	461c      	mov	r4, r3
 8008c90:	4613      	mov	r3, r2
 8008c92:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008c94:	6020      	str	r0, [r4, #0]
 8008c96:	6061      	str	r1, [r4, #4]
 8008c98:	60a2      	str	r2, [r4, #8]
 8008c9a:	881b      	ldrh	r3, [r3, #0]
 8008c9c:	81a3      	strh	r3, [r4, #12]
 8008c9e:	e014      	b.n	8008cca <AT_ESP8266_ND+0x21ae>
						}
						else
						{
							strncat(a->_uart2snd,"AT+CIPMUX=0\r\n",strlen("AT+CIPMUX=0\r\n"));
 8008ca0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ca4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	f503 6493 	add.w	r4, r3, #1176	; 0x498
 8008cae:	4620      	mov	r0, r4
 8008cb0:	f7f7 faa0 	bl	80001f4 <strlen>
 8008cb4:	4603      	mov	r3, r0
 8008cb6:	4423      	add	r3, r4
 8008cb8:	4a48      	ldr	r2, [pc, #288]	; (8008ddc <AT_ESP8266_ND+0x22c0>)
 8008cba:	461c      	mov	r4, r3
 8008cbc:	4613      	mov	r3, r2
 8008cbe:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008cc0:	6020      	str	r0, [r4, #0]
 8008cc2:	6061      	str	r1, [r4, #4]
 8008cc4:	60a2      	str	r2, [r4, #8]
 8008cc6:	881b      	ldrh	r3, [r3, #0]
 8008cc8:	81a3      	strh	r3, [r4, #12]
						}
						a->_n_uart2SND=strlen(a->_uart2snd);
 8008cca:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008cce:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 8008cd8:	4618      	mov	r0, r3
 8008cda:	f7f7 fa8b 	bl	80001f4 <strlen>
 8008cde:	4603      	mov	r3, r0
 8008ce0:	461a      	mov	r2, r3
 8008ce2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ce6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	f8c3 2cf4 	str.w	r2, [r3, #3316]	; 0xcf4
						//------Generacion del comando para desconectar---------//
						a->_estado=400;
 8008cf0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008cf4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8008cfe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						}

				a->_pasos++;
 8008d02:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008d06:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	f8d3 3aac 	ldr.w	r3, [r3, #2732]	; 0xaac
 8008d10:	1c5a      	adds	r2, r3, #1
 8008d12:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008d16:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
				if (((a->_enviaruart==0)&&((AT_decode==at_ok)||(AT_decode==at_wifi_connected)
 8008d20:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008d24:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d123      	bne.n	8008d7a <AT_ESP8266_ND+0x225e>
 8008d32:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008d36:	2b01      	cmp	r3, #1
 8008d38:	d02b      	beq.n	8008d92 <AT_ESP8266_ND+0x2276>
 8008d3a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008d3e:	2b0b      	cmp	r3, #11
 8008d40:	d027      	beq.n	8008d92 <AT_ESP8266_ND+0x2276>
															||(AT_decode==at_wifi_gotip)
 8008d42:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008d46:	2b0c      	cmp	r3, #12
 8008d48:	d023      	beq.n	8008d92 <AT_ESP8266_ND+0x2276>
															||(AT_decode==at_restart)
 8008d4a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008d4e:	2b04      	cmp	r3, #4
 8008d50:	d01f      	beq.n	8008d92 <AT_ESP8266_ND+0x2276>
															||(AT_decode==at_error)
 8008d52:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008d56:	2b02      	cmp	r3, #2
 8008d58:	d01b      	beq.n	8008d92 <AT_ESP8266_ND+0x2276>
															||(AT_decode==at_multiple_conn_ok)
 8008d5a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008d5e:	2b07      	cmp	r3, #7
 8008d60:	d017      	beq.n	8008d92 <AT_ESP8266_ND+0x2276>
															||(AT_decode==at_no_multiple_conn_ok)
 8008d62:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008d66:	2b08      	cmp	r3, #8
 8008d68:	d013      	beq.n	8008d92 <AT_ESP8266_ND+0x2276>
															||(AT_decode==at_multiple_conn_err)
 8008d6a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008d6e:	2b1e      	cmp	r3, #30
 8008d70:	d00f      	beq.n	8008d92 <AT_ESP8266_ND+0x2276>
															||(AT_decode==at_no_multiple_conn_err)))
 8008d72:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008d76:	2b1f      	cmp	r3, #31
 8008d78:	d00b      	beq.n	8008d92 <AT_ESP8266_ND+0x2276>
															||(a->_ticks > 5000))  //Que analice luego de enviar por uart
 8008d7a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008d7e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	f8d3 3cb8 	ldr.w	r3, [r3, #3256]	; 0xcb8
 8008d88:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d8c:	4293      	cmp	r3, r2
 8008d8e:	f341 8148 	ble.w	800a022 <AT_ESP8266_ND+0x3506>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 8008d92:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008d96:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8008da0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						a->_instruccion=0;	//Finalizo la instrucci�n
 8008da4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008da8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	2200      	movs	r2, #0
 8008db0:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						a->_ejecucion=0;
 8008db4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008db8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	2200      	movs	r2, #0
 8008dc0:	f8c3 2ab4 	str.w	r2, [r3, #2740]	; 0xab4
						a->_ticks=0;
 8008dc4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008dc8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	2200      	movs	r2, #0
 8008dd0:	f8c3 2cb8 	str.w	r2, [r3, #3256]	; 0xcb8
					}
					//a->_ticks=0;						//Reseteo cada vez que entro
  		}
			break;
 8008dd4:	f001 b925 	b.w	800a022 <AT_ESP8266_ND+0x3506>
 8008dd8:	08010cd4 	.word	0x08010cd4
 8008ddc:	08010ce4 	.word	0x08010ce4
			//--------------------------------------------------------//
			//					Especificar IP           			  //
		    //--------------------------------------------------------//
			case 5:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 8008de0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008de4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	2200      	movs	r2, #0
 8008dec:	f883 2498 	strb.w	r2, [r3, #1176]	; 0x498

				if(( a->_enviaruart==1)&&(AT_decode!=at_restart)
 8008df0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008df4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8008dfe:	2b01      	cmp	r3, #1
 8008e00:	f040 80f3 	bne.w	8008fea <AT_ESP8266_ND+0x24ce>
 8008e04:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008e08:	2b04      	cmp	r3, #4
 8008e0a:	f000 80ee 	beq.w	8008fea <AT_ESP8266_ND+0x24ce>
									   &&(AT_decode!=at_ok)
 8008e0e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008e12:	2b01      	cmp	r3, #1
 8008e14:	f000 80e9 	beq.w	8008fea <AT_ESP8266_ND+0x24ce>
									   &&(AT_decode!=at_error)
 8008e18:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008e1c:	2b02      	cmp	r3, #2
 8008e1e:	f000 80e4 	beq.w	8008fea <AT_ESP8266_ND+0x24ce>
									   &&(AT_decode!=at_def_ip_err)
 8008e22:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008e26:	2b21      	cmp	r3, #33	; 0x21
 8008e28:	f000 80df 	beq.w	8008fea <AT_ESP8266_ND+0x24ce>
									   &&(AT_decode!=at_def_ip_ok))
 8008e2c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008e30:	2b1b      	cmp	r3, #27
 8008e32:	f000 80da 	beq.w	8008fea <AT_ESP8266_ND+0x24ce>
						{
						a->_pasos=0;
 8008e36:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e3a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	2200      	movs	r2, #0
 8008e42:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
						a->_ejecucion=1;
 8008e46:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e4a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	2201      	movs	r2, #1
 8008e52:	f8c3 2ab4 	str.w	r2, [r3, #2740]	; 0xab4
						//------Generacion del comando para desconectar---------//
						strncat(a->_uart2snd,"AT+CIPSTA=",strlen("AT+CIPSTA="));
 8008e56:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e5a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	f503 6493 	add.w	r4, r3, #1176	; 0x498
 8008e64:	4620      	mov	r0, r4
 8008e66:	f7f7 f9c5 	bl	80001f4 <strlen>
 8008e6a:	4603      	mov	r3, r0
 8008e6c:	4423      	add	r3, r4
 8008e6e:	4990      	ldr	r1, [pc, #576]	; (80090b0 <AT_ESP8266_ND+0x2594>)
 8008e70:	461a      	mov	r2, r3
 8008e72:	460b      	mov	r3, r1
 8008e74:	cb03      	ldmia	r3!, {r0, r1}
 8008e76:	6010      	str	r0, [r2, #0]
 8008e78:	6051      	str	r1, [r2, #4]
 8008e7a:	8819      	ldrh	r1, [r3, #0]
 8008e7c:	789b      	ldrb	r3, [r3, #2]
 8008e7e:	8111      	strh	r1, [r2, #8]
 8008e80:	7293      	strb	r3, [r2, #10]
						strncat(a->_uart2snd,&comillas,1);
 8008e82:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e86:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 8008e90:	f207 212f 	addw	r1, r7, #559	; 0x22f
 8008e94:	2201      	movs	r2, #1
 8008e96:	4618      	mov	r0, r3
 8008e98:	f006 fc29 	bl	800f6ee <strncat>
						strncat(a->_uart2snd,a->_TCP_Local_Server_IP,strlen(a->_TCP_Local_Server_IP));
 8008e9c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ea0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	f503 6493 	add.w	r4, r3, #1176	; 0x498
 8008eaa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008eae:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	f103 054c 	add.w	r5, r3, #76	; 0x4c
 8008eb8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ebc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	334c      	adds	r3, #76	; 0x4c
 8008ec4:	4618      	mov	r0, r3
 8008ec6:	f7f7 f995 	bl	80001f4 <strlen>
 8008eca:	4603      	mov	r3, r0
 8008ecc:	461a      	mov	r2, r3
 8008ece:	4629      	mov	r1, r5
 8008ed0:	4620      	mov	r0, r4
 8008ed2:	f006 fc0c 	bl	800f6ee <strncat>
						strncat(a->_uart2snd,separador,3);
 8008ed6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008eda:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 8008ee4:	f507 710a 	add.w	r1, r7, #552	; 0x228
 8008ee8:	2203      	movs	r2, #3
 8008eea:	4618      	mov	r0, r3
 8008eec:	f006 fbff 	bl	800f6ee <strncat>
						strncat(a->_uart2snd,a->_TCP_Local_Server_GWY,strlen(a->_TCP_Local_Server_GWY));
 8008ef0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ef4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	f503 6493 	add.w	r4, r3, #1176	; 0x498
 8008efe:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f02:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	f103 0562 	add.w	r5, r3, #98	; 0x62
 8008f0c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f10:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	3362      	adds	r3, #98	; 0x62
 8008f18:	4618      	mov	r0, r3
 8008f1a:	f7f7 f96b 	bl	80001f4 <strlen>
 8008f1e:	4603      	mov	r3, r0
 8008f20:	461a      	mov	r2, r3
 8008f22:	4629      	mov	r1, r5
 8008f24:	4620      	mov	r0, r4
 8008f26:	f006 fbe2 	bl	800f6ee <strncat>
						strncat(a->_uart2snd,separador,3);
 8008f2a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f2e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 8008f38:	f507 710a 	add.w	r1, r7, #552	; 0x228
 8008f3c:	2203      	movs	r2, #3
 8008f3e:	4618      	mov	r0, r3
 8008f40:	f006 fbd5 	bl	800f6ee <strncat>
						strncat(a->_uart2snd,a->_TCP_Local_Server_MSK,strlen(a->_TCP_Local_Server_MSK));
 8008f44:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f48:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	f503 6493 	add.w	r4, r3, #1176	; 0x498
 8008f52:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f56:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	f103 0572 	add.w	r5, r3, #114	; 0x72
 8008f60:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f64:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	3372      	adds	r3, #114	; 0x72
 8008f6c:	4618      	mov	r0, r3
 8008f6e:	f7f7 f941 	bl	80001f4 <strlen>
 8008f72:	4603      	mov	r3, r0
 8008f74:	461a      	mov	r2, r3
 8008f76:	4629      	mov	r1, r5
 8008f78:	4620      	mov	r0, r4
 8008f7a:	f006 fbb8 	bl	800f6ee <strncat>
						strncat(a->_uart2snd,&comillas,1);
 8008f7e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f82:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 8008f8c:	f207 212f 	addw	r1, r7, #559	; 0x22f
 8008f90:	2201      	movs	r2, #1
 8008f92:	4618      	mov	r0, r3
 8008f94:	f006 fbab 	bl	800f6ee <strncat>
						strncat(a->_uart2snd,finalizar2,2);//strncat(a->_uart2snd,finalizar2,strlen(finalizar2));
 8008f98:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f9c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 8008fa6:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 8008faa:	2202      	movs	r2, #2
 8008fac:	4618      	mov	r0, r3
 8008fae:	f006 fb9e 	bl	800f6ee <strncat>

						a->_n_uart2SND=strlen(a->_uart2snd);
 8008fb2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008fb6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	f7f7 f917 	bl	80001f4 <strlen>
 8008fc6:	4603      	mov	r3, r0
 8008fc8:	461a      	mov	r2, r3
 8008fca:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008fce:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	f8c3 2cf4 	str.w	r2, [r3, #3316]	; 0xcf4
						//------Generacion del comando para desconectar---------//
						a->_estado=500;
 8008fd8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008fdc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8008fe6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						}

				a->_pasos++;
 8008fea:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008fee:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	f8d3 3aac 	ldr.w	r3, [r3, #2732]	; 0xaac
 8008ff8:	1c5a      	adds	r2, r3, #1
 8008ffa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ffe:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
				if (((a->_enviaruart==0)&&((AT_decode==at_ok)||(AT_decode==at_wifi_connected)
 8009008:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800900c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8009016:	2b00      	cmp	r3, #0
 8009018:	d11b      	bne.n	8009052 <AT_ESP8266_ND+0x2536>
 800901a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800901e:	2b01      	cmp	r3, #1
 8009020:	d023      	beq.n	800906a <AT_ESP8266_ND+0x254e>
 8009022:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009026:	2b0b      	cmp	r3, #11
 8009028:	d01f      	beq.n	800906a <AT_ESP8266_ND+0x254e>
															 ||(AT_decode==at_wifi_gotip)
 800902a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800902e:	2b0c      	cmp	r3, #12
 8009030:	d01b      	beq.n	800906a <AT_ESP8266_ND+0x254e>
															 ||(AT_decode==at_restart)
 8009032:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009036:	2b04      	cmp	r3, #4
 8009038:	d017      	beq.n	800906a <AT_ESP8266_ND+0x254e>
															 ||(AT_decode==at_error)
 800903a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800903e:	2b02      	cmp	r3, #2
 8009040:	d013      	beq.n	800906a <AT_ESP8266_ND+0x254e>
															 ||(AT_decode==at_def_ip_err)
 8009042:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009046:	2b21      	cmp	r3, #33	; 0x21
 8009048:	d00f      	beq.n	800906a <AT_ESP8266_ND+0x254e>
															 ||(AT_decode==at_def_ip_ok)))
 800904a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800904e:	2b1b      	cmp	r3, #27
 8009050:	d00b      	beq.n	800906a <AT_ESP8266_ND+0x254e>
															 ||(a->_ticks > 5000))  //Que analice luego de enviar por uart
 8009052:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009056:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	f8d3 3cb8 	ldr.w	r3, [r3, #3256]	; 0xcb8
 8009060:	f241 3288 	movw	r2, #5000	; 0x1388
 8009064:	4293      	cmp	r3, r2
 8009066:	f340 87de 	ble.w	800a026 <AT_ESP8266_ND+0x350a>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 800906a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800906e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8009078:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						a->_instruccion=0;	//Finalizo la instrucci�n
 800907c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009080:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	2200      	movs	r2, #0
 8009088:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						a->_ejecucion=0;
 800908c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009090:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	2200      	movs	r2, #0
 8009098:	f8c3 2ab4 	str.w	r2, [r3, #2740]	; 0xab4
						a->_ticks=0;
 800909c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80090a0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	2200      	movs	r2, #0
 80090a8:	f8c3 2cb8 	str.w	r2, [r3, #3256]	; 0xcb8
					}
					//a->_ticks=0;						//Reseteo cada vez que entro
  		}
			break;
 80090ac:	f000 bfbb 	b.w	800a026 <AT_ESP8266_ND+0x350a>
 80090b0:	08010bc4 	.word	0x08010bc4
			//--------------------------------------------------------//
			//					Conectar a TCP Server    			  //
		    //--------------------------------------------------------//
			case 6:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 80090b4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80090b8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	2200      	movs	r2, #0
 80090c0:	f883 2498 	strb.w	r2, [r3, #1176]	; 0x498

				if(( a->_enviaruart==1)&&(AT_decode!=at_wifi_connected)
 80090c4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80090c8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 80090d2:	2b01      	cmp	r3, #1
 80090d4:	f040 80e2 	bne.w	800929c <AT_ESP8266_ND+0x2780>
 80090d8:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80090dc:	2b0b      	cmp	r3, #11
 80090de:	f000 80dd 	beq.w	800929c <AT_ESP8266_ND+0x2780>
									   &&(AT_decode!=at_wifi_gotip)
 80090e2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80090e6:	2b0c      	cmp	r3, #12
 80090e8:	f000 80d8 	beq.w	800929c <AT_ESP8266_ND+0x2780>
									   &&(AT_decode!=at_tcp_alrdy_cnntd_err)
 80090ec:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80090f0:	2b0e      	cmp	r3, #14
 80090f2:	f000 80d3 	beq.w	800929c <AT_ESP8266_ND+0x2780>
									   &&(AT_decode!=at_tcp_conectado)
 80090f6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80090fa:	2b0f      	cmp	r3, #15
 80090fc:	f000 80ce 	beq.w	800929c <AT_ESP8266_ND+0x2780>
									   &&(AT_decode!=at_tcp_desconectado)
 8009100:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009104:	2b10      	cmp	r3, #16
 8009106:	f000 80c9 	beq.w	800929c <AT_ESP8266_ND+0x2780>
									   &&(AT_decode!=at_error))
 800910a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800910e:	2b02      	cmp	r3, #2
 8009110:	f000 80c4 	beq.w	800929c <AT_ESP8266_ND+0x2780>
						{
						a->_pasos=0;
 8009114:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009118:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	2200      	movs	r2, #0
 8009120:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
						a->_ejecucion=1;
 8009124:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009128:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	2201      	movs	r2, #1
 8009130:	f8c3 2ab4 	str.w	r2, [r3, #2740]	; 0xab4
						//------Generacion del comando ---------//
						strncat(a->_uart2snd,"AT+CIPSTART=",strlen("AT+CIPSTART="));
 8009134:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009138:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	f503 6493 	add.w	r4, r3, #1176	; 0x498
 8009142:	4620      	mov	r0, r4
 8009144:	f7f7 f856 	bl	80001f4 <strlen>
 8009148:	4603      	mov	r3, r0
 800914a:	4423      	add	r3, r4
 800914c:	4aa7      	ldr	r2, [pc, #668]	; (80093ec <AT_ESP8266_ND+0x28d0>)
 800914e:	461c      	mov	r4, r3
 8009150:	4613      	mov	r3, r2
 8009152:	cb07      	ldmia	r3!, {r0, r1, r2}
 8009154:	6020      	str	r0, [r4, #0]
 8009156:	6061      	str	r1, [r4, #4]
 8009158:	60a2      	str	r2, [r4, #8]
 800915a:	781b      	ldrb	r3, [r3, #0]
 800915c:	7323      	strb	r3, [r4, #12]
						strncat(a->_uart2snd,&comillas,1);
 800915e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009162:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 800916c:	f207 212f 	addw	r1, r7, #559	; 0x22f
 8009170:	2201      	movs	r2, #1
 8009172:	4618      	mov	r0, r3
 8009174:	f006 fabb 	bl	800f6ee <strncat>
						strncat(a->_uart2snd,"TCP",strlen("TCP"));
 8009178:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800917c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	f503 6493 	add.w	r4, r3, #1176	; 0x498
 8009186:	4620      	mov	r0, r4
 8009188:	f7f7 f834 	bl	80001f4 <strlen>
 800918c:	4603      	mov	r3, r0
 800918e:	4423      	add	r3, r4
 8009190:	4a97      	ldr	r2, [pc, #604]	; (80093f0 <AT_ESP8266_ND+0x28d4>)
 8009192:	6810      	ldr	r0, [r2, #0]
 8009194:	6018      	str	r0, [r3, #0]
						strncat(a->_uart2snd,separador,3);
 8009196:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800919a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 80091a4:	f507 710a 	add.w	r1, r7, #552	; 0x228
 80091a8:	2203      	movs	r2, #3
 80091aa:	4618      	mov	r0, r3
 80091ac:	f006 fa9f 	bl	800f6ee <strncat>
						strncat(a->_uart2snd,a->_TCP_Remote_Server_IP,strlen(a->_TCP_Remote_Server_IP));
 80091b0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80091b4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	f503 6493 	add.w	r4, r3, #1176	; 0x498
 80091be:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80091c2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	f103 0536 	add.w	r5, r3, #54	; 0x36
 80091cc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80091d0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	3336      	adds	r3, #54	; 0x36
 80091d8:	4618      	mov	r0, r3
 80091da:	f7f7 f80b 	bl	80001f4 <strlen>
 80091de:	4603      	mov	r3, r0
 80091e0:	461a      	mov	r2, r3
 80091e2:	4629      	mov	r1, r5
 80091e4:	4620      	mov	r0, r4
 80091e6:	f006 fa82 	bl	800f6ee <strncat>
						strncat(a->_uart2snd,separador2,2);
 80091ea:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80091ee:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 80091f8:	f507 7108 	add.w	r1, r7, #544	; 0x220
 80091fc:	2202      	movs	r2, #2
 80091fe:	4618      	mov	r0, r3
 8009200:	f006 fa75 	bl	800f6ee <strncat>
						strncat(a->_uart2snd,a->_TCP_Remote_Server_Port,strlen(a->_TCP_Remote_Server_Port));
 8009204:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009208:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	f503 6493 	add.w	r4, r3, #1176	; 0x498
 8009212:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009216:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	f103 0546 	add.w	r5, r3, #70	; 0x46
 8009220:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009224:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	3346      	adds	r3, #70	; 0x46
 800922c:	4618      	mov	r0, r3
 800922e:	f7f6 ffe1 	bl	80001f4 <strlen>
 8009232:	4603      	mov	r3, r0
 8009234:	461a      	mov	r2, r3
 8009236:	4629      	mov	r1, r5
 8009238:	4620      	mov	r0, r4
 800923a:	f006 fa58 	bl	800f6ee <strncat>
						strncat(a->_uart2snd,finalizar2,strlen(finalizar2));
 800923e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009242:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	f503 6493 	add.w	r4, r3, #1176	; 0x498
 800924c:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8009250:	4618      	mov	r0, r3
 8009252:	f7f6 ffcf 	bl	80001f4 <strlen>
 8009256:	4602      	mov	r2, r0
 8009258:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800925c:	4619      	mov	r1, r3
 800925e:	4620      	mov	r0, r4
 8009260:	f006 fa45 	bl	800f6ee <strncat>
						a->_n_uart2SND=strlen(a->_uart2snd);
 8009264:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009268:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 8009272:	4618      	mov	r0, r3
 8009274:	f7f6 ffbe 	bl	80001f4 <strlen>
 8009278:	4603      	mov	r3, r0
 800927a:	461a      	mov	r2, r3
 800927c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009280:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	f8c3 2cf4 	str.w	r2, [r3, #3316]	; 0xcf4
						a->_estado=600;
 800928a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800928e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	f44f 7216 	mov.w	r2, #600	; 0x258
 8009298:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						//------Generacion del comando ---------//
						}

				a->_pasos++;
 800929c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80092a0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	f8d3 3aac 	ldr.w	r3, [r3, #2732]	; 0xaac
 80092aa:	1c5a      	adds	r2, r3, #1
 80092ac:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80092b0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
				if (((a->_enviaruart==0)&&((AT_decode==at_wifi_disconnect)||(AT_decode==at_wifi_connected)
 80092ba:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80092be:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d124      	bne.n	8009316 <AT_ESP8266_ND+0x27fa>
 80092cc:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80092d0:	2b0a      	cmp	r3, #10
 80092d2:	d02c      	beq.n	800932e <AT_ESP8266_ND+0x2812>
 80092d4:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80092d8:	2b0b      	cmp	r3, #11
 80092da:	d028      	beq.n	800932e <AT_ESP8266_ND+0x2812>
																		  ||(AT_decode==at_fail)
 80092dc:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80092e0:	2b03      	cmp	r3, #3
 80092e2:	d024      	beq.n	800932e <AT_ESP8266_ND+0x2812>
																		  ||(AT_decode==at_wifi_gotip)
 80092e4:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80092e8:	2b0c      	cmp	r3, #12
 80092ea:	d020      	beq.n	800932e <AT_ESP8266_ND+0x2812>
																		  ||(AT_decode==at_tcp_alrdy_cnntd_err)
 80092ec:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80092f0:	2b0e      	cmp	r3, #14
 80092f2:	d01c      	beq.n	800932e <AT_ESP8266_ND+0x2812>
																		  ||(AT_decode==at_tcp_conectado)
 80092f4:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80092f8:	2b0f      	cmp	r3, #15
 80092fa:	d018      	beq.n	800932e <AT_ESP8266_ND+0x2812>
																		  ||(AT_decode==at_tcp_desconectado)
 80092fc:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009300:	2b10      	cmp	r3, #16
 8009302:	d014      	beq.n	800932e <AT_ESP8266_ND+0x2812>
																		  ||(AT_decode==at_error)
 8009304:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009308:	2b02      	cmp	r3, #2
 800930a:	d010      	beq.n	800932e <AT_ESP8266_ND+0x2812>
																		  ||(AT_decode==at_busy_p)))
 800930c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009310:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009314:	d00b      	beq.n	800932e <AT_ESP8266_ND+0x2812>
																		  ||(a->_ticks > 5000))//210419 if (((a->_enviaruart==0)&&((estado==5)||(estado==6)||(estado==7)||(estado==13)||(estado==14)))||(a->_ticks > 5000))  //Que analice luego de enviar por uart
 8009316:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800931a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	f8d3 3cb8 	ldr.w	r3, [r3, #3256]	; 0xcb8
 8009324:	f241 3288 	movw	r2, #5000	; 0x1388
 8009328:	4293      	cmp	r3, r2
 800932a:	f340 867e 	ble.w	800a02a <AT_ESP8266_ND+0x350e>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 800932e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009332:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 800933c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						a->_instruccion=0;	//Finalizo la instrucci�n
 8009340:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009344:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	2200      	movs	r2, #0
 800934c:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						a->_ejecucion=0;
 8009350:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009354:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	2200      	movs	r2, #0
 800935c:	f8c3 2ab4 	str.w	r2, [r3, #2740]	; 0xab4
						a->_ticks=0;
 8009360:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009364:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	2200      	movs	r2, #0
 800936c:	f8c3 2cb8 	str.w	r2, [r3, #3256]	; 0xcb8
					}
					//a->_ticks=0;						//Reseteo cada vez que entro
			}
			break;
 8009370:	f000 be5b 	b.w	800a02a <AT_ESP8266_ND+0x350e>
			//--------------------------------------------------------//
			//			   Enviar datos a TCP Server    			  //
		    //--------------------------------------------------------//
			case 7:
			{
					unsigned char caracteres[8]="";
 8009374:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009378:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 800937c:	2200      	movs	r2, #0
 800937e:	601a      	str	r2, [r3, #0]
 8009380:	2200      	movs	r2, #0
 8009382:	605a      	str	r2, [r3, #4]



				if((AT_decode==at_tcp_desconectado)||(AT_decode==at_wifi_disconnect)||(AT_decode==at_fail)
 8009384:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009388:	2b10      	cmp	r3, #16
 800938a:	d00b      	beq.n	80093a4 <AT_ESP8266_ND+0x2888>
 800938c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009390:	2b0a      	cmp	r3, #10
 8009392:	d007      	beq.n	80093a4 <AT_ESP8266_ND+0x2888>
 8009394:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009398:	2b03      	cmp	r3, #3
 800939a:	d003      	beq.n	80093a4 <AT_ESP8266_ND+0x2888>
						||(AT_decode==at_error))//240420
 800939c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80093a0:	2b02      	cmp	r3, #2
 80093a2:	d127      	bne.n	80093f4 <AT_ESP8266_ND+0x28d8>
				{
					a->_estado=AT_decode;
 80093a4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80093a8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 80093b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					a->_instruccion=0;		//Finalizo la instrucci�n
 80093b6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80093ba:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	2200      	movs	r2, #0
 80093c2:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
					a->_ejecucion=0;
 80093c6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80093ca:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	2200      	movs	r2, #0
 80093d2:	f8c3 2ab4 	str.w	r2, [r3, #2740]	; 0xab4
					a->_subpaso=0;
 80093d6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80093da:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	2200      	movs	r2, #0
 80093e2:	f8c3 2d50 	str.w	r2, [r3, #3408]	; 0xd50
									a->_subpaso=0;
								}
				}
					//a->_ticks=0;						//Reseteo cada vez que entro
			}
			break;
 80093e6:	f000 be22 	b.w	800a02e <AT_ESP8266_ND+0x3512>
 80093ea:	bf00      	nop
 80093ec:	08010cf4 	.word	0x08010cf4
 80093f0:	08010d04 	.word	0x08010d04
							if( (a->_enviaruart==1)&&(a->_subpaso==0))
 80093f4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80093f8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8009402:	2b01      	cmp	r3, #1
 8009404:	f040 80d1 	bne.w	80095aa <AT_ESP8266_ND+0x2a8e>
 8009408:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800940c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 8009416:	2b00      	cmp	r3, #0
 8009418:	f040 80c7 	bne.w	80095aa <AT_ESP8266_ND+0x2a8e>
										a->_ejecucion=1;
 800941c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009420:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	2201      	movs	r2, #1
 8009428:	f8c3 2ab4 	str.w	r2, [r3, #2740]	; 0xab4
										a->_estado=24;
 800942c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009430:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	2218      	movs	r2, #24
 8009438:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
										a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 800943c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009440:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	2200      	movs	r2, #0
 8009448:	f883 2498 	strb.w	r2, [r3, #1176]	; 0x498
										a->_subpaso++;					//Asigno para que no vuelva a entrar
 800944c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009450:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 800945a:	1c5a      	adds	r2, r3, #1
 800945c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009460:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	f8c3 2d50 	str.w	r2, [r3, #3408]	; 0xd50
										a->_pasos=0;
 800946a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800946e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	2200      	movs	r2, #0
 8009476:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
										a->_okenvio[0]='\0';	  //Borro el vector a->_okenvio
 800947a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800947e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	2200      	movs	r2, #0
 8009486:	f883 2ab8 	strb.w	r2, [r3, #2744]	; 0xab8
										strncat(a->_uart2snd,"AT+CIPSEND=",strlen("AT+CIPSEND="));
 800948a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800948e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	f503 6493 	add.w	r4, r3, #1176	; 0x498
 8009498:	4620      	mov	r0, r4
 800949a:	f7f6 feab 	bl	80001f4 <strlen>
 800949e:	4603      	mov	r3, r0
 80094a0:	4423      	add	r3, r4
 80094a2:	4ac0      	ldr	r2, [pc, #768]	; (80097a4 <AT_ESP8266_ND+0x2c88>)
 80094a4:	461c      	mov	r4, r3
 80094a6:	4613      	mov	r3, r2
 80094a8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80094aa:	6020      	str	r0, [r4, #0]
 80094ac:	6061      	str	r1, [r4, #4]
 80094ae:	60a2      	str	r2, [r4, #8]
										INTOA(a->_n_D2SND, caracteres);	//INTOA(strlen(a->_data2SND), caracteres);		        //Longitud  de datos a enviar
 80094b0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80094b4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	f8d3 3cf0 	ldr.w	r3, [r3, #3312]	; 0xcf0
 80094be:	f107 0214 	add.w	r2, r7, #20
 80094c2:	4611      	mov	r1, r2
 80094c4:	4618      	mov	r0, r3
 80094c6:	f005 fe8b 	bl	800f1e0 <INTOA>
										strncat(a->_uart2snd,caracteres,strlen(caracteres));//strncat(a->_uart2snd,caracteres,strlen(caracteres));//AT+CIPSEND="cdad caracteres"
 80094ca:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80094ce:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	f503 6493 	add.w	r4, r3, #1176	; 0x498
 80094d8:	f107 0314 	add.w	r3, r7, #20
 80094dc:	4618      	mov	r0, r3
 80094de:	f7f6 fe89 	bl	80001f4 <strlen>
 80094e2:	4602      	mov	r2, r0
 80094e4:	f107 0314 	add.w	r3, r7, #20
 80094e8:	4619      	mov	r1, r3
 80094ea:	4620      	mov	r0, r4
 80094ec:	f006 f8ff 	bl	800f6ee <strncat>
										strcpy(a->_okenvio,a->_uart2snd);
 80094f0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80094f4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	f603 22b8 	addw	r2, r3, #2744	; 0xab8
 80094fe:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009502:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 800950c:	4619      	mov	r1, r3
 800950e:	4610      	mov	r0, r2
 8009510:	f006 f9ce 	bl	800f8b0 <strcpy>
										strncat(a->_uart2snd,finalizar2,2);//strncat(a->_uart2snd,finalizar2,strlen(finalizar2));
 8009514:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009518:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 8009522:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 8009526:	2202      	movs	r2, #2
 8009528:	4618      	mov	r0, r3
 800952a:	f006 f8e0 	bl	800f6ee <strncat>
										a->_n_uart2SND=strlen(a->_uart2snd);
 800952e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009532:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 800953c:	4618      	mov	r0, r3
 800953e:	f7f6 fe59 	bl	80001f4 <strlen>
 8009542:	4603      	mov	r3, r0
 8009544:	461a      	mov	r2, r3
 8009546:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800954a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	f8c3 2cf4 	str.w	r2, [r3, #3316]	; 0xcf4
										strncat(a->_okenvio,"\r\r\n\r\nOK\r\n> ",strlen("\r\r\n\r\nOK\r\n> "));
 8009554:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009558:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	f603 24b8 	addw	r4, r3, #2744	; 0xab8
 8009562:	4620      	mov	r0, r4
 8009564:	f7f6 fe46 	bl	80001f4 <strlen>
 8009568:	4603      	mov	r3, r0
 800956a:	4423      	add	r3, r4
 800956c:	4a8e      	ldr	r2, [pc, #568]	; (80097a8 <AT_ESP8266_ND+0x2c8c>)
 800956e:	461c      	mov	r4, r3
 8009570:	4613      	mov	r3, r2
 8009572:	cb07      	ldmia	r3!, {r0, r1, r2}
 8009574:	6020      	str	r0, [r4, #0]
 8009576:	6061      	str	r1, [r4, #4]
 8009578:	60a2      	str	r2, [r4, #8]
										a->_debug_count3++;
 800957a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800957e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	f8d3 3d10 	ldr.w	r3, [r3, #3344]	; 0xd10
 8009588:	1c5a      	adds	r2, r3, #1
 800958a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800958e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	f8c3 2d10 	str.w	r2, [r3, #3344]	; 0xd10
										a->_estado=700;
 8009598:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800959c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 80095a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								a->_pasos++;
 80095aa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80095ae:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	f8d3 3aac 	ldr.w	r3, [r3, #2732]	; 0xaac
 80095b8:	1c5a      	adds	r2, r3, #1
 80095ba:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80095be:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
							if ((a->_enviaruart==0)&&(AT_decode!=at_tcp_enviado_ok)
 80095c8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80095cc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	f040 80a6 	bne.w	8009728 <AT_ESP8266_ND+0x2c0c>
 80095dc:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80095e0:	2b13      	cmp	r3, #19
 80095e2:	f000 80a1 	beq.w	8009728 <AT_ESP8266_ND+0x2c0c>
												   &&((strcmp(a->_uartRCVD,a->_okenvio)==0)||(AT_decode==at_ok)
 80095e6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80095ea:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	f503 62d3 	add.w	r2, r3, #1688	; 0x698
 80095f4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80095f8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	f603 23b8 	addw	r3, r3, #2744	; 0xab8
 8009602:	4619      	mov	r1, r3
 8009604:	4610      	mov	r0, r2
 8009606:	f7f6 fdeb 	bl	80001e0 <strcmp>
 800960a:	4603      	mov	r3, r0
 800960c:	2b00      	cmp	r3, #0
 800960e:	d01b      	beq.n	8009648 <AT_ESP8266_ND+0x2b2c>
 8009610:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009614:	2b01      	cmp	r3, #1
 8009616:	d017      	beq.n	8009648 <AT_ESP8266_ND+0x2b2c>
														   	   	   	   	   	   	   	   	   ||(AT_decode==at_tcp_ok_to_send)
 8009618:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800961c:	2b14      	cmp	r3, #20
 800961e:	d013      	beq.n	8009648 <AT_ESP8266_ND+0x2b2c>
																						   ||((a->_ticks > 5000)&&(a->_subpaso==1))))
 8009620:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009624:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	f8d3 3cb8 	ldr.w	r3, [r3, #3256]	; 0xcb8
 800962e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009632:	4293      	cmp	r3, r2
 8009634:	dd78      	ble.n	8009728 <AT_ESP8266_ND+0x2c0c>
 8009636:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800963a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 8009644:	2b01      	cmp	r3, #1
 8009646:	d16f      	bne.n	8009728 <AT_ESP8266_ND+0x2c0c>
								if(a->_ticks > 5000)//if((a->_ticks > 5000)||(a->_subpaso==1))//((a->_ticks > 5000)&&(a->_subpaso==1))
 8009648:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800964c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	f8d3 3cb8 	ldr.w	r3, [r3, #3256]	; 0xcb8
 8009656:	f241 3288 	movw	r2, #5000	; 0x1388
 800965a:	4293      	cmp	r3, r2
 800965c:	dd0e      	ble.n	800967c <AT_ESP8266_ND+0x2b60>
									a->_debug_count7++;//-----------------------------Cuento los que entran por timeout
 800965e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009662:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	f8d3 3d20 	ldr.w	r3, [r3, #3360]	; 0xd20
 800966c:	1c5a      	adds	r2, r3, #1
 800966e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009672:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20
								a->_debug_count4++;
 800967c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009680:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	f8d3 3d14 	ldr.w	r3, [r3, #3348]	; 0xd14
 800968a:	1c5a      	adds	r2, r3, #1
 800968c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009690:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
								a->_subpaso++;
 800969a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800969e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 80096a8:	1c5a      	adds	r2, r3, #1
 80096aa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80096ae:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	f8c3 2d50 	str.w	r2, [r3, #3408]	; 0xd50
								a->_enviaruart=1;
 80096b8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80096bc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	2201      	movs	r2, #1
 80096c4:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
								CopiaVector(a->_uart2snd,a->_data2SND,a->_n_D2SND,1,'a');//strcpy(a->_uart2snd,a->_data2SND);
 80096c8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80096cc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	f503 6093 	add.w	r0, r3, #1176	; 0x498
 80096d6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80096da:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	f503 7126 	add.w	r1, r3, #664	; 0x298
 80096e4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80096e8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	f8d3 2cf0 	ldr.w	r2, [r3, #3312]	; 0xcf0
 80096f2:	2361      	movs	r3, #97	; 0x61
 80096f4:	9300      	str	r3, [sp, #0]
 80096f6:	2301      	movs	r3, #1
 80096f8:	f005 fda6 	bl	800f248 <CopiaVector>
								a->_n_uart2SND=a->_n_D2SND; //Asigno cantidad de elementos del vector
 80096fc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009700:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	f8d3 2cf0 	ldr.w	r2, [r3, #3312]	; 0xcf0
 800970a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800970e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	f8c3 2cf4 	str.w	r2, [r3, #3316]	; 0xcf4
								a->_ticks=0;//----------------------------------Evito que entre de toque en el siguiente
 8009718:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800971c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	2200      	movs	r2, #0
 8009724:	f8c3 2cb8 	str.w	r2, [r3, #3256]	; 0xcb8
							if((a->_estado==700)&&((AT_decode==at_tcp_enviado_ok)||(a->_ticks > 5000)
 8009728:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800972c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009736:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800973a:	f040 8478 	bne.w	800a02e <AT_ESP8266_ND+0x3512>
 800973e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009742:	2b13      	cmp	r3, #19
 8009744:	d032      	beq.n	80097ac <AT_ESP8266_ND+0x2c90>
 8009746:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800974a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	f8d3 3cb8 	ldr.w	r3, [r3, #3256]	; 0xcb8
 8009754:	f241 3288 	movw	r2, #5000	; 0x1388
 8009758:	4293      	cmp	r3, r2
 800975a:	dc27      	bgt.n	80097ac <AT_ESP8266_ND+0x2c90>
																				 ||(AT_decode==at_wifi_disconnect)
 800975c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009760:	2b0a      	cmp	r3, #10
 8009762:	d023      	beq.n	80097ac <AT_ESP8266_ND+0x2c90>
																				 ||(AT_decode==at_fail)
 8009764:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009768:	2b03      	cmp	r3, #3
 800976a:	d01f      	beq.n	80097ac <AT_ESP8266_ND+0x2c90>
																				 ||(AT_decode==at_wifi_connected)
 800976c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009770:	2b0b      	cmp	r3, #11
 8009772:	d01b      	beq.n	80097ac <AT_ESP8266_ND+0x2c90>
																				 ||(AT_decode==at_wifi_gotip)
 8009774:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009778:	2b0c      	cmp	r3, #12
 800977a:	d017      	beq.n	80097ac <AT_ESP8266_ND+0x2c90>
																				 ||(AT_decode==at_tcp_desconectado)
 800977c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009780:	2b10      	cmp	r3, #16
 8009782:	d013      	beq.n	80097ac <AT_ESP8266_ND+0x2c90>
																				 ||(AT_decode==at_tcp_snd_err)
 8009784:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009788:	2b11      	cmp	r3, #17
 800978a:	d00f      	beq.n	80097ac <AT_ESP8266_ND+0x2c90>
																				 ||(AT_decode==at_tcp_enviado_error)
 800978c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009790:	2b12      	cmp	r3, #18
 8009792:	d00b      	beq.n	80097ac <AT_ESP8266_ND+0x2c90>
																				 ||(AT_decode==at_busy_p)))
 8009794:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009798:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800979c:	f040 8447 	bne.w	800a02e <AT_ESP8266_ND+0x3512>
 80097a0:	e004      	b.n	80097ac <AT_ESP8266_ND+0x2c90>
 80097a2:	bf00      	nop
 80097a4:	08010d08 	.word	0x08010d08
 80097a8:	08010d14 	.word	0x08010d14
									a->_debug_count5++;
 80097ac:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80097b0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	f8d3 3d18 	ldr.w	r3, [r3, #3352]	; 0xd18
 80097ba:	1c5a      	adds	r2, r3, #1
 80097bc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80097c0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	f8c3 2d18 	str.w	r2, [r3, #3352]	; 0xd18
									if(a->_ticks > 5000)
 80097ca:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80097ce:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	f8d3 3cb8 	ldr.w	r3, [r3, #3256]	; 0xcb8
 80097d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80097dc:	4293      	cmp	r3, r2
 80097de:	dd25      	ble.n	800982c <AT_ESP8266_ND+0x2d10>
										a->_debug_count8++;
 80097e0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80097e4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	f8d3 3d24 	ldr.w	r3, [r3, #3364]	; 0xd24
 80097ee:	1c5a      	adds	r2, r3, #1
 80097f0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80097f4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	f8c3 2d24 	str.w	r2, [r3, #3364]	; 0xd24
										a->_subpaso++;
 80097fe:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009802:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 800980c:	1c5a      	adds	r2, r3, #1
 800980e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009812:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	f8c3 2d50 	str.w	r2, [r3, #3408]	; 0xd50
										a->_ticks=0;
 800981c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009820:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	2200      	movs	r2, #0
 8009828:	f8c3 2cb8 	str.w	r2, [r3, #3256]	; 0xcb8
									if((a->_subpaso > 2)&&(AT_decode!=at_tcp_desconectado)&&(AT_decode!=at_wifi_disconnect))//--------------No considero los etados de fallas por TCP o WIFI caido
 800982c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009830:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 800983a:	2b02      	cmp	r3, #2
 800983c:	dd10      	ble.n	8009860 <AT_ESP8266_ND+0x2d44>
 800983e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009842:	2b10      	cmp	r3, #16
 8009844:	d00c      	beq.n	8009860 <AT_ESP8266_ND+0x2d44>
 8009846:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800984a:	2b0a      	cmp	r3, #10
 800984c:	d008      	beq.n	8009860 <AT_ESP8266_ND+0x2d44>
										a->_estado=15;//-----------------------------Error de Env�o TCP
 800984e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009852:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	220f      	movs	r2, #15
 800985a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 800985e:	e008      	b.n	8009872 <AT_ESP8266_ND+0x2d56>
										a->_estado=AT_decode;	//Devuelvo el estado
 8009860:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009864:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 800986e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									a->_instruccion=0;		//Finalizo la instrucci�n
 8009872:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009876:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	2200      	movs	r2, #0
 800987e:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
									a->_ejecucion=0;
 8009882:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009886:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	2200      	movs	r2, #0
 800988e:	f8c3 2ab4 	str.w	r2, [r3, #2740]	; 0xab4
									a->_subpaso=0;
 8009892:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009896:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	2200      	movs	r2, #0
 800989e:	f8c3 2d50 	str.w	r2, [r3, #3408]	; 0xd50
			break;
 80098a2:	e3c4      	b.n	800a02e <AT_ESP8266_ND+0x3512>
			//--------------------------------------------------------//
			//					Crear Local TCP Server    			  //
		    //--------------------------------------------------------//
			case 8:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 80098a4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80098a8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	2200      	movs	r2, #0
 80098b0:	f883 2498 	strb.w	r2, [r3, #1176]	; 0x498

				if( a->_enviaruart==1)
 80098b4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80098b8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 80098c2:	2b01      	cmp	r3, #1
 80098c4:	d16f      	bne.n	80099a6 <AT_ESP8266_ND+0x2e8a>
						{
						a->_pasos=0;
 80098c6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80098ca:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	2200      	movs	r2, #0
 80098d2:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
						a->_ejecucion=1;
 80098d6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80098da:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	2201      	movs	r2, #1
 80098e2:	f8c3 2ab4 	str.w	r2, [r3, #2740]	; 0xab4
						//------Generacion del comando ---------//
						strncat(a->_uart2snd,"AT+CIPSERVER=1,",strlen("AT+CIPSERVER=1,"));
 80098e6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80098ea:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	f503 6493 	add.w	r4, r3, #1176	; 0x498
 80098f4:	4620      	mov	r0, r4
 80098f6:	f7f6 fc7d 	bl	80001f4 <strlen>
 80098fa:	4603      	mov	r3, r0
 80098fc:	4423      	add	r3, r4
 80098fe:	4a7a      	ldr	r2, [pc, #488]	; (8009ae8 <AT_ESP8266_ND+0x2fcc>)
 8009900:	461c      	mov	r4, r3
 8009902:	4615      	mov	r5, r2
 8009904:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009906:	6020      	str	r0, [r4, #0]
 8009908:	6061      	str	r1, [r4, #4]
 800990a:	60a2      	str	r2, [r4, #8]
 800990c:	60e3      	str	r3, [r4, #12]
						strncat(a->_uart2snd,a->_TCP_Local_Server_Port,strlen(a->_TCP_Local_Server_Port));
 800990e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009912:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	f503 6493 	add.w	r4, r3, #1176	; 0x498
 800991c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009920:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	f103 055c 	add.w	r5, r3, #92	; 0x5c
 800992a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800992e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	335c      	adds	r3, #92	; 0x5c
 8009936:	4618      	mov	r0, r3
 8009938:	f7f6 fc5c 	bl	80001f4 <strlen>
 800993c:	4603      	mov	r3, r0
 800993e:	461a      	mov	r2, r3
 8009940:	4629      	mov	r1, r5
 8009942:	4620      	mov	r0, r4
 8009944:	f005 fed3 	bl	800f6ee <strncat>
						strncat(a->_uart2snd,finalizar2,strlen(finalizar2));
 8009948:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800994c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	f503 6493 	add.w	r4, r3, #1176	; 0x498
 8009956:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800995a:	4618      	mov	r0, r3
 800995c:	f7f6 fc4a 	bl	80001f4 <strlen>
 8009960:	4602      	mov	r2, r0
 8009962:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8009966:	4619      	mov	r1, r3
 8009968:	4620      	mov	r0, r4
 800996a:	f005 fec0 	bl	800f6ee <strncat>
						a->_n_uart2SND=strlen(a->_uart2snd);
 800996e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009972:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 800997c:	4618      	mov	r0, r3
 800997e:	f7f6 fc39 	bl	80001f4 <strlen>
 8009982:	4603      	mov	r3, r0
 8009984:	461a      	mov	r2, r3
 8009986:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800998a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	f8c3 2cf4 	str.w	r2, [r3, #3316]	; 0xcf4
						a->_estado=800;
 8009994:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009998:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	f44f 7248 	mov.w	r2, #800	; 0x320
 80099a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						//------Generacion del comando ---------//
						}
				a->_pasos++;
 80099a6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80099aa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	f8d3 3aac 	ldr.w	r3, [r3, #2732]	; 0xaac
 80099b4:	1c5a      	adds	r2, r3, #1
 80099b6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80099ba:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
				if (((a->_enviaruart==0)&&((AT_decode==at_wifi_disconnect)||(AT_decode==at_wifi_connected)||(AT_decode==at_wifi_gotip)||(AT_decode==at_tcp_alrdy_cnntd_err)||(AT_decode==at_tcp_conectado)||(AT_decode==at_tcp_desconectado)||(AT_decode==21)||(AT_decode==22)||(AT_decode==23)))||(a->_ticks > 5000))//210419 if (((a->_enviaruart==0)&&((estado==5)||(estado==6)||(estado==7)||(estado==13)||(estado==14)))||(a->_ticks > 5000))  //Que analice luego de enviar por uart
 80099c4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80099c8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d123      	bne.n	8009a1e <AT_ESP8266_ND+0x2f02>
 80099d6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80099da:	2b0a      	cmp	r3, #10
 80099dc:	d02b      	beq.n	8009a36 <AT_ESP8266_ND+0x2f1a>
 80099de:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80099e2:	2b0b      	cmp	r3, #11
 80099e4:	d027      	beq.n	8009a36 <AT_ESP8266_ND+0x2f1a>
 80099e6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80099ea:	2b0c      	cmp	r3, #12
 80099ec:	d023      	beq.n	8009a36 <AT_ESP8266_ND+0x2f1a>
 80099ee:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80099f2:	2b0e      	cmp	r3, #14
 80099f4:	d01f      	beq.n	8009a36 <AT_ESP8266_ND+0x2f1a>
 80099f6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80099fa:	2b0f      	cmp	r3, #15
 80099fc:	d01b      	beq.n	8009a36 <AT_ESP8266_ND+0x2f1a>
 80099fe:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009a02:	2b10      	cmp	r3, #16
 8009a04:	d017      	beq.n	8009a36 <AT_ESP8266_ND+0x2f1a>
 8009a06:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009a0a:	2b15      	cmp	r3, #21
 8009a0c:	d013      	beq.n	8009a36 <AT_ESP8266_ND+0x2f1a>
 8009a0e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009a12:	2b16      	cmp	r3, #22
 8009a14:	d00f      	beq.n	8009a36 <AT_ESP8266_ND+0x2f1a>
 8009a16:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009a1a:	2b17      	cmp	r3, #23
 8009a1c:	d00b      	beq.n	8009a36 <AT_ESP8266_ND+0x2f1a>
 8009a1e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009a22:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	f8d3 3cb8 	ldr.w	r3, [r3, #3256]	; 0xcb8
 8009a2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009a30:	4293      	cmp	r3, r2
 8009a32:	f340 82fe 	ble.w	800a032 <AT_ESP8266_ND+0x3516>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 8009a36:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009a3a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8009a44:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						a->_instruccion=0;	//Finalizo la instrucci�n
 8009a48:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009a4c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	2200      	movs	r2, #0
 8009a54:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						a->_ejecucion=0;
 8009a58:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009a5c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	2200      	movs	r2, #0
 8009a64:	f8c3 2ab4 	str.w	r2, [r3, #2740]	; 0xab4
						a->_ticks=0;
 8009a68:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009a6c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	2200      	movs	r2, #0
 8009a74:	f8c3 2cb8 	str.w	r2, [r3, #3256]	; 0xcb8
					}
			}
			break;
 8009a78:	e2db      	b.n	800a032 <AT_ESP8266_ND+0x3516>
			//--------------------------------------------------------//
			//			   Enviar datos desde TCP Server    			  //
		    //--------------------------------------------------------//
			case 9:
			{
					unsigned char caracteres[8]="";
 8009a7a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009a7e:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8009a82:	2200      	movs	r2, #0
 8009a84:	601a      	str	r2, [r3, #0]
 8009a86:	2200      	movs	r2, #0
 8009a88:	605a      	str	r2, [r3, #4]

					if((AT_decode==at_tcp_desconectado)||(AT_decode==at_wifi_disconnect)||(AT_decode==at_fail))
 8009a8a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009a8e:	2b10      	cmp	r3, #16
 8009a90:	d007      	beq.n	8009aa2 <AT_ESP8266_ND+0x2f86>
 8009a92:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009a96:	2b0a      	cmp	r3, #10
 8009a98:	d003      	beq.n	8009aa2 <AT_ESP8266_ND+0x2f86>
 8009a9a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009a9e:	2b03      	cmp	r3, #3
 8009aa0:	d124      	bne.n	8009aec <AT_ESP8266_ND+0x2fd0>
				{
					a->_estado=AT_decode;
 8009aa2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009aa6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8009ab0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					a->_instruccion=0;		//Finalizo la instrucci�n
 8009ab4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009ab8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	2200      	movs	r2, #0
 8009ac0:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
					a->_ejecucion=0;
 8009ac4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009ac8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	2200      	movs	r2, #0
 8009ad0:	f8c3 2ab4 	str.w	r2, [r3, #2740]	; 0xab4
					a->_subpaso=0;
 8009ad4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009ad8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	2200      	movs	r2, #0
 8009ae0:	f8c3 2d50 	str.w	r2, [r3, #3408]	; 0xd50
									a->_subpaso=0;
								}
				}
					//a->_ticks=0;						//Reseteo cada vez que entro
			}
			break;
 8009ae4:	e2a7      	b.n	800a036 <AT_ESP8266_ND+0x351a>
 8009ae6:	bf00      	nop
 8009ae8:	08010d20 	.word	0x08010d20
							if( (a->_enviaruart==1)&&(a->_subpaso==0))
 8009aec:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009af0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8009afa:	2b01      	cmp	r3, #1
 8009afc:	f040 8102 	bne.w	8009d04 <AT_ESP8266_ND+0x31e8>
 8009b00:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009b04:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	f040 80f8 	bne.w	8009d04 <AT_ESP8266_ND+0x31e8>
										a->_ejecucion=1;
 8009b14:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009b18:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	2201      	movs	r2, #1
 8009b20:	f8c3 2ab4 	str.w	r2, [r3, #2740]	; 0xab4
										a->_estado=24;
 8009b24:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009b28:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	2218      	movs	r2, #24
 8009b30:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
										a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 8009b34:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009b38:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	2200      	movs	r2, #0
 8009b40:	f883 2498 	strb.w	r2, [r3, #1176]	; 0x498
										a->_subpaso++;					//Asigno para que no vuelva a entrar
 8009b44:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009b48:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 8009b52:	1c5a      	adds	r2, r3, #1
 8009b54:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009b58:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	f8c3 2d50 	str.w	r2, [r3, #3408]	; 0xd50
										a->_pasos=0;
 8009b62:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009b66:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	2200      	movs	r2, #0
 8009b6e:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
										a->_okenvio[0]='\0';	  //Borro el vector a->_okenvio
 8009b72:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009b76:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	2200      	movs	r2, #0
 8009b7e:	f883 2ab8 	strb.w	r2, [r3, #2744]	; 0xab8
										strncat(a->_uart2snd,"AT+CIPSEND=",strlen("AT+CIPSEND="));//strncat(a->_uart2snd,"AT+CIPSEND=0,",strlen("AT+CIPSEND=0,"));
 8009b82:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009b86:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	f503 6493 	add.w	r4, r3, #1176	; 0x498
 8009b90:	4620      	mov	r0, r4
 8009b92:	f7f6 fb2f 	bl	80001f4 <strlen>
 8009b96:	4603      	mov	r3, r0
 8009b98:	4423      	add	r3, r4
 8009b9a:	4a83      	ldr	r2, [pc, #524]	; (8009da8 <AT_ESP8266_ND+0x328c>)
 8009b9c:	461c      	mov	r4, r3
 8009b9e:	4613      	mov	r3, r2
 8009ba0:	cb07      	ldmia	r3!, {r0, r1, r2}
 8009ba2:	6020      	str	r0, [r4, #0]
 8009ba4:	6061      	str	r1, [r4, #4]
 8009ba6:	60a2      	str	r2, [r4, #8]
										INTOA(a->_id_conn, caracteres);
 8009ba8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009bac:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	f8d3 3a98 	ldr.w	r3, [r3, #2712]	; 0xa98
 8009bb6:	f107 020c 	add.w	r2, r7, #12
 8009bba:	4611      	mov	r1, r2
 8009bbc:	4618      	mov	r0, r3
 8009bbe:	f005 fb0f 	bl	800f1e0 <INTOA>
										strncat(a->_uart2snd,caracteres,strlen(caracteres));
 8009bc2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009bc6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	f503 6493 	add.w	r4, r3, #1176	; 0x498
 8009bd0:	f107 030c 	add.w	r3, r7, #12
 8009bd4:	4618      	mov	r0, r3
 8009bd6:	f7f6 fb0d 	bl	80001f4 <strlen>
 8009bda:	4602      	mov	r2, r0
 8009bdc:	f107 030c 	add.w	r3, r7, #12
 8009be0:	4619      	mov	r1, r3
 8009be2:	4620      	mov	r0, r4
 8009be4:	f005 fd83 	bl	800f6ee <strncat>
										strncat(a->_uart2snd,",",1);
 8009be8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009bec:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	f503 6493 	add.w	r4, r3, #1176	; 0x498
 8009bf6:	4620      	mov	r0, r4
 8009bf8:	f7f6 fafc 	bl	80001f4 <strlen>
 8009bfc:	4603      	mov	r3, r0
 8009bfe:	4423      	add	r3, r4
 8009c00:	496a      	ldr	r1, [pc, #424]	; (8009dac <AT_ESP8266_ND+0x3290>)
 8009c02:	461a      	mov	r2, r3
 8009c04:	460b      	mov	r3, r1
 8009c06:	881b      	ldrh	r3, [r3, #0]
 8009c08:	8013      	strh	r3, [r2, #0]
										INTOA(a->_n_D2SND, caracteres);	//INTOA(strlen(a->_data2SND), caracteres);		        //Longitud  de datos a enviar
 8009c0a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009c0e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	f8d3 3cf0 	ldr.w	r3, [r3, #3312]	; 0xcf0
 8009c18:	f107 020c 	add.w	r2, r7, #12
 8009c1c:	4611      	mov	r1, r2
 8009c1e:	4618      	mov	r0, r3
 8009c20:	f005 fade 	bl	800f1e0 <INTOA>
										strncat(a->_uart2snd,caracteres,strlen(caracteres));//strncat(a->_uart2snd,caracteres,strlen(caracteres));//AT+CIPSEND="cdad caracteres"
 8009c24:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009c28:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	f503 6493 	add.w	r4, r3, #1176	; 0x498
 8009c32:	f107 030c 	add.w	r3, r7, #12
 8009c36:	4618      	mov	r0, r3
 8009c38:	f7f6 fadc 	bl	80001f4 <strlen>
 8009c3c:	4602      	mov	r2, r0
 8009c3e:	f107 030c 	add.w	r3, r7, #12
 8009c42:	4619      	mov	r1, r3
 8009c44:	4620      	mov	r0, r4
 8009c46:	f005 fd52 	bl	800f6ee <strncat>
										strcpy(a->_okenvio,a->_uart2snd);
 8009c4a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009c4e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	f603 22b8 	addw	r2, r3, #2744	; 0xab8
 8009c58:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009c5c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 8009c66:	4619      	mov	r1, r3
 8009c68:	4610      	mov	r0, r2
 8009c6a:	f005 fe21 	bl	800f8b0 <strcpy>
										strncat(a->_uart2snd,finalizar2,2);//strncat(a->_uart2snd,finalizar2,strlen(finalizar2));
 8009c6e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009c72:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 8009c7c:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 8009c80:	2202      	movs	r2, #2
 8009c82:	4618      	mov	r0, r3
 8009c84:	f005 fd33 	bl	800f6ee <strncat>
										a->_n_uart2SND=strlen(a->_uart2snd);
 8009c88:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009c8c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 8009c96:	4618      	mov	r0, r3
 8009c98:	f7f6 faac 	bl	80001f4 <strlen>
 8009c9c:	4603      	mov	r3, r0
 8009c9e:	461a      	mov	r2, r3
 8009ca0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009ca4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	f8c3 2cf4 	str.w	r2, [r3, #3316]	; 0xcf4
										strncat(a->_okenvio,"\r\r\n\r\nOK\r\n> ",strlen("\r\r\n\r\nOK\r\n> "));
 8009cae:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009cb2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	f603 24b8 	addw	r4, r3, #2744	; 0xab8
 8009cbc:	4620      	mov	r0, r4
 8009cbe:	f7f6 fa99 	bl	80001f4 <strlen>
 8009cc2:	4603      	mov	r3, r0
 8009cc4:	4423      	add	r3, r4
 8009cc6:	4a3a      	ldr	r2, [pc, #232]	; (8009db0 <AT_ESP8266_ND+0x3294>)
 8009cc8:	461c      	mov	r4, r3
 8009cca:	4613      	mov	r3, r2
 8009ccc:	cb07      	ldmia	r3!, {r0, r1, r2}
 8009cce:	6020      	str	r0, [r4, #0]
 8009cd0:	6061      	str	r1, [r4, #4]
 8009cd2:	60a2      	str	r2, [r4, #8]
										a->_debug_count3++;
 8009cd4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009cd8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	f8d3 3d10 	ldr.w	r3, [r3, #3344]	; 0xd10
 8009ce2:	1c5a      	adds	r2, r3, #1
 8009ce4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009ce8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	f8c3 2d10 	str.w	r2, [r3, #3344]	; 0xd10
										a->_estado=900;
 8009cf2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009cf6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	f44f 7261 	mov.w	r2, #900	; 0x384
 8009d00:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								a->_pasos++;
 8009d04:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009d08:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	f8d3 3aac 	ldr.w	r3, [r3, #2732]	; 0xaac
 8009d12:	1c5a      	adds	r2, r3, #1
 8009d14:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009d18:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
							if ((a->_enviaruart==0)&&(AT_decode!=at_tcp_enviado_ok)&&((strcmp(a->_uartRCVD,a->_okenvio)==0)||(AT_decode==at_ok)||(AT_decode==20)||((a->_ticks > 5000)&&(a->_subpaso==1))))
 8009d22:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009d26:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	f040 80b8 	bne.w	8009ea6 <AT_ESP8266_ND+0x338a>
 8009d36:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009d3a:	2b13      	cmp	r3, #19
 8009d3c:	f000 80b3 	beq.w	8009ea6 <AT_ESP8266_ND+0x338a>
 8009d40:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009d44:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	f503 62d3 	add.w	r2, r3, #1688	; 0x698
 8009d4e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009d52:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	f603 23b8 	addw	r3, r3, #2744	; 0xab8
 8009d5c:	4619      	mov	r1, r3
 8009d5e:	4610      	mov	r0, r2
 8009d60:	f7f6 fa3e 	bl	80001e0 <strcmp>
 8009d64:	4603      	mov	r3, r0
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d024      	beq.n	8009db4 <AT_ESP8266_ND+0x3298>
 8009d6a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009d6e:	2b01      	cmp	r3, #1
 8009d70:	d020      	beq.n	8009db4 <AT_ESP8266_ND+0x3298>
 8009d72:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009d76:	2b14      	cmp	r3, #20
 8009d78:	d01c      	beq.n	8009db4 <AT_ESP8266_ND+0x3298>
 8009d7a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009d7e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	f8d3 3cb8 	ldr.w	r3, [r3, #3256]	; 0xcb8
 8009d88:	f241 3288 	movw	r2, #5000	; 0x1388
 8009d8c:	4293      	cmp	r3, r2
 8009d8e:	f340 808a 	ble.w	8009ea6 <AT_ESP8266_ND+0x338a>
 8009d92:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009d96:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 8009da0:	2b01      	cmp	r3, #1
 8009da2:	f040 8080 	bne.w	8009ea6 <AT_ESP8266_ND+0x338a>
 8009da6:	e005      	b.n	8009db4 <AT_ESP8266_ND+0x3298>
 8009da8:	08010d08 	.word	0x08010d08
 8009dac:	08010d30 	.word	0x08010d30
 8009db0:	08010d14 	.word	0x08010d14
								if((a->_ticks > 5000)&&(a->_subpaso==1))
 8009db4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009db8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	f8d3 3cb8 	ldr.w	r3, [r3, #3256]	; 0xcb8
 8009dc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8009dc6:	4293      	cmp	r3, r2
 8009dc8:	dd17      	ble.n	8009dfa <AT_ESP8266_ND+0x32de>
 8009dca:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009dce:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 8009dd8:	2b01      	cmp	r3, #1
 8009dda:	d10e      	bne.n	8009dfa <AT_ESP8266_ND+0x32de>
									a->_debug_count7++;//-----------------------------Cuento los que entran por timeout
 8009ddc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009de0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	f8d3 3d20 	ldr.w	r3, [r3, #3360]	; 0xd20
 8009dea:	1c5a      	adds	r2, r3, #1
 8009dec:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009df0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20
								a->_debug_count4++;
 8009dfa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009dfe:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	f8d3 3d14 	ldr.w	r3, [r3, #3348]	; 0xd14
 8009e08:	1c5a      	adds	r2, r3, #1
 8009e0a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009e0e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
								a->_subpaso++;
 8009e18:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009e1c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 8009e26:	1c5a      	adds	r2, r3, #1
 8009e28:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009e2c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	f8c3 2d50 	str.w	r2, [r3, #3408]	; 0xd50
								a->_enviaruart=1;
 8009e36:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009e3a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	2201      	movs	r2, #1
 8009e42:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
								CopiaVector(a->_uart2snd,a->_data2SND,a->_n_D2SND,1,'a');//strcpy(a->_uart2snd,a->_data2SND);
 8009e46:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009e4a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	f503 6093 	add.w	r0, r3, #1176	; 0x498
 8009e54:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009e58:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	f503 7126 	add.w	r1, r3, #664	; 0x298
 8009e62:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009e66:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	f8d3 2cf0 	ldr.w	r2, [r3, #3312]	; 0xcf0
 8009e70:	2361      	movs	r3, #97	; 0x61
 8009e72:	9300      	str	r3, [sp, #0]
 8009e74:	2301      	movs	r3, #1
 8009e76:	f005 f9e7 	bl	800f248 <CopiaVector>
								a->_n_uart2SND=a->_n_D2SND; //Asigno cantidad de elementos del vector
 8009e7a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009e7e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	f8d3 2cf0 	ldr.w	r2, [r3, #3312]	; 0xcf0
 8009e88:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009e8c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	f8c3 2cf4 	str.w	r2, [r3, #3316]	; 0xcf4
								a->_ticks=0;//----------------------------------Evito que entre de toque en el siguiente
 8009e96:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009e9a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	2200      	movs	r2, #0
 8009ea2:	f8c3 2cb8 	str.w	r2, [r3, #3256]	; 0xcb8
							if((a->_estado==900)&&((AT_decode==at_tcp_enviado_ok)||(AT_decode==at_wifi_connected)||(AT_decode==at_wifi_gotip)||(a->_ticks > 5000)||(AT_decode==at_wifi_disconnect)||(AT_decode==at_tcp_desconectado)||(AT_decode==at_tcp_snd_err)||(AT_decode==at_tcp_enviado_error)||(AT_decode==22)||(AT_decode==25)))
 8009ea6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009eaa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009eb4:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8009eb8:	f040 80bd 	bne.w	800a036 <AT_ESP8266_ND+0x351a>
 8009ebc:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009ec0:	2b13      	cmp	r3, #19
 8009ec2:	d02b      	beq.n	8009f1c <AT_ESP8266_ND+0x3400>
 8009ec4:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009ec8:	2b0b      	cmp	r3, #11
 8009eca:	d027      	beq.n	8009f1c <AT_ESP8266_ND+0x3400>
 8009ecc:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009ed0:	2b0c      	cmp	r3, #12
 8009ed2:	d023      	beq.n	8009f1c <AT_ESP8266_ND+0x3400>
 8009ed4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009ed8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	f8d3 3cb8 	ldr.w	r3, [r3, #3256]	; 0xcb8
 8009ee2:	f241 3288 	movw	r2, #5000	; 0x1388
 8009ee6:	4293      	cmp	r3, r2
 8009ee8:	dc18      	bgt.n	8009f1c <AT_ESP8266_ND+0x3400>
 8009eea:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009eee:	2b0a      	cmp	r3, #10
 8009ef0:	d014      	beq.n	8009f1c <AT_ESP8266_ND+0x3400>
 8009ef2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009ef6:	2b10      	cmp	r3, #16
 8009ef8:	d010      	beq.n	8009f1c <AT_ESP8266_ND+0x3400>
 8009efa:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009efe:	2b11      	cmp	r3, #17
 8009f00:	d00c      	beq.n	8009f1c <AT_ESP8266_ND+0x3400>
 8009f02:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009f06:	2b12      	cmp	r3, #18
 8009f08:	d008      	beq.n	8009f1c <AT_ESP8266_ND+0x3400>
 8009f0a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009f0e:	2b16      	cmp	r3, #22
 8009f10:	d004      	beq.n	8009f1c <AT_ESP8266_ND+0x3400>
 8009f12:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009f16:	2b19      	cmp	r3, #25
 8009f18:	f040 808d 	bne.w	800a036 <AT_ESP8266_ND+0x351a>
									a->_debug_count5++;
 8009f1c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009f20:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	f8d3 3d18 	ldr.w	r3, [r3, #3352]	; 0xd18
 8009f2a:	1c5a      	adds	r2, r3, #1
 8009f2c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009f30:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	f8c3 2d18 	str.w	r2, [r3, #3352]	; 0xd18
									if(a->_ticks > 5000)
 8009f3a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009f3e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	f8d3 3cb8 	ldr.w	r3, [r3, #3256]	; 0xcb8
 8009f48:	f241 3288 	movw	r2, #5000	; 0x1388
 8009f4c:	4293      	cmp	r3, r2
 8009f4e:	dd25      	ble.n	8009f9c <AT_ESP8266_ND+0x3480>
										a->_debug_count8++;
 8009f50:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009f54:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	f8d3 3d24 	ldr.w	r3, [r3, #3364]	; 0xd24
 8009f5e:	1c5a      	adds	r2, r3, #1
 8009f60:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009f64:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	f8c3 2d24 	str.w	r2, [r3, #3364]	; 0xd24
										a->_subpaso++;
 8009f6e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009f72:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 8009f7c:	1c5a      	adds	r2, r3, #1
 8009f7e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009f82:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	f8c3 2d50 	str.w	r2, [r3, #3408]	; 0xd50
										a->_ticks=0;
 8009f8c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009f90:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	2200      	movs	r2, #0
 8009f98:	f8c3 2cb8 	str.w	r2, [r3, #3256]	; 0xcb8
									if((a->_subpaso > 2)&&(AT_decode!=at_tcp_desconectado)&&(AT_decode!=at_wifi_disconnect))//--------------No considero los etados de fallas por TCP o WIFI caido
 8009f9c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009fa0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 8009faa:	2b02      	cmp	r3, #2
 8009fac:	dd07      	ble.n	8009fbe <AT_ESP8266_ND+0x34a2>
 8009fae:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009fb2:	2b10      	cmp	r3, #16
 8009fb4:	d003      	beq.n	8009fbe <AT_ESP8266_ND+0x34a2>
 8009fb6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009fba:	2b0a      	cmp	r3, #10
 8009fbc:	d108      	bne.n	8009fd0 <AT_ESP8266_ND+0x34b4>
										a->_estado=AT_decode;	//Devuelvo el estado
 8009fbe:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009fc2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8009fcc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									a->_instruccion=0;		//Finalizo la instrucci�n
 8009fd0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009fd4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	2200      	movs	r2, #0
 8009fdc:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
									a->_ejecucion=0;
 8009fe0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009fe4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	2200      	movs	r2, #0
 8009fec:	f8c3 2ab4 	str.w	r2, [r3, #2740]	; 0xab4
									a->_subpaso=0;
 8009ff0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009ff4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	2200      	movs	r2, #0
 8009ffc:	f8c3 2d50 	str.w	r2, [r3, #3408]	; 0xd50
			break;
 800a000:	e019      	b.n	800a036 <AT_ESP8266_ND+0x351a>
			default:		//Si no hay instruccion paso el estado a la estructura
			{
				a->_estado=AT_decode;
 800a002:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800a006:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 800a010:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
			}
			break;
 800a014:	e010      	b.n	800a038 <AT_ESP8266_ND+0x351c>
			break;
 800a016:	bf00      	nop
 800a018:	e00e      	b.n	800a038 <AT_ESP8266_ND+0x351c>
			break;
 800a01a:	bf00      	nop
 800a01c:	e00c      	b.n	800a038 <AT_ESP8266_ND+0x351c>
			break;
 800a01e:	bf00      	nop
 800a020:	e00a      	b.n	800a038 <AT_ESP8266_ND+0x351c>
			break;
 800a022:	bf00      	nop
 800a024:	e008      	b.n	800a038 <AT_ESP8266_ND+0x351c>
			break;
 800a026:	bf00      	nop
 800a028:	e006      	b.n	800a038 <AT_ESP8266_ND+0x351c>
			break;
 800a02a:	bf00      	nop
 800a02c:	e004      	b.n	800a038 <AT_ESP8266_ND+0x351c>
			break;
 800a02e:	bf00      	nop
 800a030:	e002      	b.n	800a038 <AT_ESP8266_ND+0x351c>
			break;
 800a032:	bf00      	nop
 800a034:	e000      	b.n	800a038 <AT_ESP8266_ND+0x351c>
			break;
 800a036:	bf00      	nop
		}


		a->_uartRCVD[0]='\0'; //200829  Elimino el registro de recepcion, solo se vuelve a actualizar en TIMEOUT
 800a038:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800a03c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	2200      	movs	r2, #0
 800a044:	f883 2698 	strb.w	r2, [r3, #1688]	; 0x698
		a->_n_orig=0;
 800a048:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800a04c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	2200      	movs	r2, #0
 800a054:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4

		return (a->_estado);
 800a058:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800a05c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88

 }
 800a066:	4618      	mov	r0, r3
 800a068:	f507 7715 	add.w	r7, r7, #596	; 0x254
 800a06c:	46bd      	mov	sp, r7
 800a06e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a070 <WiFi_Conn_ND>:
 }
 /*--------------------------------------------------------------*/

		//--------------Maquina de estados para conectar a TCP
int WiFi_Conn_ND( struct WIFI *b, UART_HandleTypeDef *PORTSER, int EN_DEBUG )
{
 800a070:	b580      	push	{r7, lr}
 800a072:	b084      	sub	sp, #16
 800a074:	af00      	add	r7, sp, #0
 800a076:	60f8      	str	r0, [r7, #12]
 800a078:	60b9      	str	r1, [r7, #8]
 800a07a:	607a      	str	r2, [r7, #4]
		switch (b->_estado_conexion)
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a082:	f240 328d 	movw	r2, #909	; 0x38d
 800a086:	4293      	cmp	r3, r2
 800a088:	f001 8449 	beq.w	800b91e <WiFi_Conn_ND+0x18ae>
 800a08c:	f240 328d 	movw	r2, #909	; 0x38d
 800a090:	4293      	cmp	r3, r2
 800a092:	f301 84de 	bgt.w	800ba52 <WiFi_Conn_ND+0x19e2>
 800a096:	f240 3289 	movw	r2, #905	; 0x389
 800a09a:	4293      	cmp	r3, r2
 800a09c:	f001 83b6 	beq.w	800b80c <WiFi_Conn_ND+0x179c>
 800a0a0:	f240 3289 	movw	r2, #905	; 0x389
 800a0a4:	4293      	cmp	r3, r2
 800a0a6:	f301 84d4 	bgt.w	800ba52 <WiFi_Conn_ND+0x19e2>
 800a0aa:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 800a0ae:	f001 82a5 	beq.w	800b5fc <WiFi_Conn_ND+0x158c>
 800a0b2:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 800a0b6:	f301 84cc 	bgt.w	800ba52 <WiFi_Conn_ND+0x19e2>
 800a0ba:	f240 3229 	movw	r2, #809	; 0x329
 800a0be:	4293      	cmp	r3, r2
 800a0c0:	f301 84c7 	bgt.w	800ba52 <WiFi_Conn_ND+0x19e2>
 800a0c4:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800a0c8:	f280 80a5 	bge.w	800a216 <WiFi_Conn_ND+0x1a6>
 800a0cc:	f240 22c5 	movw	r2, #709	; 0x2c5
 800a0d0:	4293      	cmp	r3, r2
 800a0d2:	f000 87d9 	beq.w	800b088 <WiFi_Conn_ND+0x1018>
 800a0d6:	f240 22c5 	movw	r2, #709	; 0x2c5
 800a0da:	4293      	cmp	r3, r2
 800a0dc:	f301 84b9 	bgt.w	800ba52 <WiFi_Conn_ND+0x19e2>
 800a0e0:	f240 22c1 	movw	r2, #705	; 0x2c1
 800a0e4:	4293      	cmp	r3, r2
 800a0e6:	f000 8750 	beq.w	800af8a <WiFi_Conn_ND+0xf1a>
 800a0ea:	f240 22c1 	movw	r2, #705	; 0x2c1
 800a0ee:	4293      	cmp	r3, r2
 800a0f0:	f301 84af 	bgt.w	800ba52 <WiFi_Conn_ND+0x19e2>
 800a0f4:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800a0f8:	f000 866b 	beq.w	800add2 <WiFi_Conn_ND+0xd62>
 800a0fc:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800a100:	f301 84a7 	bgt.w	800ba52 <WiFi_Conn_ND+0x19e2>
 800a104:	f240 2261 	movw	r2, #609	; 0x261
 800a108:	4293      	cmp	r3, r2
 800a10a:	f000 85ec 	beq.w	800ace6 <WiFi_Conn_ND+0xc76>
 800a10e:	f240 2261 	movw	r2, #609	; 0x261
 800a112:	4293      	cmp	r3, r2
 800a114:	f301 849d 	bgt.w	800ba52 <WiFi_Conn_ND+0x19e2>
 800a118:	f240 225d 	movw	r2, #605	; 0x25d
 800a11c:	4293      	cmp	r3, r2
 800a11e:	f000 8582 	beq.w	800ac26 <WiFi_Conn_ND+0xbb6>
 800a122:	f240 225d 	movw	r2, #605	; 0x25d
 800a126:	4293      	cmp	r3, r2
 800a128:	f301 8493 	bgt.w	800ba52 <WiFi_Conn_ND+0x19e2>
 800a12c:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 800a130:	f000 8500 	beq.w	800ab34 <WiFi_Conn_ND+0xac4>
 800a134:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 800a138:	f301 848b 	bgt.w	800ba52 <WiFi_Conn_ND+0x19e2>
 800a13c:	f240 12fd 	movw	r2, #509	; 0x1fd
 800a140:	4293      	cmp	r3, r2
 800a142:	f000 8496 	beq.w	800aa72 <WiFi_Conn_ND+0xa02>
 800a146:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 800a14a:	f281 8482 	bge.w	800ba52 <WiFi_Conn_ND+0x19e2>
 800a14e:	f240 12f9 	movw	r2, #505	; 0x1f9
 800a152:	4293      	cmp	r3, r2
 800a154:	f000 844c 	beq.w	800a9f0 <WiFi_Conn_ND+0x980>
 800a158:	f5b3 7ffd 	cmp.w	r3, #506	; 0x1fa
 800a15c:	f281 8479 	bge.w	800ba52 <WiFi_Conn_ND+0x19e2>
 800a160:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800a164:	f000 83d7 	beq.w	800a916 <WiFi_Conn_ND+0x8a6>
 800a168:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800a16c:	f301 8471 	bgt.w	800ba52 <WiFi_Conn_ND+0x19e2>
 800a170:	f240 1299 	movw	r2, #409	; 0x199
 800a174:	4293      	cmp	r3, r2
 800a176:	f000 8378 	beq.w	800a86a <WiFi_Conn_ND+0x7fa>
 800a17a:	f5b3 7fcd 	cmp.w	r3, #410	; 0x19a
 800a17e:	f281 8468 	bge.w	800ba52 <WiFi_Conn_ND+0x19e2>
 800a182:	f240 1295 	movw	r2, #405	; 0x195
 800a186:	4293      	cmp	r3, r2
 800a188:	f000 8333 	beq.w	800a7f2 <WiFi_Conn_ND+0x782>
 800a18c:	f5b3 7fcb 	cmp.w	r3, #406	; 0x196
 800a190:	f281 845f 	bge.w	800ba52 <WiFi_Conn_ND+0x19e2>
 800a194:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800a198:	f000 82aa 	beq.w	800a6f0 <WiFi_Conn_ND+0x680>
 800a19c:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800a1a0:	f301 8457 	bgt.w	800ba52 <WiFi_Conn_ND+0x19e2>
 800a1a4:	f240 1235 	movw	r2, #309	; 0x135
 800a1a8:	4293      	cmp	r3, r2
 800a1aa:	f000 827b 	beq.w	800a6a4 <WiFi_Conn_ND+0x634>
 800a1ae:	f5b3 7f9b 	cmp.w	r3, #310	; 0x136
 800a1b2:	f281 844e 	bge.w	800ba52 <WiFi_Conn_ND+0x19e2>
 800a1b6:	f240 1231 	movw	r2, #305	; 0x131
 800a1ba:	4293      	cmp	r3, r2
 800a1bc:	f000 826d 	beq.w	800a69a <WiFi_Conn_ND+0x62a>
 800a1c0:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 800a1c4:	f281 8445 	bge.w	800ba52 <WiFi_Conn_ND+0x19e2>
 800a1c8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800a1cc:	f000 8211 	beq.w	800a5f2 <WiFi_Conn_ND+0x582>
 800a1d0:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800a1d4:	f301 843d 	bgt.w	800ba52 <WiFi_Conn_ND+0x19e2>
 800a1d8:	2bd1      	cmp	r3, #209	; 0xd1
 800a1da:	f000 81a5 	beq.w	800a528 <WiFi_Conn_ND+0x4b8>
 800a1de:	2bd1      	cmp	r3, #209	; 0xd1
 800a1e0:	f301 8437 	bgt.w	800ba52 <WiFi_Conn_ND+0x19e2>
 800a1e4:	2bcd      	cmp	r3, #205	; 0xcd
 800a1e6:	f000 8175 	beq.w	800a4d4 <WiFi_Conn_ND+0x464>
 800a1ea:	2bcd      	cmp	r3, #205	; 0xcd
 800a1ec:	f301 8431 	bgt.w	800ba52 <WiFi_Conn_ND+0x19e2>
 800a1f0:	2bc8      	cmp	r3, #200	; 0xc8
 800a1f2:	f000 80f1 	beq.w	800a3d8 <WiFi_Conn_ND+0x368>
 800a1f6:	2bc8      	cmp	r3, #200	; 0xc8
 800a1f8:	f301 842b 	bgt.w	800ba52 <WiFi_Conn_ND+0x19e2>
 800a1fc:	2b6d      	cmp	r3, #109	; 0x6d
 800a1fe:	f000 80b3 	beq.w	800a368 <WiFi_Conn_ND+0x2f8>
 800a202:	2b6d      	cmp	r3, #109	; 0x6d
 800a204:	f301 8425 	bgt.w	800ba52 <WiFi_Conn_ND+0x19e2>
 800a208:	2b64      	cmp	r3, #100	; 0x64
 800a20a:	d021      	beq.n	800a250 <WiFi_Conn_ND+0x1e0>
 800a20c:	2b69      	cmp	r3, #105	; 0x69
 800a20e:	f000 8096 	beq.w	800a33e <WiFi_Conn_ND+0x2ce>
 800a212:	f001 bc1e 	b.w	800ba52 <WiFi_Conn_ND+0x19e2>
 800a216:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
 800a21a:	2b09      	cmp	r3, #9
 800a21c:	f201 8419 	bhi.w	800ba52 <WiFi_Conn_ND+0x19e2>
 800a220:	a201      	add	r2, pc, #4	; (adr r2, 800a228 <WiFi_Conn_ND+0x1b8>)
 800a222:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a226:	bf00      	nop
 800a228:	0800b19f 	.word	0x0800b19f
 800a22c:	0800ba53 	.word	0x0800ba53
 800a230:	0800ba53 	.word	0x0800ba53
 800a234:	0800ba53 	.word	0x0800ba53
 800a238:	0800ba53 	.word	0x0800ba53
 800a23c:	0800b26d 	.word	0x0800b26d
 800a240:	0800b317 	.word	0x0800b317
 800a244:	0800b3c1 	.word	0x0800b3c1
 800a248:	0800b46b 	.word	0x0800b46b
 800a24c:	0800b515 	.word	0x0800b515
		{
			case CAMBIAR_MODO_EN_CURSO:			//WIFI Desconectado --> Conectar a WIFI nuevamente
			{
				if((b->_estado!=100)&&(b->_estado!=at_ok)
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a256:	2b64      	cmp	r3, #100	; 0x64
 800a258:	d046      	beq.n	800a2e8 <WiFi_Conn_ND+0x278>
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a260:	2b01      	cmp	r3, #1
 800a262:	d041      	beq.n	800a2e8 <WiFi_Conn_ND+0x278>
									&&(b->_estado!=at_cambiar_modo_ok)
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a26a:	2b1c      	cmp	r3, #28
 800a26c:	d03c      	beq.n	800a2e8 <WiFi_Conn_ND+0x278>
									&&(b->_estado!=at_error)
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a274:	2b02      	cmp	r3, #2
 800a276:	d037      	beq.n	800a2e8 <WiFi_Conn_ND+0x278>
									&&(b->_estado!=at_restart)
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a27e:	2b04      	cmp	r3, #4
 800a280:	d032      	beq.n	800a2e8 <WiFi_Conn_ND+0x278>
									&&(b->_estado!=at_tcp_enviado_ok))	//Si estoy conectando, no vuelvo a conectar.
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a288:	2b13      	cmp	r3, #19
 800a28a:	d02d      	beq.n	800a2e8 <WiFi_Conn_ND+0x278>
				{
						Cambiar_CWMODE(b);
 800a28c:	68f8      	ldr	r0, [r7, #12]
 800a28e:	f7fc faaf 	bl	80067f0 <Cambiar_CWMODE>
						if(b->_enviaruart==1)
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 800a298:	2b01      	cmp	r3, #1
 800a29a:	d14e      	bne.n	800a33a <WiFi_Conn_ND+0x2ca>
							{
								b->_estado=AT_ESP8266_ND(b);  //Genero las instrucciones a enviar
 800a29c:	68f8      	ldr	r0, [r7, #12]
 800a29e:	f7fc fc3d 	bl	8006b1c <AT_ESP8266_ND>
 800a2a2:	4602      	mov	r2, r0
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_enviaruart=0;
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	2200      	movs	r2, #0
 800a2ae:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
								if (b->_DBG_EN==1)
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	f8d3 3d5c 	ldr.w	r3, [r3, #3420]	; 0xd5c
 800a2b8:	2b01      	cmp	r3, #1
 800a2ba:	d109      	bne.n	800a2d0 <WiFi_Conn_ND+0x260>
								{
									ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	f503 6293 	add.w	r2, r3, #1176	; 0x498
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	f8d3 3cf4 	ldr.w	r3, [r3, #3316]	; 0xcf4
 800a2c8:	4619      	mov	r1, r3
 800a2ca:	4610      	mov	r0, r2
 800a2cc:	f7f7 f9b0 	bl	8001630 <ITM0_Write>
								}else{}
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	f503 6193 	add.w	r1, r3, #1176	; 0x498
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	f8d3 3cf4 	ldr.w	r3, [r3, #3316]	; 0xcf4
 800a2dc:	b29a      	uxth	r2, r3
 800a2de:	2364      	movs	r3, #100	; 0x64
 800a2e0:	68b8      	ldr	r0, [r7, #8]
 800a2e2:	f7fb f9e1 	bl	80056a8 <HAL_UART_Transmit>
						if(b->_enviaruart==1)
 800a2e6:	e028      	b.n	800a33a <WiFi_Conn_ND+0x2ca>
						else{}
				}
				else
				{
					//----Condiciones de cambio de estado
					if((b->_estado==at_ok)||
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a2ee:	2b01      	cmp	r3, #1
 800a2f0:	d004      	beq.n	800a2fc <WiFi_Conn_ND+0x28c>
					   (b->_estado==at_cambiar_modo_ok))
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
					if((b->_estado==at_ok)||
 800a2f8:	2b1c      	cmp	r3, #28
 800a2fa:	d103      	bne.n	800a304 <WiFi_Conn_ND+0x294>
						{
						b->_estado_conexion=CAMBIAR_MODO_OK; 	//Cambio de estado exitoso
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	226d      	movs	r2, #109	; 0x6d
 800a300:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						}

					if((b->_estado==at_error)||(b->_estado==at_restart)
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a30a:	2b02      	cmp	r3, #2
 800a30c:	d00f      	beq.n	800a32e <WiFi_Conn_ND+0x2be>
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a314:	2b04      	cmp	r3, #4
 800a316:	d00a      	beq.n	800a32e <WiFi_Conn_ND+0x2be>
											 ||(b->_estado==at_wifi_connected)
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a31e:	2b0b      	cmp	r3, #11
 800a320:	d005      	beq.n	800a32e <WiFi_Conn_ND+0x2be>
											 ||(b->_estado==at_wifi_gotip))
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a328:	2b0c      	cmp	r3, #12
 800a32a:	f041 8363 	bne.w	800b9f4 <WiFi_Conn_ND+0x1984>
						{
						b->_estado_conexion=CAMBIAR_MODO_ERROR; //210630 Se agrega ATDecode 4, 11 y 12	//Cambio de estado erroneo
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	2269      	movs	r2, #105	; 0x69
 800a332:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						}
					//----Condiciones de cambio de estado
				}
			}
			break;
 800a336:	f001 bb5d 	b.w	800b9f4 <WiFi_Conn_ND+0x1984>
 800a33a:	f001 bb5b 	b.w	800b9f4 <WiFi_Conn_ND+0x1984>
			case CAMBIAR_MODO_ERROR://Error al cambiar de modo
			{
				Cambiar_CWMODE(b);
 800a33e:	68f8      	ldr	r0, [r7, #12]
 800a340:	f7fc fa56 	bl	80067f0 <Cambiar_CWMODE>
				b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	2264      	movs	r2, #100	; 0x64
 800a348:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				b->_estado=0;
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	2200      	movs	r2, #0
 800a350:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
				b->_n_orig=0; //Borro el vector RX
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	2200      	movs	r2, #0
 800a358:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4

				b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	2200      	movs	r2, #0
 800a360:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
			}
			break;
 800a364:	f001 bb75 	b.w	800ba52 <WiFi_Conn_ND+0x19e2>
			case CAMBIAR_MODO_OK ://Cambio de modo OK
			{
//220818
				if (b->_TCP_Local_Server_EN)//
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d00c      	beq.n	800a38c <WiFi_Conn_ND+0x31c>
				{//
					MUX(b);	//								//Si me conecté seteo las múltiples Conexiones
 800a372:	68f8      	ldr	r0, [r7, #12]
 800a374:	f7fc fa68 	bl	8006848 <MUX>
					b->_estado_conexion=MUX_CONN_EN_CURSO;//
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800a37e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;//
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	2200      	movs	r2, #0
 800a386:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 800a38a:	e00e      	b.n	800a3aa <WiFi_Conn_ND+0x33a>

				}//
				else//
				{//
					ConectarWIFI(b);
 800a38c:	68f8      	ldr	r0, [r7, #12]
 800a38e:	f7fc fa45 	bl	800681c <ConectarWIFI>
					b->_estado_conexion=CONEXION_EN_CURSO;
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	22c8      	movs	r2, #200	; 0xc8
 800a396:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	2200      	movs	r2, #0
 800a39e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	2200      	movs	r2, #0
 800a3a6:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
				}//

				if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a3b0:	2b04      	cmp	r3, #4
 800a3b2:	f041 8321 	bne.w	800b9f8 <WiFi_Conn_ND+0x1988>
					{
						Cambiar_CWMODE(b);
 800a3b6:	68f8      	ldr	r0, [r7, #12]
 800a3b8:	f7fc fa1a 	bl	80067f0 <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	2264      	movs	r2, #100	; 0x64
 800a3c0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	2200      	movs	r2, #0
 800a3c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	2200      	movs	r2, #0
 800a3d0:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
			}
			break;
 800a3d4:	f001 bb10 	b.w	800b9f8 <WiFi_Conn_ND+0x1988>
			case CONEXION_EN_CURSO:			//WIFI Desconectado --> Conectar a WIFI nuevamente
			{
				if((b->_estado!=200)&&((b->_estado!=at_ok)
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a3de:	2bc8      	cmp	r3, #200	; 0xc8
 800a3e0:	d04f      	beq.n	800a482 <WiFi_Conn_ND+0x412>
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a3e8:	2b01      	cmp	r3, #1
 800a3ea:	d04a      	beq.n	800a482 <WiFi_Conn_ND+0x412>
									&&(b->_estado!=at_error)
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a3f2:	2b02      	cmp	r3, #2
 800a3f4:	d045      	beq.n	800a482 <WiFi_Conn_ND+0x412>
									&&(b->_estado!=at_fail)
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a3fc:	2b03      	cmp	r3, #3
 800a3fe:	d040      	beq.n	800a482 <WiFi_Conn_ND+0x412>
									&&(b->_estado!=at_restart)
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a406:	2b04      	cmp	r3, #4
 800a408:	d03b      	beq.n	800a482 <WiFi_Conn_ND+0x412>
						            &&(b->_estado!=at_wifi_disconnect)
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a410:	2b0a      	cmp	r3, #10
 800a412:	d036      	beq.n	800a482 <WiFi_Conn_ND+0x412>
									&&(b->_estado!=at_wifi_connected)
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a41a:	2b0b      	cmp	r3, #11
 800a41c:	d031      	beq.n	800a482 <WiFi_Conn_ND+0x412>
									&&(b->_estado!=at_wifi_gotip)))	//Si estoy conectando, no vuelvo a conectar.
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a424:	2b0c      	cmp	r3, #12
 800a426:	d02c      	beq.n	800a482 <WiFi_Conn_ND+0x412>
				{
						ConectarWIFI(b);
 800a428:	68f8      	ldr	r0, [r7, #12]
 800a42a:	f7fc f9f7 	bl	800681c <ConectarWIFI>
						if(b->_enviaruart==1)
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 800a434:	2b01      	cmp	r3, #1
 800a436:	d124      	bne.n	800a482 <WiFi_Conn_ND+0x412>
							{
								b->_estado=AT_ESP8266_ND(b);
 800a438:	68f8      	ldr	r0, [r7, #12]
 800a43a:	f7fc fb6f 	bl	8006b1c <AT_ESP8266_ND>
 800a43e:	4602      	mov	r2, r0
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_enviaruart=0;
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	2200      	movs	r2, #0
 800a44a:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	f8d3 3d5c 	ldr.w	r3, [r3, #3420]	; 0xd5c
 800a454:	2b01      	cmp	r3, #1
 800a456:	d109      	bne.n	800a46c <WiFi_Conn_ND+0x3fc>
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	f503 6293 	add.w	r2, r3, #1176	; 0x498
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	f8d3 3cf4 	ldr.w	r3, [r3, #3316]	; 0xcf4
 800a464:	4619      	mov	r1, r3
 800a466:	4610      	mov	r0, r2
 800a468:	f7f7 f8e2 	bl	8001630 <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	f503 6193 	add.w	r1, r3, #1176	; 0x498
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	f8d3 3cf4 	ldr.w	r3, [r3, #3316]	; 0xcf4
 800a478:	b29a      	uxth	r2, r3
 800a47a:	2364      	movs	r3, #100	; 0x64
 800a47c:	68b8      	ldr	r0, [r7, #8]
 800a47e:	f7fb f913 	bl	80056a8 <HAL_UART_Transmit>
							}
				}

				//----Condiciones de cambio de estado
				if((b->_estado==at_ok)||(b->_estado==at_wifi_gotip))
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a488:	2b01      	cmp	r3, #1
 800a48a:	d004      	beq.n	800a496 <WiFi_Conn_ND+0x426>
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a492:	2b0c      	cmp	r3, #12
 800a494:	d103      	bne.n	800a49e <WiFi_Conn_ND+0x42e>

					{
						b->_estado_conexion=CONEXION_OK; 	//Ya puedo pedir conexi�n TCP
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	22d1      	movs	r2, #209	; 0xd1
 800a49a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					}
				if((b->_estado==at_error)||(b->_estado==at_fail)||(b->_estado==at_conn_wifi_err)||(b->_estado==at_wifi_disconnect)) b->_estado_conexion=CONEXION_ERROR; 	//Ya puedo pedir conexi�n TCP
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4a4:	2b02      	cmp	r3, #2
 800a4a6:	d00f      	beq.n	800a4c8 <WiFi_Conn_ND+0x458>
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4ae:	2b03      	cmp	r3, #3
 800a4b0:	d00a      	beq.n	800a4c8 <WiFi_Conn_ND+0x458>
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4b8:	2b20      	cmp	r3, #32
 800a4ba:	d005      	beq.n	800a4c8 <WiFi_Conn_ND+0x458>
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4c2:	2b0a      	cmp	r3, #10
 800a4c4:	f041 829a 	bne.w	800b9fc <WiFi_Conn_ND+0x198c>
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	22cd      	movs	r2, #205	; 0xcd
 800a4cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				//----Condiciones de cambio de estado
			}
			break;
 800a4d0:	f001 ba94 	b.w	800b9fc <WiFi_Conn_ND+0x198c>
			case CONEXION_ERROR://Error al conectar
			{
				HAL_Delay(5000); //Cuando entrega el error, lo hace rápido no demora.
 800a4d4:	f241 3088 	movw	r0, #5000	; 0x1388
 800a4d8:	f7f8 fc32 	bl	8002d40 <HAL_Delay>
				// bucle infinito de ERRORES al querer conectar.										//
				// La unica manera de solucionarlo es seteando nuevamente AT+CWMODE=1					//
				// La realidad es que es muy dificil que se borre la flash una vez inciado el módulo	//
				// se le podría dar un tratamiento pero de momento no lo haremos salvo que sea necesario//
				//--------------------------------------------------------------------------------------//
				ConectarWIFI(b);
 800a4dc:	68f8      	ldr	r0, [r7, #12]
 800a4de:	f7fc f99d 	bl	800681c <ConectarWIFI>
				b->_estado_conexion=CONEXION_EN_CURSO;
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	22c8      	movs	r2, #200	; 0xc8
 800a4e6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				b->_estado=0;
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	2200      	movs	r2, #0
 800a4ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
				b->_n_orig=0; //Borro el vector RX
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	2200      	movs	r2, #0
 800a4f6:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
				if(b->_estado==at_restart	)		//Reinicio involuntario de módulo
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a500:	2b04      	cmp	r3, #4
 800a502:	f041 827d 	bne.w	800ba00 <WiFi_Conn_ND+0x1990>
					{
						Cambiar_CWMODE(b);
 800a506:	68f8      	ldr	r0, [r7, #12]
 800a508:	f7fc f972 	bl	80067f0 <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	2264      	movs	r2, #100	; 0x64
 800a510:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	2200      	movs	r2, #0
 800a518:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	2200      	movs	r2, #0
 800a520:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
			}
			break;
 800a524:	f001 ba6c 	b.w	800ba00 <WiFi_Conn_ND+0x1990>
			case CONEXION_OK://Conecta OK
			{
				b->_n_orig=0; //Borro el vector RX
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	2200      	movs	r2, #0
 800a52c:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4

				if(b->_TCP_Local_Server_Initiated==1)  //Si el servidor ya estaba iniciado, voy al servidor inciado
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	f893 3083 	ldrb.w	r3, [r3, #131]	; 0x83
 800a536:	2b01      	cmp	r3, #1
 800a538:	d108      	bne.n	800a54c <WiFi_Conn_ND+0x4dc>
				{
					b->_estado_conexion=TCP_SRVR_OK ;
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	f240 3229 	movw	r2, #809	; 0x329
 800a540:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	2200      	movs	r2, #0
 800a548:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
				}

				if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok)||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a552:	2b0a      	cmp	r3, #10
 800a554:	d009      	beq.n	800a56a <WiFi_Conn_ND+0x4fa>
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a55c:	2b0d      	cmp	r3, #13
 800a55e:	d004      	beq.n	800a56a <WiFi_Conn_ND+0x4fa>
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a566:	2b03      	cmp	r3, #3
 800a568:	d10a      	bne.n	800a580 <WiFi_Conn_ND+0x510>
				{
					ConectarWIFI(b);
 800a56a:	68f8      	ldr	r0, [r7, #12]
 800a56c:	f7fc f956 	bl	800681c <ConectarWIFI>
					b->_estado_conexion=CONEXION_EN_CURSO;
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	22c8      	movs	r2, #200	; 0xc8
 800a574:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	2200      	movs	r2, #0
 800a57c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
				}

				if(b->_estado==at_restart	)					  //Reinicio involuntario de módulo
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a586:	2b04      	cmp	r3, #4
 800a588:	d10e      	bne.n	800a5a8 <WiFi_Conn_ND+0x538>
					{
						Cambiar_CWMODE(b);
 800a58a:	68f8      	ldr	r0, [r7, #12]
 800a58c:	f7fc f930 	bl	80067f0 <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	2264      	movs	r2, #100	; 0x64
 800a594:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	2200      	movs	r2, #0
 800a59c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	2200      	movs	r2, #0
 800a5a4:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
//220818
				if(b->_TCP_Local_Server_EN)//
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d011      	beq.n	800a5d6 <WiFi_Conn_ND+0x566>
				{//
					CrearServidorTCP(b);
 800a5b2:	68f8      	ldr	r0, [r7, #12]
 800a5b4:	f7fc f9a0 	bl	80068f8 <CrearServidorTCP>
					b->_estado_conexion=TCP_SRVR_EN_CURSO;
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	f44f 7248 	mov.w	r2, #800	; 0x320
 800a5be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	2200      	movs	r2, #0
 800a5c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	2200      	movs	r2, #0
 800a5ce:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
					MUX(b);									//Si me conecté seteo las múltiples Conexiones
					b->_estado_conexion=MUX_CONN_EN_CURSO;
					b->_estado=0;
				}//
			}
			break;
 800a5d2:	f001 ba3e 	b.w	800ba52 <WiFi_Conn_ND+0x19e2>
					MUX(b);									//Si me conecté seteo las múltiples Conexiones
 800a5d6:	68f8      	ldr	r0, [r7, #12]
 800a5d8:	f7fc f936 	bl	8006848 <MUX>
					b->_estado_conexion=MUX_CONN_EN_CURSO;
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800a5e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	2200      	movs	r2, #0
 800a5ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
			break;
 800a5ee:	f001 ba30 	b.w	800ba52 <WiFi_Conn_ND+0x19e2>
			case DESCONEXION_EN_CURSO:			//Desconectar WiFi
			{
				if((b->_estado!=300)&&(b->_estado!=at_restart)&&(b->_estado!=at_wifi_disconnect)&&(b->_estado!=at_deconectar_ok ))	//Si estoy conectando, no vuelvo a conectar.
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a5f8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800a5fc:	d03b      	beq.n	800a676 <WiFi_Conn_ND+0x606>
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a604:	2b04      	cmp	r3, #4
 800a606:	d036      	beq.n	800a676 <WiFi_Conn_ND+0x606>
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a60e:	2b0a      	cmp	r3, #10
 800a610:	d031      	beq.n	800a676 <WiFi_Conn_ND+0x606>
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a618:	2b0d      	cmp	r3, #13
 800a61a:	d02c      	beq.n	800a676 <WiFi_Conn_ND+0x606>
				{
						DesconectarWIFI(b);
 800a61c:	68f8      	ldr	r0, [r7, #12]
 800a61e:	f7fc f93f 	bl	80068a0 <DesconectarWIFI>
						if(b->_enviaruart==1)
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 800a628:	2b01      	cmp	r3, #1
 800a62a:	d124      	bne.n	800a676 <WiFi_Conn_ND+0x606>
							{
								b->_estado=AT_ESP8266_ND(b);
 800a62c:	68f8      	ldr	r0, [r7, #12]
 800a62e:	f7fc fa75 	bl	8006b1c <AT_ESP8266_ND>
 800a632:	4602      	mov	r2, r0
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_enviaruart=0;
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	2200      	movs	r2, #0
 800a63e:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	f8d3 3d5c 	ldr.w	r3, [r3, #3420]	; 0xd5c
 800a648:	2b01      	cmp	r3, #1
 800a64a:	d109      	bne.n	800a660 <WiFi_Conn_ND+0x5f0>
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	f503 6293 	add.w	r2, r3, #1176	; 0x498
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	f8d3 3cf4 	ldr.w	r3, [r3, #3316]	; 0xcf4
 800a658:	4619      	mov	r1, r3
 800a65a:	4610      	mov	r0, r2
 800a65c:	f7f6 ffe8 	bl	8001630 <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	f503 6193 	add.w	r1, r3, #1176	; 0x498
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	f8d3 3cf4 	ldr.w	r3, [r3, #3316]	; 0xcf4
 800a66c:	b29a      	uxth	r2, r3
 800a66e:	2364      	movs	r3, #100	; 0x64
 800a670:	68b8      	ldr	r0, [r7, #8]
 800a672:	f7fb f819 	bl	80056a8 <HAL_UART_Transmit>

							}
				}

				//----Condiciones de cambio de estado
				if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) b->_estado_conexion=DESCONEXION_OK; 	//Ya puedo pedir conexi�n TCP
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a67c:	2b0a      	cmp	r3, #10
 800a67e:	d005      	beq.n	800a68c <WiFi_Conn_ND+0x61c>
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a686:	2b0d      	cmp	r3, #13
 800a688:	f041 81bc 	bne.w	800ba04 <WiFi_Conn_ND+0x1994>
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	f240 1235 	movw	r2, #309	; 0x135
 800a692:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				//----Condiciones de cambio de estado
			}
			break;
 800a696:	f001 b9b5 	b.w	800ba04 <WiFi_Conn_ND+0x1994>
			case DESCONEXION_ERROR ://Error al Desconectar WiFi
			{
				NOP(b);
 800a69a:	68f8      	ldr	r0, [r7, #12]
 800a69c:	f7fc f892 	bl	80067c4 <NOP>
			}
			break;
 800a6a0:	f001 b9d7 	b.w	800ba52 <WiFi_Conn_ND+0x19e2>
			case DESCONEXION_OK ://Desconectar WiFi OK
			{
				b->_n_orig=0; //Borro el vector RX
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	2200      	movs	r2, #0
 800a6a8:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4

				ConectarWIFI(b);
 800a6ac:	68f8      	ldr	r0, [r7, #12]
 800a6ae:	f7fc f8b5 	bl	800681c <ConectarWIFI>
				b->_estado_conexion=CONEXION_EN_CURSO;
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	22c8      	movs	r2, #200	; 0xc8
 800a6b6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				b->_estado=0;
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	2200      	movs	r2, #0
 800a6be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

					if(b->_estado==at_restart	)		//Reinicio involuntario de módulo
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a6c8:	2b04      	cmp	r3, #4
 800a6ca:	f041 819d 	bne.w	800ba08 <WiFi_Conn_ND+0x1998>
					{
						Cambiar_CWMODE(b);
 800a6ce:	68f8      	ldr	r0, [r7, #12]
 800a6d0:	f7fc f88e 	bl	80067f0 <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	2264      	movs	r2, #100	; 0x64
 800a6d8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	2200      	movs	r2, #0
 800a6e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88


						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	2200      	movs	r2, #0
 800a6e8:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
			}
			break;
 800a6ec:	f001 b98c 	b.w	800ba08 <WiFi_Conn_ND+0x1998>
			case MUX_CONN_EN_CURSO:			//Multiples Conexiones
			{
				if((b->_estado!=400)&&(b->_estado!=at_restart)
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a6f6:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800a6fa:	d04f      	beq.n	800a79c <WiFi_Conn_ND+0x72c>
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a702:	2b04      	cmp	r3, #4
 800a704:	d04a      	beq.n	800a79c <WiFi_Conn_ND+0x72c>
									&&(b->_estado!=at_ok)
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a70c:	2b01      	cmp	r3, #1
 800a70e:	d045      	beq.n	800a79c <WiFi_Conn_ND+0x72c>
									&&(b->_estado!=at_error)
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a716:	2b02      	cmp	r3, #2
 800a718:	d040      	beq.n	800a79c <WiFi_Conn_ND+0x72c>
									&&(b->_estado!=at_multiple_conn_ok)
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a720:	2b07      	cmp	r3, #7
 800a722:	d03b      	beq.n	800a79c <WiFi_Conn_ND+0x72c>
						            &&(b->_estado!=at_no_multiple_conn_ok)
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a72a:	2b08      	cmp	r3, #8
 800a72c:	d036      	beq.n	800a79c <WiFi_Conn_ND+0x72c>
									&&(b->_estado!=at_multiple_conn_err)
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a734:	2b1e      	cmp	r3, #30
 800a736:	d031      	beq.n	800a79c <WiFi_Conn_ND+0x72c>
									&&(b->_estado!=at_no_multiple_conn_err))	//Si estoy conectando, no vuelvo a conectar.
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a73e:	2b1f      	cmp	r3, #31
 800a740:	d02c      	beq.n	800a79c <WiFi_Conn_ND+0x72c>
				{
						MUX(b);
 800a742:	68f8      	ldr	r0, [r7, #12]
 800a744:	f7fc f880 	bl	8006848 <MUX>
						if(b->_enviaruart==1)
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 800a74e:	2b01      	cmp	r3, #1
 800a750:	d124      	bne.n	800a79c <WiFi_Conn_ND+0x72c>
							{
								b->_estado=AT_ESP8266_ND(b);
 800a752:	68f8      	ldr	r0, [r7, #12]
 800a754:	f7fc f9e2 	bl	8006b1c <AT_ESP8266_ND>
 800a758:	4602      	mov	r2, r0
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_enviaruart=0;
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	2200      	movs	r2, #0
 800a764:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	f8d3 3d5c 	ldr.w	r3, [r3, #3420]	; 0xd5c
 800a76e:	2b01      	cmp	r3, #1
 800a770:	d109      	bne.n	800a786 <WiFi_Conn_ND+0x716>
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	f503 6293 	add.w	r2, r3, #1176	; 0x498
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	f8d3 3cf4 	ldr.w	r3, [r3, #3316]	; 0xcf4
 800a77e:	4619      	mov	r1, r3
 800a780:	4610      	mov	r0, r2
 800a782:	f7f6 ff55 	bl	8001630 <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	f503 6193 	add.w	r1, r3, #1176	; 0x498
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	f8d3 3cf4 	ldr.w	r3, [r3, #3316]	; 0xcf4
 800a792:	b29a      	uxth	r2, r3
 800a794:	2364      	movs	r3, #100	; 0x64
 800a796:	68b8      	ldr	r0, [r7, #8]
 800a798:	f7fa ff86 	bl	80056a8 <HAL_UART_Transmit>

							}
				}

				//----Condiciones de cambio de estado
				if((b->_estado==at_ok)||(b->_estado==at_multiple_conn_ok)||(b->_estado==at_no_multiple_conn_ok)) b->_estado_conexion=MUX_CONN_OK;
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a7a2:	2b01      	cmp	r3, #1
 800a7a4:	d009      	beq.n	800a7ba <WiFi_Conn_ND+0x74a>
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a7ac:	2b07      	cmp	r3, #7
 800a7ae:	d004      	beq.n	800a7ba <WiFi_Conn_ND+0x74a>
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a7b6:	2b08      	cmp	r3, #8
 800a7b8:	d104      	bne.n	800a7c4 <WiFi_Conn_ND+0x754>
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	f240 1299 	movw	r2, #409	; 0x199
 800a7c0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				if((b->_estado==at_error)||(b->_estado==at_multiple_conn_err)||(b->_estado==at_no_multiple_conn_err))
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a7ca:	2b02      	cmp	r3, #2
 800a7cc:	d00a      	beq.n	800a7e4 <WiFi_Conn_ND+0x774>
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a7d4:	2b1e      	cmp	r3, #30
 800a7d6:	d005      	beq.n	800a7e4 <WiFi_Conn_ND+0x774>
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a7de:	2b1f      	cmp	r3, #31
 800a7e0:	f041 8114 	bne.w	800ba0c <WiFi_Conn_ND+0x199c>
					{
					b->_estado_conexion=MUX_CONN_ERROR;
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	f240 1295 	movw	r2, #405	; 0x195
 800a7ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					}
				//----Condiciones de cambio de estado
			}
			break;
 800a7ee:	f001 b90d 	b.w	800ba0c <WiFi_Conn_ND+0x199c>
			case MUX_CONN_ERROR://Error Multiples Conexiones
			{
				NOP(b);
 800a7f2:	68f8      	ldr	r0, [r7, #12]
 800a7f4:	f7fb ffe6 	bl	80067c4 <NOP>
				if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a7fe:	2b04      	cmp	r3, #4
 800a800:	d112      	bne.n	800a828 <WiFi_Conn_ND+0x7b8>
				{
					Cambiar_CWMODE(b);
 800a802:	68f8      	ldr	r0, [r7, #12]
 800a804:	f7fb fff4 	bl	80067f0 <Cambiar_CWMODE>
					b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	2264      	movs	r2, #100	; 0x64
 800a80c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	2200      	movs	r2, #0
 800a814:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	2200      	movs	r2, #0
 800a81c:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4

					b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	2200      	movs	r2, #0
 800a824:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
				}
				if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a82e:	2b0a      	cmp	r3, #10
 800a830:	d00a      	beq.n	800a848 <WiFi_Conn_ND+0x7d8>
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a838:	2b0d      	cmp	r3, #13
 800a83a:	d005      	beq.n	800a848 <WiFi_Conn_ND+0x7d8>
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a842:	2b03      	cmp	r3, #3
 800a844:	f041 80e4 	bne.w	800ba10 <WiFi_Conn_ND+0x19a0>
				{
					ConectarWIFI(b);
 800a848:	68f8      	ldr	r0, [r7, #12]
 800a84a:	f7fb ffe7 	bl	800681c <ConectarWIFI>
					b->_estado_conexion=CONEXION_EN_CURSO;
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	22c8      	movs	r2, #200	; 0xc8
 800a852:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	2200      	movs	r2, #0
 800a85a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	2200      	movs	r2, #0
 800a862:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
				}
			}
			break;
 800a866:	f001 b8d3 	b.w	800ba10 <WiFi_Conn_ND+0x19a0>
			case MUX_CONN_OK://Multiples Conexiones OK
			{
				NOP(b);
 800a86a:	68f8      	ldr	r0, [r7, #12]
 800a86c:	f7fb ffaa 	bl	80067c4 <NOP>
				b->_n_orig=0; //Borro el vector RX
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	2200      	movs	r2, #0
 800a874:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4

					if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a87e:	2b04      	cmp	r3, #4
 800a880:	d10e      	bne.n	800a8a0 <WiFi_Conn_ND+0x830>
					{
						Cambiar_CWMODE(b);
 800a882:	68f8      	ldr	r0, [r7, #12]
 800a884:	f7fb ffb4 	bl	80067f0 <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	2264      	movs	r2, #100	; 0x64
 800a88c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	2200      	movs	r2, #0
 800a894:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	2200      	movs	r2, #0
 800a89c:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
					if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a8a6:	2b0a      	cmp	r3, #10
 800a8a8:	d009      	beq.n	800a8be <WiFi_Conn_ND+0x84e>
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a8b0:	2b0d      	cmp	r3, #13
 800a8b2:	d004      	beq.n	800a8be <WiFi_Conn_ND+0x84e>
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a8ba:	2b03      	cmp	r3, #3
 800a8bc:	d10a      	bne.n	800a8d4 <WiFi_Conn_ND+0x864>
					{
						ConectarWIFI(b);
 800a8be:	68f8      	ldr	r0, [r7, #12]
 800a8c0:	f7fb ffac 	bl	800681c <ConectarWIFI>
						b->_estado_conexion=CONEXION_EN_CURSO;
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	22c8      	movs	r2, #200	; 0xc8
 800a8c8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	2200      	movs	r2, #0
 800a8d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					}
					if(b->_NO_IP==0)
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	f8d3 3d58 	ldr.w	r3, [r3, #3416]	; 0xd58
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d10d      	bne.n	800a8fa <WiFi_Conn_ND+0x88a>
					{
						IPDef(b);
 800a8de:	68f8      	ldr	r0, [r7, #12]
 800a8e0:	f7fb ffc8 	bl	8006874 <IPDef>
						b->_estado_conexion=DEF_IP_EN_CURSO;
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800a8ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	2200      	movs	r2, #0
 800a8f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_estado=0;
					}


			}
			break;
 800a8f6:	f001 b8ac 	b.w	800ba52 <WiFi_Conn_ND+0x19e2>
						IPDef(b);
 800a8fa:	68f8      	ldr	r0, [r7, #12]
 800a8fc:	f7fb ffba 	bl	8006874 <IPDef>
						b->_estado_conexion=DEF_IP_OK;
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	f240 12fd 	movw	r2, #509	; 0x1fd
 800a906:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	2200      	movs	r2, #0
 800a90e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
			break;
 800a912:	f001 b89e 	b.w	800ba52 <WiFi_Conn_ND+0x19e2>
			case DEF_IP_EN_CURSO:			//Definir IP
			{
				if((b->_estado!=500)&&(b->_estado!=at_restart)
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a91c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800a920:	d045      	beq.n	800a9ae <WiFi_Conn_ND+0x93e>
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a928:	2b04      	cmp	r3, #4
 800a92a:	d040      	beq.n	800a9ae <WiFi_Conn_ND+0x93e>
									&&(b->_estado!=at_ok)
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a932:	2b01      	cmp	r3, #1
 800a934:	d03b      	beq.n	800a9ae <WiFi_Conn_ND+0x93e>
									&&(b->_estado!=at_error)
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a93c:	2b02      	cmp	r3, #2
 800a93e:	d036      	beq.n	800a9ae <WiFi_Conn_ND+0x93e>
									&&(b->_estado!=at_def_ip_ok)
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a946:	2b1b      	cmp	r3, #27
 800a948:	d031      	beq.n	800a9ae <WiFi_Conn_ND+0x93e>
									&&(b->_estado!=at_def_ip_err))	//Si estoy conectando, no vuelvo a conectar.
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a950:	2b21      	cmp	r3, #33	; 0x21
 800a952:	d02c      	beq.n	800a9ae <WiFi_Conn_ND+0x93e>
				{
						IPDef(b);
 800a954:	68f8      	ldr	r0, [r7, #12]
 800a956:	f7fb ff8d 	bl	8006874 <IPDef>
						if(b->_enviaruart==1)
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 800a960:	2b01      	cmp	r3, #1
 800a962:	d124      	bne.n	800a9ae <WiFi_Conn_ND+0x93e>
							{
								b->_estado=AT_ESP8266_ND(b);
 800a964:	68f8      	ldr	r0, [r7, #12]
 800a966:	f7fc f8d9 	bl	8006b1c <AT_ESP8266_ND>
 800a96a:	4602      	mov	r2, r0
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_enviaruart=0;
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	2200      	movs	r2, #0
 800a976:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	f8d3 3d5c 	ldr.w	r3, [r3, #3420]	; 0xd5c
 800a980:	2b01      	cmp	r3, #1
 800a982:	d109      	bne.n	800a998 <WiFi_Conn_ND+0x928>
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	f503 6293 	add.w	r2, r3, #1176	; 0x498
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	f8d3 3cf4 	ldr.w	r3, [r3, #3316]	; 0xcf4
 800a990:	4619      	mov	r1, r3
 800a992:	4610      	mov	r0, r2
 800a994:	f7f6 fe4c 	bl	8001630 <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	f503 6193 	add.w	r1, r3, #1176	; 0x498
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	f8d3 3cf4 	ldr.w	r3, [r3, #3316]	; 0xcf4
 800a9a4:	b29a      	uxth	r2, r3
 800a9a6:	2364      	movs	r3, #100	; 0x64
 800a9a8:	68b8      	ldr	r0, [r7, #8]
 800a9aa:	f7fa fe7d 	bl	80056a8 <HAL_UART_Transmit>

							}
				}

				//----Condiciones de cambio de estado
				if((b->_estado==at_ok)||(b->_estado==at_def_ip_ok)) b->_estado_conexion=DEF_IP_OK;
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a9b4:	2b01      	cmp	r3, #1
 800a9b6:	d004      	beq.n	800a9c2 <WiFi_Conn_ND+0x952>
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a9be:	2b1b      	cmp	r3, #27
 800a9c0:	d104      	bne.n	800a9cc <WiFi_Conn_ND+0x95c>
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	f240 12fd 	movw	r2, #509	; 0x1fd
 800a9c8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				if((b->_estado==at_error)||(b->_estado==at_def_ip_err)) b->_estado_conexion=DEF_IP_ERROR;
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a9d2:	2b02      	cmp	r3, #2
 800a9d4:	d005      	beq.n	800a9e2 <WiFi_Conn_ND+0x972>
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a9dc:	2b21      	cmp	r3, #33	; 0x21
 800a9de:	f041 8019 	bne.w	800ba14 <WiFi_Conn_ND+0x19a4>
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	f240 12f9 	movw	r2, #505	; 0x1f9
 800a9e8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				//----Condiciones de cambio de estado
			}
			break;
 800a9ec:	f001 b812 	b.w	800ba14 <WiFi_Conn_ND+0x19a4>
			case DEF_IP_ERROR://Error Definir IP
			{
				NOP(b);
 800a9f0:	68f8      	ldr	r0, [r7, #12]
 800a9f2:	f7fb fee7 	bl	80067c4 <NOP>
				if((b->_estado==at_restart)||(b->_estado==at_error))		//Reinicio involuntario de módulo
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a9fc:	2b04      	cmp	r3, #4
 800a9fe:	d004      	beq.n	800aa0a <WiFi_Conn_ND+0x99a>
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa06:	2b02      	cmp	r3, #2
 800aa08:	d112      	bne.n	800aa30 <WiFi_Conn_ND+0x9c0>
				{
					Cambiar_CWMODE(b);
 800aa0a:	68f8      	ldr	r0, [r7, #12]
 800aa0c:	f7fb fef0 	bl	80067f0 <Cambiar_CWMODE>
					b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	2264      	movs	r2, #100	; 0x64
 800aa14:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	2200      	movs	r2, #0
 800aa1c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	2200      	movs	r2, #0
 800aa24:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4

					b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	2200      	movs	r2, #0
 800aa2c:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
				}
				if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa36:	2b0a      	cmp	r3, #10
 800aa38:	d00a      	beq.n	800aa50 <WiFi_Conn_ND+0x9e0>
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa40:	2b0d      	cmp	r3, #13
 800aa42:	d005      	beq.n	800aa50 <WiFi_Conn_ND+0x9e0>
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa4a:	2b03      	cmp	r3, #3
 800aa4c:	f040 87e4 	bne.w	800ba18 <WiFi_Conn_ND+0x19a8>
				{
					ConectarWIFI(b);
 800aa50:	68f8      	ldr	r0, [r7, #12]
 800aa52:	f7fb fee3 	bl	800681c <ConectarWIFI>
					b->_estado_conexion=CONEXION_EN_CURSO;
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	22c8      	movs	r2, #200	; 0xc8
 800aa5a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	2200      	movs	r2, #0
 800aa62:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	2200      	movs	r2, #0
 800aa6a:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
				}
			}
			break;
 800aa6e:	f000 bfd3 	b.w	800ba18 <WiFi_Conn_ND+0x19a8>
			case DEF_IP_OK://Definir IP OK
			{
				NOP(b);
 800aa72:	68f8      	ldr	r0, [r7, #12]
 800aa74:	f7fb fea6 	bl	80067c4 <NOP>

					if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa7e:	2b04      	cmp	r3, #4
 800aa80:	d112      	bne.n	800aaa8 <WiFi_Conn_ND+0xa38>
					{
						Cambiar_CWMODE(b);
 800aa82:	68f8      	ldr	r0, [r7, #12]
 800aa84:	f7fb feb4 	bl	80067f0 <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	2264      	movs	r2, #100	; 0x64
 800aa8c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	2200      	movs	r2, #0
 800aa94:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	2200      	movs	r2, #0
 800aa9c:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4

						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	2200      	movs	r2, #0
 800aaa4:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
					if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aaae:	2b0a      	cmp	r3, #10
 800aab0:	d009      	beq.n	800aac6 <WiFi_Conn_ND+0xa56>
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aab8:	2b0d      	cmp	r3, #13
 800aaba:	d004      	beq.n	800aac6 <WiFi_Conn_ND+0xa56>
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aac2:	2b03      	cmp	r3, #3
 800aac4:	d10e      	bne.n	800aae4 <WiFi_Conn_ND+0xa74>
					{
						ConectarWIFI(b);
 800aac6:	68f8      	ldr	r0, [r7, #12]
 800aac8:	f7fb fea8 	bl	800681c <ConectarWIFI>
						b->_estado_conexion=CONEXION_EN_CURSO;
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	22c8      	movs	r2, #200	; 0xc8
 800aad0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	2200      	movs	r2, #0
 800aad8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	2200      	movs	r2, #0
 800aae0:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
					}

//220818 lo anulado esta presente, para volver atras descomentar

					if (b->_TCP_Local_Server_EN==0)
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d111      	bne.n	800ab12 <WiFi_Conn_ND+0xaa2>
					{
						ConectarTCP(b);
 800aaee:	68f8      	ldr	r0, [r7, #12]
 800aaf0:	f7fb feec 	bl	80068cc <ConectarTCP>
						b->_estado_conexion=TCP_CONN_EN_CURSO;
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	f44f 7216 	mov.w	r2, #600	; 0x258
 800aafa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	2200      	movs	r2, #0
 800ab02:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	2200      	movs	r2, #0
 800ab0a:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
						b->_estado=0;//
						b->_n_orig=0;// //Borro el vector RX

					}
			}
			break;
 800ab0e:	f000 bfa0 	b.w	800ba52 <WiFi_Conn_ND+0x19e2>
						ConectarWIFI(b);//
 800ab12:	68f8      	ldr	r0, [r7, #12]
 800ab14:	f7fb fe82 	bl	800681c <ConectarWIFI>
						b->_estado_conexion=CONEXION_EN_CURSO;//
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	22c8      	movs	r2, #200	; 0xc8
 800ab1c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;//
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	2200      	movs	r2, #0
 800ab24:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0;// //Borro el vector RX
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	2200      	movs	r2, #0
 800ab2c:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
			break;
 800ab30:	f000 bf8f 	b.w	800ba52 <WiFi_Conn_ND+0x19e2>
			case TCP_CONN_EN_CURSO:			//Conectar a Servidor TCP
			{
				if((b->_estado!=600)&&(b->_estado!=at_error)
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab3a:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 800ab3e:	d04a      	beq.n	800abd6 <WiFi_Conn_ND+0xb66>
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab46:	2b02      	cmp	r3, #2
 800ab48:	d045      	beq.n	800abd6 <WiFi_Conn_ND+0xb66>
									&&(b->_estado!=at_ok)
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab50:	2b01      	cmp	r3, #1
 800ab52:	d040      	beq.n	800abd6 <WiFi_Conn_ND+0xb66>
									&&(b->_estado!=at_wifi_disconnect)
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab5a:	2b0a      	cmp	r3, #10
 800ab5c:	d03b      	beq.n	800abd6 <WiFi_Conn_ND+0xb66>
									&&(b->_estado!=at_tcp_alrdy_cnntd_err)
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab64:	2b0e      	cmp	r3, #14
 800ab66:	d036      	beq.n	800abd6 <WiFi_Conn_ND+0xb66>
									&&(b->_estado!=at_tcp_conectado)
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab6e:	2b0f      	cmp	r3, #15
 800ab70:	d031      	beq.n	800abd6 <WiFi_Conn_ND+0xb66>
									&&(b->_estado!=at_tcp_desconectado))	//Si estoy conectando, no vuelvo a conectar.
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab78:	2b10      	cmp	r3, #16
 800ab7a:	d02c      	beq.n	800abd6 <WiFi_Conn_ND+0xb66>
				{
					ConectarTCP(b);
 800ab7c:	68f8      	ldr	r0, [r7, #12]
 800ab7e:	f7fb fea5 	bl	80068cc <ConectarTCP>
						if(b->_enviaruart==1)
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 800ab88:	2b01      	cmp	r3, #1
 800ab8a:	d124      	bne.n	800abd6 <WiFi_Conn_ND+0xb66>
							{
								b->_estado=AT_ESP8266_ND(b);
 800ab8c:	68f8      	ldr	r0, [r7, #12]
 800ab8e:	f7fb ffc5 	bl	8006b1c <AT_ESP8266_ND>
 800ab92:	4602      	mov	r2, r0
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_enviaruart=0;
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	2200      	movs	r2, #0
 800ab9e:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	f8d3 3d5c 	ldr.w	r3, [r3, #3420]	; 0xd5c
 800aba8:	2b01      	cmp	r3, #1
 800abaa:	d109      	bne.n	800abc0 <WiFi_Conn_ND+0xb50>
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	f503 6293 	add.w	r2, r3, #1176	; 0x498
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	f8d3 3cf4 	ldr.w	r3, [r3, #3316]	; 0xcf4
 800abb8:	4619      	mov	r1, r3
 800abba:	4610      	mov	r0, r2
 800abbc:	f7f6 fd38 	bl	8001630 <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	f503 6193 	add.w	r1, r3, #1176	; 0x498
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	f8d3 3cf4 	ldr.w	r3, [r3, #3316]	; 0xcf4
 800abcc:	b29a      	uxth	r2, r3
 800abce:	2364      	movs	r3, #100	; 0x64
 800abd0:	68b8      	ldr	r0, [r7, #8]
 800abd2:	f7fa fd69 	bl	80056a8 <HAL_UART_Transmit>

							}
				}

				//----Condiciones de cambio de estado
				if((b->_estado==at_ok)||(b->_estado==at_tcp_alrdy_cnntd_err)||(b->_estado==at_tcp_conectado))
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800abdc:	2b01      	cmp	r3, #1
 800abde:	d009      	beq.n	800abf4 <WiFi_Conn_ND+0xb84>
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800abe6:	2b0e      	cmp	r3, #14
 800abe8:	d004      	beq.n	800abf4 <WiFi_Conn_ND+0xb84>
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800abf0:	2b0f      	cmp	r3, #15
 800abf2:	d106      	bne.n	800ac02 <WiFi_Conn_ND+0xb92>
					{
					b->_estado_conexion=TCP_CONN_OK;
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	f240 2261 	movw	r2, #609	; 0x261
 800abfa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				{
					if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado)) b->_estado_conexion=TCP_CONN_ERROR;
				}
				//----Condiciones de cambio de estado
			}
			break;
 800abfe:	f000 bf0d 	b.w	800ba1c <WiFi_Conn_ND+0x19ac>
					if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado)) b->_estado_conexion=TCP_CONN_ERROR;
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac08:	2b02      	cmp	r3, #2
 800ac0a:	d005      	beq.n	800ac18 <WiFi_Conn_ND+0xba8>
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac12:	2b10      	cmp	r3, #16
 800ac14:	f040 8702 	bne.w	800ba1c <WiFi_Conn_ND+0x19ac>
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	f240 225d 	movw	r2, #605	; 0x25d
 800ac1e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			break;
 800ac22:	f000 befb 	b.w	800ba1c <WiFi_Conn_ND+0x19ac>
			case TCP_CONN_ERROR://Error al Conectar a Servidor TCP
			{
				NOP(b);
 800ac26:	68f8      	ldr	r0, [r7, #12]
 800ac28:	f7fb fdcc 	bl	80067c4 <NOP>
				if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac32:	2b04      	cmp	r3, #4
 800ac34:	d112      	bne.n	800ac5c <WiFi_Conn_ND+0xbec>
				{
					Cambiar_CWMODE(b);
 800ac36:	68f8      	ldr	r0, [r7, #12]
 800ac38:	f7fb fdda 	bl	80067f0 <Cambiar_CWMODE>
					b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	2264      	movs	r2, #100	; 0x64
 800ac40:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	2200      	movs	r2, #0
 800ac48:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	2200      	movs	r2, #0
 800ac50:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4

					b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	2200      	movs	r2, #0
 800ac58:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
				}
				if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_tcp_noip_err)||(b->_estado==at_error)||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac62:	2b0a      	cmp	r3, #10
 800ac64:	d013      	beq.n	800ac8e <WiFi_Conn_ND+0xc1e>
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac6c:	2b0d      	cmp	r3, #13
 800ac6e:	d00e      	beq.n	800ac8e <WiFi_Conn_ND+0xc1e>
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac76:	2b22      	cmp	r3, #34	; 0x22
 800ac78:	d009      	beq.n	800ac8e <WiFi_Conn_ND+0xc1e>
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac80:	2b02      	cmp	r3, #2
 800ac82:	d004      	beq.n	800ac8e <WiFi_Conn_ND+0xc1e>
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac8a:	2b03      	cmp	r3, #3
 800ac8c:	d10e      	bne.n	800acac <WiFi_Conn_ND+0xc3c>
				{
					ConectarWIFI(b);
 800ac8e:	68f8      	ldr	r0, [r7, #12]
 800ac90:	f7fb fdc4 	bl	800681c <ConectarWIFI>
					b->_estado_conexion=CONEXION_EN_CURSO;
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	22c8      	movs	r2, #200	; 0xc8
 800ac98:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	2200      	movs	r2, #0
 800aca0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	2200      	movs	r2, #0
 800aca8:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
				}

				if((b->_estado==at_tcp_desconectado)||(b->_estado==at_tcp_alrdy_cnntd_err))	//Si se cierra la conexión vuelvo a conectar
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800acb2:	2b10      	cmp	r3, #16
 800acb4:	d005      	beq.n	800acc2 <WiFi_Conn_ND+0xc52>
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800acbc:	2b0e      	cmp	r3, #14
 800acbe:	f040 86af 	bne.w	800ba20 <WiFi_Conn_ND+0x19b0>
				{
					ConectarTCP(b);
 800acc2:	68f8      	ldr	r0, [r7, #12]
 800acc4:	f7fb fe02 	bl	80068cc <ConectarTCP>
					b->_estado_conexion=TCP_CONN_EN_CURSO;
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	f44f 7216 	mov.w	r2, #600	; 0x258
 800acce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	2200      	movs	r2, #0
 800acd6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	2200      	movs	r2, #0
 800acde:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
				}
			}
			break;
 800ace2:	f000 be9d 	b.w	800ba20 <WiFi_Conn_ND+0x19b0>
			case TCP_CONN_OK://Conectar a Servidor TCP OK
			{
				NOP(b);
 800ace6:	68f8      	ldr	r0, [r7, #12]
 800ace8:	f7fb fd6c 	bl	80067c4 <NOP>

					if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800acf2:	2b04      	cmp	r3, #4
 800acf4:	d112      	bne.n	800ad1c <WiFi_Conn_ND+0xcac>
					{
						Cambiar_CWMODE(b);
 800acf6:	68f8      	ldr	r0, [r7, #12]
 800acf8:	f7fb fd7a 	bl	80067f0 <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	2264      	movs	r2, #100	; 0x64
 800ad00:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	2200      	movs	r2, #0
 800ad08:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	2200      	movs	r2, #0
 800ad10:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4

						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	2200      	movs	r2, #0
 800ad18:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
					if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad22:	2b0a      	cmp	r3, #10
 800ad24:	d009      	beq.n	800ad3a <WiFi_Conn_ND+0xcca>
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad2c:	2b0d      	cmp	r3, #13
 800ad2e:	d004      	beq.n	800ad3a <WiFi_Conn_ND+0xcca>
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad36:	2b03      	cmp	r3, #3
 800ad38:	d10e      	bne.n	800ad58 <WiFi_Conn_ND+0xce8>
					{
						ConectarWIFI(b);
 800ad3a:	68f8      	ldr	r0, [r7, #12]
 800ad3c:	f7fb fd6e 	bl	800681c <ConectarWIFI>
						b->_estado_conexion=CONEXION_EN_CURSO;
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	22c8      	movs	r2, #200	; 0xc8
 800ad44:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	2200      	movs	r2, #0
 800ad4c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	2200      	movs	r2, #0
 800ad54:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
					}
					if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado))	//Si se cierra la conexión vuelvo a conectar
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad5e:	2b02      	cmp	r3, #2
 800ad60:	d004      	beq.n	800ad6c <WiFi_Conn_ND+0xcfc>
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad68:	2b10      	cmp	r3, #16
 800ad6a:	d10f      	bne.n	800ad8c <WiFi_Conn_ND+0xd1c>
					{
						ConectarTCP(b);
 800ad6c:	68f8      	ldr	r0, [r7, #12]
 800ad6e:	f7fb fdad 	bl	80068cc <ConectarTCP>
						b->_estado_conexion=TCP_CONN_EN_CURSO;
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	f44f 7216 	mov.w	r2, #600	; 0x258
 800ad78:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	2200      	movs	r2, #0
 800ad80:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX2
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	2200      	movs	r2, #0
 800ad88:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
					}
					if((b->_estado==at_tcp_alrdy_cnntd_err)||(b->_estado==at_tcp_conectado))
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad92:	2b0e      	cmp	r3, #14
 800ad94:	d005      	beq.n	800ada2 <WiFi_Conn_ND+0xd32>
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad9c:	2b0f      	cmp	r3, #15
 800ad9e:	f040 8641 	bne.w	800ba24 <WiFi_Conn_ND+0x19b4>
					{
						if(b->_automatizacion >= WF_SEND )
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800ada8:	2b02      	cmp	r3, #2
 800adaa:	f240 863b 	bls.w	800ba24 <WiFi_Conn_ND+0x19b4>
						{
							EnviarDatos(b);
 800adae:	68f8      	ldr	r0, [r7, #12]
 800adb0:	f7fb fdce 	bl	8006950 <EnviarDatos>
							b->_estado_conexion=TCP_SND_EN_CURSO;
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 800adba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
							b->_estado=0;
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	2200      	movs	r2, #0
 800adc2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
							b->_n_orig=0; //Borro el vector Rx
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	2200      	movs	r2, #0
 800adca:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
						}
					}
			}
			break;
 800adce:	f000 be29 	b.w	800ba24 <WiFi_Conn_ND+0x19b4>
			case TCP_SND_EN_CURSO:			//Enviar datos a Servidor TCP
			{
				if((b->_estado!=700)&&(b->_estado!=at_error)
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800add8:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800addc:	d054      	beq.n	800ae88 <WiFi_Conn_ND+0xe18>
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ade4:	2b02      	cmp	r3, #2
 800ade6:	d04f      	beq.n	800ae88 <WiFi_Conn_ND+0xe18>
									&&(b->_estado!=at_wifi_disconnect)
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800adee:	2b0a      	cmp	r3, #10
 800adf0:	d04a      	beq.n	800ae88 <WiFi_Conn_ND+0xe18>
									&&(b->_estado!=at_tcp_desconectado)
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800adf8:	2b10      	cmp	r3, #16
 800adfa:	d045      	beq.n	800ae88 <WiFi_Conn_ND+0xe18>
									&&(b->_estado!=at_tcp_snd_err)
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae02:	2b11      	cmp	r3, #17
 800ae04:	d040      	beq.n	800ae88 <WiFi_Conn_ND+0xe18>
									&&(b->_estado!=at_tcp_ok_to_send)
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae0c:	2b14      	cmp	r3, #20
 800ae0e:	d03b      	beq.n	800ae88 <WiFi_Conn_ND+0xe18>
									&&(b->_estado!=at_tcp_enviado_error))	//Si estoy conectando, no vuelvo a conectar.
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae16:	2b12      	cmp	r3, #18
 800ae18:	d036      	beq.n	800ae88 <WiFi_Conn_ND+0xe18>
				{

					if((b->_automatizacion >= WF_SEND)&&(b->_n_D2SND!=0))  // El envío por este medio es permanente
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800ae20:	2b02      	cmp	r3, #2
 800ae22:	d907      	bls.n	800ae34 <WiFi_Conn_ND+0xdc4>
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	f8d3 3cf0 	ldr.w	r3, [r3, #3312]	; 0xcf0
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d002      	beq.n	800ae34 <WiFi_Conn_ND+0xdc4>
					{	/*Ensure to have data before sending*/
							EnviarDatos(b);
 800ae2e:	68f8      	ldr	r0, [r7, #12]
 800ae30:	f7fb fd8e 	bl	8006950 <EnviarDatos>
					}
						if(b->_enviaruart==1)
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 800ae3a:	2b01      	cmp	r3, #1
 800ae3c:	d124      	bne.n	800ae88 <WiFi_Conn_ND+0xe18>
							{
								b->_estado=AT_ESP8266_ND(b);
 800ae3e:	68f8      	ldr	r0, [r7, #12]
 800ae40:	f7fb fe6c 	bl	8006b1c <AT_ESP8266_ND>
 800ae44:	4602      	mov	r2, r0
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_enviaruart=0;
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	2200      	movs	r2, #0
 800ae50:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	f8d3 3d5c 	ldr.w	r3, [r3, #3420]	; 0xd5c
 800ae5a:	2b01      	cmp	r3, #1
 800ae5c:	d109      	bne.n	800ae72 <WiFi_Conn_ND+0xe02>
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	f503 6293 	add.w	r2, r3, #1176	; 0x498
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	f8d3 3cf4 	ldr.w	r3, [r3, #3316]	; 0xcf4
 800ae6a:	4619      	mov	r1, r3
 800ae6c:	4610      	mov	r0, r2
 800ae6e:	f7f6 fbdf 	bl	8001630 <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	f503 6193 	add.w	r1, r3, #1176	; 0x498
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	f8d3 3cf4 	ldr.w	r3, [r3, #3316]	; 0xcf4
 800ae7e:	b29a      	uxth	r2, r3
 800ae80:	2364      	movs	r3, #100	; 0x64
 800ae82:	68b8      	ldr	r0, [r7, #8]
 800ae84:	f7fa fc10 	bl	80056a8 <HAL_UART_Transmit>


							}
				}
						if((b->_estado==700)&&(b->_enviaruart==1)
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae8e:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800ae92:	d145      	bne.n	800af20 <WiFi_Conn_ND+0xeb0>
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 800ae9a:	2b01      	cmp	r3, #1
 800ae9c:	d140      	bne.n	800af20 <WiFi_Conn_ND+0xeb0>
											&&(b->_estado!=at_error)
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aea4:	2b02      	cmp	r3, #2
 800aea6:	d03b      	beq.n	800af20 <WiFi_Conn_ND+0xeb0>
											&&(b->_estado!=at_tcp_noip_err)
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aeae:	2b22      	cmp	r3, #34	; 0x22
 800aeb0:	d036      	beq.n	800af20 <WiFi_Conn_ND+0xeb0>
											&&(b->_estado!=at_wifi_disconnect)
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aeb8:	2b0a      	cmp	r3, #10
 800aeba:	d031      	beq.n	800af20 <WiFi_Conn_ND+0xeb0>
											&&(b->_estado!=at_tcp_desconectado)
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aec2:	2b10      	cmp	r3, #16
 800aec4:	d02c      	beq.n	800af20 <WiFi_Conn_ND+0xeb0>
											&&(b->_estado!=at_fail)		//240419
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aecc:	2b03      	cmp	r3, #3
 800aece:	d027      	beq.n	800af20 <WiFi_Conn_ND+0xeb0>
											&&(b->_estado!=at_tcp_snd_err)
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aed6:	2b11      	cmp	r3, #17
 800aed8:	d022      	beq.n	800af20 <WiFi_Conn_ND+0xeb0>
											&&(b->_estado!=at_tcp_enviado_error))
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aee0:	2b12      	cmp	r3, #18
 800aee2:	d01d      	beq.n	800af20 <WiFi_Conn_ND+0xeb0>
							{
								b->_enviaruart=0;
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	2200      	movs	r2, #0
 800aee8:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	f8d3 3d5c 	ldr.w	r3, [r3, #3420]	; 0xd5c
 800aef2:	2b01      	cmp	r3, #1
 800aef4:	d109      	bne.n	800af0a <WiFi_Conn_ND+0xe9a>
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	f503 6293 	add.w	r2, r3, #1176	; 0x498
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	f8d3 3cf4 	ldr.w	r3, [r3, #3316]	; 0xcf4
 800af02:	4619      	mov	r1, r3
 800af04:	4610      	mov	r0, r2
 800af06:	f7f6 fb93 	bl	8001630 <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	f503 6193 	add.w	r1, r3, #1176	; 0x498
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	f8d3 3cf4 	ldr.w	r3, [r3, #3316]	; 0xcf4
 800af16:	b29a      	uxth	r2, r3
 800af18:	2364      	movs	r3, #100	; 0x64
 800af1a:	68b8      	ldr	r0, [r7, #8]
 800af1c:	f7fa fbc4 	bl	80056a8 <HAL_UART_Transmit>


							}

				//----Condiciones de cambio de estado
				if((b->_estado==at_tcp_enviado_ok)) b->_estado_conexion=TCP_SND_OK;
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af26:	2b13      	cmp	r3, #19
 800af28:	d104      	bne.n	800af34 <WiFi_Conn_ND+0xec4>
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	f240 22c5 	movw	r2, #709	; 0x2c5
 800af30:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				if((b->_estado==at_error)||(b->_estado==at_wifi_disconnect)
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af3a:	2b02      	cmp	r3, #2
 800af3c:	d01e      	beq.n	800af7c <WiFi_Conn_ND+0xf0c>
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af44:	2b0a      	cmp	r3, #10
 800af46:	d019      	beq.n	800af7c <WiFi_Conn_ND+0xf0c>
										 ||(b->_estado==at_fail)
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af4e:	2b03      	cmp	r3, #3
 800af50:	d014      	beq.n	800af7c <WiFi_Conn_ND+0xf0c>
										 ||(b->_estado==at_tcp_noip_err)
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af58:	2b22      	cmp	r3, #34	; 0x22
 800af5a:	d00f      	beq.n	800af7c <WiFi_Conn_ND+0xf0c>
										 ||(b->_estado==at_tcp_desconectado)
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af62:	2b10      	cmp	r3, #16
 800af64:	d00a      	beq.n	800af7c <WiFi_Conn_ND+0xf0c>
										 ||(b->_estado==at_tcp_snd_err)
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af6c:	2b11      	cmp	r3, #17
 800af6e:	d005      	beq.n	800af7c <WiFi_Conn_ND+0xf0c>
										 ||(b->_estado==at_tcp_enviado_error))
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af76:	2b12      	cmp	r3, #18
 800af78:	f040 8556 	bne.w	800ba28 <WiFi_Conn_ND+0x19b8>
					{
					b->_estado_conexion=TCP_SND_ERROR;
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	f240 22c1 	movw	r2, #705	; 0x2c1
 800af82:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_enviaruart==0;		//Si hay error no me arriesgo a que envíe algo
					}
				//----Condiciones de cambio de estado
			}
			break;
 800af86:	f000 bd4f 	b.w	800ba28 <WiFi_Conn_ND+0x19b8>
			case TCP_SND_ERROR://Error al Enviar datos a Servidor TCP
			{
				NOP(b);
 800af8a:	68f8      	ldr	r0, [r7, #12]
 800af8c:	f7fb fc1a 	bl	80067c4 <NOP>
				if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af96:	2b04      	cmp	r3, #4
 800af98:	d112      	bne.n	800afc0 <WiFi_Conn_ND+0xf50>
				{
					Cambiar_CWMODE(b);
 800af9a:	68f8      	ldr	r0, [r7, #12]
 800af9c:	f7fb fc28 	bl	80067f0 <Cambiar_CWMODE>
					b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	2264      	movs	r2, #100	; 0x64
 800afa4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	2200      	movs	r2, #0
 800afac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	2200      	movs	r2, #0
 800afb4:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4

					b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	2200      	movs	r2, #0
 800afbc:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
				}
				if((b->_estado==at_wifi_disconnect)
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800afc6:	2b0a      	cmp	r3, #10
 800afc8:	d013      	beq.n	800aff2 <WiFi_Conn_ND+0xf82>
						||(b->_estado==at_deconectar_ok )
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800afd0:	2b0d      	cmp	r3, #13
 800afd2:	d00e      	beq.n	800aff2 <WiFi_Conn_ND+0xf82>
						||(b->_estado==at_fail)
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800afda:	2b03      	cmp	r3, #3
 800afdc:	d009      	beq.n	800aff2 <WiFi_Conn_ND+0xf82>
						||(b->_estado!=at_error)
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800afe4:	2b02      	cmp	r3, #2
 800afe6:	d104      	bne.n	800aff2 <WiFi_Conn_ND+0xf82>
						||(b->_estado!=at_tcp_noip_err)) //Si me desconecto, me vuelvo a conectar 240419
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800afee:	2b22      	cmp	r3, #34	; 0x22
 800aff0:	d00e      	beq.n	800b010 <WiFi_Conn_ND+0xfa0>
				{
					ConectarWIFI(b);
 800aff2:	68f8      	ldr	r0, [r7, #12]
 800aff4:	f7fb fc12 	bl	800681c <ConectarWIFI>
					b->_estado_conexion=CONEXION_EN_CURSO;
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	22c8      	movs	r2, #200	; 0xc8
 800affc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	2200      	movs	r2, #0
 800b004:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	2200      	movs	r2, #0
 800b00c:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
				}

				if((b->_estado==at_wifi_gotip))	//220130 Si se cayó la conexion y vuelve a conectar, que conecte TCP nuevamente
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b016:	2b0c      	cmp	r3, #12
 800b018:	d10f      	bne.n	800b03a <WiFi_Conn_ND+0xfca>
				{
					ConectarTCP(b);
 800b01a:	68f8      	ldr	r0, [r7, #12]
 800b01c:	f7fb fc56 	bl	80068cc <ConectarTCP>
					b->_estado_conexion=TCP_CONN_EN_CURSO;
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	f44f 7216 	mov.w	r2, #600	; 0x258
 800b026:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	2200      	movs	r2, #0
 800b02e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	2200      	movs	r2, #0
 800b036:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
				}

				if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado)
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b040:	2b02      	cmp	r3, #2
 800b042:	d00f      	beq.n	800b064 <WiFi_Conn_ND+0xff4>
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b04a:	2b10      	cmp	r3, #16
 800b04c:	d00a      	beq.n	800b064 <WiFi_Conn_ND+0xff4>
										 ||(b->_estado==at_tcp_snd_err)
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b054:	2b11      	cmp	r3, #17
 800b056:	d005      	beq.n	800b064 <WiFi_Conn_ND+0xff4>
										 ||(b->_estado==at_tcp_enviado_error))	//Si se cierra la conexión vuelvo a conectar
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b05e:	2b12      	cmp	r3, #18
 800b060:	f040 84e4 	bne.w	800ba2c <WiFi_Conn_ND+0x19bc>
				{
					ConectarTCP(b);
 800b064:	68f8      	ldr	r0, [r7, #12]
 800b066:	f7fb fc31 	bl	80068cc <ConectarTCP>
					b->_estado_conexion=TCP_CONN_EN_CURSO;
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	f44f 7216 	mov.w	r2, #600	; 0x258
 800b070:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	2200      	movs	r2, #0
 800b078:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	2200      	movs	r2, #0
 800b080:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
				}
			}
			break;
 800b084:	f000 bcd2 	b.w	800ba2c <WiFi_Conn_ND+0x19bc>
			case TCP_SND_OK://Enviar datos a Servidor TCP OK
			{
				NOP(b);
 800b088:	68f8      	ldr	r0, [r7, #12]
 800b08a:	f7fb fb9b 	bl	80067c4 <NOP>

					if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b094:	2b04      	cmp	r3, #4
 800b096:	d112      	bne.n	800b0be <WiFi_Conn_ND+0x104e>
					{
						Cambiar_CWMODE(b);
 800b098:	68f8      	ldr	r0, [r7, #12]
 800b09a:	f7fb fba9 	bl	80067f0 <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	2264      	movs	r2, #100	; 0x64
 800b0a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	2200      	movs	r2, #0
 800b0aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	2200      	movs	r2, #0
 800b0b2:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4

						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	2200      	movs	r2, #0
 800b0ba:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
					if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b0c4:	2b0a      	cmp	r3, #10
 800b0c6:	d009      	beq.n	800b0dc <WiFi_Conn_ND+0x106c>
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b0ce:	2b0d      	cmp	r3, #13
 800b0d0:	d004      	beq.n	800b0dc <WiFi_Conn_ND+0x106c>
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b0d8:	2b03      	cmp	r3, #3
 800b0da:	d10e      	bne.n	800b0fa <WiFi_Conn_ND+0x108a>
					{
						ConectarWIFI(b);
 800b0dc:	68f8      	ldr	r0, [r7, #12]
 800b0de:	f7fb fb9d 	bl	800681c <ConectarWIFI>
						b->_estado_conexion=CONEXION_EN_CURSO;
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	22c8      	movs	r2, #200	; 0xc8
 800b0e6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800b0ea:	68fb      	ldr	r3, [r7, #12]
 800b0ec:	2200      	movs	r2, #0
 800b0ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	2200      	movs	r2, #0
 800b0f6:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
					}
					if((b->_estado==at_error)||(b->_estado==at_wifi_connected)||(b->_estado==at_wifi_gotip)||(b->_estado==at_tcp_desconectado))	//Si se cierra la conexión vuelvo a conectar
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b100:	2b02      	cmp	r3, #2
 800b102:	d00e      	beq.n	800b122 <WiFi_Conn_ND+0x10b2>
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b10a:	2b0b      	cmp	r3, #11
 800b10c:	d009      	beq.n	800b122 <WiFi_Conn_ND+0x10b2>
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b114:	2b0c      	cmp	r3, #12
 800b116:	d004      	beq.n	800b122 <WiFi_Conn_ND+0x10b2>
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b11e:	2b10      	cmp	r3, #16
 800b120:	d10f      	bne.n	800b142 <WiFi_Conn_ND+0x10d2>
					{
						ConectarTCP(b);
 800b122:	68f8      	ldr	r0, [r7, #12]
 800b124:	f7fb fbd2 	bl	80068cc <ConectarTCP>
						b->_estado_conexion=TCP_CONN_EN_CURSO;
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	f44f 7216 	mov.w	r2, #600	; 0x258
 800b12e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	2200      	movs	r2, #0
 800b136:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	2200      	movs	r2, #0
 800b13e:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
					}
					//EVITO EL REENVÍO PERMANENTE CON CLIENTE TCO, SOLO BAJO DEMANDA

					HAL_Delay(200);
 800b142:	20c8      	movs	r0, #200	; 0xc8
 800b144:	f7f7 fdfc 	bl	8002d40 <HAL_Delay>
					if((b->_automatizacion >= WF_SEND)&&(b->_n_D2SND!=0))//Check data availability after send process
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b14e:	2b02      	cmp	r3, #2
 800b150:	d916      	bls.n	800b180 <WiFi_Conn_ND+0x1110>
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	f8d3 3cf0 	ldr.w	r3, [r3, #3312]	; 0xcf0
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d011      	beq.n	800b180 <WiFi_Conn_ND+0x1110>
					{
							EnviarDatos(b);
 800b15c:	68f8      	ldr	r0, [r7, #12]
 800b15e:	f7fb fbf7 	bl	8006950 <EnviarDatos>
							b->_estado_conexion=TCP_SND_EN_CURSO;
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 800b168:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
							b->_estado=0;
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	2200      	movs	r2, #0
 800b170:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
							b->_n_orig=0; //Borro el vector RX
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	2200      	movs	r2, #0
 800b178:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
							b->_estado=0;
							b->_n_orig=0;

					}
			}
			break;
 800b17c:	f000 bc69 	b.w	800ba52 <WiFi_Conn_ND+0x19e2>
							b->_estado_conexion=TCP_CONN_OK;
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	f240 2261 	movw	r2, #609	; 0x261
 800b186:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
							b->_estado=0;
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	2200      	movs	r2, #0
 800b18e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
							b->_n_orig=0;
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	2200      	movs	r2, #0
 800b196:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
			break;
 800b19a:	f000 bc5a 	b.w	800ba52 <WiFi_Conn_ND+0x19e2>
			case TCP_SRVR_EN_CURSO:			//Conectar Servidor TCP local
						{
							if((b->_estado!=800)&&(b->_estado!=at_error)&&(b->_estado!=at_wifi_disconnect)&&(b->_estado!=21)&&(b->_estado!=22)&&(b->_estado!=23))	//Si estoy conectando, no vuelvo a conectar.
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b1a4:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800b1a8:	d045      	beq.n	800b236 <WiFi_Conn_ND+0x11c6>
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b1b0:	2b02      	cmp	r3, #2
 800b1b2:	d040      	beq.n	800b236 <WiFi_Conn_ND+0x11c6>
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b1ba:	2b0a      	cmp	r3, #10
 800b1bc:	d03b      	beq.n	800b236 <WiFi_Conn_ND+0x11c6>
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b1c4:	2b15      	cmp	r3, #21
 800b1c6:	d036      	beq.n	800b236 <WiFi_Conn_ND+0x11c6>
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b1ce:	2b16      	cmp	r3, #22
 800b1d0:	d031      	beq.n	800b236 <WiFi_Conn_ND+0x11c6>
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b1d8:	2b17      	cmp	r3, #23
 800b1da:	d02c      	beq.n	800b236 <WiFi_Conn_ND+0x11c6>
							{
								CrearServidorTCP(b);
 800b1dc:	68f8      	ldr	r0, [r7, #12]
 800b1de:	f7fb fb8b 	bl	80068f8 <CrearServidorTCP>
									if(b->_enviaruart==1)
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 800b1e8:	2b01      	cmp	r3, #1
 800b1ea:	d124      	bne.n	800b236 <WiFi_Conn_ND+0x11c6>
										{
											b->_estado=AT_ESP8266_ND(b);
 800b1ec:	68f8      	ldr	r0, [r7, #12]
 800b1ee:	f7fb fc95 	bl	8006b1c <AT_ESP8266_ND>
 800b1f2:	4602      	mov	r2, r0
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
											b->_enviaruart=0;
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	2200      	movs	r2, #0
 800b1fe:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
											if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	f8d3 3d5c 	ldr.w	r3, [r3, #3420]	; 0xd5c
 800b208:	2b01      	cmp	r3, #1
 800b20a:	d109      	bne.n	800b220 <WiFi_Conn_ND+0x11b0>
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	f503 6293 	add.w	r2, r3, #1176	; 0x498
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	f8d3 3cf4 	ldr.w	r3, [r3, #3316]	; 0xcf4
 800b218:	4619      	mov	r1, r3
 800b21a:	4610      	mov	r0, r2
 800b21c:	f7f6 fa08 	bl	8001630 <ITM0_Write>
											HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	f503 6193 	add.w	r1, r3, #1176	; 0x498
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	f8d3 3cf4 	ldr.w	r3, [r3, #3316]	; 0xcf4
 800b22c:	b29a      	uxth	r2, r3
 800b22e:	2364      	movs	r3, #100	; 0x64
 800b230:	68b8      	ldr	r0, [r7, #8]
 800b232:	f7fa fa39 	bl	80056a8 <HAL_UART_Transmit>

										}
							}

							//----Condiciones de cambio de estado
							if((b->_estado==21)||(b->_estado==23)) b->_estado_conexion=TCP_SRVR_OK;
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b23c:	2b15      	cmp	r3, #21
 800b23e:	d004      	beq.n	800b24a <WiFi_Conn_ND+0x11da>
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b246:	2b17      	cmp	r3, #23
 800b248:	d104      	bne.n	800b254 <WiFi_Conn_ND+0x11e4>
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	f240 3229 	movw	r2, #809	; 0x329
 800b250:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
							if((b->_estado==22)) b->_estado_conexion=TCP_SRVR_ERROR;
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b25a:	2b16      	cmp	r3, #22
 800b25c:	f040 83e8 	bne.w	800ba30 <WiFi_Conn_ND+0x19c0>
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	f240 3225 	movw	r2, #805	; 0x325
 800b266:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
							//----Condiciones de cambio de estado
						}
						break;
 800b26a:	e3e1      	b.n	800ba30 <WiFi_Conn_ND+0x19c0>
						case TCP_SRVR_ERROR://Error al Conectar Servidor TCP local
						{
							NOP(b);
 800b26c:	68f8      	ldr	r0, [r7, #12]
 800b26e:	f7fb faa9 	bl	80067c4 <NOP>
							if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b278:	2b04      	cmp	r3, #4
 800b27a:	d112      	bne.n	800b2a2 <WiFi_Conn_ND+0x1232>
							{
								Cambiar_CWMODE(b);
 800b27c:	68f8      	ldr	r0, [r7, #12]
 800b27e:	f7fb fab7 	bl	80067f0 <Cambiar_CWMODE>
								b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	2264      	movs	r2, #100	; 0x64
 800b286:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	2200      	movs	r2, #0
 800b28e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	2200      	movs	r2, #0
 800b296:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4

								b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	2200      	movs	r2, #0
 800b29e:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
							}
							if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b2a8:	2b0a      	cmp	r3, #10
 800b2aa:	d009      	beq.n	800b2c0 <WiFi_Conn_ND+0x1250>
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b2b2:	2b0d      	cmp	r3, #13
 800b2b4:	d004      	beq.n	800b2c0 <WiFi_Conn_ND+0x1250>
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b2bc:	2b03      	cmp	r3, #3
 800b2be:	d10e      	bne.n	800b2de <WiFi_Conn_ND+0x126e>
							{
								ConectarWIFI(b);
 800b2c0:	68f8      	ldr	r0, [r7, #12]
 800b2c2:	f7fb faab 	bl	800681c <ConectarWIFI>
								b->_estado_conexion=CONEXION_EN_CURSO;
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	22c8      	movs	r2, #200	; 0xc8
 800b2ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	2200      	movs	r2, #0
 800b2d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	2200      	movs	r2, #0
 800b2da:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
							}

							if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado))	//Si se cierra la conexión vuelvo a conectar
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b2e4:	2b02      	cmp	r3, #2
 800b2e6:	d005      	beq.n	800b2f4 <WiFi_Conn_ND+0x1284>
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b2ee:	2b10      	cmp	r3, #16
 800b2f0:	f040 83a0 	bne.w	800ba34 <WiFi_Conn_ND+0x19c4>
							{
								ConectarTCP(b);
 800b2f4:	68f8      	ldr	r0, [r7, #12]
 800b2f6:	f7fb fae9 	bl	80068cc <ConectarTCP>
								b->_estado_conexion=TCP_CONN_EN_CURSO;
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	f44f 7216 	mov.w	r2, #600	; 0x258
 800b300:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	2200      	movs	r2, #0
 800b308:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	2200      	movs	r2, #0
 800b310:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4

								b->_TCP_Local_Server_Initiated=0;//	//Indico servidor debe ser iniciado
							}*/

						}
						break;
 800b314:	e38e      	b.n	800ba34 <WiFi_Conn_ND+0x19c4>
						case TCP_SRVR_CLIENT_DSCNN://Error Conectar Servidor TCP local
						{
							NOP(b);
 800b316:	68f8      	ldr	r0, [r7, #12]
 800b318:	f7fb fa54 	bl	80067c4 <NOP>
							if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b322:	2b04      	cmp	r3, #4
 800b324:	d112      	bne.n	800b34c <WiFi_Conn_ND+0x12dc>
							{
								Cambiar_CWMODE(b);
 800b326:	68f8      	ldr	r0, [r7, #12]
 800b328:	f7fb fa62 	bl	80067f0 <Cambiar_CWMODE>
								b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	2264      	movs	r2, #100	; 0x64
 800b330:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	2200      	movs	r2, #0
 800b338:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	2200      	movs	r2, #0
 800b340:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4

								b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	2200      	movs	r2, #0
 800b348:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
							}
							if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b352:	2b0a      	cmp	r3, #10
 800b354:	d009      	beq.n	800b36a <WiFi_Conn_ND+0x12fa>
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b35c:	2b0d      	cmp	r3, #13
 800b35e:	d004      	beq.n	800b36a <WiFi_Conn_ND+0x12fa>
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b366:	2b03      	cmp	r3, #3
 800b368:	d10e      	bne.n	800b388 <WiFi_Conn_ND+0x1318>
							{
								ConectarWIFI(b);
 800b36a:	68f8      	ldr	r0, [r7, #12]
 800b36c:	f7fb fa56 	bl	800681c <ConectarWIFI>
								b->_estado_conexion=CONEXION_EN_CURSO;
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	22c8      	movs	r2, #200	; 0xc8
 800b374:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	2200      	movs	r2, #0
 800b37c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	2200      	movs	r2, #0
 800b384:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
							}

							if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado))	//Si se cierra la conexión vuelvo a conectar
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b38e:	2b02      	cmp	r3, #2
 800b390:	d005      	beq.n	800b39e <WiFi_Conn_ND+0x132e>
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b398:	2b10      	cmp	r3, #16
 800b39a:	f040 834d 	bne.w	800ba38 <WiFi_Conn_ND+0x19c8>
							{
								ConectarTCP(b);
 800b39e:	68f8      	ldr	r0, [r7, #12]
 800b3a0:	f7fb fa94 	bl	80068cc <ConectarTCP>
								b->_estado_conexion=TCP_CONN_EN_CURSO;
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	f44f 7216 	mov.w	r2, #600	; 0x258
 800b3aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	2200      	movs	r2, #0
 800b3b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	2200      	movs	r2, #0
 800b3ba:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
							}
						}
						break;
 800b3be:	e33b      	b.n	800ba38 <WiFi_Conn_ND+0x19c8>
						case TCP_SRVR_CLIENT_RX://Error al Conectar Servidor TCP local
						{
							NOP(b);
 800b3c0:	68f8      	ldr	r0, [r7, #12]
 800b3c2:	f7fb f9ff 	bl	80067c4 <NOP>
							if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b3cc:	2b04      	cmp	r3, #4
 800b3ce:	d112      	bne.n	800b3f6 <WiFi_Conn_ND+0x1386>
							{
								Cambiar_CWMODE(b);
 800b3d0:	68f8      	ldr	r0, [r7, #12]
 800b3d2:	f7fb fa0d 	bl	80067f0 <Cambiar_CWMODE>
								b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	2264      	movs	r2, #100	; 0x64
 800b3da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	2200      	movs	r2, #0
 800b3e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	2200      	movs	r2, #0
 800b3ea:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4

								b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	2200      	movs	r2, #0
 800b3f2:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
							}
							if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b3fc:	2b0a      	cmp	r3, #10
 800b3fe:	d009      	beq.n	800b414 <WiFi_Conn_ND+0x13a4>
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b406:	2b0d      	cmp	r3, #13
 800b408:	d004      	beq.n	800b414 <WiFi_Conn_ND+0x13a4>
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b410:	2b03      	cmp	r3, #3
 800b412:	d10e      	bne.n	800b432 <WiFi_Conn_ND+0x13c2>
							{
								ConectarWIFI(b);
 800b414:	68f8      	ldr	r0, [r7, #12]
 800b416:	f7fb fa01 	bl	800681c <ConectarWIFI>
								b->_estado_conexion=CONEXION_EN_CURSO;
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	22c8      	movs	r2, #200	; 0xc8
 800b41e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	2200      	movs	r2, #0
 800b426:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	2200      	movs	r2, #0
 800b42e:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
							}

							if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado))	//Si se cierra la conexión vuelvo a conectar
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b438:	2b02      	cmp	r3, #2
 800b43a:	d005      	beq.n	800b448 <WiFi_Conn_ND+0x13d8>
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b442:	2b10      	cmp	r3, #16
 800b444:	f040 82fa 	bne.w	800ba3c <WiFi_Conn_ND+0x19cc>
							{
								ConectarTCP(b);
 800b448:	68f8      	ldr	r0, [r7, #12]
 800b44a:	f7fb fa3f 	bl	80068cc <ConectarTCP>
								b->_estado_conexion=TCP_CONN_EN_CURSO;
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	f44f 7216 	mov.w	r2, #600	; 0x258
 800b454:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	2200      	movs	r2, #0
 800b45c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	2200      	movs	r2, #0
 800b464:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
							}
						}
						break;
 800b468:	e2e8      	b.n	800ba3c <WiFi_Conn_ND+0x19cc>
						case TCP_SRVR_CLIENT_CNN://Error al Conectar Servidor TCP local
						{
							NOP(b);
 800b46a:	68f8      	ldr	r0, [r7, #12]
 800b46c:	f7fb f9aa 	bl	80067c4 <NOP>
							if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b476:	2b04      	cmp	r3, #4
 800b478:	d112      	bne.n	800b4a0 <WiFi_Conn_ND+0x1430>
							{
								Cambiar_CWMODE(b);
 800b47a:	68f8      	ldr	r0, [r7, #12]
 800b47c:	f7fb f9b8 	bl	80067f0 <Cambiar_CWMODE>
								b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	2264      	movs	r2, #100	; 0x64
 800b484:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	2200      	movs	r2, #0
 800b48c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	2200      	movs	r2, #0
 800b494:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4

								b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	2200      	movs	r2, #0
 800b49c:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
							}
							if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b4a6:	2b0a      	cmp	r3, #10
 800b4a8:	d009      	beq.n	800b4be <WiFi_Conn_ND+0x144e>
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b4b0:	2b0d      	cmp	r3, #13
 800b4b2:	d004      	beq.n	800b4be <WiFi_Conn_ND+0x144e>
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b4ba:	2b03      	cmp	r3, #3
 800b4bc:	d10e      	bne.n	800b4dc <WiFi_Conn_ND+0x146c>
							{
								ConectarWIFI(b);
 800b4be:	68f8      	ldr	r0, [r7, #12]
 800b4c0:	f7fb f9ac 	bl	800681c <ConectarWIFI>
								b->_estado_conexion=CONEXION_EN_CURSO;
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	22c8      	movs	r2, #200	; 0xc8
 800b4c8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	2200      	movs	r2, #0
 800b4d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	2200      	movs	r2, #0
 800b4d8:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
							}

							if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado))	//Si se cierra la conexión vuelvo a conectar
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b4e2:	2b02      	cmp	r3, #2
 800b4e4:	d005      	beq.n	800b4f2 <WiFi_Conn_ND+0x1482>
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b4ec:	2b10      	cmp	r3, #16
 800b4ee:	f040 82a7 	bne.w	800ba40 <WiFi_Conn_ND+0x19d0>
							{
								ConectarTCP(b);
 800b4f2:	68f8      	ldr	r0, [r7, #12]
 800b4f4:	f7fb f9ea 	bl	80068cc <ConectarTCP>
								b->_estado_conexion=TCP_CONN_EN_CURSO;
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	f44f 7216 	mov.w	r2, #600	; 0x258
 800b4fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	2200      	movs	r2, #0
 800b506:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	2200      	movs	r2, #0
 800b50e:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
							}
						}
						break;
 800b512:	e295      	b.n	800ba40 <WiFi_Conn_ND+0x19d0>
						case TCP_SRVR_OK://Conectar Servidor TCP local OK
						{
							NOP(b);
 800b514:	68f8      	ldr	r0, [r7, #12]
 800b516:	f7fb f955 	bl	80067c4 <NOP>
								b->_TCP_Local_Server_Initiated=1;
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	2201      	movs	r2, #1
 800b51e:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83

								if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b528:	2b04      	cmp	r3, #4
 800b52a:	d112      	bne.n	800b552 <WiFi_Conn_ND+0x14e2>
								{
									Cambiar_CWMODE(b);
 800b52c:	68f8      	ldr	r0, [r7, #12]
 800b52e:	f7fb f95f 	bl	80067f0 <Cambiar_CWMODE>
									b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	2264      	movs	r2, #100	; 0x64
 800b536:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	2200      	movs	r2, #0
 800b53e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	2200      	movs	r2, #0
 800b546:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4

									b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	2200      	movs	r2, #0
 800b54e:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
								}
								if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b558:	2b0a      	cmp	r3, #10
 800b55a:	d009      	beq.n	800b570 <WiFi_Conn_ND+0x1500>
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b562:	2b0d      	cmp	r3, #13
 800b564:	d004      	beq.n	800b570 <WiFi_Conn_ND+0x1500>
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b56c:	2b03      	cmp	r3, #3
 800b56e:	d10e      	bne.n	800b58e <WiFi_Conn_ND+0x151e>
								{
									ConectarWIFI(b);
 800b570:	68f8      	ldr	r0, [r7, #12]
 800b572:	f7fb f953 	bl	800681c <ConectarWIFI>
									b->_estado_conexion=CONEXION_EN_CURSO;
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	22c8      	movs	r2, #200	; 0xc8
 800b57a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	2200      	movs	r2, #0
 800b582:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	2200      	movs	r2, #0
 800b58a:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
								}
								if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado))	//Si se cierra la conexión vuelvo a conectar
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b594:	2b02      	cmp	r3, #2
 800b596:	d004      	beq.n	800b5a2 <WiFi_Conn_ND+0x1532>
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b59e:	2b10      	cmp	r3, #16
 800b5a0:	d10f      	bne.n	800b5c2 <WiFi_Conn_ND+0x1552>
								{
									ConectarTCP(b);
 800b5a2:	68f8      	ldr	r0, [r7, #12]
 800b5a4:	f7fb f992 	bl	80068cc <ConectarTCP>
									b->_estado_conexion=TCP_CONN_EN_CURSO;
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	f44f 7216 	mov.w	r2, #600	; 0x258
 800b5ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	2200      	movs	r2, #0
 800b5b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	2200      	movs	r2, #0
 800b5be:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
									b->_estado_conexion=TCP_SRVR_TX_EN_CURSO;
									b->_estado=0;
									b->_n_orig=0; //Borro el vector RX
								}*/

								if((b->_send_data==1)&&(b->_n_D2SND!=0)) //Check data availability after send process
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	f8d3 3a9c 	ldr.w	r3, [r3, #2716]	; 0xa9c
 800b5c8:	2b01      	cmp	r3, #1
 800b5ca:	f040 823b 	bne.w	800ba44 <WiFi_Conn_ND+0x19d4>
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	f8d3 3cf0 	ldr.w	r3, [r3, #3312]	; 0xcf0
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	f000 8235 	beq.w	800ba44 <WiFi_Conn_ND+0x19d4>
								{
									EnviarDatosSRVR(b);
 800b5da:	68f8      	ldr	r0, [r7, #12]
 800b5dc:	f7fb f9a2 	bl	8006924 <EnviarDatosSRVR>
									b->_estado_conexion=TCP_SRVR_TX_EN_CURSO;
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	f44f 7261 	mov.w	r2, #900	; 0x384
 800b5e6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	2200      	movs	r2, #0
 800b5ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	2200      	movs	r2, #0
 800b5f6:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
									b->_send_data==0;//b->_new_data_rcv=0; 220219
								}
						}
						break;
 800b5fa:	e223      	b.n	800ba44 <WiFi_Conn_ND+0x19d4>

						case TCP_SRVR_TX_EN_CURSO:			//Enviar datos desde Servidor TCP
						{
							if((b->_estado!=900)&&(b->_estado!=at_error)&&
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b602:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 800b606:	d063      	beq.n	800b6d0 <WiFi_Conn_ND+0x1660>
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b60e:	2b02      	cmp	r3, #2
 800b610:	d05e      	beq.n	800b6d0 <WiFi_Conn_ND+0x1660>
							   (b->_estado!=at_wifi_disconnect)&&
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							if((b->_estado!=900)&&(b->_estado!=at_error)&&
 800b618:	2b0a      	cmp	r3, #10
 800b61a:	d059      	beq.n	800b6d0 <WiFi_Conn_ND+0x1660>
							   (b->_estado!=at_wifi_connected)&&
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_wifi_disconnect)&&
 800b622:	2b0b      	cmp	r3, #11
 800b624:	d054      	beq.n	800b6d0 <WiFi_Conn_ND+0x1660>
							   (b->_estado!=at_wifi_gotip)&&
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_wifi_connected)&&
 800b62c:	2b0c      	cmp	r3, #12
 800b62e:	d04f      	beq.n	800b6d0 <WiFi_Conn_ND+0x1660>
							   (b->_estado!=at_tcp_desconectado)&&
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_wifi_gotip)&&
 800b636:	2b10      	cmp	r3, #16
 800b638:	d04a      	beq.n	800b6d0 <WiFi_Conn_ND+0x1660>
							   (b->_estado!=at_tcp_snd_err)&&
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_tcp_desconectado)&&
 800b640:	2b11      	cmp	r3, #17
 800b642:	d045      	beq.n	800b6d0 <WiFi_Conn_ND+0x1660>
							   (b->_estado!=at_tcp_enviado_error)&&
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_tcp_snd_err)&&
 800b64a:	2b12      	cmp	r3, #18
 800b64c:	d040      	beq.n	800b6d0 <WiFi_Conn_ND+0x1660>
							   (b->_estado!=at_tcp_enviado_ok)&&
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_tcp_enviado_error)&&
 800b654:	2b13      	cmp	r3, #19
 800b656:	d03b      	beq.n	800b6d0 <WiFi_Conn_ND+0x1660>
							   (b->_estado!=22)&&(b->_estado!=25)&&(b->_n_D2SND!=0))	//Check data availability after send process
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_tcp_enviado_ok)&&
 800b65e:	2b16      	cmp	r3, #22
 800b660:	d036      	beq.n	800b6d0 <WiFi_Conn_ND+0x1660>
							   (b->_estado!=22)&&(b->_estado!=25)&&(b->_n_D2SND!=0))	//Check data availability after send process
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b668:	2b19      	cmp	r3, #25
 800b66a:	d031      	beq.n	800b6d0 <WiFi_Conn_ND+0x1660>
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	f8d3 3cf0 	ldr.w	r3, [r3, #3312]	; 0xcf0
 800b672:	2b00      	cmp	r3, #0
 800b674:	d02c      	beq.n	800b6d0 <WiFi_Conn_ND+0x1660>
								{
								EnviarDatosSRVR(b);
 800b676:	68f8      	ldr	r0, [r7, #12]
 800b678:	f7fb f954 	bl	8006924 <EnviarDatosSRVR>
									if(b->_enviaruart==1)
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 800b682:	2b01      	cmp	r3, #1
 800b684:	d124      	bne.n	800b6d0 <WiFi_Conn_ND+0x1660>
										{
											b->_estado=AT_ESP8266_ND(b);
 800b686:	68f8      	ldr	r0, [r7, #12]
 800b688:	f7fb fa48 	bl	8006b1c <AT_ESP8266_ND>
 800b68c:	4602      	mov	r2, r0
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
											b->_enviaruart=0;
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	2200      	movs	r2, #0
 800b698:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
											if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	f8d3 3d5c 	ldr.w	r3, [r3, #3420]	; 0xd5c
 800b6a2:	2b01      	cmp	r3, #1
 800b6a4:	d109      	bne.n	800b6ba <WiFi_Conn_ND+0x164a>
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	f503 6293 	add.w	r2, r3, #1176	; 0x498
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	f8d3 3cf4 	ldr.w	r3, [r3, #3316]	; 0xcf4
 800b6b2:	4619      	mov	r1, r3
 800b6b4:	4610      	mov	r0, r2
 800b6b6:	f7f5 ffbb 	bl	8001630 <ITM0_Write>
											HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	f503 6193 	add.w	r1, r3, #1176	; 0x498
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	f8d3 3cf4 	ldr.w	r3, [r3, #3316]	; 0xcf4
 800b6c6:	b29a      	uxth	r2, r3
 800b6c8:	2364      	movs	r3, #100	; 0x64
 800b6ca:	68b8      	ldr	r0, [r7, #8]
 800b6cc:	f7f9 ffec 	bl	80056a8 <HAL_UART_Transmit>


										}
							}
									if((b->_estado==900)&&(b->_enviaruart==1)&&
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b6d6:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 800b6da:	d154      	bne.n	800b786 <WiFi_Conn_ND+0x1716>
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 800b6e2:	2b01      	cmp	r3, #1
 800b6e4:	d14f      	bne.n	800b786 <WiFi_Conn_ND+0x1716>
									   (b->_estado!=at_error)&&
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									if((b->_estado==900)&&(b->_enviaruart==1)&&
 800b6ec:	2b02      	cmp	r3, #2
 800b6ee:	d04a      	beq.n	800b786 <WiFi_Conn_ND+0x1716>
									   (b->_estado!=at_wifi_disconnect)&&
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_error)&&
 800b6f6:	2b0a      	cmp	r3, #10
 800b6f8:	d045      	beq.n	800b786 <WiFi_Conn_ND+0x1716>
									   (b->_estado!=at_wifi_connected)&&
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_wifi_disconnect)&&
 800b700:	2b0b      	cmp	r3, #11
 800b702:	d040      	beq.n	800b786 <WiFi_Conn_ND+0x1716>
									   (b->_estado!=at_wifi_gotip)&&
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_wifi_connected)&&
 800b70a:	2b0c      	cmp	r3, #12
 800b70c:	d03b      	beq.n	800b786 <WiFi_Conn_ND+0x1716>
									   (b->_estado!=at_tcp_desconectado)&&
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_wifi_gotip)&&
 800b714:	2b10      	cmp	r3, #16
 800b716:	d036      	beq.n	800b786 <WiFi_Conn_ND+0x1716>
									   (b->_estado!=at_tcp_snd_err)&&
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_tcp_desconectado)&&
 800b71e:	2b11      	cmp	r3, #17
 800b720:	d031      	beq.n	800b786 <WiFi_Conn_ND+0x1716>
									   (b->_estado!=at_tcp_enviado_error)&&
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_tcp_snd_err)&&
 800b728:	2b12      	cmp	r3, #18
 800b72a:	d02c      	beq.n	800b786 <WiFi_Conn_ND+0x1716>
									   (b->_estado!=at_tcp_enviado_ok)&&
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_tcp_enviado_error)&&
 800b732:	2b13      	cmp	r3, #19
 800b734:	d027      	beq.n	800b786 <WiFi_Conn_ND+0x1716>
									   (b->_estado!=22)&&(b->_estado!=25))//210630 Se agrega 11 y 12 //
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_tcp_enviado_ok)&&
 800b73c:	2b16      	cmp	r3, #22
 800b73e:	d022      	beq.n	800b786 <WiFi_Conn_ND+0x1716>
									   (b->_estado!=22)&&(b->_estado!=25))//210630 Se agrega 11 y 12 //
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b746:	2b19      	cmp	r3, #25
 800b748:	d01d      	beq.n	800b786 <WiFi_Conn_ND+0x1716>
										{
											b->_enviaruart=0;
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	2200      	movs	r2, #0
 800b74e:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
											if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	f8d3 3d5c 	ldr.w	r3, [r3, #3420]	; 0xd5c
 800b758:	2b01      	cmp	r3, #1
 800b75a:	d109      	bne.n	800b770 <WiFi_Conn_ND+0x1700>
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	f503 6293 	add.w	r2, r3, #1176	; 0x498
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	f8d3 3cf4 	ldr.w	r3, [r3, #3316]	; 0xcf4
 800b768:	4619      	mov	r1, r3
 800b76a:	4610      	mov	r0, r2
 800b76c:	f7f5 ff60 	bl	8001630 <ITM0_Write>
											HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	f503 6193 	add.w	r1, r3, #1176	; 0x498
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	f8d3 3cf4 	ldr.w	r3, [r3, #3316]	; 0xcf4
 800b77c:	b29a      	uxth	r2, r3
 800b77e:	2364      	movs	r3, #100	; 0x64
 800b780:	68b8      	ldr	r0, [r7, #8]
 800b782:	f7f9 ff91 	bl	80056a8 <HAL_UART_Transmit>


										}

							//----Condiciones de cambio de estado
							if((b->_estado==at_tcp_enviado_ok)) b->_estado_conexion=TCP_SRVR_TX_OK;
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b78c:	2b13      	cmp	r3, #19
 800b78e:	d104      	bne.n	800b79a <WiFi_Conn_ND+0x172a>
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	f240 328d 	movw	r2, #909	; 0x38d
 800b796:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

							if((b->_estado==at_error)||(b->_estado==at_restart)||
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b7a0:	2b02      	cmp	r3, #2
 800b7a2:	d02d      	beq.n	800b800 <WiFi_Conn_ND+0x1790>
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b7aa:	2b04      	cmp	r3, #4
 800b7ac:	d028      	beq.n	800b800 <WiFi_Conn_ND+0x1790>
							   (b->_estado==at_wifi_disconnect)||(b->_estado==at_wifi_connected)||
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							if((b->_estado==at_error)||(b->_estado==at_restart)||
 800b7b4:	2b0a      	cmp	r3, #10
 800b7b6:	d023      	beq.n	800b800 <WiFi_Conn_ND+0x1790>
							   (b->_estado==at_wifi_disconnect)||(b->_estado==at_wifi_connected)||
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b7be:	2b0b      	cmp	r3, #11
 800b7c0:	d01e      	beq.n	800b800 <WiFi_Conn_ND+0x1790>
							   (b->_estado==at_wifi_gotip)||(b->_estado==at_tcp_desconectado)||
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado==at_wifi_disconnect)||(b->_estado==at_wifi_connected)||
 800b7c8:	2b0c      	cmp	r3, #12
 800b7ca:	d019      	beq.n	800b800 <WiFi_Conn_ND+0x1790>
							   (b->_estado==at_wifi_gotip)||(b->_estado==at_tcp_desconectado)||
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b7d2:	2b10      	cmp	r3, #16
 800b7d4:	d014      	beq.n	800b800 <WiFi_Conn_ND+0x1790>
							   (b->_estado==at_tcp_snd_err)||(b->_estado==at_tcp_enviado_error)||
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado==at_wifi_gotip)||(b->_estado==at_tcp_desconectado)||
 800b7dc:	2b11      	cmp	r3, #17
 800b7de:	d00f      	beq.n	800b800 <WiFi_Conn_ND+0x1790>
							   (b->_estado==at_tcp_snd_err)||(b->_estado==at_tcp_enviado_error)||
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b7e6:	2b12      	cmp	r3, #18
 800b7e8:	d00a      	beq.n	800b800 <WiFi_Conn_ND+0x1790>
							   (b->_estado==22)||(b->_estado==25))//210630 Se agrega ATDecode 4, 11 y 12
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado==at_tcp_snd_err)||(b->_estado==at_tcp_enviado_error)||
 800b7f0:	2b16      	cmp	r3, #22
 800b7f2:	d005      	beq.n	800b800 <WiFi_Conn_ND+0x1790>
							   (b->_estado==22)||(b->_estado==25))//210630 Se agrega ATDecode 4, 11 y 12
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b7fa:	2b19      	cmp	r3, #25
 800b7fc:	f040 8124 	bne.w	800ba48 <WiFi_Conn_ND+0x19d8>
								{
								b->_estado_conexion=TCP_SRVR_TX_ERROR;
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	f240 3289 	movw	r2, #905	; 0x389
 800b806:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_enviaruart==0;		//Si hay error no me arriesgo a que envíe algo
								}
							//----Condiciones de cambio de estado
						}
						break;
 800b80a:	e11d      	b.n	800ba48 <WiFi_Conn_ND+0x19d8>
						case TCP_SRVR_TX_ERROR://Error al Enviar datos a Servidor TCP
						{
							NOP(b);
 800b80c:	68f8      	ldr	r0, [r7, #12]
 800b80e:	f7fa ffd9 	bl	80067c4 <NOP>
							if((b->_estado==at_restart)||(b->_estado==at_wifi_connected)||(b->_estado==at_wifi_gotip))	//210630 Si se reconecta a este nivel hay que resetear		//Reinicio involuntario de módulo
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b818:	2b04      	cmp	r3, #4
 800b81a:	d009      	beq.n	800b830 <WiFi_Conn_ND+0x17c0>
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b822:	2b0b      	cmp	r3, #11
 800b824:	d004      	beq.n	800b830 <WiFi_Conn_ND+0x17c0>
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b82c:	2b0c      	cmp	r3, #12
 800b82e:	d112      	bne.n	800b856 <WiFi_Conn_ND+0x17e6>
							{
								Cambiar_CWMODE(b);
 800b830:	68f8      	ldr	r0, [r7, #12]
 800b832:	f7fa ffdd 	bl	80067f0 <Cambiar_CWMODE>
								b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	2264      	movs	r2, #100	; 0x64
 800b83a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	2200      	movs	r2, #0
 800b842:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	2200      	movs	r2, #0
 800b84a:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4

								b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	2200      	movs	r2, #0
 800b852:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
							}
							if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b85c:	2b0a      	cmp	r3, #10
 800b85e:	d009      	beq.n	800b874 <WiFi_Conn_ND+0x1804>
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b866:	2b0d      	cmp	r3, #13
 800b868:	d004      	beq.n	800b874 <WiFi_Conn_ND+0x1804>
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b870:	2b03      	cmp	r3, #3
 800b872:	d10e      	bne.n	800b892 <WiFi_Conn_ND+0x1822>
							{
								ConectarWIFI(b);
 800b874:	68f8      	ldr	r0, [r7, #12]
 800b876:	f7fa ffd1 	bl	800681c <ConectarWIFI>
								b->_estado_conexion=CONEXION_EN_CURSO;
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	22c8      	movs	r2, #200	; 0xc8
 800b87e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	2200      	movs	r2, #0
 800b886:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	2200      	movs	r2, #0
 800b88e:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
							}

							if(b->_estado==22)		//Error con el Servidor TCP
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b898:	2b16      	cmp	r3, #22
 800b89a:	d10c      	bne.n	800b8b6 <WiFi_Conn_ND+0x1846>
							{
								b->_estado_conexion=TCP_SRVR_ERROR;
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	f240 3225 	movw	r2, #805	; 0x325
 800b8a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	2200      	movs	r2, #0
 800b8aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	2200      	movs	r2, #0
 800b8b2:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
							}

							if(b->_estado==24)		//Se conecta nuevamente el cliente
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b8bc:	2b18      	cmp	r3, #24
 800b8be:	d10c      	bne.n	800b8da <WiFi_Conn_ND+0x186a>
							{
								b->_estado_conexion=TCP_SRVR_OK;  //Listo para enviar datos
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	f240 3229 	movw	r2, #809	; 0x329
 800b8c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	2200      	movs	r2, #0
 800b8ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	2200      	movs	r2, #0
 800b8d6:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
							}

							if((b->_estado==25)||(b->_estado==at_tcp_snd_err)||(b->_estado=at_tcp_enviado_error))		//Desconexion del cliente o error al enviar vuelvo al proceso de envío
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b8e0:	2b19      	cmp	r3, #25
 800b8e2:	d008      	beq.n	800b8f6 <WiFi_Conn_ND+0x1886>
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b8ea:	2b11      	cmp	r3, #17
 800b8ec:	d003      	beq.n	800b8f6 <WiFi_Conn_ND+0x1886>
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	2212      	movs	r2, #18
 800b8f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
							{
								if(b->_new_data_rcv==1) //Vuelvo a enviar solo cuando recibo nuevos datos
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	f8d3 3cdc 	ldr.w	r3, [r3, #3292]	; 0xcdc
 800b8fc:	2b01      	cmp	r3, #1
 800b8fe:	f040 80a5 	bne.w	800ba4c <WiFi_Conn_ND+0x19dc>
								{
									b->_estado_conexion=TCP_SRVR_TX_EN_CURSO;
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	f44f 7261 	mov.w	r2, #900	; 0x384
 800b908:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	2200      	movs	r2, #0
 800b910:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	2200      	movs	r2, #0
 800b918:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4

							}


						}
						break;
 800b91c:	e096      	b.n	800ba4c <WiFi_Conn_ND+0x19dc>
						case TCP_SRVR_TX_OK://Enviar datos a Servidor TCP OK
						{
							NOP(b);
 800b91e:	68f8      	ldr	r0, [r7, #12]
 800b920:	f7fa ff50 	bl	80067c4 <NOP>

								if((b->_estado==at_restart)||(b->_estado==at_wifi_connected)||(b->_estado==at_wifi_gotip))	//210630 Si se reconecta a este nivel hay que resetear	//Reinicio involuntario de módulo
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b92a:	2b04      	cmp	r3, #4
 800b92c:	d009      	beq.n	800b942 <WiFi_Conn_ND+0x18d2>
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b934:	2b0b      	cmp	r3, #11
 800b936:	d004      	beq.n	800b942 <WiFi_Conn_ND+0x18d2>
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b93e:	2b0c      	cmp	r3, #12
 800b940:	d112      	bne.n	800b968 <WiFi_Conn_ND+0x18f8>
								{
									Cambiar_CWMODE(b);
 800b942:	68f8      	ldr	r0, [r7, #12]
 800b944:	f7fa ff54 	bl	80067f0 <Cambiar_CWMODE>
									b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	2264      	movs	r2, #100	; 0x64
 800b94c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	2200      	movs	r2, #0
 800b954:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	2200      	movs	r2, #0
 800b95c:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4

									b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	2200      	movs	r2, #0
 800b964:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83

								}
								if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b96e:	2b0a      	cmp	r3, #10
 800b970:	d009      	beq.n	800b986 <WiFi_Conn_ND+0x1916>
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b978:	2b0d      	cmp	r3, #13
 800b97a:	d004      	beq.n	800b986 <WiFi_Conn_ND+0x1916>
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b982:	2b03      	cmp	r3, #3
 800b984:	d10e      	bne.n	800b9a4 <WiFi_Conn_ND+0x1934>
								{
									ConectarWIFI(b);
 800b986:	68f8      	ldr	r0, [r7, #12]
 800b988:	f7fa ff48 	bl	800681c <ConectarWIFI>
									b->_estado_conexion=CONEXION_EN_CURSO;
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	22c8      	movs	r2, #200	; 0xc8
 800b990:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	2200      	movs	r2, #0
 800b998:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	2200      	movs	r2, #0
 800b9a0:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
								}

								if(((b->_new_data_rcv==1)||(b->_send_data==1))&&(b->_n_D2SND!=0)) // Only send with data
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	f8d3 3cdc 	ldr.w	r3, [r3, #3292]	; 0xcdc
 800b9aa:	2b01      	cmp	r3, #1
 800b9ac:	d004      	beq.n	800b9b8 <WiFi_Conn_ND+0x1948>
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	f8d3 3a9c 	ldr.w	r3, [r3, #2716]	; 0xa9c
 800b9b4:	2b01      	cmp	r3, #1
 800b9b6:	d14b      	bne.n	800ba50 <WiFi_Conn_ND+0x19e0>
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	f8d3 3cf0 	ldr.w	r3, [r3, #3312]	; 0xcf0
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d046      	beq.n	800ba50 <WiFi_Conn_ND+0x19e0>
								{
									EnviarDatosSRVR(b);
 800b9c2:	68f8      	ldr	r0, [r7, #12]
 800b9c4:	f7fa ffae 	bl	8006924 <EnviarDatosSRVR>
									b->_estado_conexion=TCP_SRVR_TX_EN_CURSO;
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	f44f 7261 	mov.w	r2, #900	; 0x384
 800b9ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	2200      	movs	r2, #0
 800b9d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	2200      	movs	r2, #0
 800b9de:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
									b->_new_data_rcv=0;
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	2200      	movs	r2, #0
 800b9e6:	f8c3 2cdc 	str.w	r2, [r3, #3292]	; 0xcdc
									b->_send_data=0;
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	2200      	movs	r2, #0
 800b9ee:	f8c3 2a9c 	str.w	r2, [r3, #2716]	; 0xa9c
								}

						}
						break;
 800b9f2:	e02d      	b.n	800ba50 <WiFi_Conn_ND+0x19e0>
			break;
 800b9f4:	bf00      	nop
 800b9f6:	e02c      	b.n	800ba52 <WiFi_Conn_ND+0x19e2>
			break;
 800b9f8:	bf00      	nop
 800b9fa:	e02a      	b.n	800ba52 <WiFi_Conn_ND+0x19e2>
			break;
 800b9fc:	bf00      	nop
 800b9fe:	e028      	b.n	800ba52 <WiFi_Conn_ND+0x19e2>
			break;
 800ba00:	bf00      	nop
 800ba02:	e026      	b.n	800ba52 <WiFi_Conn_ND+0x19e2>
			break;
 800ba04:	bf00      	nop
 800ba06:	e024      	b.n	800ba52 <WiFi_Conn_ND+0x19e2>
			break;
 800ba08:	bf00      	nop
 800ba0a:	e022      	b.n	800ba52 <WiFi_Conn_ND+0x19e2>
			break;
 800ba0c:	bf00      	nop
 800ba0e:	e020      	b.n	800ba52 <WiFi_Conn_ND+0x19e2>
			break;
 800ba10:	bf00      	nop
 800ba12:	e01e      	b.n	800ba52 <WiFi_Conn_ND+0x19e2>
			break;
 800ba14:	bf00      	nop
 800ba16:	e01c      	b.n	800ba52 <WiFi_Conn_ND+0x19e2>
			break;
 800ba18:	bf00      	nop
 800ba1a:	e01a      	b.n	800ba52 <WiFi_Conn_ND+0x19e2>
			break;
 800ba1c:	bf00      	nop
 800ba1e:	e018      	b.n	800ba52 <WiFi_Conn_ND+0x19e2>
			break;
 800ba20:	bf00      	nop
 800ba22:	e016      	b.n	800ba52 <WiFi_Conn_ND+0x19e2>
			break;
 800ba24:	bf00      	nop
 800ba26:	e014      	b.n	800ba52 <WiFi_Conn_ND+0x19e2>
			break;
 800ba28:	bf00      	nop
 800ba2a:	e012      	b.n	800ba52 <WiFi_Conn_ND+0x19e2>
			break;
 800ba2c:	bf00      	nop
 800ba2e:	e010      	b.n	800ba52 <WiFi_Conn_ND+0x19e2>
						break;
 800ba30:	bf00      	nop
 800ba32:	e00e      	b.n	800ba52 <WiFi_Conn_ND+0x19e2>
						break;
 800ba34:	bf00      	nop
 800ba36:	e00c      	b.n	800ba52 <WiFi_Conn_ND+0x19e2>
						break;
 800ba38:	bf00      	nop
 800ba3a:	e00a      	b.n	800ba52 <WiFi_Conn_ND+0x19e2>
						break;
 800ba3c:	bf00      	nop
 800ba3e:	e008      	b.n	800ba52 <WiFi_Conn_ND+0x19e2>
						break;
 800ba40:	bf00      	nop
 800ba42:	e006      	b.n	800ba52 <WiFi_Conn_ND+0x19e2>
						break;
 800ba44:	bf00      	nop
 800ba46:	e004      	b.n	800ba52 <WiFi_Conn_ND+0x19e2>
						break;
 800ba48:	bf00      	nop
 800ba4a:	e002      	b.n	800ba52 <WiFi_Conn_ND+0x19e2>
						break;
 800ba4c:	bf00      	nop
 800ba4e:	e000      	b.n	800ba52 <WiFi_Conn_ND+0x19e2>
						break;
 800ba50:	bf00      	nop

		}
		return(b->_estado_conexion);
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
	}
 800ba58:	4618      	mov	r0, r3
 800ba5a:	3710      	adds	r7, #16
 800ba5c:	46bd      	mov	sp, r7
 800ba5e:	bd80      	pop	{r7, pc}

0800ba60 <httpPOST>:

char deviceId[]={',','"','d','e','v','I','d','"',':','\0'};


httpPOST(char * endpoint, char* server_ip, char * port,uint16_t d1, uint16_t d2, uint16_t d3, uint16_t d4,uint16_t d5,uint16_t d6,uint16_t d7,uint16_t d8,uint16_t d9,uint16_t d10, uint16_t d11,uint16_t d12,uint16_t d13,uint16_t d14,uint16_t d15,uint16_t d16, uint16_t devId, char  * post, char * body, int max_char)
{
 800ba60:	b5b0      	push	{r4, r5, r7, lr}
 800ba62:	b0a8      	sub	sp, #160	; 0xa0
 800ba64:	af00      	add	r7, sp, #0
 800ba66:	60f8      	str	r0, [r7, #12]
 800ba68:	60b9      	str	r1, [r7, #8]
 800ba6a:	607a      	str	r2, [r7, #4]
 800ba6c:	807b      	strh	r3, [r7, #2]
	post[0]='\0';
 800ba6e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800ba72:	2200      	movs	r2, #0
 800ba74:	701a      	strb	r2, [r3, #0]
	body[0]='\0';
 800ba76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ba7a:	2200      	movs	r2, #0
 800ba7c:	701a      	strb	r2, [r3, #0]
	strncat(post,"POST ",strlen("POST "));
 800ba7e:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800ba82:	f7f4 fbb7 	bl	80001f4 <strlen>
 800ba86:	4603      	mov	r3, r0
 800ba88:	461a      	mov	r2, r3
 800ba8a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800ba8e:	4413      	add	r3, r2
 800ba90:	4aed      	ldr	r2, [pc, #948]	; (800be48 <httpPOST+0x3e8>)
 800ba92:	6810      	ldr	r0, [r2, #0]
 800ba94:	6018      	str	r0, [r3, #0]
 800ba96:	8892      	ldrh	r2, [r2, #4]
 800ba98:	809a      	strh	r2, [r3, #4]
	strncat(post,endpoint,strlen(endpoint));
 800ba9a:	68f8      	ldr	r0, [r7, #12]
 800ba9c:	f7f4 fbaa 	bl	80001f4 <strlen>
 800baa0:	4603      	mov	r3, r0
 800baa2:	461a      	mov	r2, r3
 800baa4:	68f9      	ldr	r1, [r7, #12]
 800baa6:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800baaa:	f003 fe20 	bl	800f6ee <strncat>
	strncat(post,"/ HTTP/1.1",strlen("/ HTTP/1.1"));
 800baae:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800bab2:	f7f4 fb9f 	bl	80001f4 <strlen>
 800bab6:	4603      	mov	r3, r0
 800bab8:	461a      	mov	r2, r3
 800baba:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800babe:	4413      	add	r3, r2
 800bac0:	49e2      	ldr	r1, [pc, #904]	; (800be4c <httpPOST+0x3ec>)
 800bac2:	461a      	mov	r2, r3
 800bac4:	460b      	mov	r3, r1
 800bac6:	cb03      	ldmia	r3!, {r0, r1}
 800bac8:	6010      	str	r0, [r2, #0]
 800baca:	6051      	str	r1, [r2, #4]
 800bacc:	8819      	ldrh	r1, [r3, #0]
 800bace:	789b      	ldrb	r3, [r3, #2]
 800bad0:	8111      	strh	r1, [r2, #8]
 800bad2:	7293      	strb	r3, [r2, #10]
	strncat(post,"\r\n",strlen("\r\n"));
 800bad4:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800bad8:	f7f4 fb8c 	bl	80001f4 <strlen>
 800badc:	4603      	mov	r3, r0
 800bade:	461a      	mov	r2, r3
 800bae0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800bae4:	4413      	add	r3, r2
 800bae6:	4ada      	ldr	r2, [pc, #872]	; (800be50 <httpPOST+0x3f0>)
 800bae8:	8811      	ldrh	r1, [r2, #0]
 800baea:	7892      	ldrb	r2, [r2, #2]
 800baec:	8019      	strh	r1, [r3, #0]
 800baee:	709a      	strb	r2, [r3, #2]

	strncat(post,"Host: ",strlen("Host: "));
 800baf0:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800baf4:	f7f4 fb7e 	bl	80001f4 <strlen>
 800baf8:	4603      	mov	r3, r0
 800bafa:	461a      	mov	r2, r3
 800bafc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800bb00:	4413      	add	r3, r2
 800bb02:	4ad4      	ldr	r2, [pc, #848]	; (800be54 <httpPOST+0x3f4>)
 800bb04:	6810      	ldr	r0, [r2, #0]
 800bb06:	6018      	str	r0, [r3, #0]
 800bb08:	8891      	ldrh	r1, [r2, #4]
 800bb0a:	7992      	ldrb	r2, [r2, #6]
 800bb0c:	8099      	strh	r1, [r3, #4]
 800bb0e:	719a      	strb	r2, [r3, #6]
	strncat(post,server_ip,strlen(server_ip));
 800bb10:	68b8      	ldr	r0, [r7, #8]
 800bb12:	f7f4 fb6f 	bl	80001f4 <strlen>
 800bb16:	4603      	mov	r3, r0
 800bb18:	461a      	mov	r2, r3
 800bb1a:	68b9      	ldr	r1, [r7, #8]
 800bb1c:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800bb20:	f003 fde5 	bl	800f6ee <strncat>
	strncat(post,":",1);
 800bb24:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800bb28:	f7f4 fb64 	bl	80001f4 <strlen>
 800bb2c:	4603      	mov	r3, r0
 800bb2e:	461a      	mov	r2, r3
 800bb30:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800bb34:	4413      	add	r3, r2
 800bb36:	49c8      	ldr	r1, [pc, #800]	; (800be58 <httpPOST+0x3f8>)
 800bb38:	461a      	mov	r2, r3
 800bb3a:	460b      	mov	r3, r1
 800bb3c:	881b      	ldrh	r3, [r3, #0]
 800bb3e:	8013      	strh	r3, [r2, #0]
	strncat(post,port,strlen(port));
 800bb40:	6878      	ldr	r0, [r7, #4]
 800bb42:	f7f4 fb57 	bl	80001f4 <strlen>
 800bb46:	4603      	mov	r3, r0
 800bb48:	461a      	mov	r2, r3
 800bb4a:	6879      	ldr	r1, [r7, #4]
 800bb4c:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800bb50:	f003 fdcd 	bl	800f6ee <strncat>



	strncat(post,"\r\n",strlen("\r\n"));
 800bb54:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800bb58:	f7f4 fb4c 	bl	80001f4 <strlen>
 800bb5c:	4603      	mov	r3, r0
 800bb5e:	461a      	mov	r2, r3
 800bb60:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800bb64:	4413      	add	r3, r2
 800bb66:	4aba      	ldr	r2, [pc, #744]	; (800be50 <httpPOST+0x3f0>)
 800bb68:	8811      	ldrh	r1, [r2, #0]
 800bb6a:	7892      	ldrb	r2, [r2, #2]
 800bb6c:	8019      	strh	r1, [r3, #0]
 800bb6e:	709a      	strb	r2, [r3, #2]
	strncat(post,"Content-Type: application/JSON",strlen("Content-Type: application/JSON"));
 800bb70:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800bb74:	f7f4 fb3e 	bl	80001f4 <strlen>
 800bb78:	4603      	mov	r3, r0
 800bb7a:	461a      	mov	r2, r3
 800bb7c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800bb80:	4413      	add	r3, r2
 800bb82:	4ab6      	ldr	r2, [pc, #728]	; (800be5c <httpPOST+0x3fc>)
 800bb84:	461d      	mov	r5, r3
 800bb86:	4614      	mov	r4, r2
 800bb88:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800bb8a:	6028      	str	r0, [r5, #0]
 800bb8c:	6069      	str	r1, [r5, #4]
 800bb8e:	60aa      	str	r2, [r5, #8]
 800bb90:	60eb      	str	r3, [r5, #12]
 800bb92:	cc07      	ldmia	r4!, {r0, r1, r2}
 800bb94:	6128      	str	r0, [r5, #16]
 800bb96:	6169      	str	r1, [r5, #20]
 800bb98:	61aa      	str	r2, [r5, #24]
 800bb9a:	8823      	ldrh	r3, [r4, #0]
 800bb9c:	78a2      	ldrb	r2, [r4, #2]
 800bb9e:	83ab      	strh	r3, [r5, #28]
 800bba0:	4613      	mov	r3, r2
 800bba2:	77ab      	strb	r3, [r5, #30]
	strncat(post,"\r\n",strlen("\r\n"));
 800bba4:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800bba8:	f7f4 fb24 	bl	80001f4 <strlen>
 800bbac:	4603      	mov	r3, r0
 800bbae:	461a      	mov	r2, r3
 800bbb0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800bbb4:	4413      	add	r3, r2
 800bbb6:	4aa6      	ldr	r2, [pc, #664]	; (800be50 <httpPOST+0x3f0>)
 800bbb8:	8811      	ldrh	r1, [r2, #0]
 800bbba:	7892      	ldrb	r2, [r2, #2]
 800bbbc:	8019      	strh	r1, [r3, #0]
 800bbbe:	709a      	strb	r2, [r3, #2]
	strncat(post,"Content-Length:",strlen("Content-Length:"));
 800bbc0:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800bbc4:	f7f4 fb16 	bl	80001f4 <strlen>
 800bbc8:	4603      	mov	r3, r0
 800bbca:	461a      	mov	r2, r3
 800bbcc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800bbd0:	4413      	add	r3, r2
 800bbd2:	4aa3      	ldr	r2, [pc, #652]	; (800be60 <httpPOST+0x400>)
 800bbd4:	461c      	mov	r4, r3
 800bbd6:	4615      	mov	r5, r2
 800bbd8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bbda:	6020      	str	r0, [r4, #0]
 800bbdc:	6061      	str	r1, [r4, #4]
 800bbde:	60a2      	str	r2, [r4, #8]
 800bbe0:	60e3      	str	r3, [r4, #12]


	// Conversión de datos recibido por ModBUS
	char _d1[8];
	_d1[0]='\0';
 800bbe2:	2300      	movs	r3, #0
 800bbe4:	f887 3098 	strb.w	r3, [r7, #152]	; 0x98
	INTOA( d1, _d1);//FTOA( d1,_d1,2);
 800bbe8:	887b      	ldrh	r3, [r7, #2]
 800bbea:	f107 0298 	add.w	r2, r7, #152	; 0x98
 800bbee:	4611      	mov	r1, r2
 800bbf0:	4618      	mov	r0, r3
 800bbf2:	f003 faf5 	bl	800f1e0 <INTOA>

	char _d2[8];
	_d2[0]='\0';
 800bbf6:	2300      	movs	r3, #0
 800bbf8:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
	INTOA( d2, _d2);//FTOA( d2, _d2,2);//INTOA( dp_filtro, _filtro);//
 800bbfc:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 800bc00:	f107 0290 	add.w	r2, r7, #144	; 0x90
 800bc04:	4611      	mov	r1, r2
 800bc06:	4618      	mov	r0, r3
 800bc08:	f003 faea 	bl	800f1e0 <INTOA>

	char _d3[8];
	_d3[0]='\0';
 800bc0c:	2300      	movs	r3, #0
 800bc0e:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
	INTOA( d3, _d3);//FTOA( d3, _d3,2);
 800bc12:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 800bc16:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800bc1a:	4611      	mov	r1, r2
 800bc1c:	4618      	mov	r0, r3
 800bc1e:	f003 fadf 	bl	800f1e0 <INTOA>

	char _d4[8];
	_d4[0]='\0';
 800bc22:	2300      	movs	r3, #0
 800bc24:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
	INTOA( d4, _d4);//FTOA( d4, _d4,2);
 800bc28:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	; 0xb8
 800bc2c:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800bc30:	4611      	mov	r1, r2
 800bc32:	4618      	mov	r0, r3
 800bc34:	f003 fad4 	bl	800f1e0 <INTOA>

	char _d5[8];
	_d5[0]='\0';
 800bc38:	2300      	movs	r3, #0
 800bc3a:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78
	INTOA( d5, _d5);//FTOA( d5, _d5,2);
 800bc3e:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 800bc42:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800bc46:	4611      	mov	r1, r2
 800bc48:	4618      	mov	r0, r3
 800bc4a:	f003 fac9 	bl	800f1e0 <INTOA>

	char _d6[8];
	_d6[0]='\0';
 800bc4e:	2300      	movs	r3, #0
 800bc50:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
	INTOA( d6, _d6);//INTOA( d6, _d6);
 800bc54:	f8b7 30c0 	ldrh.w	r3, [r7, #192]	; 0xc0
 800bc58:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800bc5c:	4611      	mov	r1, r2
 800bc5e:	4618      	mov	r0, r3
 800bc60:	f003 fabe 	bl	800f1e0 <INTOA>

	char _d7[8];
	_d7[0]='\0';
 800bc64:	2300      	movs	r3, #0
 800bc66:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
	INTOA( d7, _d7);//FTOA( d7, _d7,2);
 800bc6a:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
 800bc6e:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800bc72:	4611      	mov	r1, r2
 800bc74:	4618      	mov	r0, r3
 800bc76:	f003 fab3 	bl	800f1e0 <INTOA>

	char _d8[8];
	_d8[0]='\0';
 800bc7a:	2300      	movs	r3, #0
 800bc7c:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	INTOA( d8, _d8);//FTOA( d8, _d8,2);
 800bc80:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 800bc84:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800bc88:	4611      	mov	r1, r2
 800bc8a:	4618      	mov	r0, r3
 800bc8c:	f003 faa8 	bl	800f1e0 <INTOA>

	char _d9[8];
	_d9[0]='\0';
 800bc90:	2300      	movs	r3, #0
 800bc92:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
	INTOA( d9, _d9);//FTOA( d9, _d9,2);
 800bc96:	f8b7 30cc 	ldrh.w	r3, [r7, #204]	; 0xcc
 800bc9a:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800bc9e:	4611      	mov	r1, r2
 800bca0:	4618      	mov	r0, r3
 800bca2:	f003 fa9d 	bl	800f1e0 <INTOA>

	char _d10[8];
	_d10[0]='\0';
 800bca6:	2300      	movs	r3, #0
 800bca8:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
	INTOA( d10, _d10);//FTOA( d10, _d10,2);
 800bcac:	f8b7 30d0 	ldrh.w	r3, [r7, #208]	; 0xd0
 800bcb0:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800bcb4:	4611      	mov	r1, r2
 800bcb6:	4618      	mov	r0, r3
 800bcb8:	f003 fa92 	bl	800f1e0 <INTOA>

	char _d11[8];
	_d11[0]='\0';
 800bcbc:	2300      	movs	r3, #0
 800bcbe:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	INTOA( d11, _d11);//FTOA( d11, _d11,2);
 800bcc2:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	; 0xd4
 800bcc6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800bcca:	4611      	mov	r1, r2
 800bccc:	4618      	mov	r0, r3
 800bcce:	f003 fa87 	bl	800f1e0 <INTOA>

	char _d12[8];
	_d12[0]='\0';
 800bcd2:	2300      	movs	r3, #0
 800bcd4:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
	INTOA( d12, _d12);//FTOA( d11, _d11,2);
 800bcd8:	f8b7 30d8 	ldrh.w	r3, [r7, #216]	; 0xd8
 800bcdc:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800bce0:	4611      	mov	r1, r2
 800bce2:	4618      	mov	r0, r3
 800bce4:	f003 fa7c 	bl	800f1e0 <INTOA>

	char _d13[8];
	_d13[0]='\0';
 800bce8:	2300      	movs	r3, #0
 800bcea:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	INTOA( d13, _d13);//FTOA( d11, _d11,2);
 800bcee:	f8b7 30dc 	ldrh.w	r3, [r7, #220]	; 0xdc
 800bcf2:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800bcf6:	4611      	mov	r1, r2
 800bcf8:	4618      	mov	r0, r3
 800bcfa:	f003 fa71 	bl	800f1e0 <INTOA>

	char _d14[8];
	_d14[0]='\0';
 800bcfe:	2300      	movs	r3, #0
 800bd00:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	INTOA( d14, _d14);//FTOA( d11, _d11,2);
 800bd04:	f8b7 30e0 	ldrh.w	r3, [r7, #224]	; 0xe0
 800bd08:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800bd0c:	4611      	mov	r1, r2
 800bd0e:	4618      	mov	r0, r3
 800bd10:	f003 fa66 	bl	800f1e0 <INTOA>

	char _d15[8];
	_d15[0]='\0';
 800bd14:	2300      	movs	r3, #0
 800bd16:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	INTOA( d15, _d15);//FTOA( d11, _d11,2);
 800bd1a:	f8b7 30e4 	ldrh.w	r3, [r7, #228]	; 0xe4
 800bd1e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800bd22:	4611      	mov	r1, r2
 800bd24:	4618      	mov	r0, r3
 800bd26:	f003 fa5b 	bl	800f1e0 <INTOA>

	char _d16[8];
	_d16[0]='\0';
 800bd2a:	2300      	movs	r3, #0
 800bd2c:	f887 3020 	strb.w	r3, [r7, #32]
	INTOA( d16, _d16);//FTOA( d11, _d11,2);
 800bd30:	f8b7 30e8 	ldrh.w	r3, [r7, #232]	; 0xe8
 800bd34:	f107 0220 	add.w	r2, r7, #32
 800bd38:	4611      	mov	r1, r2
 800bd3a:	4618      	mov	r0, r3
 800bd3c:	f003 fa50 	bl	800f1e0 <INTOA>

	char _devId[8];
	_devId[0]='\0';
 800bd40:	2300      	movs	r3, #0
 800bd42:	763b      	strb	r3, [r7, #24]
	INTOA(devId, _devId);
 800bd44:	f8b7 30ec 	ldrh.w	r3, [r7, #236]	; 0xec
 800bd48:	f107 0218 	add.w	r2, r7, #24
 800bd4c:	4611      	mov	r1, r2
 800bd4e:	4618      	mov	r0, r3
 800bd50:	f003 fa46 	bl	800f1e0 <INTOA>

	strncat(body,dd1,strlen(dd1));
 800bd54:	4843      	ldr	r0, [pc, #268]	; (800be64 <httpPOST+0x404>)
 800bd56:	f7f4 fa4d 	bl	80001f4 <strlen>
 800bd5a:	4603      	mov	r3, r0
 800bd5c:	461a      	mov	r2, r3
 800bd5e:	4941      	ldr	r1, [pc, #260]	; (800be64 <httpPOST+0x404>)
 800bd60:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800bd64:	f003 fcc3 	bl	800f6ee <strncat>
	strncat(body,_d1,strlen(_d1));
 800bd68:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800bd6c:	4618      	mov	r0, r3
 800bd6e:	f7f4 fa41 	bl	80001f4 <strlen>
 800bd72:	4602      	mov	r2, r0
 800bd74:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800bd78:	4619      	mov	r1, r3
 800bd7a:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800bd7e:	f003 fcb6 	bl	800f6ee <strncat>

	strncat(body,dd2,strlen(dd2));
 800bd82:	4839      	ldr	r0, [pc, #228]	; (800be68 <httpPOST+0x408>)
 800bd84:	f7f4 fa36 	bl	80001f4 <strlen>
 800bd88:	4603      	mov	r3, r0
 800bd8a:	461a      	mov	r2, r3
 800bd8c:	4936      	ldr	r1, [pc, #216]	; (800be68 <httpPOST+0x408>)
 800bd8e:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800bd92:	f003 fcac 	bl	800f6ee <strncat>
	strncat(body,_d2,strlen(_d2));
 800bd96:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800bd9a:	4618      	mov	r0, r3
 800bd9c:	f7f4 fa2a 	bl	80001f4 <strlen>
 800bda0:	4602      	mov	r2, r0
 800bda2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800bda6:	4619      	mov	r1, r3
 800bda8:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800bdac:	f003 fc9f 	bl	800f6ee <strncat>

	strncat(body,dd3,strlen(dd3));
 800bdb0:	482e      	ldr	r0, [pc, #184]	; (800be6c <httpPOST+0x40c>)
 800bdb2:	f7f4 fa1f 	bl	80001f4 <strlen>
 800bdb6:	4603      	mov	r3, r0
 800bdb8:	461a      	mov	r2, r3
 800bdba:	492c      	ldr	r1, [pc, #176]	; (800be6c <httpPOST+0x40c>)
 800bdbc:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800bdc0:	f003 fc95 	bl	800f6ee <strncat>
	strncat(body,_d3,strlen(_d3));
 800bdc4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800bdc8:	4618      	mov	r0, r3
 800bdca:	f7f4 fa13 	bl	80001f4 <strlen>
 800bdce:	4602      	mov	r2, r0
 800bdd0:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800bdd4:	4619      	mov	r1, r3
 800bdd6:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800bdda:	f003 fc88 	bl	800f6ee <strncat>

	strncat(body,dd4,strlen(dd4));
 800bdde:	4824      	ldr	r0, [pc, #144]	; (800be70 <httpPOST+0x410>)
 800bde0:	f7f4 fa08 	bl	80001f4 <strlen>
 800bde4:	4603      	mov	r3, r0
 800bde6:	461a      	mov	r2, r3
 800bde8:	4921      	ldr	r1, [pc, #132]	; (800be70 <httpPOST+0x410>)
 800bdea:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800bdee:	f003 fc7e 	bl	800f6ee <strncat>
	strncat(body,_d4,strlen(_d4));
 800bdf2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800bdf6:	4618      	mov	r0, r3
 800bdf8:	f7f4 f9fc 	bl	80001f4 <strlen>
 800bdfc:	4602      	mov	r2, r0
 800bdfe:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800be02:	4619      	mov	r1, r3
 800be04:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800be08:	f003 fc71 	bl	800f6ee <strncat>

	strncat(body,dd5,strlen(dd5));
 800be0c:	4819      	ldr	r0, [pc, #100]	; (800be74 <httpPOST+0x414>)
 800be0e:	f7f4 f9f1 	bl	80001f4 <strlen>
 800be12:	4603      	mov	r3, r0
 800be14:	461a      	mov	r2, r3
 800be16:	4917      	ldr	r1, [pc, #92]	; (800be74 <httpPOST+0x414>)
 800be18:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800be1c:	f003 fc67 	bl	800f6ee <strncat>
	strncat(body,_d5,strlen(_d5));
 800be20:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800be24:	4618      	mov	r0, r3
 800be26:	f7f4 f9e5 	bl	80001f4 <strlen>
 800be2a:	4602      	mov	r2, r0
 800be2c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800be30:	4619      	mov	r1, r3
 800be32:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800be36:	f003 fc5a 	bl	800f6ee <strncat>

	strncat(body,dd6,strlen(dd6));
 800be3a:	480f      	ldr	r0, [pc, #60]	; (800be78 <httpPOST+0x418>)
 800be3c:	f7f4 f9da 	bl	80001f4 <strlen>
 800be40:	4603      	mov	r3, r0
 800be42:	461a      	mov	r2, r3
 800be44:	e01a      	b.n	800be7c <httpPOST+0x41c>
 800be46:	bf00      	nop
 800be48:	08010d48 	.word	0x08010d48
 800be4c:	08010d50 	.word	0x08010d50
 800be50:	08010d5c 	.word	0x08010d5c
 800be54:	08010d60 	.word	0x08010d60
 800be58:	08010d68 	.word	0x08010d68
 800be5c:	08010d6c 	.word	0x08010d6c
 800be60:	08010d8c 	.word	0x08010d8c
 800be64:	20000090 	.word	0x20000090
 800be68:	20000098 	.word	0x20000098
 800be6c:	200000a0 	.word	0x200000a0
 800be70:	200000a8 	.word	0x200000a8
 800be74:	200000b0 	.word	0x200000b0
 800be78:	200000b8 	.word	0x200000b8
 800be7c:	49af      	ldr	r1, [pc, #700]	; (800c13c <httpPOST+0x6dc>)
 800be7e:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800be82:	f003 fc34 	bl	800f6ee <strncat>
	strncat(body,_d6,strlen(_d6));
 800be86:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800be8a:	4618      	mov	r0, r3
 800be8c:	f7f4 f9b2 	bl	80001f4 <strlen>
 800be90:	4602      	mov	r2, r0
 800be92:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800be96:	4619      	mov	r1, r3
 800be98:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800be9c:	f003 fc27 	bl	800f6ee <strncat>

	strncat(body,dd7,strlen(dd7));
 800bea0:	48a7      	ldr	r0, [pc, #668]	; (800c140 <httpPOST+0x6e0>)
 800bea2:	f7f4 f9a7 	bl	80001f4 <strlen>
 800bea6:	4603      	mov	r3, r0
 800bea8:	461a      	mov	r2, r3
 800beaa:	49a5      	ldr	r1, [pc, #660]	; (800c140 <httpPOST+0x6e0>)
 800beac:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800beb0:	f003 fc1d 	bl	800f6ee <strncat>
	strncat(body,_d7,strlen(_d7));
 800beb4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800beb8:	4618      	mov	r0, r3
 800beba:	f7f4 f99b 	bl	80001f4 <strlen>
 800bebe:	4602      	mov	r2, r0
 800bec0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800bec4:	4619      	mov	r1, r3
 800bec6:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800beca:	f003 fc10 	bl	800f6ee <strncat>

	strncat(body,dd8,strlen(dd8));
 800bece:	489d      	ldr	r0, [pc, #628]	; (800c144 <httpPOST+0x6e4>)
 800bed0:	f7f4 f990 	bl	80001f4 <strlen>
 800bed4:	4603      	mov	r3, r0
 800bed6:	461a      	mov	r2, r3
 800bed8:	499a      	ldr	r1, [pc, #616]	; (800c144 <httpPOST+0x6e4>)
 800beda:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800bede:	f003 fc06 	bl	800f6ee <strncat>
	strncat(body,_d8,strlen(_d8));
 800bee2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800bee6:	4618      	mov	r0, r3
 800bee8:	f7f4 f984 	bl	80001f4 <strlen>
 800beec:	4602      	mov	r2, r0
 800beee:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800bef2:	4619      	mov	r1, r3
 800bef4:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800bef8:	f003 fbf9 	bl	800f6ee <strncat>

	strncat(body,dd9,strlen(dd9));
 800befc:	4892      	ldr	r0, [pc, #584]	; (800c148 <httpPOST+0x6e8>)
 800befe:	f7f4 f979 	bl	80001f4 <strlen>
 800bf02:	4603      	mov	r3, r0
 800bf04:	461a      	mov	r2, r3
 800bf06:	4990      	ldr	r1, [pc, #576]	; (800c148 <httpPOST+0x6e8>)
 800bf08:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800bf0c:	f003 fbef 	bl	800f6ee <strncat>
	strncat(body,_d9,strlen(_d9));
 800bf10:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800bf14:	4618      	mov	r0, r3
 800bf16:	f7f4 f96d 	bl	80001f4 <strlen>
 800bf1a:	4602      	mov	r2, r0
 800bf1c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800bf20:	4619      	mov	r1, r3
 800bf22:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800bf26:	f003 fbe2 	bl	800f6ee <strncat>

	strncat(body,dd10,strlen(dd10));
 800bf2a:	4888      	ldr	r0, [pc, #544]	; (800c14c <httpPOST+0x6ec>)
 800bf2c:	f7f4 f962 	bl	80001f4 <strlen>
 800bf30:	4603      	mov	r3, r0
 800bf32:	461a      	mov	r2, r3
 800bf34:	4985      	ldr	r1, [pc, #532]	; (800c14c <httpPOST+0x6ec>)
 800bf36:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800bf3a:	f003 fbd8 	bl	800f6ee <strncat>
	strncat(body,_d10,strlen(_d10));
 800bf3e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800bf42:	4618      	mov	r0, r3
 800bf44:	f7f4 f956 	bl	80001f4 <strlen>
 800bf48:	4602      	mov	r2, r0
 800bf4a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800bf4e:	4619      	mov	r1, r3
 800bf50:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800bf54:	f003 fbcb 	bl	800f6ee <strncat>

	strncat(body,dd11,strlen(dd11));
 800bf58:	487d      	ldr	r0, [pc, #500]	; (800c150 <httpPOST+0x6f0>)
 800bf5a:	f7f4 f94b 	bl	80001f4 <strlen>
 800bf5e:	4603      	mov	r3, r0
 800bf60:	461a      	mov	r2, r3
 800bf62:	497b      	ldr	r1, [pc, #492]	; (800c150 <httpPOST+0x6f0>)
 800bf64:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800bf68:	f003 fbc1 	bl	800f6ee <strncat>
	strncat(body,_d11,strlen(_d11));
 800bf6c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800bf70:	4618      	mov	r0, r3
 800bf72:	f7f4 f93f 	bl	80001f4 <strlen>
 800bf76:	4602      	mov	r2, r0
 800bf78:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800bf7c:	4619      	mov	r1, r3
 800bf7e:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800bf82:	f003 fbb4 	bl	800f6ee <strncat>

	strncat(body,dd12,strlen(dd12));
 800bf86:	4873      	ldr	r0, [pc, #460]	; (800c154 <httpPOST+0x6f4>)
 800bf88:	f7f4 f934 	bl	80001f4 <strlen>
 800bf8c:	4603      	mov	r3, r0
 800bf8e:	461a      	mov	r2, r3
 800bf90:	4970      	ldr	r1, [pc, #448]	; (800c154 <httpPOST+0x6f4>)
 800bf92:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800bf96:	f003 fbaa 	bl	800f6ee <strncat>
	strncat(body,_d12,strlen(_d12));
 800bf9a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800bf9e:	4618      	mov	r0, r3
 800bfa0:	f7f4 f928 	bl	80001f4 <strlen>
 800bfa4:	4602      	mov	r2, r0
 800bfa6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800bfaa:	4619      	mov	r1, r3
 800bfac:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800bfb0:	f003 fb9d 	bl	800f6ee <strncat>

	strncat(body,dd13,strlen(dd13));
 800bfb4:	4868      	ldr	r0, [pc, #416]	; (800c158 <httpPOST+0x6f8>)
 800bfb6:	f7f4 f91d 	bl	80001f4 <strlen>
 800bfba:	4603      	mov	r3, r0
 800bfbc:	461a      	mov	r2, r3
 800bfbe:	4966      	ldr	r1, [pc, #408]	; (800c158 <httpPOST+0x6f8>)
 800bfc0:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800bfc4:	f003 fb93 	bl	800f6ee <strncat>
	strncat(body,_d13,strlen(_d13));
 800bfc8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800bfcc:	4618      	mov	r0, r3
 800bfce:	f7f4 f911 	bl	80001f4 <strlen>
 800bfd2:	4602      	mov	r2, r0
 800bfd4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800bfd8:	4619      	mov	r1, r3
 800bfda:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800bfde:	f003 fb86 	bl	800f6ee <strncat>

	strncat(body,dd14,strlen(dd14));
 800bfe2:	485e      	ldr	r0, [pc, #376]	; (800c15c <httpPOST+0x6fc>)
 800bfe4:	f7f4 f906 	bl	80001f4 <strlen>
 800bfe8:	4603      	mov	r3, r0
 800bfea:	461a      	mov	r2, r3
 800bfec:	495b      	ldr	r1, [pc, #364]	; (800c15c <httpPOST+0x6fc>)
 800bfee:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800bff2:	f003 fb7c 	bl	800f6ee <strncat>
	strncat(body,_d14,strlen(_d14));
 800bff6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800bffa:	4618      	mov	r0, r3
 800bffc:	f7f4 f8fa 	bl	80001f4 <strlen>
 800c000:	4602      	mov	r2, r0
 800c002:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c006:	4619      	mov	r1, r3
 800c008:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800c00c:	f003 fb6f 	bl	800f6ee <strncat>

	strncat(body,dd15,strlen(dd15));
 800c010:	4853      	ldr	r0, [pc, #332]	; (800c160 <httpPOST+0x700>)
 800c012:	f7f4 f8ef 	bl	80001f4 <strlen>
 800c016:	4603      	mov	r3, r0
 800c018:	461a      	mov	r2, r3
 800c01a:	4951      	ldr	r1, [pc, #324]	; (800c160 <httpPOST+0x700>)
 800c01c:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800c020:	f003 fb65 	bl	800f6ee <strncat>
	strncat(body,_d15,strlen(_d15));
 800c024:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c028:	4618      	mov	r0, r3
 800c02a:	f7f4 f8e3 	bl	80001f4 <strlen>
 800c02e:	4602      	mov	r2, r0
 800c030:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c034:	4619      	mov	r1, r3
 800c036:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800c03a:	f003 fb58 	bl	800f6ee <strncat>

	strncat(body,dd16,strlen(dd16));
 800c03e:	4849      	ldr	r0, [pc, #292]	; (800c164 <httpPOST+0x704>)
 800c040:	f7f4 f8d8 	bl	80001f4 <strlen>
 800c044:	4603      	mov	r3, r0
 800c046:	461a      	mov	r2, r3
 800c048:	4946      	ldr	r1, [pc, #280]	; (800c164 <httpPOST+0x704>)
 800c04a:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800c04e:	f003 fb4e 	bl	800f6ee <strncat>
	strncat(body,_d16,strlen(_d16));
 800c052:	f107 0320 	add.w	r3, r7, #32
 800c056:	4618      	mov	r0, r3
 800c058:	f7f4 f8cc 	bl	80001f4 <strlen>
 800c05c:	4602      	mov	r2, r0
 800c05e:	f107 0320 	add.w	r3, r7, #32
 800c062:	4619      	mov	r1, r3
 800c064:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800c068:	f003 fb41 	bl	800f6ee <strncat>

	strncat(body,deviceId,strlen(deviceId));
 800c06c:	483e      	ldr	r0, [pc, #248]	; (800c168 <httpPOST+0x708>)
 800c06e:	f7f4 f8c1 	bl	80001f4 <strlen>
 800c072:	4603      	mov	r3, r0
 800c074:	461a      	mov	r2, r3
 800c076:	493c      	ldr	r1, [pc, #240]	; (800c168 <httpPOST+0x708>)
 800c078:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800c07c:	f003 fb37 	bl	800f6ee <strncat>
	strncat(body,_devId,strlen(_devId));
 800c080:	f107 0318 	add.w	r3, r7, #24
 800c084:	4618      	mov	r0, r3
 800c086:	f7f4 f8b5 	bl	80001f4 <strlen>
 800c08a:	4602      	mov	r2, r0
 800c08c:	f107 0318 	add.w	r3, r7, #24
 800c090:	4619      	mov	r1, r3
 800c092:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800c096:	f003 fb2a 	bl	800f6ee <strncat>

	strncat(body,"}",strlen("}"));
 800c09a:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800c09e:	f7f4 f8a9 	bl	80001f4 <strlen>
 800c0a2:	4603      	mov	r3, r0
 800c0a4:	461a      	mov	r2, r3
 800c0a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c0aa:	4413      	add	r3, r2
 800c0ac:	492f      	ldr	r1, [pc, #188]	; (800c16c <httpPOST+0x70c>)
 800c0ae:	461a      	mov	r2, r3
 800c0b0:	460b      	mov	r3, r1
 800c0b2:	881b      	ldrh	r3, [r3, #0]
 800c0b4:	8013      	strh	r3, [r2, #0]

	char length[5];
	INTOA(strlen(body), length);
 800c0b6:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800c0ba:	f7f4 f89b 	bl	80001f4 <strlen>
 800c0be:	4602      	mov	r2, r0
 800c0c0:	f107 0310 	add.w	r3, r7, #16
 800c0c4:	4619      	mov	r1, r3
 800c0c6:	4610      	mov	r0, r2
 800c0c8:	f003 f88a 	bl	800f1e0 <INTOA>
	strncat(post,length,strlen(length));
 800c0cc:	f107 0310 	add.w	r3, r7, #16
 800c0d0:	4618      	mov	r0, r3
 800c0d2:	f7f4 f88f 	bl	80001f4 <strlen>
 800c0d6:	4602      	mov	r2, r0
 800c0d8:	f107 0310 	add.w	r3, r7, #16
 800c0dc:	4619      	mov	r1, r3
 800c0de:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800c0e2:	f003 fb04 	bl	800f6ee <strncat>
	strncat(post,"\r\n\r\n",strlen("\r\n\r\n"));
 800c0e6:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800c0ea:	f7f4 f883 	bl	80001f4 <strlen>
 800c0ee:	4603      	mov	r3, r0
 800c0f0:	461a      	mov	r2, r3
 800c0f2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800c0f6:	4413      	add	r3, r2
 800c0f8:	4a1d      	ldr	r2, [pc, #116]	; (800c170 <httpPOST+0x710>)
 800c0fa:	6810      	ldr	r0, [r2, #0]
 800c0fc:	6018      	str	r0, [r3, #0]
 800c0fe:	7912      	ldrb	r2, [r2, #4]
 800c100:	711a      	strb	r2, [r3, #4]
	if(strlen(body) < max_char)
 800c102:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800c106:	f7f4 f875 	bl	80001f4 <strlen>
 800c10a:	4602      	mov	r2, r0
 800c10c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800c110:	429a      	cmp	r2, r3
 800c112:	d20d      	bcs.n	800c130 <httpPOST+0x6d0>
	{
		strncat(post,body,strlen(body));
 800c114:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800c118:	f7f4 f86c 	bl	80001f4 <strlen>
 800c11c:	4603      	mov	r3, r0
 800c11e:	461a      	mov	r2, r3
 800c120:	f8d7 10f4 	ldr.w	r1, [r7, #244]	; 0xf4
 800c124:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800c128:	f003 fae1 	bl	800f6ee <strncat>
		return 1 ;
 800c12c:	2301      	movs	r3, #1
 800c12e:	e000      	b.n	800c132 <httpPOST+0x6d2>
	}
		else
		{
			return 0;
 800c130:	2300      	movs	r3, #0
		}
}
 800c132:	4618      	mov	r0, r3
 800c134:	37a0      	adds	r7, #160	; 0xa0
 800c136:	46bd      	mov	sp, r7
 800c138:	bdb0      	pop	{r4, r5, r7, pc}
 800c13a:	bf00      	nop
 800c13c:	200000b8 	.word	0x200000b8
 800c140:	200000c0 	.word	0x200000c0
 800c144:	200000c8 	.word	0x200000c8
 800c148:	200000d0 	.word	0x200000d0
 800c14c:	200000d8 	.word	0x200000d8
 800c150:	200000e0 	.word	0x200000e0
 800c154:	200000e8 	.word	0x200000e8
 800c158:	200000f0 	.word	0x200000f0
 800c15c:	200000f8 	.word	0x200000f8
 800c160:	20000100 	.word	0x20000100
 800c164:	20000108 	.word	0x20000108
 800c168:	20000110 	.word	0x20000110
 800c16c:	08010d9c 	.word	0x08010d9c
 800c170:	08010da0 	.word	0x08010da0

0800c174 <LoRa_Send>:
#include "RYLR896.h"
#include "string.h"
#include "STR_Chelo.h"

int LoRa_Send(struct LoRa *a, UART_HandleTypeDef * SERIAL)
{
 800c174:	b5b0      	push	{r4, r5, r7, lr}
 800c176:	b086      	sub	sp, #24
 800c178:	af00      	add	r7, sp, #0
 800c17a:	6078      	str	r0, [r7, #4]
 800c17c:	6039      	str	r1, [r7, #0]

	char items[4];

	if(a->txitems > 241)
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	f8d3 37e0 	ldr.w	r3, [r3, #2016]	; 0x7e0
 800c184:	2bf1      	cmp	r3, #241	; 0xf1
 800c186:	dd01      	ble.n	800c18c <LoRa_Send+0x18>
	{
		return ERROR_BUFFER_SIZE;
 800c188:	2301      	movs	r3, #1
 800c18a:	e099      	b.n	800c2c0 <LoRa_Send+0x14c>
	}
	else
	{

		items[0]='\0';
 800c18c:	2300      	movs	r3, #0
 800c18e:	723b      	strb	r3, [r7, #8]
		itoa(a->txitems, items,10);
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	f8d3 37e0 	ldr.w	r3, [r3, #2016]	; 0x7e0
 800c196:	f107 0108 	add.w	r1, r7, #8
 800c19a:	220a      	movs	r2, #10
 800c19c:	4618      	mov	r0, r3
 800c19e:	f003 f8ba 	bl	800f316 <itoa>
		a->txbuff2SND[0]='\0'; 													//Borro el vector
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	2200      	movs	r2, #0
 800c1a6:	f883 265c 	strb.w	r2, [r3, #1628]	; 0x65c
		strncat(a->txbuff2SND,"AT+SEND=",strlen("AT+SEND="));					//AT+SEND=
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	f203 645c 	addw	r4, r3, #1628	; 0x65c
 800c1b0:	4620      	mov	r0, r4
 800c1b2:	f7f4 f81f 	bl	80001f4 <strlen>
 800c1b6:	4603      	mov	r3, r0
 800c1b8:	4423      	add	r3, r4
 800c1ba:	4943      	ldr	r1, [pc, #268]	; (800c2c8 <LoRa_Send+0x154>)
 800c1bc:	461a      	mov	r2, r3
 800c1be:	460b      	mov	r3, r1
 800c1c0:	cb03      	ldmia	r3!, {r0, r1}
 800c1c2:	6010      	str	r0, [r2, #0]
 800c1c4:	6051      	str	r1, [r2, #4]
 800c1c6:	781b      	ldrb	r3, [r3, #0]
 800c1c8:	7213      	strb	r3, [r2, #8]
		strncat(a->txbuff2SND,a->dest_address,strlen(a->dest_address));			//AT+SEND=1
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	f203 645c 	addw	r4, r3, #1628	; 0x65c
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	f103 0516 	add.w	r5, r3, #22
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	3316      	adds	r3, #22
 800c1da:	4618      	mov	r0, r3
 800c1dc:	f7f4 f80a 	bl	80001f4 <strlen>
 800c1e0:	4603      	mov	r3, r0
 800c1e2:	461a      	mov	r2, r3
 800c1e4:	4629      	mov	r1, r5
 800c1e6:	4620      	mov	r0, r4
 800c1e8:	f003 fa81 	bl	800f6ee <strncat>
		strncat(a->txbuff2SND,",",1);											//AT+SEND=1,
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	f203 645c 	addw	r4, r3, #1628	; 0x65c
 800c1f2:	4620      	mov	r0, r4
 800c1f4:	f7f3 fffe 	bl	80001f4 <strlen>
 800c1f8:	4603      	mov	r3, r0
 800c1fa:	4423      	add	r3, r4
 800c1fc:	4933      	ldr	r1, [pc, #204]	; (800c2cc <LoRa_Send+0x158>)
 800c1fe:	461a      	mov	r2, r3
 800c200:	460b      	mov	r3, r1
 800c202:	881b      	ldrh	r3, [r3, #0]
 800c204:	8013      	strh	r3, [r2, #0]
		strncat(a->txbuff2SND,items,strlen(items));								//AT+SEND=1,4
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	f203 645c 	addw	r4, r3, #1628	; 0x65c
 800c20c:	f107 0308 	add.w	r3, r7, #8
 800c210:	4618      	mov	r0, r3
 800c212:	f7f3 ffef 	bl	80001f4 <strlen>
 800c216:	4602      	mov	r2, r0
 800c218:	f107 0308 	add.w	r3, r7, #8
 800c21c:	4619      	mov	r1, r3
 800c21e:	4620      	mov	r0, r4
 800c220:	f003 fa65 	bl	800f6ee <strncat>
		strncat(a->txbuff2SND,",",1);											//AT+SEND=1,4,
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	f203 645c 	addw	r4, r3, #1628	; 0x65c
 800c22a:	4620      	mov	r0, r4
 800c22c:	f7f3 ffe2 	bl	80001f4 <strlen>
 800c230:	4603      	mov	r3, r0
 800c232:	4423      	add	r3, r4
 800c234:	4925      	ldr	r1, [pc, #148]	; (800c2cc <LoRa_Send+0x158>)
 800c236:	461a      	mov	r2, r3
 800c238:	460b      	mov	r3, r1
 800c23a:	881b      	ldrh	r3, [r3, #0]
 800c23c:	8013      	strh	r3, [r2, #0]

		int la=strlen(a->txbuff2SND);
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	f203 635c 	addw	r3, r3, #1628	; 0x65c
 800c244:	4618      	mov	r0, r3
 800c246:	f7f3 ffd5 	bl	80001f4 <strlen>
 800c24a:	4603      	mov	r3, r0
 800c24c:	617b      	str	r3, [r7, #20]
		int lb=la+a->txitems;
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	f8d3 37e0 	ldr.w	r3, [r3, #2016]	; 0x7e0
 800c254:	697a      	ldr	r2, [r7, #20]
 800c256:	4413      	add	r3, r2
 800c258:	60fb      	str	r3, [r7, #12]
		int lc=0;
 800c25a:	2300      	movs	r3, #0
 800c25c:	613b      	str	r3, [r7, #16]
		while(la < lb )
 800c25e:	e012      	b.n	800c286 <LoRa_Send+0x112>
		{
			a->txbuff2SND[la]=a->txbuff[lc];
 800c260:	687a      	ldr	r2, [r7, #4]
 800c262:	693b      	ldr	r3, [r7, #16]
 800c264:	4413      	add	r3, r2
 800c266:	f203 43dc 	addw	r3, r3, #1244	; 0x4dc
 800c26a:	7819      	ldrb	r1, [r3, #0]
 800c26c:	687a      	ldr	r2, [r7, #4]
 800c26e:	697b      	ldr	r3, [r7, #20]
 800c270:	4413      	add	r3, r2
 800c272:	f203 635c 	addw	r3, r3, #1628	; 0x65c
 800c276:	460a      	mov	r2, r1
 800c278:	701a      	strb	r2, [r3, #0]
			la++;
 800c27a:	697b      	ldr	r3, [r7, #20]
 800c27c:	3301      	adds	r3, #1
 800c27e:	617b      	str	r3, [r7, #20]
			lc++;
 800c280:	693b      	ldr	r3, [r7, #16]
 800c282:	3301      	adds	r3, #1
 800c284:	613b      	str	r3, [r7, #16]
		while(la < lb )
 800c286:	697a      	ldr	r2, [r7, #20]
 800c288:	68fb      	ldr	r3, [r7, #12]
 800c28a:	429a      	cmp	r2, r3
 800c28c:	dbe8      	blt.n	800c260 <LoRa_Send+0xec>
		}
		a->txbuff2SND[la++]='\r';
 800c28e:	697b      	ldr	r3, [r7, #20]
 800c290:	1c5a      	adds	r2, r3, #1
 800c292:	617a      	str	r2, [r7, #20]
 800c294:	687a      	ldr	r2, [r7, #4]
 800c296:	4413      	add	r3, r2
 800c298:	220d      	movs	r2, #13
 800c29a:	f883 265c 	strb.w	r2, [r3, #1628]	; 0x65c
		a->txbuff2SND[la++]='\n';
 800c29e:	697b      	ldr	r3, [r7, #20]
 800c2a0:	1c5a      	adds	r2, r3, #1
 800c2a2:	617a      	str	r2, [r7, #20]
 800c2a4:	687a      	ldr	r2, [r7, #4]
 800c2a6:	4413      	add	r3, r2
 800c2a8:	220a      	movs	r2, #10
 800c2aa:	f883 265c 	strb.w	r2, [r3, #1628]	; 0x65c
		HAL_UART_Transmit_IT(SERIAL, a->txbuff2SND, la);
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	f203 635c 	addw	r3, r3, #1628	; 0x65c
 800c2b4:	697a      	ldr	r2, [r7, #20]
 800c2b6:	b292      	uxth	r2, r2
 800c2b8:	4619      	mov	r1, r3
 800c2ba:	6838      	ldr	r0, [r7, #0]
 800c2bc:	f7f9 fa86 	bl	80057cc <HAL_UART_Transmit_IT>
	}

}
 800c2c0:	4618      	mov	r0, r3
 800c2c2:	3718      	adds	r7, #24
 800c2c4:	46bd      	mov	sp, r7
 800c2c6:	bdb0      	pop	{r4, r5, r7, pc}
 800c2c8:	08010da8 	.word	0x08010da8
 800c2cc:	08010db4 	.word	0x08010db4

0800c2d0 <LoRa_reset_sndTIMER>:
		a->tmr_dly_en=1;
		a->tmr_dlyCNT=0;
 }

void LoRa_reset_sndTIMER(struct LoRa *a,int msec)
 {
 800c2d0:	b480      	push	{r7}
 800c2d2:	b083      	sub	sp, #12
 800c2d4:	af00      	add	r7, sp, #0
 800c2d6:	6078      	str	r0, [r7, #4]
 800c2d8:	6039      	str	r1, [r7, #0]
	 	a->tmr_dly_ON=0;
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	2200      	movs	r2, #0
 800c2de:	f883 27ee 	strb.w	r2, [r3, #2030]	; 0x7ee
		a->tmr_dly=msec;
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	683a      	ldr	r2, [r7, #0]
 800c2e6:	f8c3 27f0 	str.w	r2, [r3, #2032]	; 0x7f0
		a->tmr_dly_en=0;
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	2200      	movs	r2, #0
 800c2ee:	f883 27ed 	strb.w	r2, [r3, #2029]	; 0x7ed
		a->tmr_dlyCNT=0;
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	2200      	movs	r2, #0
 800c2f6:	f8c3 27f4 	str.w	r2, [r3, #2036]	; 0x7f4
 }
 800c2fa:	bf00      	nop
 800c2fc:	370c      	adds	r7, #12
 800c2fe:	46bd      	mov	sp, r7
 800c300:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c304:	4770      	bx	lr
	...

0800c308 <LoRa_decode>:
		break;
	}
}

void LoRa_decode(struct LoRa *b)
 {
 800c308:	b580      	push	{r7, lr}
 800c30a:	b086      	sub	sp, #24
 800c30c:	af00      	add	r7, sp, #0
 800c30e:	6078      	str	r0, [r7, #4]
	switch (Lora_idSTR(b))
 800c310:	6878      	ldr	r0, [r7, #4]
 800c312:	f000 fa25 	bl	800c760 <Lora_idSTR>
 800c316:	4603      	mov	r3, r0
 800c318:	2b10      	cmp	r3, #16
 800c31a:	f200 820c 	bhi.w	800c736 <LoRa_decode+0x42e>
 800c31e:	a201      	add	r2, pc, #4	; (adr r2, 800c324 <LoRa_decode+0x1c>)
 800c320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c324:	0800c369 	.word	0x0800c369
 800c328:	0800c441 	.word	0x0800c441
 800c32c:	0800c675 	.word	0x0800c675
 800c330:	0800c67f 	.word	0x0800c67f
 800c334:	0800c689 	.word	0x0800c689
 800c338:	0800c693 	.word	0x0800c693
 800c33c:	0800c69d 	.word	0x0800c69d
 800c340:	0800c6a7 	.word	0x0800c6a7
 800c344:	0800c6b1 	.word	0x0800c6b1
 800c348:	0800c6bb 	.word	0x0800c6bb
 800c34c:	0800c6c5 	.word	0x0800c6c5
 800c350:	0800c705 	.word	0x0800c705
 800c354:	0800c70f 	.word	0x0800c70f
 800c358:	0800c723 	.word	0x0800c723
 800c35c:	0800c719 	.word	0x0800c719
 800c360:	0800c66b 	.word	0x0800c66b
 800c364:	0800c72d 	.word	0x0800c72d
	{
		case _OK:
		{
			switch(b->estado)
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	f893 37ec 	ldrb.w	r3, [r3, #2028]	; 0x7ec
 800c36e:	3b01      	subs	r3, #1
 800c370:	2b13      	cmp	r3, #19
 800c372:	d860      	bhi.n	800c436 <LoRa_decode+0x12e>
 800c374:	a201      	add	r2, pc, #4	; (adr r2, 800c37c <LoRa_decode+0x74>)
 800c376:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c37a:	bf00      	nop
 800c37c:	0800c3cd 	.word	0x0800c3cd
 800c380:	0800c437 	.word	0x0800c437
 800c384:	0800c437 	.word	0x0800c437
 800c388:	0800c437 	.word	0x0800c437
 800c38c:	0800c437 	.word	0x0800c437
 800c390:	0800c437 	.word	0x0800c437
 800c394:	0800c3d7 	.word	0x0800c3d7
 800c398:	0800c3e1 	.word	0x0800c3e1
 800c39c:	0800c437 	.word	0x0800c437
 800c3a0:	0800c3eb 	.word	0x0800c3eb
 800c3a4:	0800c437 	.word	0x0800c437
 800c3a8:	0800c3f5 	.word	0x0800c3f5
 800c3ac:	0800c437 	.word	0x0800c437
 800c3b0:	0800c3ff 	.word	0x0800c3ff
 800c3b4:	0800c437 	.word	0x0800c437
 800c3b8:	0800c409 	.word	0x0800c409
 800c3bc:	0800c437 	.word	0x0800c437
 800c3c0:	0800c413 	.word	0x0800c413
 800c3c4:	0800c437 	.word	0x0800c437
 800c3c8:	0800c41d 	.word	0x0800c41d
			{
				case _AT_SENT:
					b->estado=_IDLE;
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	2200      	movs	r2, #0
 800c3d0:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
					break;
 800c3d4:	e02f      	b.n	800c436 <LoRa_decode+0x12e>
				case _MODE_SENT:
					b->estado=_MODE_OK;
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	2206      	movs	r2, #6
 800c3da:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
					break;
 800c3de:	e02a      	b.n	800c436 <LoRa_decode+0x12e>
				case _PARAMETER_SENT:
					b->estado=_PARAMETER_OK;
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	2209      	movs	r2, #9
 800c3e4:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
					break;
 800c3e8:	e025      	b.n	800c436 <LoRa_decode+0x12e>
				case _BAND_SENT:
					b->estado=_BAND_OK;
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	220b      	movs	r2, #11
 800c3ee:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
					break;
 800c3f2:	e020      	b.n	800c436 <LoRa_decode+0x12e>
				case _ADDR_SENT:
					b->estado=_ADDR_OK;
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	220d      	movs	r2, #13
 800c3f8:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
					break;
 800c3fc:	e01b      	b.n	800c436 <LoRa_decode+0x12e>
				case _NETWORK_SENT:
					b->estado=_NETWORK_OK;
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	220f      	movs	r2, #15
 800c402:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
					break;
 800c406:	e016      	b.n	800c436 <LoRa_decode+0x12e>
				case _CPIN_SENT:
					b->estado=_CPIN_OK;
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	2211      	movs	r2, #17
 800c40c:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
					break;
 800c410:	e011      	b.n	800c436 <LoRa_decode+0x12e>
				case _CRFOP_SENT:
					b->estado=_CRFOP_OK;
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	2213      	movs	r2, #19
 800c416:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
					break;
 800c41a:	e00c      	b.n	800c436 <LoRa_decode+0x12e>
				case _SENT:
					{
						b->estado=_SENT_OK;
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	2215      	movs	r2, #21
 800c420:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
						b->rxbuff[0]='\0';
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	2200      	movs	r2, #0
 800c428:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
						ITM0_Write("\r\nLora _SENT_OK\r\n",strlen("\r\nLora _SENT_OK\r\n"));
 800c42c:	2111      	movs	r1, #17
 800c42e:	48a8      	ldr	r0, [pc, #672]	; (800c6d0 <LoRa_decode+0x3c8>)
 800c430:	f7f5 f8fe 	bl	8001630 <ITM0_Write>
					}
					break;
 800c434:	bf00      	nop

			}

			ITM0_Write("\r\nLora _OK\r\n",strlen("\r\nLora _OK\r\n"));
 800c436:	210c      	movs	r1, #12
 800c438:	48a6      	ldr	r0, [pc, #664]	; (800c6d4 <LoRa_decode+0x3cc>)
 800c43a:	f7f5 f8f9 	bl	8001630 <ITM0_Write>
						//Clean rxbuff_hld
		}
			break;
 800c43e:	e17f      	b.n	800c740 <LoRa_decode+0x438>
		case _RCV:
		{
			ITM0_Write("\r\nLora _RCV\r\n",strlen("\r\nLora _RCV\r\n"));
 800c440:	210d      	movs	r1, #13
 800c442:	48a5      	ldr	r0, [pc, #660]	; (800c6d8 <LoRa_decode+0x3d0>)
 800c444:	f7f5 f8f4 	bl	8001630 <ITM0_Write>
				b->estado=_DATO_RECIBIDO;
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	221a      	movs	r2, #26
 800c44c:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
				b->_data_available=1;
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	2201      	movs	r2, #1
 800c454:	f883 2800 	strb.w	r2, [r3, #2048]	; 0x800
					int i=0;
 800c458:	2300      	movs	r3, #0
 800c45a:	617b      	str	r3, [r7, #20]
					int j=0;
 800c45c:	2300      	movs	r3, #0
 800c45e:	613b      	str	r3, [r7, #16]
					int lngt=0;
 800c460:	2300      	movs	r3, #0
 800c462:	60fb      	str	r3, [r7, #12]
					while (b->rxbuff[i] != '=')
 800c464:	e002      	b.n	800c46c <LoRa_decode+0x164>
					{ i++;}
 800c466:	697b      	ldr	r3, [r7, #20]
 800c468:	3301      	adds	r3, #1
 800c46a:	617b      	str	r3, [r7, #20]
					while (b->rxbuff[i] != '=')
 800c46c:	687a      	ldr	r2, [r7, #4]
 800c46e:	697b      	ldr	r3, [r7, #20]
 800c470:	4413      	add	r3, r2
 800c472:	3356      	adds	r3, #86	; 0x56
 800c474:	781b      	ldrb	r3, [r3, #0]
 800c476:	2b3d      	cmp	r3, #61	; 0x3d
 800c478:	d1f5      	bne.n	800c466 <LoRa_decode+0x15e>
					i++;
 800c47a:	697b      	ldr	r3, [r7, #20]
 800c47c:	3301      	adds	r3, #1
 800c47e:	617b      	str	r3, [r7, #20]
					while (b->rxbuff[i]!= ',')
 800c480:	e017      	b.n	800c4b2 <LoRa_decode+0x1aa>
					{
						b->rxaddress[j]=b->rxbuff[i];			//Save the address
 800c482:	687a      	ldr	r2, [r7, #4]
 800c484:	697b      	ldr	r3, [r7, #20]
 800c486:	4413      	add	r3, r2
 800c488:	3356      	adds	r3, #86	; 0x56
 800c48a:	7819      	ldrb	r1, [r3, #0]
 800c48c:	687a      	ldr	r2, [r7, #4]
 800c48e:	693b      	ldr	r3, [r7, #16]
 800c490:	4413      	add	r3, r2
 800c492:	3306      	adds	r3, #6
 800c494:	460a      	mov	r2, r1
 800c496:	701a      	strb	r2, [r3, #0]
						i++;
 800c498:	697b      	ldr	r3, [r7, #20]
 800c49a:	3301      	adds	r3, #1
 800c49c:	617b      	str	r3, [r7, #20]
						j++;
 800c49e:	693b      	ldr	r3, [r7, #16]
 800c4a0:	3301      	adds	r3, #1
 800c4a2:	613b      	str	r3, [r7, #16]
						if (j > 6)
 800c4a4:	693b      	ldr	r3, [r7, #16]
 800c4a6:	2b06      	cmp	r3, #6
 800c4a8:	dd03      	ble.n	800c4b2 <LoRa_decode+0x1aa>
						{
							Lora_rx_del(b);
 800c4aa:	6878      	ldr	r0, [r7, #4]
 800c4ac:	f000 fbca 	bl	800cc44 <Lora_rx_del>
							break;
 800c4b0:	e006      	b.n	800c4c0 <LoRa_decode+0x1b8>
					while (b->rxbuff[i]!= ',')
 800c4b2:	687a      	ldr	r2, [r7, #4]
 800c4b4:	697b      	ldr	r3, [r7, #20]
 800c4b6:	4413      	add	r3, r2
 800c4b8:	3356      	adds	r3, #86	; 0x56
 800c4ba:	781b      	ldrb	r3, [r3, #0]
 800c4bc:	2b2c      	cmp	r3, #44	; 0x2c
 800c4be:	d1e0      	bne.n	800c482 <LoRa_decode+0x17a>
						}
					}
					b->rxaddress[j]='\0';
 800c4c0:	687a      	ldr	r2, [r7, #4]
 800c4c2:	693b      	ldr	r3, [r7, #16]
 800c4c4:	4413      	add	r3, r2
 800c4c6:	3306      	adds	r3, #6
 800c4c8:	2200      	movs	r2, #0
 800c4ca:	701a      	strb	r2, [r3, #0]
					j=0;
 800c4cc:	2300      	movs	r3, #0
 800c4ce:	613b      	str	r3, [r7, #16]
					i++;
 800c4d0:	697b      	ldr	r3, [r7, #20]
 800c4d2:	3301      	adds	r3, #1
 800c4d4:	617b      	str	r3, [r7, #20]
					while (b->rxbuff[i]!= ',')
 800c4d6:	e017      	b.n	800c508 <LoRa_decode+0x200>
					{
						b->rx_items[j]=b->rxbuff[i];			//Save the qty of data
 800c4d8:	687a      	ldr	r2, [r7, #4]
 800c4da:	697b      	ldr	r3, [r7, #20]
 800c4dc:	4413      	add	r3, r2
 800c4de:	3356      	adds	r3, #86	; 0x56
 800c4e0:	7819      	ldrb	r1, [r3, #0]
 800c4e2:	687a      	ldr	r2, [r7, #4]
 800c4e4:	693b      	ldr	r3, [r7, #16]
 800c4e6:	4413      	add	r3, r2
 800c4e8:	330c      	adds	r3, #12
 800c4ea:	460a      	mov	r2, r1
 800c4ec:	701a      	strb	r2, [r3, #0]
						i++;
 800c4ee:	697b      	ldr	r3, [r7, #20]
 800c4f0:	3301      	adds	r3, #1
 800c4f2:	617b      	str	r3, [r7, #20]
						j++;
 800c4f4:	693b      	ldr	r3, [r7, #16]
 800c4f6:	3301      	adds	r3, #1
 800c4f8:	613b      	str	r3, [r7, #16]
						if (j > 4)
 800c4fa:	693b      	ldr	r3, [r7, #16]
 800c4fc:	2b04      	cmp	r3, #4
 800c4fe:	dd03      	ble.n	800c508 <LoRa_decode+0x200>
						{
							Lora_rx_del(b);
 800c500:	6878      	ldr	r0, [r7, #4]
 800c502:	f000 fb9f 	bl	800cc44 <Lora_rx_del>
							break;
 800c506:	e006      	b.n	800c516 <LoRa_decode+0x20e>
					while (b->rxbuff[i]!= ',')
 800c508:	687a      	ldr	r2, [r7, #4]
 800c50a:	697b      	ldr	r3, [r7, #20]
 800c50c:	4413      	add	r3, r2
 800c50e:	3356      	adds	r3, #86	; 0x56
 800c510:	781b      	ldrb	r3, [r3, #0]
 800c512:	2b2c      	cmp	r3, #44	; 0x2c
 800c514:	d1e0      	bne.n	800c4d8 <LoRa_decode+0x1d0>
						}
					}
					b->rx_items[j]='\0';
 800c516:	687a      	ldr	r2, [r7, #4]
 800c518:	693b      	ldr	r3, [r7, #16]
 800c51a:	4413      	add	r3, r2
 800c51c:	330c      	adds	r3, #12
 800c51e:	2200      	movs	r2, #0
 800c520:	701a      	strb	r2, [r3, #0]
					j=0;
 800c522:	2300      	movs	r3, #0
 800c524:	613b      	str	r3, [r7, #16]
					i++;
 800c526:	697b      	ldr	r3, [r7, #20]
 800c528:	3301      	adds	r3, #1
 800c52a:	617b      	str	r3, [r7, #20]
					lngt=atoi(b->rx_items,10);
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	330c      	adds	r3, #12
 800c530:	210a      	movs	r1, #10
 800c532:	4618      	mov	r0, r3
 800c534:	f002 fed3 	bl	800f2de <atoi>
 800c538:	60f8      	str	r0, [r7, #12]
					//lngt=lngt+i;
					//while(lngt>i)   //Ahota busco leer lo datos recibid y luego verificar si ok
					while (b->rxbuff[i]!= ',')
 800c53a:	e019      	b.n	800c570 <LoRa_decode+0x268>
					{
						b->dataRCV[j]=b->rxbuff[i];			//Save the data
 800c53c:	687a      	ldr	r2, [r7, #4]
 800c53e:	697b      	ldr	r3, [r7, #20]
 800c540:	4413      	add	r3, r2
 800c542:	3356      	adds	r3, #86	; 0x56
 800c544:	7819      	ldrb	r1, [r3, #0]
 800c546:	687a      	ldr	r2, [r7, #4]
 800c548:	693b      	ldr	r3, [r7, #16]
 800c54a:	4413      	add	r3, r2
 800c54c:	f503 73eb 	add.w	r3, r3, #470	; 0x1d6
 800c550:	460a      	mov	r2, r1
 800c552:	701a      	strb	r2, [r3, #0]
						j++;
 800c554:	693b      	ldr	r3, [r7, #16]
 800c556:	3301      	adds	r3, #1
 800c558:	613b      	str	r3, [r7, #16]
						i++;
 800c55a:	697b      	ldr	r3, [r7, #20]
 800c55c:	3301      	adds	r3, #1
 800c55e:	617b      	str	r3, [r7, #20]
						if (j > lngt)
 800c560:	693a      	ldr	r2, [r7, #16]
 800c562:	68fb      	ldr	r3, [r7, #12]
 800c564:	429a      	cmp	r2, r3
 800c566:	dd03      	ble.n	800c570 <LoRa_decode+0x268>
						{
							Lora_rx_del(b);
 800c568:	6878      	ldr	r0, [r7, #4]
 800c56a:	f000 fb6b 	bl	800cc44 <Lora_rx_del>
							break;
 800c56e:	e006      	b.n	800c57e <LoRa_decode+0x276>
					while (b->rxbuff[i]!= ',')
 800c570:	687a      	ldr	r2, [r7, #4]
 800c572:	697b      	ldr	r3, [r7, #20]
 800c574:	4413      	add	r3, r2
 800c576:	3356      	adds	r3, #86	; 0x56
 800c578:	781b      	ldrb	r3, [r3, #0]
 800c57a:	2b2c      	cmp	r3, #44	; 0x2c
 800c57c:	d1de      	bne.n	800c53c <LoRa_decode+0x234>
						}
					}
					b->_n_dataRCV=j;							//Save amount of data received
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	693a      	ldr	r2, [r7, #16]
 800c582:	f8c3 24d8 	str.w	r2, [r3, #1240]	; 0x4d8
					j=0;
 800c586:	2300      	movs	r3, #0
 800c588:	613b      	str	r3, [r7, #16]
					i++;
 800c58a:	697b      	ldr	r3, [r7, #20]
 800c58c:	3301      	adds	r3, #1
 800c58e:	617b      	str	r3, [r7, #20]
					while (b->rxbuff[i]!= ',')
 800c590:	e017      	b.n	800c5c2 <LoRa_decode+0x2ba>
					{
						b->rx_convert[j]=b->rxbuff[i];			//save RSSI
 800c592:	687a      	ldr	r2, [r7, #4]
 800c594:	697b      	ldr	r3, [r7, #20]
 800c596:	4413      	add	r3, r2
 800c598:	3356      	adds	r3, #86	; 0x56
 800c59a:	7819      	ldrb	r1, [r3, #0]
 800c59c:	687a      	ldr	r2, [r7, #4]
 800c59e:	693b      	ldr	r3, [r7, #16]
 800c5a0:	4413      	add	r3, r2
 800c5a2:	3310      	adds	r3, #16
 800c5a4:	460a      	mov	r2, r1
 800c5a6:	701a      	strb	r2, [r3, #0]
						i++;
 800c5a8:	697b      	ldr	r3, [r7, #20]
 800c5aa:	3301      	adds	r3, #1
 800c5ac:	617b      	str	r3, [r7, #20]
						j++;
 800c5ae:	693b      	ldr	r3, [r7, #16]
 800c5b0:	3301      	adds	r3, #1
 800c5b2:	613b      	str	r3, [r7, #16]
						if (j > 5)
 800c5b4:	693b      	ldr	r3, [r7, #16]
 800c5b6:	2b05      	cmp	r3, #5
 800c5b8:	dd03      	ble.n	800c5c2 <LoRa_decode+0x2ba>
						{
							Lora_rx_del(b);
 800c5ba:	6878      	ldr	r0, [r7, #4]
 800c5bc:	f000 fb42 	bl	800cc44 <Lora_rx_del>
							break;
 800c5c0:	e006      	b.n	800c5d0 <LoRa_decode+0x2c8>
					while (b->rxbuff[i]!= ',')
 800c5c2:	687a      	ldr	r2, [r7, #4]
 800c5c4:	697b      	ldr	r3, [r7, #20]
 800c5c6:	4413      	add	r3, r2
 800c5c8:	3356      	adds	r3, #86	; 0x56
 800c5ca:	781b      	ldrb	r3, [r3, #0]
 800c5cc:	2b2c      	cmp	r3, #44	; 0x2c
 800c5ce:	d1e0      	bne.n	800c592 <LoRa_decode+0x28a>
						}
					}
					b->rxRSSI=atoi(b->rx_convert,10);
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	3310      	adds	r3, #16
 800c5d4:	210a      	movs	r1, #10
 800c5d6:	4618      	mov	r0, r3
 800c5d8:	f002 fe81 	bl	800f2de <atoi>
 800c5dc:	4602      	mov	r2, r0
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	f8c3 27e4 	str.w	r2, [r3, #2020]	; 0x7e4
					b->rx_convert[j]='\0';
 800c5e4:	687a      	ldr	r2, [r7, #4]
 800c5e6:	693b      	ldr	r3, [r7, #16]
 800c5e8:	4413      	add	r3, r2
 800c5ea:	3310      	adds	r3, #16
 800c5ec:	2200      	movs	r2, #0
 800c5ee:	701a      	strb	r2, [r3, #0]
					j=0;
 800c5f0:	2300      	movs	r3, #0
 800c5f2:	613b      	str	r3, [r7, #16]
					i++;
 800c5f4:	697b      	ldr	r3, [r7, #20]
 800c5f6:	3301      	adds	r3, #1
 800c5f8:	617b      	str	r3, [r7, #20]
					while (b->rxbuff[i]!= '\r')
 800c5fa:	e017      	b.n	800c62c <LoRa_decode+0x324>
					{
						b->rx_convert[j]=b->rxbuff[i];			// Save SNR
 800c5fc:	687a      	ldr	r2, [r7, #4]
 800c5fe:	697b      	ldr	r3, [r7, #20]
 800c600:	4413      	add	r3, r2
 800c602:	3356      	adds	r3, #86	; 0x56
 800c604:	7819      	ldrb	r1, [r3, #0]
 800c606:	687a      	ldr	r2, [r7, #4]
 800c608:	693b      	ldr	r3, [r7, #16]
 800c60a:	4413      	add	r3, r2
 800c60c:	3310      	adds	r3, #16
 800c60e:	460a      	mov	r2, r1
 800c610:	701a      	strb	r2, [r3, #0]
						i++;
 800c612:	697b      	ldr	r3, [r7, #20]
 800c614:	3301      	adds	r3, #1
 800c616:	617b      	str	r3, [r7, #20]
						j++;
 800c618:	693b      	ldr	r3, [r7, #16]
 800c61a:	3301      	adds	r3, #1
 800c61c:	613b      	str	r3, [r7, #16]
						if (j > 5)
 800c61e:	693b      	ldr	r3, [r7, #16]
 800c620:	2b05      	cmp	r3, #5
 800c622:	dd03      	ble.n	800c62c <LoRa_decode+0x324>
						{
							Lora_rx_del(b);
 800c624:	6878      	ldr	r0, [r7, #4]
 800c626:	f000 fb0d 	bl	800cc44 <Lora_rx_del>
							break;
 800c62a:	e006      	b.n	800c63a <LoRa_decode+0x332>
					while (b->rxbuff[i]!= '\r')
 800c62c:	687a      	ldr	r2, [r7, #4]
 800c62e:	697b      	ldr	r3, [r7, #20]
 800c630:	4413      	add	r3, r2
 800c632:	3356      	adds	r3, #86	; 0x56
 800c634:	781b      	ldrb	r3, [r3, #0]
 800c636:	2b0d      	cmp	r3, #13
 800c638:	d1e0      	bne.n	800c5fc <LoRa_decode+0x2f4>
						}
					}

					b->rx_convert[j]='\0';
 800c63a:	687a      	ldr	r2, [r7, #4]
 800c63c:	693b      	ldr	r3, [r7, #16]
 800c63e:	4413      	add	r3, r2
 800c640:	3310      	adds	r3, #16
 800c642:	2200      	movs	r2, #0
 800c644:	701a      	strb	r2, [r3, #0]
					b->rxSNR=atoi(b->rx_convert,10);
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	3310      	adds	r3, #16
 800c64a:	210a      	movs	r1, #10
 800c64c:	4618      	mov	r0, r3
 800c64e:	f002 fe46 	bl	800f2de <atoi>
 800c652:	4602      	mov	r2, r0
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	f8c3 27e8 	str.w	r2, [r3, #2024]	; 0x7e8
					b->rx_convert[0]='\0';
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	2200      	movs	r2, #0
 800c65e:	741a      	strb	r2, [r3, #16]


			    //Timer de enviar data cuando antes se recibe
				//LoRa_set_sndTIMER(b, 3000);
				b->rxbuff[0]='\0';
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	2200      	movs	r2, #0
 800c664:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
		}
			break;
 800c668:	e06a      	b.n	800c740 <LoRa_decode+0x438>
		case _ERR:
			ITM0_Write("\r\nLora _ERR\r\n",strlen("\r\nLora _ERR\r\n"));
 800c66a:	210d      	movs	r1, #13
 800c66c:	481b      	ldr	r0, [pc, #108]	; (800c6dc <LoRa_decode+0x3d4>)
 800c66e:	f7f4 ffdf 	bl	8001630 <ITM0_Write>
			break;
 800c672:	e065      	b.n	800c740 <LoRa_decode+0x438>
		case _RESET:
			ITM0_Write("\r\nLora _RESET\r\n",strlen("\r\nLora _RESET\r\n"));
 800c674:	210f      	movs	r1, #15
 800c676:	481a      	ldr	r0, [pc, #104]	; (800c6e0 <LoRa_decode+0x3d8>)
 800c678:	f7f4 ffda 	bl	8001630 <ITM0_Write>
			break;
 800c67c:	e060      	b.n	800c740 <LoRa_decode+0x438>
		case _READY:
			ITM0_Write("\r\nLora _READY\r\n",strlen("\r\nLora _READY\r\n"));
 800c67e:	210f      	movs	r1, #15
 800c680:	4818      	ldr	r0, [pc, #96]	; (800c6e4 <LoRa_decode+0x3dc>)
 800c682:	f7f4 ffd5 	bl	8001630 <ITM0_Write>
			break;
 800c686:	e05b      	b.n	800c740 <LoRa_decode+0x438>
		case _MODE:
			ITM0_Write("\r\nLora _MODE\r\n",strlen("\r\nLora _MODE\r\n"));
 800c688:	210e      	movs	r1, #14
 800c68a:	4817      	ldr	r0, [pc, #92]	; (800c6e8 <LoRa_decode+0x3e0>)
 800c68c:	f7f4 ffd0 	bl	8001630 <ITM0_Write>
			break;
 800c690:	e056      	b.n	800c740 <LoRa_decode+0x438>
		case _IPR:
			ITM0_Write("\r\nLora _IPR\r\n",strlen("\r\nLora _IPR\r\n"));
 800c692:	210d      	movs	r1, #13
 800c694:	4815      	ldr	r0, [pc, #84]	; (800c6ec <LoRa_decode+0x3e4>)
 800c696:	f7f4 ffcb 	bl	8001630 <ITM0_Write>
			break;
 800c69a:	e051      	b.n	800c740 <LoRa_decode+0x438>
		case _PARAMETER:
			ITM0_Write("\r\nLora _PARAMETER\r\n",strlen("\r\nLora _PARAMETER\r\n"));
 800c69c:	2113      	movs	r1, #19
 800c69e:	4814      	ldr	r0, [pc, #80]	; (800c6f0 <LoRa_decode+0x3e8>)
 800c6a0:	f7f4 ffc6 	bl	8001630 <ITM0_Write>
			break;
 800c6a4:	e04c      	b.n	800c740 <LoRa_decode+0x438>
		case _BAND:
			ITM0_Write("\r\nLora _BAND\r\n",strlen("\r\nLora _BAND\r\n"));
 800c6a6:	210e      	movs	r1, #14
 800c6a8:	4812      	ldr	r0, [pc, #72]	; (800c6f4 <LoRa_decode+0x3ec>)
 800c6aa:	f7f4 ffc1 	bl	8001630 <ITM0_Write>
			break;
 800c6ae:	e047      	b.n	800c740 <LoRa_decode+0x438>
		case _ADDRESS:
			ITM0_Write("\r\nLora _ADDRESS\r\n",strlen("\r\nLora _ADDRESS\r\n"));
 800c6b0:	2111      	movs	r1, #17
 800c6b2:	4811      	ldr	r0, [pc, #68]	; (800c6f8 <LoRa_decode+0x3f0>)
 800c6b4:	f7f4 ffbc 	bl	8001630 <ITM0_Write>
			break;
 800c6b8:	e042      	b.n	800c740 <LoRa_decode+0x438>
		case _NETWORK:
			ITM0_Write("\r\nLora _NETWORK\r\n",strlen("\r\nLora _NETWORK\r\n"));
 800c6ba:	2111      	movs	r1, #17
 800c6bc:	480f      	ldr	r0, [pc, #60]	; (800c6fc <LoRa_decode+0x3f4>)
 800c6be:	f7f4 ffb7 	bl	8001630 <ITM0_Write>
			break;
 800c6c2:	e03d      	b.n	800c740 <LoRa_decode+0x438>
		case _CPIN:
			ITM0_Write("\r\nLora _CPIN\r\n",strlen("\r\nLora _CPIN\r\n"));
 800c6c4:	210e      	movs	r1, #14
 800c6c6:	480e      	ldr	r0, [pc, #56]	; (800c700 <LoRa_decode+0x3f8>)
 800c6c8:	f7f4 ffb2 	bl	8001630 <ITM0_Write>
			break;
 800c6cc:	e038      	b.n	800c740 <LoRa_decode+0x438>
 800c6ce:	bf00      	nop
 800c6d0:	08010de4 	.word	0x08010de4
 800c6d4:	08010df8 	.word	0x08010df8
 800c6d8:	08010e08 	.word	0x08010e08
 800c6dc:	08010e18 	.word	0x08010e18
 800c6e0:	08010e28 	.word	0x08010e28
 800c6e4:	08010e38 	.word	0x08010e38
 800c6e8:	08010e48 	.word	0x08010e48
 800c6ec:	08010e58 	.word	0x08010e58
 800c6f0:	08010e68 	.word	0x08010e68
 800c6f4:	08010e7c 	.word	0x08010e7c
 800c6f8:	08010e8c 	.word	0x08010e8c
 800c6fc:	08010ea0 	.word	0x08010ea0
 800c700:	08010eb4 	.word	0x08010eb4
		case _CRFOP:
			ITM0_Write("\r\nLora _CRFOP\r\n",strlen("\r\nLora _CRFOP\r\n"));
 800c704:	210f      	movs	r1, #15
 800c706:	4810      	ldr	r0, [pc, #64]	; (800c748 <LoRa_decode+0x440>)
 800c708:	f7f4 ff92 	bl	8001630 <ITM0_Write>
			break;
 800c70c:	e018      	b.n	800c740 <LoRa_decode+0x438>
		case _SEND:
			ITM0_Write("\r\nLora _SEND\r\n",strlen("\r\nLora _SEND\r\n"));
 800c70e:	210e      	movs	r1, #14
 800c710:	480e      	ldr	r0, [pc, #56]	; (800c74c <LoRa_decode+0x444>)
 800c712:	f7f4 ff8d 	bl	8001630 <ITM0_Write>
			break;
 800c716:	e013      	b.n	800c740 <LoRa_decode+0x438>
		case _UID:
			ITM0_Write("\r\nLora _UID\r\n",strlen("\r\nLora _UID\r\n"));
 800c718:	210d      	movs	r1, #13
 800c71a:	480d      	ldr	r0, [pc, #52]	; (800c750 <LoRa_decode+0x448>)
 800c71c:	f7f4 ff88 	bl	8001630 <ITM0_Write>
			break;
 800c720:	e00e      	b.n	800c740 <LoRa_decode+0x438>
		case _VER:
			ITM0_Write("\r\nLora _VER\r\n",strlen("\r\nLora _VER\r\n"));
 800c722:	210d      	movs	r1, #13
 800c724:	480b      	ldr	r0, [pc, #44]	; (800c754 <LoRa_decode+0x44c>)
 800c726:	f7f4 ff83 	bl	8001630 <ITM0_Write>
			break;
 800c72a:	e009      	b.n	800c740 <LoRa_decode+0x438>
		case _ERR_RCV_OF:
			ITM0_Write("\r\nLora _ERR_RCV_OF\r\n",strlen("\r\nLora _ERR_RCV_OF\r\n"));
 800c72c:	2114      	movs	r1, #20
 800c72e:	480a      	ldr	r0, [pc, #40]	; (800c758 <LoRa_decode+0x450>)
 800c730:	f7f4 ff7e 	bl	8001630 <ITM0_Write>
			break;
 800c734:	e004      	b.n	800c740 <LoRa_decode+0x438>
		default:
			ITM0_Write("\r\nLora default\r\n",strlen("\r\nLora default\r\n"));
 800c736:	2110      	movs	r1, #16
 800c738:	4808      	ldr	r0, [pc, #32]	; (800c75c <LoRa_decode+0x454>)
 800c73a:	f7f4 ff79 	bl	8001630 <ITM0_Write>
			break;
 800c73e:	bf00      	nop
	}
 }
 800c740:	bf00      	nop
 800c742:	3718      	adds	r7, #24
 800c744:	46bd      	mov	sp, r7
 800c746:	bd80      	pop	{r7, pc}
 800c748:	08010ec4 	.word	0x08010ec4
 800c74c:	08010ed4 	.word	0x08010ed4
 800c750:	08010ee4 	.word	0x08010ee4
 800c754:	08010ef4 	.word	0x08010ef4
 800c758:	08010f04 	.word	0x08010f04
 800c75c:	08010f1c 	.word	0x08010f1c

0800c760 <Lora_idSTR>:
int Lora_idSTR(struct LoRa *a)
{		int f,g,h,i;
 800c760:	b580      	push	{r7, lr}
 800c762:	b090      	sub	sp, #64	; 0x40
 800c764:	af06      	add	r7, sp, #24
 800c766:	6078      	str	r0, [r7, #4]
		if(a->rxitems > 270) return _ERR_RCV_OF;
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	f8d3 37dc 	ldr.w	r3, [r3, #2012]	; 0x7dc
 800c76e:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800c772:	dd01      	ble.n	800c778 <Lora_idSTR+0x18>
 800c774:	2310      	movs	r3, #16
 800c776:	e257      	b.n	800cc28 <Lora_idSTR+0x4c8>
		char data[10];
		int ndata=0;
 800c778:	2300      	movs	r3, #0
 800c77a:	60fb      	str	r3, [r7, #12]
		i=strlen("+OK=");
 800c77c:	2304      	movs	r3, #4
 800c77e:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+OK=",&i,data,&ndata,&g,&h,512, 0)==1) return _OK ;
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800c78c:	f107 021c 	add.w	r2, r7, #28
 800c790:	2300      	movs	r3, #0
 800c792:	9305      	str	r3, [sp, #20]
 800c794:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c798:	9304      	str	r3, [sp, #16]
 800c79a:	f107 0320 	add.w	r3, r7, #32
 800c79e:	9303      	str	r3, [sp, #12]
 800c7a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c7a4:	9302      	str	r3, [sp, #8]
 800c7a6:	f107 030c 	add.w	r3, r7, #12
 800c7aa:	9301      	str	r3, [sp, #4]
 800c7ac:	f107 0310 	add.w	r3, r7, #16
 800c7b0:	9300      	str	r3, [sp, #0]
 800c7b2:	4613      	mov	r3, r2
 800c7b4:	4ab7      	ldr	r2, [pc, #732]	; (800ca94 <Lora_idSTR+0x334>)
 800c7b6:	f002 f9cb 	bl	800eb50 <FT_String_ND>
 800c7ba:	4603      	mov	r3, r0
 800c7bc:	2b01      	cmp	r3, #1
 800c7be:	d101      	bne.n	800c7c4 <Lora_idSTR+0x64>
 800c7c0:	2300      	movs	r3, #0
 800c7c2:	e231      	b.n	800cc28 <Lora_idSTR+0x4c8>
		i=strlen("+RCV=");
 800c7c4:	2305      	movs	r3, #5
 800c7c6:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+RCV=",&i,data,&ndata,&g,&h,512, 0)==1) return _RCV ;
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800c7d4:	f107 021c 	add.w	r2, r7, #28
 800c7d8:	2300      	movs	r3, #0
 800c7da:	9305      	str	r3, [sp, #20]
 800c7dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c7e0:	9304      	str	r3, [sp, #16]
 800c7e2:	f107 0320 	add.w	r3, r7, #32
 800c7e6:	9303      	str	r3, [sp, #12]
 800c7e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c7ec:	9302      	str	r3, [sp, #8]
 800c7ee:	f107 030c 	add.w	r3, r7, #12
 800c7f2:	9301      	str	r3, [sp, #4]
 800c7f4:	f107 0310 	add.w	r3, r7, #16
 800c7f8:	9300      	str	r3, [sp, #0]
 800c7fa:	4613      	mov	r3, r2
 800c7fc:	4aa6      	ldr	r2, [pc, #664]	; (800ca98 <Lora_idSTR+0x338>)
 800c7fe:	f002 f9a7 	bl	800eb50 <FT_String_ND>
 800c802:	4603      	mov	r3, r0
 800c804:	2b01      	cmp	r3, #1
 800c806:	d101      	bne.n	800c80c <Lora_idSTR+0xac>
 800c808:	2301      	movs	r3, #1
 800c80a:	e20d      	b.n	800cc28 <Lora_idSTR+0x4c8>
		i=strlen("+ERR=");
 800c80c:	2305      	movs	r3, #5
 800c80e:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+ERR=",&i,data,&ndata,&g,&h,512, 0)==1) return _ERR ;
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800c81c:	f107 021c 	add.w	r2, r7, #28
 800c820:	2300      	movs	r3, #0
 800c822:	9305      	str	r3, [sp, #20]
 800c824:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c828:	9304      	str	r3, [sp, #16]
 800c82a:	f107 0320 	add.w	r3, r7, #32
 800c82e:	9303      	str	r3, [sp, #12]
 800c830:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c834:	9302      	str	r3, [sp, #8]
 800c836:	f107 030c 	add.w	r3, r7, #12
 800c83a:	9301      	str	r3, [sp, #4]
 800c83c:	f107 0310 	add.w	r3, r7, #16
 800c840:	9300      	str	r3, [sp, #0]
 800c842:	4613      	mov	r3, r2
 800c844:	4a95      	ldr	r2, [pc, #596]	; (800ca9c <Lora_idSTR+0x33c>)
 800c846:	f002 f983 	bl	800eb50 <FT_String_ND>
 800c84a:	4603      	mov	r3, r0
 800c84c:	2b01      	cmp	r3, #1
 800c84e:	d101      	bne.n	800c854 <Lora_idSTR+0xf4>
 800c850:	230f      	movs	r3, #15
 800c852:	e1e9      	b.n	800cc28 <Lora_idSTR+0x4c8>
		i=strlen("+RESET");
 800c854:	2306      	movs	r3, #6
 800c856:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+RESET",&i,data,&ndata,&g,&h,512, 0)==1)return _RESET;
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800c864:	f107 021c 	add.w	r2, r7, #28
 800c868:	2300      	movs	r3, #0
 800c86a:	9305      	str	r3, [sp, #20]
 800c86c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c870:	9304      	str	r3, [sp, #16]
 800c872:	f107 0320 	add.w	r3, r7, #32
 800c876:	9303      	str	r3, [sp, #12]
 800c878:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c87c:	9302      	str	r3, [sp, #8]
 800c87e:	f107 030c 	add.w	r3, r7, #12
 800c882:	9301      	str	r3, [sp, #4]
 800c884:	f107 0310 	add.w	r3, r7, #16
 800c888:	9300      	str	r3, [sp, #0]
 800c88a:	4613      	mov	r3, r2
 800c88c:	4a84      	ldr	r2, [pc, #528]	; (800caa0 <Lora_idSTR+0x340>)
 800c88e:	f002 f95f 	bl	800eb50 <FT_String_ND>
 800c892:	4603      	mov	r3, r0
 800c894:	2b01      	cmp	r3, #1
 800c896:	d101      	bne.n	800c89c <Lora_idSTR+0x13c>
 800c898:	2302      	movs	r3, #2
 800c89a:	e1c5      	b.n	800cc28 <Lora_idSTR+0x4c8>
		i=strlen("+READY");
 800c89c:	2306      	movs	r3, #6
 800c89e:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+READY",&i,data,&ndata,&g,&h,512, 0)==1) return _READY ;
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800c8ac:	f107 021c 	add.w	r2, r7, #28
 800c8b0:	2300      	movs	r3, #0
 800c8b2:	9305      	str	r3, [sp, #20]
 800c8b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c8b8:	9304      	str	r3, [sp, #16]
 800c8ba:	f107 0320 	add.w	r3, r7, #32
 800c8be:	9303      	str	r3, [sp, #12]
 800c8c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c8c4:	9302      	str	r3, [sp, #8]
 800c8c6:	f107 030c 	add.w	r3, r7, #12
 800c8ca:	9301      	str	r3, [sp, #4]
 800c8cc:	f107 0310 	add.w	r3, r7, #16
 800c8d0:	9300      	str	r3, [sp, #0]
 800c8d2:	4613      	mov	r3, r2
 800c8d4:	4a73      	ldr	r2, [pc, #460]	; (800caa4 <Lora_idSTR+0x344>)
 800c8d6:	f002 f93b 	bl	800eb50 <FT_String_ND>
 800c8da:	4603      	mov	r3, r0
 800c8dc:	2b01      	cmp	r3, #1
 800c8de:	d101      	bne.n	800c8e4 <Lora_idSTR+0x184>
 800c8e0:	2303      	movs	r3, #3
 800c8e2:	e1a1      	b.n	800cc28 <Lora_idSTR+0x4c8>
		i=strlen("+MODE=");
 800c8e4:	2306      	movs	r3, #6
 800c8e6:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+MODE=",&i,data,&ndata,&g,&h,512, 0)==1) return _MODE ;
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800c8f4:	f107 021c 	add.w	r2, r7, #28
 800c8f8:	2300      	movs	r3, #0
 800c8fa:	9305      	str	r3, [sp, #20]
 800c8fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c900:	9304      	str	r3, [sp, #16]
 800c902:	f107 0320 	add.w	r3, r7, #32
 800c906:	9303      	str	r3, [sp, #12]
 800c908:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c90c:	9302      	str	r3, [sp, #8]
 800c90e:	f107 030c 	add.w	r3, r7, #12
 800c912:	9301      	str	r3, [sp, #4]
 800c914:	f107 0310 	add.w	r3, r7, #16
 800c918:	9300      	str	r3, [sp, #0]
 800c91a:	4613      	mov	r3, r2
 800c91c:	4a62      	ldr	r2, [pc, #392]	; (800caa8 <Lora_idSTR+0x348>)
 800c91e:	f002 f917 	bl	800eb50 <FT_String_ND>
 800c922:	4603      	mov	r3, r0
 800c924:	2b01      	cmp	r3, #1
 800c926:	d101      	bne.n	800c92c <Lora_idSTR+0x1cc>
 800c928:	2304      	movs	r3, #4
 800c92a:	e17d      	b.n	800cc28 <Lora_idSTR+0x4c8>
		i=strlen("+IPR=");
 800c92c:	2305      	movs	r3, #5
 800c92e:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+IPR=",&i,data,&ndata,&g,&h,512, 0)==1) return _IPR ;
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800c93c:	f107 021c 	add.w	r2, r7, #28
 800c940:	2300      	movs	r3, #0
 800c942:	9305      	str	r3, [sp, #20]
 800c944:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c948:	9304      	str	r3, [sp, #16]
 800c94a:	f107 0320 	add.w	r3, r7, #32
 800c94e:	9303      	str	r3, [sp, #12]
 800c950:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c954:	9302      	str	r3, [sp, #8]
 800c956:	f107 030c 	add.w	r3, r7, #12
 800c95a:	9301      	str	r3, [sp, #4]
 800c95c:	f107 0310 	add.w	r3, r7, #16
 800c960:	9300      	str	r3, [sp, #0]
 800c962:	4613      	mov	r3, r2
 800c964:	4a51      	ldr	r2, [pc, #324]	; (800caac <Lora_idSTR+0x34c>)
 800c966:	f002 f8f3 	bl	800eb50 <FT_String_ND>
 800c96a:	4603      	mov	r3, r0
 800c96c:	2b01      	cmp	r3, #1
 800c96e:	d101      	bne.n	800c974 <Lora_idSTR+0x214>
 800c970:	2305      	movs	r3, #5
 800c972:	e159      	b.n	800cc28 <Lora_idSTR+0x4c8>
		i=strlen("+PARAMETER=");
 800c974:	230b      	movs	r3, #11
 800c976:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+PARAMETER=",&i,data,&ndata,&g,&h,512, 0)==1) return _PARAMETER ;
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800c984:	f107 021c 	add.w	r2, r7, #28
 800c988:	2300      	movs	r3, #0
 800c98a:	9305      	str	r3, [sp, #20]
 800c98c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c990:	9304      	str	r3, [sp, #16]
 800c992:	f107 0320 	add.w	r3, r7, #32
 800c996:	9303      	str	r3, [sp, #12]
 800c998:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c99c:	9302      	str	r3, [sp, #8]
 800c99e:	f107 030c 	add.w	r3, r7, #12
 800c9a2:	9301      	str	r3, [sp, #4]
 800c9a4:	f107 0310 	add.w	r3, r7, #16
 800c9a8:	9300      	str	r3, [sp, #0]
 800c9aa:	4613      	mov	r3, r2
 800c9ac:	4a40      	ldr	r2, [pc, #256]	; (800cab0 <Lora_idSTR+0x350>)
 800c9ae:	f002 f8cf 	bl	800eb50 <FT_String_ND>
 800c9b2:	4603      	mov	r3, r0
 800c9b4:	2b01      	cmp	r3, #1
 800c9b6:	d101      	bne.n	800c9bc <Lora_idSTR+0x25c>
 800c9b8:	2306      	movs	r3, #6
 800c9ba:	e135      	b.n	800cc28 <Lora_idSTR+0x4c8>
		i=strlen("+BAND=");
 800c9bc:	2306      	movs	r3, #6
 800c9be:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+BAND=",&i,data,&ndata,&g,&h,512, 0)==1) return _BAND ;
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800c9cc:	f107 021c 	add.w	r2, r7, #28
 800c9d0:	2300      	movs	r3, #0
 800c9d2:	9305      	str	r3, [sp, #20]
 800c9d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c9d8:	9304      	str	r3, [sp, #16]
 800c9da:	f107 0320 	add.w	r3, r7, #32
 800c9de:	9303      	str	r3, [sp, #12]
 800c9e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c9e4:	9302      	str	r3, [sp, #8]
 800c9e6:	f107 030c 	add.w	r3, r7, #12
 800c9ea:	9301      	str	r3, [sp, #4]
 800c9ec:	f107 0310 	add.w	r3, r7, #16
 800c9f0:	9300      	str	r3, [sp, #0]
 800c9f2:	4613      	mov	r3, r2
 800c9f4:	4a2f      	ldr	r2, [pc, #188]	; (800cab4 <Lora_idSTR+0x354>)
 800c9f6:	f002 f8ab 	bl	800eb50 <FT_String_ND>
 800c9fa:	4603      	mov	r3, r0
 800c9fc:	2b01      	cmp	r3, #1
 800c9fe:	d101      	bne.n	800ca04 <Lora_idSTR+0x2a4>
 800ca00:	2307      	movs	r3, #7
 800ca02:	e111      	b.n	800cc28 <Lora_idSTR+0x4c8>
		i=strlen("+ADDRESS=");
 800ca04:	2309      	movs	r3, #9
 800ca06:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+ADDRESS=",&i,data,&ndata,&g,&h,512, 0)==1) return _ADDRESS ;
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800ca14:	f107 021c 	add.w	r2, r7, #28
 800ca18:	2300      	movs	r3, #0
 800ca1a:	9305      	str	r3, [sp, #20]
 800ca1c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ca20:	9304      	str	r3, [sp, #16]
 800ca22:	f107 0320 	add.w	r3, r7, #32
 800ca26:	9303      	str	r3, [sp, #12]
 800ca28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ca2c:	9302      	str	r3, [sp, #8]
 800ca2e:	f107 030c 	add.w	r3, r7, #12
 800ca32:	9301      	str	r3, [sp, #4]
 800ca34:	f107 0310 	add.w	r3, r7, #16
 800ca38:	9300      	str	r3, [sp, #0]
 800ca3a:	4613      	mov	r3, r2
 800ca3c:	4a1e      	ldr	r2, [pc, #120]	; (800cab8 <Lora_idSTR+0x358>)
 800ca3e:	f002 f887 	bl	800eb50 <FT_String_ND>
 800ca42:	4603      	mov	r3, r0
 800ca44:	2b01      	cmp	r3, #1
 800ca46:	d101      	bne.n	800ca4c <Lora_idSTR+0x2ec>
 800ca48:	2308      	movs	r3, #8
 800ca4a:	e0ed      	b.n	800cc28 <Lora_idSTR+0x4c8>
		i=strlen("+NETWORK=");
 800ca4c:	2309      	movs	r3, #9
 800ca4e:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+NETWORK=",&i,data,&ndata,&g,&h,512, 0)==1) return _NETWORK ;
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800ca5c:	f107 021c 	add.w	r2, r7, #28
 800ca60:	2300      	movs	r3, #0
 800ca62:	9305      	str	r3, [sp, #20]
 800ca64:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ca68:	9304      	str	r3, [sp, #16]
 800ca6a:	f107 0320 	add.w	r3, r7, #32
 800ca6e:	9303      	str	r3, [sp, #12]
 800ca70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ca74:	9302      	str	r3, [sp, #8]
 800ca76:	f107 030c 	add.w	r3, r7, #12
 800ca7a:	9301      	str	r3, [sp, #4]
 800ca7c:	f107 0310 	add.w	r3, r7, #16
 800ca80:	9300      	str	r3, [sp, #0]
 800ca82:	4613      	mov	r3, r2
 800ca84:	4a0d      	ldr	r2, [pc, #52]	; (800cabc <Lora_idSTR+0x35c>)
 800ca86:	f002 f863 	bl	800eb50 <FT_String_ND>
 800ca8a:	4603      	mov	r3, r0
 800ca8c:	2b01      	cmp	r3, #1
 800ca8e:	d117      	bne.n	800cac0 <Lora_idSTR+0x360>
 800ca90:	2309      	movs	r3, #9
 800ca92:	e0c9      	b.n	800cc28 <Lora_idSTR+0x4c8>
 800ca94:	08010f30 	.word	0x08010f30
 800ca98:	08010f38 	.word	0x08010f38
 800ca9c:	08010f40 	.word	0x08010f40
 800caa0:	08010f48 	.word	0x08010f48
 800caa4:	08010f50 	.word	0x08010f50
 800caa8:	08010f58 	.word	0x08010f58
 800caac:	08010f60 	.word	0x08010f60
 800cab0:	08010f68 	.word	0x08010f68
 800cab4:	08010f74 	.word	0x08010f74
 800cab8:	08010f7c 	.word	0x08010f7c
 800cabc:	08010f88 	.word	0x08010f88
		i=strlen("+CPIN=");
 800cac0:	2306      	movs	r3, #6
 800cac2:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+CPIN=",&i,data,&ndata,&g,&h,512, 0)==1) return _CPIN ;
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800cad0:	f107 021c 	add.w	r2, r7, #28
 800cad4:	2300      	movs	r3, #0
 800cad6:	9305      	str	r3, [sp, #20]
 800cad8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cadc:	9304      	str	r3, [sp, #16]
 800cade:	f107 0320 	add.w	r3, r7, #32
 800cae2:	9303      	str	r3, [sp, #12]
 800cae4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cae8:	9302      	str	r3, [sp, #8]
 800caea:	f107 030c 	add.w	r3, r7, #12
 800caee:	9301      	str	r3, [sp, #4]
 800caf0:	f107 0310 	add.w	r3, r7, #16
 800caf4:	9300      	str	r3, [sp, #0]
 800caf6:	4613      	mov	r3, r2
 800caf8:	4a4d      	ldr	r2, [pc, #308]	; (800cc30 <Lora_idSTR+0x4d0>)
 800cafa:	f002 f829 	bl	800eb50 <FT_String_ND>
 800cafe:	4603      	mov	r3, r0
 800cb00:	2b01      	cmp	r3, #1
 800cb02:	d101      	bne.n	800cb08 <Lora_idSTR+0x3a8>
 800cb04:	230a      	movs	r3, #10
 800cb06:	e08f      	b.n	800cc28 <Lora_idSTR+0x4c8>
		i=strlen("+CRFOP=");
 800cb08:	2307      	movs	r3, #7
 800cb0a:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+CRFOP=",&i,data,&ndata,&g,&h,512, 0)==1) return _CRFOP ;
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800cb18:	f107 021c 	add.w	r2, r7, #28
 800cb1c:	2300      	movs	r3, #0
 800cb1e:	9305      	str	r3, [sp, #20]
 800cb20:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cb24:	9304      	str	r3, [sp, #16]
 800cb26:	f107 0320 	add.w	r3, r7, #32
 800cb2a:	9303      	str	r3, [sp, #12]
 800cb2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cb30:	9302      	str	r3, [sp, #8]
 800cb32:	f107 030c 	add.w	r3, r7, #12
 800cb36:	9301      	str	r3, [sp, #4]
 800cb38:	f107 0310 	add.w	r3, r7, #16
 800cb3c:	9300      	str	r3, [sp, #0]
 800cb3e:	4613      	mov	r3, r2
 800cb40:	4a3c      	ldr	r2, [pc, #240]	; (800cc34 <Lora_idSTR+0x4d4>)
 800cb42:	f002 f805 	bl	800eb50 <FT_String_ND>
 800cb46:	4603      	mov	r3, r0
 800cb48:	2b01      	cmp	r3, #1
 800cb4a:	d101      	bne.n	800cb50 <Lora_idSTR+0x3f0>
 800cb4c:	230b      	movs	r3, #11
 800cb4e:	e06b      	b.n	800cc28 <Lora_idSTR+0x4c8>
		i=strlen("+SEND=");
 800cb50:	2306      	movs	r3, #6
 800cb52:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+SEND=",&i,data,&ndata,&g,&h,512, 0)==1) return _SEND ;
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800cb60:	f107 021c 	add.w	r2, r7, #28
 800cb64:	2300      	movs	r3, #0
 800cb66:	9305      	str	r3, [sp, #20]
 800cb68:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cb6c:	9304      	str	r3, [sp, #16]
 800cb6e:	f107 0320 	add.w	r3, r7, #32
 800cb72:	9303      	str	r3, [sp, #12]
 800cb74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cb78:	9302      	str	r3, [sp, #8]
 800cb7a:	f107 030c 	add.w	r3, r7, #12
 800cb7e:	9301      	str	r3, [sp, #4]
 800cb80:	f107 0310 	add.w	r3, r7, #16
 800cb84:	9300      	str	r3, [sp, #0]
 800cb86:	4613      	mov	r3, r2
 800cb88:	4a2b      	ldr	r2, [pc, #172]	; (800cc38 <Lora_idSTR+0x4d8>)
 800cb8a:	f001 ffe1 	bl	800eb50 <FT_String_ND>
 800cb8e:	4603      	mov	r3, r0
 800cb90:	2b01      	cmp	r3, #1
 800cb92:	d101      	bne.n	800cb98 <Lora_idSTR+0x438>
 800cb94:	230c      	movs	r3, #12
 800cb96:	e047      	b.n	800cc28 <Lora_idSTR+0x4c8>
		i=strlen("+UID=");
 800cb98:	2305      	movs	r3, #5
 800cb9a:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+UID=",&i,data,&ndata,&g,&h,512, 0)==1) return _UID ;
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800cba8:	f107 021c 	add.w	r2, r7, #28
 800cbac:	2300      	movs	r3, #0
 800cbae:	9305      	str	r3, [sp, #20]
 800cbb0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cbb4:	9304      	str	r3, [sp, #16]
 800cbb6:	f107 0320 	add.w	r3, r7, #32
 800cbba:	9303      	str	r3, [sp, #12]
 800cbbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cbc0:	9302      	str	r3, [sp, #8]
 800cbc2:	f107 030c 	add.w	r3, r7, #12
 800cbc6:	9301      	str	r3, [sp, #4]
 800cbc8:	f107 0310 	add.w	r3, r7, #16
 800cbcc:	9300      	str	r3, [sp, #0]
 800cbce:	4613      	mov	r3, r2
 800cbd0:	4a1a      	ldr	r2, [pc, #104]	; (800cc3c <Lora_idSTR+0x4dc>)
 800cbd2:	f001 ffbd 	bl	800eb50 <FT_String_ND>
 800cbd6:	4603      	mov	r3, r0
 800cbd8:	2b01      	cmp	r3, #1
 800cbda:	d101      	bne.n	800cbe0 <Lora_idSTR+0x480>
 800cbdc:	230e      	movs	r3, #14
 800cbde:	e023      	b.n	800cc28 <Lora_idSTR+0x4c8>
		i=strlen("+VER=");
 800cbe0:	2305      	movs	r3, #5
 800cbe2:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+VER=",&i,data,&ndata,&g,&h,512, 0)==1) return _VER ;
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800cbf0:	f107 021c 	add.w	r2, r7, #28
 800cbf4:	2300      	movs	r3, #0
 800cbf6:	9305      	str	r3, [sp, #20]
 800cbf8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cbfc:	9304      	str	r3, [sp, #16]
 800cbfe:	f107 0320 	add.w	r3, r7, #32
 800cc02:	9303      	str	r3, [sp, #12]
 800cc04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cc08:	9302      	str	r3, [sp, #8]
 800cc0a:	f107 030c 	add.w	r3, r7, #12
 800cc0e:	9301      	str	r3, [sp, #4]
 800cc10:	f107 0310 	add.w	r3, r7, #16
 800cc14:	9300      	str	r3, [sp, #0]
 800cc16:	4613      	mov	r3, r2
 800cc18:	4a09      	ldr	r2, [pc, #36]	; (800cc40 <Lora_idSTR+0x4e0>)
 800cc1a:	f001 ff99 	bl	800eb50 <FT_String_ND>
 800cc1e:	4603      	mov	r3, r0
 800cc20:	2b01      	cmp	r3, #1
 800cc22:	d101      	bne.n	800cc28 <Lora_idSTR+0x4c8>
 800cc24:	230d      	movs	r3, #13
 800cc26:	e7ff      	b.n	800cc28 <Lora_idSTR+0x4c8>
}
 800cc28:	4618      	mov	r0, r3
 800cc2a:	3728      	adds	r7, #40	; 0x28
 800cc2c:	46bd      	mov	sp, r7
 800cc2e:	bd80      	pop	{r7, pc}
 800cc30:	08010f94 	.word	0x08010f94
 800cc34:	08010f9c 	.word	0x08010f9c
 800cc38:	08010fa4 	.word	0x08010fa4
 800cc3c:	08010fac 	.word	0x08010fac
 800cc40:	08010fb4 	.word	0x08010fb4

0800cc44 <Lora_rx_del>:
void Lora_rx_del(struct LoRa *a)
{
 800cc44:	b480      	push	{r7}
 800cc46:	b083      	sub	sp, #12
 800cc48:	af00      	add	r7, sp, #0
 800cc4a:	6078      	str	r0, [r7, #4]
	a->rxbuff[0]='\0';
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	2200      	movs	r2, #0
 800cc50:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	a->rx_items[0]='\0';
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	2200      	movs	r2, #0
 800cc58:	731a      	strb	r2, [r3, #12]
	//a->dataRCV[0]='\0';
	a->rxRSSI=0;
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	2200      	movs	r2, #0
 800cc5e:	f8c3 27e4 	str.w	r2, [r3, #2020]	; 0x7e4
	a->rxSNR=0;
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	2200      	movs	r2, #0
 800cc66:	f8c3 27e8 	str.w	r2, [r3, #2024]	; 0x7e8
}
 800cc6a:	bf00      	nop
 800cc6c:	370c      	adds	r7, #12
 800cc6e:	46bd      	mov	sp, r7
 800cc70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc74:	4770      	bx	lr
	...

0800cc78 <ModBUS_Config>:
 *      Author: Marcelo
 */
#include "ModBUS_Chelo.h"

void ModBUS_Config(struct MBUS *m)
{
 800cc78:	b480      	push	{r7}
 800cc7a:	b083      	sub	sp, #12
 800cc7c:	af00      	add	r7, sp, #0
 800cc7e:	6078      	str	r0, [r7, #4]
	m->_address=1;							//Canal  o direccion ModBUS
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	2201      	movs	r2, #1
 800cc84:	701a      	strb	r2, [r3, #0]

	m->_mode=0;								//Defino modo de trabajo, cliente o servidor.
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	2200      	movs	r2, #0
 800cc8a:	711a      	strb	r2, [r3, #4]
	m->_timeout=500;						//Timeout para la recepción de respuesta.
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800cc92:	80da      	strh	r2, [r3, #6]

	m->_01_ReadCoils_EN=1;					//Habilito Funcion 1
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	2201      	movs	r2, #1
 800cc98:	729a      	strb	r2, [r3, #10]
	m->_01_ReadCoils_QTY=32;				//Defino cantidad de Coils disponibles en la funcion 1
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	2220      	movs	r2, #32
 800cc9e:	f883 2620 	strb.w	r2, [r3, #1568]	; 0x620
	m->_Coils=0xF0F0AF5A;
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	4a1c      	ldr	r2, [pc, #112]	; (800cd18 <ModBUS_Config+0xa0>)
 800cca6:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c

	m->_02_ReadDiscreteInputs_EN=1;			//Habilito la funcion 2
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	2201      	movs	r2, #1
 800ccae:	72da      	strb	r2, [r3, #11]
	m->_02_ReadDiscreteInputs_QTY=32;		//Defino cantidad de Discrete Inputs disponibles en la funcion 2
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	2220      	movs	r2, #32
 800ccb4:	f883 2626 	strb.w	r2, [r3, #1574]	; 0x626
	m->_Inputs=0xA5FA0F0F;
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	4a18      	ldr	r2, [pc, #96]	; (800cd1c <ModBUS_Config+0xa4>)
 800ccbc:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420

	m->_03_ReadHoldingRegisters_EN=1;		//Habilito la funcion 3
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	2201      	movs	r2, #1
 800ccc4:	731a      	strb	r2, [r3, #12]
	m->_03_ReadHoldingRegisters_QTY=16;		//Defino cantidad de registros disponibles en la funcion 3
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	2210      	movs	r2, #16
 800ccca:	f883 262c 	strb.w	r2, [r3, #1580]	; 0x62c

	m->_04_ReadInputRegisters_EN=1;			//Habilito la funcion 4
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	2201      	movs	r2, #1
 800ccd2:	735a      	strb	r2, [r3, #13]
	m->_04_ReadInputRegisters_QTY=16;		//Defino cantidad de registros disponibles en la funcion 4
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	2210      	movs	r2, #16
 800ccd8:	f883 2632 	strb.w	r2, [r3, #1586]	; 0x632

	m->_05_WriteSingleCoil_EN=1;			//Habilito la funcion 5
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	2201      	movs	r2, #1
 800cce0:	739a      	strb	r2, [r3, #14]
	m->_05_WriteSingleCoil_QTY=32;			//Defino cantidad de registros disponibles en la funcion 5
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	2220      	movs	r2, #32
 800cce6:	f883 2638 	strb.w	r2, [r3, #1592]	; 0x638

	m->_06_WriteSingleRegister_EN=1;		//Habilito la funcion 06
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	2201      	movs	r2, #1
 800ccee:	73da      	strb	r2, [r3, #15]

	m->_15_WriteMultipleCoils_EN=1;			//Habilito la funcion 15
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	2201      	movs	r2, #1
 800ccf4:	741a      	strb	r2, [r3, #16]
	m->_15_WriteMultipleCoils_QTY=32;		//Defino cantidad de registros disponibles en la funcion 5
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	2220      	movs	r2, #32
 800ccfa:	f883 263e 	strb.w	r2, [r3, #1598]	; 0x63e

	m->_16_WriteMultipleRegisters_EN=1;		//Habilito la funcion 16
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	2201      	movs	r2, #1
 800cd02:	745a      	strb	r2, [r3, #17]
	m->_16_WriteMultipleRegisters_QTY=32;	//Defino cantidad de registros disponibles en la funcion 5
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	2220      	movs	r2, #32
 800cd08:	f883 264a 	strb.w	r2, [r3, #1610]	; 0x64a
}
 800cd0c:	bf00      	nop
 800cd0e:	370c      	adds	r7, #12
 800cd10:	46bd      	mov	sp, r7
 800cd12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd16:	4770      	bx	lr
 800cd18:	f0f0af5a 	.word	0xf0f0af5a
 800cd1c:	a5fa0f0f 	.word	0xa5fa0f0f

0800cd20 <ModBUS_Check>:

int ModBUS_Check(char *a, int b)
{
 800cd20:	b480      	push	{r7}
 800cd22:	b083      	sub	sp, #12
 800cd24:	af00      	add	r7, sp, #0
 800cd26:	6078      	str	r0, [r7, #4]
 800cd28:	6039      	str	r1, [r7, #0]
	//Identifico protocolo ModBus con a[2]+a[3]==0 y coherencia en los datos con a[5]+6==b
	if((a[5]+6==b)&&(a[2]+a[3]==0))
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	3305      	adds	r3, #5
 800cd2e:	781b      	ldrb	r3, [r3, #0]
 800cd30:	3306      	adds	r3, #6
 800cd32:	683a      	ldr	r2, [r7, #0]
 800cd34:	429a      	cmp	r2, r3
 800cd36:	d10b      	bne.n	800cd50 <ModBUS_Check+0x30>
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	3302      	adds	r3, #2
 800cd3c:	781b      	ldrb	r3, [r3, #0]
 800cd3e:	461a      	mov	r2, r3
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	3303      	adds	r3, #3
 800cd44:	781b      	ldrb	r3, [r3, #0]
 800cd46:	4413      	add	r3, r2
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	d101      	bne.n	800cd50 <ModBUS_Check+0x30>
	{
		return(1);
 800cd4c:	2301      	movs	r3, #1
 800cd4e:	e000      	b.n	800cd52 <ModBUS_Check+0x32>
	}
	else
	{
		return(0);
 800cd50:	2300      	movs	r3, #0
	}
}
 800cd52:	4618      	mov	r0, r3
 800cd54:	370c      	adds	r7, #12
 800cd56:	46bd      	mov	sp, r7
 800cd58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd5c:	4770      	bx	lr

0800cd5e <ModBUS_Check_tid>:

int ModBUS_Check_tid(struct MBUS *m2)
{
 800cd5e:	b480      	push	{r7}
 800cd60:	b083      	sub	sp, #12
 800cd62:	af00      	add	r7, sp, #0
 800cd64:	6078      	str	r0, [r7, #4]

	if( (m2->_MBUS_2SND[0] == m2->_MBUS_RCVD[0])&&
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	f893 2218 	ldrb.w	r2, [r3, #536]	; 0x218
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	7c9b      	ldrb	r3, [r3, #18]
 800cd70:	429a      	cmp	r2, r3
 800cd72:	d11d      	bne.n	800cdb0 <ModBUS_Check_tid+0x52>
		(m2->_MBUS_2SND[1] == m2->_MBUS_RCVD[1])&&
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	f893 2219 	ldrb.w	r2, [r3, #537]	; 0x219
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	7cdb      	ldrb	r3, [r3, #19]
	if( (m2->_MBUS_2SND[0] == m2->_MBUS_RCVD[0])&&
 800cd7e:	429a      	cmp	r2, r3
 800cd80:	d116      	bne.n	800cdb0 <ModBUS_Check_tid+0x52>
		(m2->_MBUS_2SND[2] == m2->_MBUS_RCVD[2])&&
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	f893 221a 	ldrb.w	r2, [r3, #538]	; 0x21a
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	7d1b      	ldrb	r3, [r3, #20]
		(m2->_MBUS_2SND[1] == m2->_MBUS_RCVD[1])&&
 800cd8c:	429a      	cmp	r2, r3
 800cd8e:	d10f      	bne.n	800cdb0 <ModBUS_Check_tid+0x52>
		(m2->_MBUS_2SND[3] == m2->_MBUS_RCVD[3])&&
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	f893 221b 	ldrb.w	r2, [r3, #539]	; 0x21b
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	7d5b      	ldrb	r3, [r3, #21]
		(m2->_MBUS_2SND[2] == m2->_MBUS_RCVD[2])&&
 800cd9a:	429a      	cmp	r2, r3
 800cd9c:	d108      	bne.n	800cdb0 <ModBUS_Check_tid+0x52>
		(m2->_MBUS_2SND[7] == m2->_MBUS_RCVD[7]))
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	f893 221f 	ldrb.w	r2, [r3, #543]	; 0x21f
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	7e5b      	ldrb	r3, [r3, #25]
		(m2->_MBUS_2SND[3] == m2->_MBUS_RCVD[3])&&
 800cda8:	429a      	cmp	r2, r3
 800cdaa:	d101      	bne.n	800cdb0 <ModBUS_Check_tid+0x52>
	{
		return(1);
 800cdac:	2301      	movs	r3, #1
 800cdae:	e000      	b.n	800cdb2 <ModBUS_Check_tid+0x54>
	}
	else
	{

		return(0);
 800cdb0:	2300      	movs	r3, #0
	}
}
 800cdb2:	4618      	mov	r0, r3
 800cdb4:	370c      	adds	r7, #12
 800cdb6:	46bd      	mov	sp, r7
 800cdb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdbc:	4770      	bx	lr

0800cdbe <ModBUS_F03_Assign>:

int ModBUS_F03_Assign(struct MBUS *m2, uint8_t address, uint16_t data)
{
 800cdbe:	b480      	push	{r7}
 800cdc0:	b085      	sub	sp, #20
 800cdc2:	af00      	add	r7, sp, #0
 800cdc4:	6078      	str	r0, [r7, #4]
 800cdc6:	460b      	mov	r3, r1
 800cdc8:	70fb      	strb	r3, [r7, #3]
 800cdca:	4613      	mov	r3, r2
 800cdcc:	803b      	strh	r3, [r7, #0]

	uint8_t c=0;
 800cdce:	2300      	movs	r3, #0
 800cdd0:	73fb      	strb	r3, [r7, #15]
	//	Analizo que el rango de direcciones sea el correcto
	if( (address) > m2->_03_ReadHoldingRegisters_QTY)
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	f893 362c 	ldrb.w	r3, [r3, #1580]	; 0x62c
 800cdd8:	78fa      	ldrb	r2, [r7, #3]
 800cdda:	429a      	cmp	r2, r3
 800cddc:	d901      	bls.n	800cde2 <ModBUS_F03_Assign+0x24>
	{
		return(1);
 800cdde:	2301      	movs	r3, #1
 800cde0:	e016      	b.n	800ce10 <ModBUS_F03_Assign+0x52>
	}
	else
	{
		address=address*2;
 800cde2:	78fb      	ldrb	r3, [r7, #3]
 800cde4:	005b      	lsls	r3, r3, #1
 800cde6:	70fb      	strb	r3, [r7, #3]
		m2->_Holding_Registers[(address)+1]=data;
 800cde8:	78fb      	ldrb	r3, [r7, #3]
 800cdea:	3301      	adds	r3, #1
 800cdec:	883a      	ldrh	r2, [r7, #0]
 800cdee:	b2d1      	uxtb	r1, r2
 800cdf0:	687a      	ldr	r2, [r7, #4]
 800cdf2:	4413      	add	r3, r2
 800cdf4:	460a      	mov	r2, r1
 800cdf6:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
		c=data>>8;
 800cdfa:	883b      	ldrh	r3, [r7, #0]
 800cdfc:	0a1b      	lsrs	r3, r3, #8
 800cdfe:	b29b      	uxth	r3, r3
 800ce00:	73fb      	strb	r3, [r7, #15]
		m2->_Holding_Registers[(address)]=c;
 800ce02:	78fb      	ldrb	r3, [r7, #3]
 800ce04:	687a      	ldr	r2, [r7, #4]
 800ce06:	4413      	add	r3, r2
 800ce08:	7bfa      	ldrb	r2, [r7, #15]
 800ce0a:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424

		return(0);
 800ce0e:	2300      	movs	r3, #0
	}
}
 800ce10:	4618      	mov	r0, r3
 800ce12:	3714      	adds	r7, #20
 800ce14:	46bd      	mov	sp, r7
 800ce16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce1a:	4770      	bx	lr

0800ce1c <ModBUS_F03_Read>:
		return(0);
	}
}

uint16_t ModBUS_F03_Read(struct MBUS *m2, uint8_t address)
{
 800ce1c:	b480      	push	{r7}
 800ce1e:	b085      	sub	sp, #20
 800ce20:	af00      	add	r7, sp, #0
 800ce22:	6078      	str	r0, [r7, #4]
 800ce24:	460b      	mov	r3, r1
 800ce26:	70fb      	strb	r3, [r7, #3]
	uint16_t n=0;
 800ce28:	2300      	movs	r3, #0
 800ce2a:	81fb      	strh	r3, [r7, #14]
	uint8_t c=0;
 800ce2c:	2300      	movs	r3, #0
 800ce2e:	737b      	strb	r3, [r7, #13]
	//	Analizo que el rango de direcciones sea el correcto
	if( (address) > m2->_03_ReadHoldingRegisters_QTY)
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	f893 362c 	ldrb.w	r3, [r3, #1580]	; 0x62c
 800ce36:	78fa      	ldrb	r2, [r7, #3]
 800ce38:	429a      	cmp	r2, r3
 800ce3a:	d901      	bls.n	800ce40 <ModBUS_F03_Read+0x24>
	{
		return(1);
 800ce3c:	2301      	movs	r3, #1
 800ce3e:	e016      	b.n	800ce6e <ModBUS_F03_Read+0x52>
	}
	else
	{
		address=address*2;
 800ce40:	78fb      	ldrb	r3, [r7, #3]
 800ce42:	005b      	lsls	r3, r3, #1
 800ce44:	70fb      	strb	r3, [r7, #3]
		n=m2->_Holding_Registers[(address)];
 800ce46:	78fb      	ldrb	r3, [r7, #3]
 800ce48:	687a      	ldr	r2, [r7, #4]
 800ce4a:	4413      	add	r3, r2
 800ce4c:	f893 3424 	ldrb.w	r3, [r3, #1060]	; 0x424
 800ce50:	81fb      	strh	r3, [r7, #14]
		n=n<<8;
 800ce52:	89fb      	ldrh	r3, [r7, #14]
 800ce54:	021b      	lsls	r3, r3, #8
 800ce56:	81fb      	strh	r3, [r7, #14]
		n|=m2->_Holding_Registers[(address)+1];
 800ce58:	78fb      	ldrb	r3, [r7, #3]
 800ce5a:	3301      	adds	r3, #1
 800ce5c:	687a      	ldr	r2, [r7, #4]
 800ce5e:	4413      	add	r3, r2
 800ce60:	f893 3424 	ldrb.w	r3, [r3, #1060]	; 0x424
 800ce64:	b29a      	uxth	r2, r3
 800ce66:	89fb      	ldrh	r3, [r7, #14]
 800ce68:	4313      	orrs	r3, r2
 800ce6a:	81fb      	strh	r3, [r7, #14]
		return(n);
 800ce6c:	89fb      	ldrh	r3, [r7, #14]
	}
}
 800ce6e:	4618      	mov	r0, r3
 800ce70:	3714      	adds	r7, #20
 800ce72:	46bd      	mov	sp, r7
 800ce74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce78:	4770      	bx	lr

0800ce7a <ModBUS_F03_Request>:
		return(n);
	}
}

ModBUS_F03_Request(struct MBUS *m2, uint16_t addr , uint8_t qty)
{
 800ce7a:	b480      	push	{r7}
 800ce7c:	b083      	sub	sp, #12
 800ce7e:	af00      	add	r7, sp, #0
 800ce80:	6078      	str	r0, [r7, #4]
 800ce82:	460b      	mov	r3, r1
 800ce84:	807b      	strh	r3, [r7, #2]
 800ce86:	4613      	mov	r3, r2
 800ce88:	707b      	strb	r3, [r7, #1]
	// Se deberia asignar variable inremental para el transaction id
	m2->_MBUS_2SND[9]= addr && 0x0F;
 800ce8a:	887b      	ldrh	r3, [r7, #2]
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	bf14      	ite	ne
 800ce90:	2301      	movne	r3, #1
 800ce92:	2300      	moveq	r3, #0
 800ce94:	b2db      	uxtb	r3, r3
 800ce96:	461a      	mov	r2, r3
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	f883 2221 	strb.w	r2, [r3, #545]	; 0x221
	addr&=0xF0;
 800ce9e:	887b      	ldrh	r3, [r7, #2]
 800cea0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cea4:	807b      	strh	r3, [r7, #2]
	addr=addr>>8;
 800cea6:	887b      	ldrh	r3, [r7, #2]
 800cea8:	0a1b      	lsrs	r3, r3, #8
 800ceaa:	807b      	strh	r3, [r7, #2]
	addr&=0x0F;
 800ceac:	887b      	ldrh	r3, [r7, #2]
 800ceae:	f003 030f 	and.w	r3, r3, #15
 800ceb2:	807b      	strh	r3, [r7, #2]

	m2->_MBUS_2SND[0]=0x00;
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	2200      	movs	r2, #0
 800ceb8:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
	m2->_MBUS_2SND[1]=0x00;
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	2200      	movs	r2, #0
 800cec0:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
	m2->_MBUS_2SND[2]=0x00;
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	2200      	movs	r2, #0
 800cec8:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
	m2->_MBUS_2SND[3]=0x00;
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	2200      	movs	r2, #0
 800ced0:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
	m2->_MBUS_2SND[4]=0x00;
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	2200      	movs	r2, #0
 800ced8:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
	m2->_MBUS_2SND[5]=0x06;
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	2206      	movs	r2, #6
 800cee0:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
	m2->_MBUS_2SND[6]=m2->_address;
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	781a      	ldrb	r2, [r3, #0]
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
	m2->_MBUS_2SND[7]=0x03;
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	2203      	movs	r2, #3
 800cef2:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
	m2->_MBUS_2SND[8]=addr;
 800cef6:	887b      	ldrh	r3, [r7, #2]
 800cef8:	b2da      	uxtb	r2, r3
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220

	m2->_MBUS_2SND[10]=0x00;
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	2200      	movs	r2, #0
 800cf04:	f883 2222 	strb.w	r2, [r3, #546]	; 0x222
	m2->_MBUS_2SND[11]=qty;
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	787a      	ldrb	r2, [r7, #1]
 800cf0c:	f883 2223 	strb.w	r2, [r3, #547]	; 0x223
	m2->_n_MBUS_2SND=12;			//Conteo de bytes a transmitir
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	220c      	movs	r2, #12
 800cf14:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

}
 800cf18:	bf00      	nop
 800cf1a:	4618      	mov	r0, r3
 800cf1c:	370c      	adds	r7, #12
 800cf1e:	46bd      	mov	sp, r7
 800cf20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf24:	4770      	bx	lr
	...

0800cf28 <ModBUS>:

int ModBUS(struct MBUS *m3)
{
 800cf28:	b580      	push	{r7, lr}
 800cf2a:	b09c      	sub	sp, #112	; 0x70
 800cf2c:	af00      	add	r7, sp, #0
 800cf2e:	6078      	str	r0, [r7, #4]

	if(m3->_mode == SERVIDOR)
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	791b      	ldrb	r3, [r3, #4]
 800cf34:	2b01      	cmp	r3, #1
 800cf36:	f041 813f 	bne.w	800e1b8 <ModBUS+0x1290>
	{
		if (ModBUS_Check(m3->_MBUS_RCVD,m3->_n_MBUS_RCVD))//if (m3->_n_MBUS_RCVD>=10)  //Garantizo longitud minima de telegram MBUS
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	f103 0212 	add.w	r2, r3, #18
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800cf46:	4619      	mov	r1, r3
 800cf48:	4610      	mov	r0, r2
 800cf4a:	f7ff fee9 	bl	800cd20 <ModBUS_Check>
 800cf4e:	4603      	mov	r3, r0
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	f001 812f 	beq.w	800e1b4 <ModBUS+0x128c>
		{
			switch(m3->_MBUS_RCVD[7])
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	7e5b      	ldrb	r3, [r3, #25]
 800cf5a:	3b01      	subs	r3, #1
 800cf5c:	2b0f      	cmp	r3, #15
 800cf5e:	f201 80f3 	bhi.w	800e148 <ModBUS+0x1220>
 800cf62:	a201      	add	r2, pc, #4	; (adr r2, 800cf68 <ModBUS+0x40>)
 800cf64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf68:	0800cfa9 	.word	0x0800cfa9
 800cf6c:	0800d1e9 	.word	0x0800d1e9
 800cf70:	0800d429 	.word	0x0800d429
 800cf74:	0800d661 	.word	0x0800d661
 800cf78:	0800d899 	.word	0x0800d899
 800cf7c:	0800daaf 	.word	0x0800daaf
 800cf80:	0800e149 	.word	0x0800e149
 800cf84:	0800e149 	.word	0x0800e149
 800cf88:	0800e149 	.word	0x0800e149
 800cf8c:	0800e149 	.word	0x0800e149
 800cf90:	0800e149 	.word	0x0800e149
 800cf94:	0800e149 	.word	0x0800e149
 800cf98:	0800e149 	.word	0x0800e149
 800cf9c:	0800e149 	.word	0x0800e149
 800cfa0:	0800dc6b 	.word	0x0800dc6b
 800cfa4:	0800defb 	.word	0x0800defb

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	7d9a      	ldrb	r2, [r3, #22]
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	7d5a      	ldrb	r2, [r3, #21]
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	7d1a      	ldrb	r2, [r3, #20]
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	7cda      	ldrb	r2, [r3, #19]
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	7c9a      	ldrb	r2, [r3, #18]
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

					int qty_reg=0;
 800cfda:	2300      	movs	r3, #0
 800cfdc:	617b      	str	r3, [r7, #20]
					if  ( m3->_01_ReadCoils_EN == 1 ) //Debe estar habilitado el código de funcion
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	7a9b      	ldrb	r3, [r3, #10]
 800cfe2:	2b01      	cmp	r3, #1
 800cfe4:	f040 80e6 	bne.w	800d1b4 <ModBUS+0x28c>
					{


							m3->_01_ReadCoils_StrtAddr = m3->_MBUS_RCVD[8];
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	7e9b      	ldrb	r3, [r3, #26]
 800cfec:	b29a      	uxth	r2, r3
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	f8a3 2622 	strh.w	r2, [r3, #1570]	; 0x622
							m3->_01_ReadCoils_StrtAddr = m3->_01_ReadCoils_StrtAddr<<8;
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	f8b3 3622 	ldrh.w	r3, [r3, #1570]	; 0x622
 800cffa:	021b      	lsls	r3, r3, #8
 800cffc:	b29a      	uxth	r2, r3
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	f8a3 2622 	strh.w	r2, [r3, #1570]	; 0x622
							m3->_01_ReadCoils_StrtAddr &= 0xFF00;
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	f8b3 3622 	ldrh.w	r3, [r3, #1570]	; 0x622
 800d00a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d00e:	b29a      	uxth	r2, r3
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	f8a3 2622 	strh.w	r2, [r3, #1570]	; 0x622
							m3->_01_ReadCoils_StrtAddr |= m3->_MBUS_RCVD[9];
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	f8b3 2622 	ldrh.w	r2, [r3, #1570]	; 0x622
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	7edb      	ldrb	r3, [r3, #27]
 800d020:	b29b      	uxth	r3, r3
 800d022:	4313      	orrs	r3, r2
 800d024:	b29a      	uxth	r2, r3
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	f8a3 2622 	strh.w	r2, [r3, #1570]	; 0x622

							m3->_01_ReadCoils_QTYReg = m3->_MBUS_RCVD[10];
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	7f1b      	ldrb	r3, [r3, #28]
 800d030:	b29a      	uxth	r2, r3
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	f8a3 2624 	strh.w	r2, [r3, #1572]	; 0x624
							m3->_01_ReadCoils_QTYReg = m3->_01_ReadCoils_QTYReg<<8;
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	f8b3 3624 	ldrh.w	r3, [r3, #1572]	; 0x624
 800d03e:	021b      	lsls	r3, r3, #8
 800d040:	b29a      	uxth	r2, r3
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	f8a3 2624 	strh.w	r2, [r3, #1572]	; 0x624
							m3->_01_ReadCoils_QTYReg &= 0xFF00;
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	f8b3 3624 	ldrh.w	r3, [r3, #1572]	; 0x624
 800d04e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d052:	b29a      	uxth	r2, r3
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	f8a3 2624 	strh.w	r2, [r3, #1572]	; 0x624
							m3->_01_ReadCoils_QTYReg |= m3->_MBUS_RCVD[11];
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	f8b3 2624 	ldrh.w	r2, [r3, #1572]	; 0x624
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	7f5b      	ldrb	r3, [r3, #29]
 800d064:	b29b      	uxth	r3, r3
 800d066:	4313      	orrs	r3, r2
 800d068:	b29a      	uxth	r2, r3
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	f8a3 2624 	strh.w	r2, [r3, #1572]	; 0x624



							if ( m3->_01_ReadCoils_QTYReg <=  m3->_01_ReadCoils_QTY) //Cdad pedida menor a igual que disponible
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	f8b3 2624 	ldrh.w	r2, [r3, #1572]	; 0x624
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	f893 3620 	ldrb.w	r3, [r3, #1568]	; 0x620
 800d07c:	b29b      	uxth	r3, r3
 800d07e:	429a      	cmp	r2, r3
 800d080:	d87e      	bhi.n	800d180 <ModBUS+0x258>
							{
								if ( (m3->_01_ReadCoils_StrtAddr + m3->_01_ReadCoils_QTYReg) <=  m3->_01_ReadCoils_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	f8b3 3622 	ldrh.w	r3, [r3, #1570]	; 0x622
 800d088:	461a      	mov	r2, r3
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	f8b3 3624 	ldrh.w	r3, [r3, #1572]	; 0x624
 800d090:	4413      	add	r3, r2
 800d092:	687a      	ldr	r2, [r7, #4]
 800d094:	f892 2620 	ldrb.w	r2, [r2, #1568]	; 0x620
 800d098:	4293      	cmp	r3, r2
 800d09a:	dc57      	bgt.n	800d14c <ModBUS+0x224>
								{
								int div=0, resto=0, bytes=0,pos=0;
 800d09c:	2300      	movs	r3, #0
 800d09e:	613b      	str	r3, [r7, #16]
 800d0a0:	2300      	movs	r3, #0
 800d0a2:	60fb      	str	r3, [r7, #12]
 800d0a4:	2300      	movs	r3, #0
 800d0a6:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d0a8:	2300      	movs	r3, #0
 800d0aa:	60bb      	str	r3, [r7, #8]
								uint32_t coils=0;
 800d0ac:	2300      	movs	r3, #0
 800d0ae:	66bb      	str	r3, [r7, #104]	; 0x68
									// Verificado el mensaje, se procesa.

									coils = (m3->_Coils >> m3->_01_ReadCoils_StrtAddr);
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 800d0b6:	687a      	ldr	r2, [r7, #4]
 800d0b8:	f8b2 2622 	ldrh.w	r2, [r2, #1570]	; 0x622
 800d0bc:	40d3      	lsrs	r3, r2
 800d0be:	66bb      	str	r3, [r7, #104]	; 0x68
									//Debo determinar la cantidad de bytes a enviar

									div=m3->_01_ReadCoils_QTYReg/8;
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	f8b3 3624 	ldrh.w	r3, [r3, #1572]	; 0x624
 800d0c6:	08db      	lsrs	r3, r3, #3
 800d0c8:	b29b      	uxth	r3, r3
 800d0ca:	613b      	str	r3, [r7, #16]
									resto=m3->_01_ReadCoils_QTYReg%8;
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	f8b3 3624 	ldrh.w	r3, [r3, #1572]	; 0x624
 800d0d2:	f003 0307 	and.w	r3, r3, #7
 800d0d6:	60fb      	str	r3, [r7, #12]

									if(resto==0)
 800d0d8:	68fb      	ldr	r3, [r7, #12]
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	d102      	bne.n	800d0e4 <ModBUS+0x1bc>
									{
										bytes=div;
 800d0de:	693b      	ldr	r3, [r7, #16]
 800d0e0:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d0e2:	e002      	b.n	800d0ea <ModBUS+0x1c2>
									}
									else
									{
										bytes=div+1;
 800d0e4:	693b      	ldr	r3, [r7, #16]
 800d0e6:	3301      	adds	r3, #1
 800d0e8:	66fb      	str	r3, [r7, #108]	; 0x6c
									}

									m3->_MBUS_2SND[8]=bytes;
 800d0ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d0ec:	b2da      	uxtb	r2, r3
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220


									while(bytes > 0)
 800d0f4:	e00e      	b.n	800d114 <ModBUS+0x1ec>
									{
										m3->_MBUS_2SND[8+bytes]=coils;
 800d0f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d0f8:	3308      	adds	r3, #8
 800d0fa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d0fc:	b2d1      	uxtb	r1, r2
 800d0fe:	687a      	ldr	r2, [r7, #4]
 800d100:	4413      	add	r3, r2
 800d102:	460a      	mov	r2, r1
 800d104:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
										coils=coils>>8;
 800d108:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d10a:	0a1b      	lsrs	r3, r3, #8
 800d10c:	66bb      	str	r3, [r7, #104]	; 0x68
										bytes--;
 800d10e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d110:	3b01      	subs	r3, #1
 800d112:	66fb      	str	r3, [r7, #108]	; 0x6c
									while(bytes > 0)
 800d114:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d116:	2b00      	cmp	r3, #0
 800d118:	dced      	bgt.n	800d0f6 <ModBUS+0x1ce>
									}


									m3->_MBUS_2SND[7]=0x01;
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	2201      	movs	r2, #1
 800d11e:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	2201      	movs	r2, #1
 800d126:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=m3->_MBUS_2SND[8]+3; //Cdad de datos
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	f893 3220 	ldrb.w	r3, [r3, #544]	; 0x220
 800d130:	3303      	adds	r3, #3
 800d132:	b2da      	uxtb	r2, r3
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d

									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800d140:	1d9a      	adds	r2, r3, #6
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800d148:	f001 b8d4 	b.w	800e2f4 <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x02;
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	2202      	movs	r2, #2
 800d150:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x81;
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	2281      	movs	r2, #129	; 0x81
 800d158:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	2201      	movs	r2, #1
 800d160:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	2203      	movs	r2, #3
 800d168:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800d172:	1d9a      	adds	r2, r3, #6
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
									return(2);//Error excepcion 02
 800d17a:	2302      	movs	r3, #2
 800d17c:	f001 b8ba 	b.w	800e2f4 <ModBUS+0x13cc>
								m3->_MBUS_2SND[8]=0x03;
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	2203      	movs	r2, #3
 800d184:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
								m3->_MBUS_2SND[7]=0x81;
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	2281      	movs	r2, #129	; 0x81
 800d18c:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
								m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	2201      	movs	r2, #1
 800d194:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
								m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	2203      	movs	r2, #3
 800d19c:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
								m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800d1a6:	1d9a      	adds	r2, r3, #6
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
								return(3);//Erroe excepcion 03
 800d1ae:	2303      	movs	r3, #3
 800d1b0:	f001 b8a0 	b.w	800e2f4 <ModBUS+0x13cc>
						m3->_MBUS_2SND[8]=0x01;
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	2201      	movs	r2, #1
 800d1b8:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
						m3->_MBUS_2SND[7]=0x81;
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	2281      	movs	r2, #129	; 0x81
 800d1c0:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	2201      	movs	r2, #1
 800d1c8:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	2203      	movs	r2, #3
 800d1d0:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800d1da:	1d9a      	adds	r2, r3, #6
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
						return(1);//Error excepcion 01
 800d1e2:	2301      	movs	r3, #1
 800d1e4:	f001 b886 	b.w	800e2f4 <ModBUS+0x13cc>

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	7d9a      	ldrb	r2, [r3, #22]
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	7d5a      	ldrb	r2, [r3, #21]
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	7d1a      	ldrb	r2, [r3, #20]
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	7cda      	ldrb	r2, [r3, #19]
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	7c9a      	ldrb	r2, [r3, #18]
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

					int qty_reg=0;
 800d21a:	2300      	movs	r3, #0
 800d21c:	627b      	str	r3, [r7, #36]	; 0x24
					if  ( m3->_02_ReadDiscreteInputs_EN == 1 ) //Debe estar habilitado el código de funcion
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	7adb      	ldrb	r3, [r3, #11]
 800d222:	2b01      	cmp	r3, #1
 800d224:	f040 80e6 	bne.w	800d3f4 <ModBUS+0x4cc>
					{


							m3->_02_ReadDiscreteInputs_StrtAddr = m3->_MBUS_RCVD[8];
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	7e9b      	ldrb	r3, [r3, #26]
 800d22c:	b29a      	uxth	r2, r3
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	f8a3 2628 	strh.w	r2, [r3, #1576]	; 0x628
							m3->_02_ReadDiscreteInputs_StrtAddr = m3->_02_ReadDiscreteInputs_StrtAddr<<8;
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	f8b3 3628 	ldrh.w	r3, [r3, #1576]	; 0x628
 800d23a:	021b      	lsls	r3, r3, #8
 800d23c:	b29a      	uxth	r2, r3
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	f8a3 2628 	strh.w	r2, [r3, #1576]	; 0x628
							m3->_02_ReadDiscreteInputs_StrtAddr &= 0xFF00;
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	f8b3 3628 	ldrh.w	r3, [r3, #1576]	; 0x628
 800d24a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d24e:	b29a      	uxth	r2, r3
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	f8a3 2628 	strh.w	r2, [r3, #1576]	; 0x628
							m3->_02_ReadDiscreteInputs_StrtAddr |= m3->_MBUS_RCVD[9];
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	f8b3 2628 	ldrh.w	r2, [r3, #1576]	; 0x628
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	7edb      	ldrb	r3, [r3, #27]
 800d260:	b29b      	uxth	r3, r3
 800d262:	4313      	orrs	r3, r2
 800d264:	b29a      	uxth	r2, r3
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	f8a3 2628 	strh.w	r2, [r3, #1576]	; 0x628

							m3->_02_ReadDiscreteInputs_QTYReg = m3->_MBUS_RCVD[10];
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	7f1b      	ldrb	r3, [r3, #28]
 800d270:	b29a      	uxth	r2, r3
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	f8a3 262a 	strh.w	r2, [r3, #1578]	; 0x62a
							m3->_02_ReadDiscreteInputs_QTYReg = m3->_02_ReadDiscreteInputs_QTYReg<<8;
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	f8b3 362a 	ldrh.w	r3, [r3, #1578]	; 0x62a
 800d27e:	021b      	lsls	r3, r3, #8
 800d280:	b29a      	uxth	r2, r3
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	f8a3 262a 	strh.w	r2, [r3, #1578]	; 0x62a
							m3->_02_ReadDiscreteInputs_QTYReg &= 0xFF00;
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	f8b3 362a 	ldrh.w	r3, [r3, #1578]	; 0x62a
 800d28e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d292:	b29a      	uxth	r2, r3
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	f8a3 262a 	strh.w	r2, [r3, #1578]	; 0x62a
							m3->_02_ReadDiscreteInputs_QTYReg |= m3->_MBUS_RCVD[11];
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	f8b3 262a 	ldrh.w	r2, [r3, #1578]	; 0x62a
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	7f5b      	ldrb	r3, [r3, #29]
 800d2a4:	b29b      	uxth	r3, r3
 800d2a6:	4313      	orrs	r3, r2
 800d2a8:	b29a      	uxth	r2, r3
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	f8a3 262a 	strh.w	r2, [r3, #1578]	; 0x62a



							if ( m3->_02_ReadDiscreteInputs_QTYReg <=  m3->_02_ReadDiscreteInputs_QTY) //Cdad pedida menor a igual que disponible
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	f8b3 262a 	ldrh.w	r2, [r3, #1578]	; 0x62a
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	f893 3626 	ldrb.w	r3, [r3, #1574]	; 0x626
 800d2bc:	b29b      	uxth	r3, r3
 800d2be:	429a      	cmp	r2, r3
 800d2c0:	d87e      	bhi.n	800d3c0 <ModBUS+0x498>
							{
								if ( (m3->_02_ReadDiscreteInputs_StrtAddr + m3->_02_ReadDiscreteInputs_QTYReg) <=  m3->_02_ReadDiscreteInputs_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	f8b3 3628 	ldrh.w	r3, [r3, #1576]	; 0x628
 800d2c8:	461a      	mov	r2, r3
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	f8b3 362a 	ldrh.w	r3, [r3, #1578]	; 0x62a
 800d2d0:	4413      	add	r3, r2
 800d2d2:	687a      	ldr	r2, [r7, #4]
 800d2d4:	f892 2626 	ldrb.w	r2, [r2, #1574]	; 0x626
 800d2d8:	4293      	cmp	r3, r2
 800d2da:	dc57      	bgt.n	800d38c <ModBUS+0x464>
								{
								int div=0, resto=0, bytes=0,pos=0;
 800d2dc:	2300      	movs	r3, #0
 800d2de:	623b      	str	r3, [r7, #32]
 800d2e0:	2300      	movs	r3, #0
 800d2e2:	61fb      	str	r3, [r7, #28]
 800d2e4:	2300      	movs	r3, #0
 800d2e6:	667b      	str	r3, [r7, #100]	; 0x64
 800d2e8:	2300      	movs	r3, #0
 800d2ea:	61bb      	str	r3, [r7, #24]
								uint32_t coils=0;
 800d2ec:	2300      	movs	r3, #0
 800d2ee:	663b      	str	r3, [r7, #96]	; 0x60
									// Verificado el mensaje, se procesa.

									coils = (m3->_Inputs >> m3->_02_ReadDiscreteInputs_StrtAddr);
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 800d2f6:	687a      	ldr	r2, [r7, #4]
 800d2f8:	f8b2 2628 	ldrh.w	r2, [r2, #1576]	; 0x628
 800d2fc:	40d3      	lsrs	r3, r2
 800d2fe:	663b      	str	r3, [r7, #96]	; 0x60
									//Debo determinar la cantidad de bytes a enviar

									div=m3->_02_ReadDiscreteInputs_QTYReg/8;
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	f8b3 362a 	ldrh.w	r3, [r3, #1578]	; 0x62a
 800d306:	08db      	lsrs	r3, r3, #3
 800d308:	b29b      	uxth	r3, r3
 800d30a:	623b      	str	r3, [r7, #32]
									resto=m3->_02_ReadDiscreteInputs_QTYReg%8;
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	f8b3 362a 	ldrh.w	r3, [r3, #1578]	; 0x62a
 800d312:	f003 0307 	and.w	r3, r3, #7
 800d316:	61fb      	str	r3, [r7, #28]

									if(resto==0)
 800d318:	69fb      	ldr	r3, [r7, #28]
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	d102      	bne.n	800d324 <ModBUS+0x3fc>
									{
										bytes=div;
 800d31e:	6a3b      	ldr	r3, [r7, #32]
 800d320:	667b      	str	r3, [r7, #100]	; 0x64
 800d322:	e002      	b.n	800d32a <ModBUS+0x402>
									}
									else
									{
										bytes=div+1;
 800d324:	6a3b      	ldr	r3, [r7, #32]
 800d326:	3301      	adds	r3, #1
 800d328:	667b      	str	r3, [r7, #100]	; 0x64
									}

									m3->_MBUS_2SND[8]=bytes;
 800d32a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d32c:	b2da      	uxtb	r2, r3
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220


									while(bytes > 0)
 800d334:	e00e      	b.n	800d354 <ModBUS+0x42c>
									{
										m3->_MBUS_2SND[8+bytes]=coils;
 800d336:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d338:	3308      	adds	r3, #8
 800d33a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d33c:	b2d1      	uxtb	r1, r2
 800d33e:	687a      	ldr	r2, [r7, #4]
 800d340:	4413      	add	r3, r2
 800d342:	460a      	mov	r2, r1
 800d344:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
										coils=coils>>8;
 800d348:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d34a:	0a1b      	lsrs	r3, r3, #8
 800d34c:	663b      	str	r3, [r7, #96]	; 0x60
										bytes--;
 800d34e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d350:	3b01      	subs	r3, #1
 800d352:	667b      	str	r3, [r7, #100]	; 0x64
									while(bytes > 0)
 800d354:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d356:	2b00      	cmp	r3, #0
 800d358:	dced      	bgt.n	800d336 <ModBUS+0x40e>
									}


									m3->_MBUS_2SND[7]=0x02;
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	2202      	movs	r2, #2
 800d35e:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	2201      	movs	r2, #1
 800d366:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=m3->_MBUS_2SND[8]+3; //Cdad de datos
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	f893 3220 	ldrb.w	r3, [r3, #544]	; 0x220
 800d370:	3303      	adds	r3, #3
 800d372:	b2da      	uxtb	r2, r3
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d

									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800d380:	1d9a      	adds	r2, r3, #6
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800d388:	f000 bfb4 	b.w	800e2f4 <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x02;
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	2202      	movs	r2, #2
 800d390:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x82;
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	2282      	movs	r2, #130	; 0x82
 800d398:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	2201      	movs	r2, #1
 800d3a0:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	2203      	movs	r2, #3
 800d3a8:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800d3b2:	1d9a      	adds	r2, r3, #6
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
									return(2);//Error excepcion 02
 800d3ba:	2302      	movs	r3, #2
 800d3bc:	f000 bf9a 	b.w	800e2f4 <ModBUS+0x13cc>
								m3->_MBUS_2SND[8]=0x03;
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	2203      	movs	r2, #3
 800d3c4:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
								m3->_MBUS_2SND[7]=0x82;
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	2282      	movs	r2, #130	; 0x82
 800d3cc:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
								m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	2201      	movs	r2, #1
 800d3d4:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
								m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	2203      	movs	r2, #3
 800d3dc:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
								m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800d3e6:	1d9a      	adds	r2, r3, #6
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
								return(3);//Erroe excepcion 03
 800d3ee:	2303      	movs	r3, #3
 800d3f0:	f000 bf80 	b.w	800e2f4 <ModBUS+0x13cc>
						m3->_MBUS_2SND[8]=0x01;
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	2201      	movs	r2, #1
 800d3f8:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
						m3->_MBUS_2SND[7]=0x82;
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	2282      	movs	r2, #130	; 0x82
 800d400:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	2201      	movs	r2, #1
 800d408:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	2203      	movs	r2, #3
 800d410:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800d41a:	1d9a      	adds	r2, r3, #6
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
						return(1);//Error excepcion 01
 800d422:	2301      	movs	r3, #1
 800d424:	f000 bf66 	b.w	800e2f4 <ModBUS+0x13cc>

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	7d9a      	ldrb	r2, [r3, #22]
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	7d5a      	ldrb	r2, [r3, #21]
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	7d1a      	ldrb	r2, [r3, #20]
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	7cda      	ldrb	r2, [r3, #19]
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	7c9a      	ldrb	r2, [r3, #18]
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

					int qty_reg=0;
 800d45a:	2300      	movs	r3, #0
 800d45c:	65fb      	str	r3, [r7, #92]	; 0x5c
					if  ( m3->_03_ReadHoldingRegisters_EN == 1 ) //Debe estar habilitado el código de funcion
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	7b1b      	ldrb	r3, [r3, #12]
 800d462:	2b01      	cmp	r3, #1
 800d464:	f040 80e2 	bne.w	800d62c <ModBUS+0x704>
					{


							m3->_03_ReadHoldingRegisters_StrtAddr = m3->_MBUS_RCVD[8];
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	7e9b      	ldrb	r3, [r3, #26]
 800d46c:	b29a      	uxth	r2, r3
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	f8a3 262e 	strh.w	r2, [r3, #1582]	; 0x62e
							m3->_03_ReadHoldingRegisters_StrtAddr = m3->_03_ReadHoldingRegisters_StrtAddr<<8;
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	f8b3 362e 	ldrh.w	r3, [r3, #1582]	; 0x62e
 800d47a:	021b      	lsls	r3, r3, #8
 800d47c:	b29a      	uxth	r2, r3
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	f8a3 262e 	strh.w	r2, [r3, #1582]	; 0x62e
							m3->_03_ReadHoldingRegisters_StrtAddr &= 0xFF00;
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	f8b3 362e 	ldrh.w	r3, [r3, #1582]	; 0x62e
 800d48a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d48e:	b29a      	uxth	r2, r3
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	f8a3 262e 	strh.w	r2, [r3, #1582]	; 0x62e
							m3->_03_ReadHoldingRegisters_StrtAddr |= m3->_MBUS_RCVD[9];
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	f8b3 262e 	ldrh.w	r2, [r3, #1582]	; 0x62e
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	7edb      	ldrb	r3, [r3, #27]
 800d4a0:	b29b      	uxth	r3, r3
 800d4a2:	4313      	orrs	r3, r2
 800d4a4:	b29a      	uxth	r2, r3
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	f8a3 262e 	strh.w	r2, [r3, #1582]	; 0x62e

							m3->_03_ReadHoldingRegisters_QTYReg = m3->_MBUS_RCVD[10];
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	7f1b      	ldrb	r3, [r3, #28]
 800d4b0:	b29a      	uxth	r2, r3
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	f8a3 2630 	strh.w	r2, [r3, #1584]	; 0x630
							m3->_03_ReadHoldingRegisters_QTYReg = m3->_03_ReadHoldingRegisters_QTYReg<<8;
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	f8b3 3630 	ldrh.w	r3, [r3, #1584]	; 0x630
 800d4be:	021b      	lsls	r3, r3, #8
 800d4c0:	b29a      	uxth	r2, r3
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	f8a3 2630 	strh.w	r2, [r3, #1584]	; 0x630
							m3->_03_ReadHoldingRegisters_QTYReg &= 0xFF00;
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	f8b3 3630 	ldrh.w	r3, [r3, #1584]	; 0x630
 800d4ce:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d4d2:	b29a      	uxth	r2, r3
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	f8a3 2630 	strh.w	r2, [r3, #1584]	; 0x630
							m3->_03_ReadHoldingRegisters_QTYReg |= m3->_MBUS_RCVD[11];
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	f8b3 2630 	ldrh.w	r2, [r3, #1584]	; 0x630
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	7f5b      	ldrb	r3, [r3, #29]
 800d4e4:	b29b      	uxth	r3, r3
 800d4e6:	4313      	orrs	r3, r2
 800d4e8:	b29a      	uxth	r2, r3
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	f8a3 2630 	strh.w	r2, [r3, #1584]	; 0x630



							if ( m3->_03_ReadHoldingRegisters_QTYReg <=  m3->_03_ReadHoldingRegisters_QTY) //Cdad pedida menor a igual que disponible
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	f8b3 2630 	ldrh.w	r2, [r3, #1584]	; 0x630
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	f893 362c 	ldrb.w	r3, [r3, #1580]	; 0x62c
 800d4fc:	b29b      	uxth	r3, r3
 800d4fe:	429a      	cmp	r2, r3
 800d500:	d87a      	bhi.n	800d5f8 <ModBUS+0x6d0>
							{
								if ( (m3->_03_ReadHoldingRegisters_StrtAddr + m3->_03_ReadHoldingRegisters_QTYReg) <=  m3->_03_ReadHoldingRegisters_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	f8b3 362e 	ldrh.w	r3, [r3, #1582]	; 0x62e
 800d508:	461a      	mov	r2, r3
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	f8b3 3630 	ldrh.w	r3, [r3, #1584]	; 0x630
 800d510:	4413      	add	r3, r2
 800d512:	687a      	ldr	r2, [r7, #4]
 800d514:	f892 262c 	ldrb.w	r2, [r2, #1580]	; 0x62c
 800d518:	4293      	cmp	r3, r2
 800d51a:	dc53      	bgt.n	800d5c4 <ModBUS+0x69c>
								{
								// Verificado el mensaje, se procesa.

									while(qty_reg < m3->_03_ReadHoldingRegisters_QTYReg)
 800d51c:	e029      	b.n	800d572 <ModBUS+0x64a>
									{

									 m3->_MBUS_2SND[2*qty_reg + 9]=m3->_Holding_Registers[m3->_03_ReadHoldingRegisters_StrtAddr*2 + 2*qty_reg];
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	f8b3 362e 	ldrh.w	r3, [r3, #1582]	; 0x62e
 800d524:	461a      	mov	r2, r3
 800d526:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d528:	4413      	add	r3, r2
 800d52a:	005a      	lsls	r2, r3, #1
 800d52c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d52e:	005b      	lsls	r3, r3, #1
 800d530:	3309      	adds	r3, #9
 800d532:	6879      	ldr	r1, [r7, #4]
 800d534:	440a      	add	r2, r1
 800d536:	f892 1424 	ldrb.w	r1, [r2, #1060]	; 0x424
 800d53a:	687a      	ldr	r2, [r7, #4]
 800d53c:	4413      	add	r3, r2
 800d53e:	460a      	mov	r2, r1
 800d540:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
									 m3->_MBUS_2SND[2*qty_reg + 10]=m3->_Holding_Registers[m3->_03_ReadHoldingRegisters_StrtAddr*2 + 2*qty_reg+1];
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	f8b3 362e 	ldrh.w	r3, [r3, #1582]	; 0x62e
 800d54a:	461a      	mov	r2, r3
 800d54c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d54e:	4413      	add	r3, r2
 800d550:	005b      	lsls	r3, r3, #1
 800d552:	1c5a      	adds	r2, r3, #1
 800d554:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d556:	3305      	adds	r3, #5
 800d558:	005b      	lsls	r3, r3, #1
 800d55a:	6879      	ldr	r1, [r7, #4]
 800d55c:	440a      	add	r2, r1
 800d55e:	f892 1424 	ldrb.w	r1, [r2, #1060]	; 0x424
 800d562:	687a      	ldr	r2, [r7, #4]
 800d564:	4413      	add	r3, r2
 800d566:	460a      	mov	r2, r1
 800d568:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

										qty_reg++; //Incremento la cantidad de registros
 800d56c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d56e:	3301      	adds	r3, #1
 800d570:	65fb      	str	r3, [r7, #92]	; 0x5c
									while(qty_reg < m3->_03_ReadHoldingRegisters_QTYReg)
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	f8b3 3630 	ldrh.w	r3, [r3, #1584]	; 0x630
 800d578:	461a      	mov	r2, r3
 800d57a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d57c:	4293      	cmp	r3, r2
 800d57e:	dbce      	blt.n	800d51e <ModBUS+0x5f6>

									}

									m3->_MBUS_2SND[8]=m3->_03_ReadHoldingRegisters_QTYReg*2;
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	f8b3 3630 	ldrh.w	r3, [r3, #1584]	; 0x630
 800d586:	b2db      	uxtb	r3, r3
 800d588:	005b      	lsls	r3, r3, #1
 800d58a:	b2da      	uxtb	r2, r3
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x03;
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	2203      	movs	r2, #3
 800d596:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	2201      	movs	r2, #1
 800d59e:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=m3->_MBUS_2SND[8]+3; //Cdad de datos
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	f893 3220 	ldrb.w	r3, [r3, #544]	; 0x220
 800d5a8:	3303      	adds	r3, #3
 800d5aa:	b2da      	uxtb	r2, r3
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d


									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800d5b8:	1d9a      	adds	r2, r3, #6
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800d5c0:	f000 be98 	b.w	800e2f4 <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x02;
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	2202      	movs	r2, #2
 800d5c8:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x83;
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	2283      	movs	r2, #131	; 0x83
 800d5d0:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	2201      	movs	r2, #1
 800d5d8:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	2203      	movs	r2, #3
 800d5e0:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800d5ea:	1d9a      	adds	r2, r3, #6
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
									return(2);//Error excepcion 02
 800d5f2:	2302      	movs	r3, #2
 800d5f4:	f000 be7e 	b.w	800e2f4 <ModBUS+0x13cc>
								m3->_MBUS_2SND[8]=0x03;
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	2203      	movs	r2, #3
 800d5fc:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
								m3->_MBUS_2SND[7]=0x83;
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	2283      	movs	r2, #131	; 0x83
 800d604:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
								m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	2201      	movs	r2, #1
 800d60c:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
								m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	2203      	movs	r2, #3
 800d614:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
								m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800d61e:	1d9a      	adds	r2, r3, #6
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
								return(3);//Erroe excepcion 03
 800d626:	2303      	movs	r3, #3
 800d628:	f000 be64 	b.w	800e2f4 <ModBUS+0x13cc>
						m3->_MBUS_2SND[8]=0x01;
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	2201      	movs	r2, #1
 800d630:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
						m3->_MBUS_2SND[7]=0x83;
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	2283      	movs	r2, #131	; 0x83
 800d638:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	2201      	movs	r2, #1
 800d640:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	2203      	movs	r2, #3
 800d648:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800d652:	1d9a      	adds	r2, r3, #6
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
						return(1);//Error excepcion 01
 800d65a:	2301      	movs	r3, #1
 800d65c:	f000 be4a 	b.w	800e2f4 <ModBUS+0x13cc>

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	7d9a      	ldrb	r2, [r3, #22]
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	7d5a      	ldrb	r2, [r3, #21]
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	7d1a      	ldrb	r2, [r3, #20]
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	7cda      	ldrb	r2, [r3, #19]
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	7c9a      	ldrb	r2, [r3, #18]
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

					int qty_reg=0;
 800d692:	2300      	movs	r3, #0
 800d694:	65bb      	str	r3, [r7, #88]	; 0x58
					if  ( m3->_04_ReadInputRegisters_EN == 1 ) //Debe estar habilitado el código de funcion
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	7b5b      	ldrb	r3, [r3, #13]
 800d69a:	2b01      	cmp	r3, #1
 800d69c:	f040 80e2 	bne.w	800d864 <ModBUS+0x93c>
					{


							m3->_04_ReadInputRegisters_StrtAddr = m3->_MBUS_RCVD[8];
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	7e9b      	ldrb	r3, [r3, #26]
 800d6a4:	b29a      	uxth	r2, r3
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	f8a3 2634 	strh.w	r2, [r3, #1588]	; 0x634
							m3->_04_ReadInputRegisters_StrtAddr = m3->_04_ReadInputRegisters_StrtAddr<<8;
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	f8b3 3634 	ldrh.w	r3, [r3, #1588]	; 0x634
 800d6b2:	021b      	lsls	r3, r3, #8
 800d6b4:	b29a      	uxth	r2, r3
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	f8a3 2634 	strh.w	r2, [r3, #1588]	; 0x634
							m3->_04_ReadInputRegisters_StrtAddr &= 0xFF00;
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	f8b3 3634 	ldrh.w	r3, [r3, #1588]	; 0x634
 800d6c2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d6c6:	b29a      	uxth	r2, r3
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	f8a3 2634 	strh.w	r2, [r3, #1588]	; 0x634
							m3->_04_ReadInputRegisters_StrtAddr |= m3->_MBUS_RCVD[9];
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	f8b3 2634 	ldrh.w	r2, [r3, #1588]	; 0x634
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	7edb      	ldrb	r3, [r3, #27]
 800d6d8:	b29b      	uxth	r3, r3
 800d6da:	4313      	orrs	r3, r2
 800d6dc:	b29a      	uxth	r2, r3
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	f8a3 2634 	strh.w	r2, [r3, #1588]	; 0x634

							m3->_04_ReadInputRegisters_QTYReg = m3->_MBUS_RCVD[10];
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	7f1b      	ldrb	r3, [r3, #28]
 800d6e8:	b29a      	uxth	r2, r3
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	f8a3 2636 	strh.w	r2, [r3, #1590]	; 0x636
							m3->_04_ReadInputRegisters_QTYReg = m3->_04_ReadInputRegisters_QTYReg<<8;
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	f8b3 3636 	ldrh.w	r3, [r3, #1590]	; 0x636
 800d6f6:	021b      	lsls	r3, r3, #8
 800d6f8:	b29a      	uxth	r2, r3
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	f8a3 2636 	strh.w	r2, [r3, #1590]	; 0x636
							m3->_04_ReadInputRegisters_QTYReg &= 0xFF00;
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	f8b3 3636 	ldrh.w	r3, [r3, #1590]	; 0x636
 800d706:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d70a:	b29a      	uxth	r2, r3
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	f8a3 2636 	strh.w	r2, [r3, #1590]	; 0x636
							m3->_04_ReadInputRegisters_QTYReg |= m3->_MBUS_RCVD[11];
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	f8b3 2636 	ldrh.w	r2, [r3, #1590]	; 0x636
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	7f5b      	ldrb	r3, [r3, #29]
 800d71c:	b29b      	uxth	r3, r3
 800d71e:	4313      	orrs	r3, r2
 800d720:	b29a      	uxth	r2, r3
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	f8a3 2636 	strh.w	r2, [r3, #1590]	; 0x636



							if ( m3->_04_ReadInputRegisters_QTYReg <=  m3->_04_ReadInputRegisters_QTY) //Cdad pedida menor a igual que disponible
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	f8b3 2636 	ldrh.w	r2, [r3, #1590]	; 0x636
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	f893 3632 	ldrb.w	r3, [r3, #1586]	; 0x632
 800d734:	b29b      	uxth	r3, r3
 800d736:	429a      	cmp	r2, r3
 800d738:	d87a      	bhi.n	800d830 <ModBUS+0x908>
							{
								if ( (m3->_04_ReadInputRegisters_StrtAddr + m3->_04_ReadInputRegisters_QTYReg) <=  m3->_04_ReadInputRegisters_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	f8b3 3634 	ldrh.w	r3, [r3, #1588]	; 0x634
 800d740:	461a      	mov	r2, r3
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	f8b3 3636 	ldrh.w	r3, [r3, #1590]	; 0x636
 800d748:	4413      	add	r3, r2
 800d74a:	687a      	ldr	r2, [r7, #4]
 800d74c:	f892 2632 	ldrb.w	r2, [r2, #1586]	; 0x632
 800d750:	4293      	cmp	r3, r2
 800d752:	dc53      	bgt.n	800d7fc <ModBUS+0x8d4>
								{
								// Verificado el mensaje, se procesa.

									while(qty_reg < m3->_04_ReadInputRegisters_QTYReg)
 800d754:	e029      	b.n	800d7aa <ModBUS+0x882>
									{

									 m3->_MBUS_2SND[2*qty_reg + 9]=m3->_InputRegisters[m3->_04_ReadInputRegisters_StrtAddr*2 + 2*qty_reg];
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	f8b3 3634 	ldrh.w	r3, [r3, #1588]	; 0x634
 800d75c:	461a      	mov	r2, r3
 800d75e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d760:	4413      	add	r3, r2
 800d762:	005a      	lsls	r2, r3, #1
 800d764:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d766:	005b      	lsls	r3, r3, #1
 800d768:	3309      	adds	r3, #9
 800d76a:	6879      	ldr	r1, [r7, #4]
 800d76c:	440a      	add	r2, r1
 800d76e:	f892 1522 	ldrb.w	r1, [r2, #1314]	; 0x522
 800d772:	687a      	ldr	r2, [r7, #4]
 800d774:	4413      	add	r3, r2
 800d776:	460a      	mov	r2, r1
 800d778:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
									 m3->_MBUS_2SND[2*qty_reg + 10]=m3->_InputRegisters[m3->_04_ReadInputRegisters_StrtAddr*2 + 2*qty_reg+1];
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	f8b3 3634 	ldrh.w	r3, [r3, #1588]	; 0x634
 800d782:	461a      	mov	r2, r3
 800d784:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d786:	4413      	add	r3, r2
 800d788:	005b      	lsls	r3, r3, #1
 800d78a:	1c5a      	adds	r2, r3, #1
 800d78c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d78e:	3305      	adds	r3, #5
 800d790:	005b      	lsls	r3, r3, #1
 800d792:	6879      	ldr	r1, [r7, #4]
 800d794:	440a      	add	r2, r1
 800d796:	f892 1522 	ldrb.w	r1, [r2, #1314]	; 0x522
 800d79a:	687a      	ldr	r2, [r7, #4]
 800d79c:	4413      	add	r3, r2
 800d79e:	460a      	mov	r2, r1
 800d7a0:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

										qty_reg++; //Incremento la cantidad de registros
 800d7a4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d7a6:	3301      	adds	r3, #1
 800d7a8:	65bb      	str	r3, [r7, #88]	; 0x58
									while(qty_reg < m3->_04_ReadInputRegisters_QTYReg)
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	f8b3 3636 	ldrh.w	r3, [r3, #1590]	; 0x636
 800d7b0:	461a      	mov	r2, r3
 800d7b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d7b4:	4293      	cmp	r3, r2
 800d7b6:	dbce      	blt.n	800d756 <ModBUS+0x82e>

									}

									m3->_MBUS_2SND[8]=m3->_04_ReadInputRegisters_QTYReg*2;
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	f8b3 3636 	ldrh.w	r3, [r3, #1590]	; 0x636
 800d7be:	b2db      	uxtb	r3, r3
 800d7c0:	005b      	lsls	r3, r3, #1
 800d7c2:	b2da      	uxtb	r2, r3
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x04;
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	2204      	movs	r2, #4
 800d7ce:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	2201      	movs	r2, #1
 800d7d6:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=m3->_MBUS_2SND[8]+3; //Cdad de datos
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	f893 3220 	ldrb.w	r3, [r3, #544]	; 0x220
 800d7e0:	3303      	adds	r3, #3
 800d7e2:	b2da      	uxtb	r2, r3
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d


									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800d7f0:	1d9a      	adds	r2, r3, #6
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800d7f8:	f000 bd7c 	b.w	800e2f4 <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x02;
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	2202      	movs	r2, #2
 800d800:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x84;
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	2284      	movs	r2, #132	; 0x84
 800d808:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	2201      	movs	r2, #1
 800d810:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	2203      	movs	r2, #3
 800d818:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800d822:	1d9a      	adds	r2, r3, #6
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
									return(2);//Error excepcion 02
 800d82a:	2302      	movs	r3, #2
 800d82c:	f000 bd62 	b.w	800e2f4 <ModBUS+0x13cc>
								m3->_MBUS_2SND[8]=0x03;
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	2203      	movs	r2, #3
 800d834:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
								m3->_MBUS_2SND[7]=0x84;
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	2284      	movs	r2, #132	; 0x84
 800d83c:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
								m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	2201      	movs	r2, #1
 800d844:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
								m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	2203      	movs	r2, #3
 800d84c:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
								m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800d856:	1d9a      	adds	r2, r3, #6
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
								return(3);//Erroe excepcion 03
 800d85e:	2303      	movs	r3, #3
 800d860:	f000 bd48 	b.w	800e2f4 <ModBUS+0x13cc>
						m3->_MBUS_2SND[8]=0x01;
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	2201      	movs	r2, #1
 800d868:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
						m3->_MBUS_2SND[7]=0x84;
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	2284      	movs	r2, #132	; 0x84
 800d870:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	2201      	movs	r2, #1
 800d878:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	2203      	movs	r2, #3
 800d880:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800d88a:	1d9a      	adds	r2, r3, #6
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
						return(1);//Error excepcion 01
 800d892:	2301      	movs	r3, #1
 800d894:	f000 bd2e 	b.w	800e2f4 <ModBUS+0x13cc>

								//-----------------------------------------------------//
								//		Para todos los casos se devuelve el mismo	   //
								//		encabezado de respuesta						   //
								//-----------------------------------------------------//
								m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	7d9a      	ldrb	r2, [r3, #22]
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
								m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	7d5a      	ldrb	r2, [r3, #21]
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
								m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	7d1a      	ldrb	r2, [r3, #20]
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
								m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	7cda      	ldrb	r2, [r3, #19]
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
								m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	7c9a      	ldrb	r2, [r3, #18]
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

								int qty_reg=0;
 800d8ca:	2300      	movs	r3, #0
 800d8cc:	62bb      	str	r3, [r7, #40]	; 0x28
								if  ( m3->_05_WriteSingleCoil_EN == 1 ) //Debe estar habilitado el código de funcion
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	7b9b      	ldrb	r3, [r3, #14]
 800d8d2:	2b01      	cmp	r3, #1
 800d8d4:	f040 80d1 	bne.w	800da7a <ModBUS+0xb52>
								{


										m3->_05_WriteSingleCoil_StrtAddr = m3->_MBUS_RCVD[8];
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	7e9b      	ldrb	r3, [r3, #26]
 800d8dc:	b29a      	uxth	r2, r3
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	f8a3 263a 	strh.w	r2, [r3, #1594]	; 0x63a
										m3->_05_WriteSingleCoil_StrtAddr = m3->_05_WriteSingleCoil_StrtAddr<<8;
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	f8b3 363a 	ldrh.w	r3, [r3, #1594]	; 0x63a
 800d8ea:	021b      	lsls	r3, r3, #8
 800d8ec:	b29a      	uxth	r2, r3
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	f8a3 263a 	strh.w	r2, [r3, #1594]	; 0x63a
										m3->_05_WriteSingleCoil_StrtAddr &= 0xFF00;
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	f8b3 363a 	ldrh.w	r3, [r3, #1594]	; 0x63a
 800d8fa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d8fe:	b29a      	uxth	r2, r3
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	f8a3 263a 	strh.w	r2, [r3, #1594]	; 0x63a
										m3->_05_WriteSingleCoil_StrtAddr |= m3->_MBUS_RCVD[9];
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	f8b3 263a 	ldrh.w	r2, [r3, #1594]	; 0x63a
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	7edb      	ldrb	r3, [r3, #27]
 800d910:	b29b      	uxth	r3, r3
 800d912:	4313      	orrs	r3, r2
 800d914:	b29a      	uxth	r2, r3
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	f8a3 263a 	strh.w	r2, [r3, #1594]	; 0x63a

										m3->_05_WriteSingleCoil_State = m3->_MBUS_RCVD[10];
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	7f1b      	ldrb	r3, [r3, #28]
 800d920:	b29a      	uxth	r2, r3
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	f8a3 263c 	strh.w	r2, [r3, #1596]	; 0x63c
										m3->_05_WriteSingleCoil_State = m3->_05_WriteSingleCoil_State<<8;
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	f8b3 363c 	ldrh.w	r3, [r3, #1596]	; 0x63c
 800d92e:	021b      	lsls	r3, r3, #8
 800d930:	b29a      	uxth	r2, r3
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	f8a3 263c 	strh.w	r2, [r3, #1596]	; 0x63c
										m3->_05_WriteSingleCoil_State &= 0xFF00;
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	f8b3 363c 	ldrh.w	r3, [r3, #1596]	; 0x63c
 800d93e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d942:	b29a      	uxth	r2, r3
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	f8a3 263c 	strh.w	r2, [r3, #1596]	; 0x63c
										m3->_05_WriteSingleCoil_State |= m3->_MBUS_RCVD[11];
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	f8b3 263c 	ldrh.w	r2, [r3, #1596]	; 0x63c
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	7f5b      	ldrb	r3, [r3, #29]
 800d954:	b29b      	uxth	r3, r3
 800d956:	4313      	orrs	r3, r2
 800d958:	b29a      	uxth	r2, r3
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	f8a3 263c 	strh.w	r2, [r3, #1596]	; 0x63c



										if ( m3->_05_WriteSingleCoil_StrtAddr <=  (m3->_05_WriteSingleCoil_QTY-1)) //Cdad pedida menor a igual que disponible
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	f893 3638 	ldrb.w	r3, [r3, #1592]	; 0x638
 800d966:	461a      	mov	r2, r3
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	f8b3 363a 	ldrh.w	r3, [r3, #1594]	; 0x63a
 800d96e:	429a      	cmp	r2, r3
 800d970:	dd69      	ble.n	800da46 <ModBUS+0xb1e>
										{
											if ( (m3->_05_WriteSingleCoil_State == 0x0000)||(m3->_05_WriteSingleCoil_State == 0xFF00)) //Dirección inicial + cantidad menor a igual que disponible
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	f8b3 363c 	ldrh.w	r3, [r3, #1596]	; 0x63c
 800d978:	2b00      	cmp	r3, #0
 800d97a:	d005      	beq.n	800d988 <ModBUS+0xa60>
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	f8b3 363c 	ldrh.w	r3, [r3, #1596]	; 0x63c
 800d982:	f5b3 4f7f 	cmp.w	r3, #65280	; 0xff00
 800d986:	d144      	bne.n	800da12 <ModBUS+0xaea>
											{
											// Verificado el mensaje, se procesa.

												if  (m3->_05_WriteSingleCoil_State == 0xFF00)
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	f8b3 363c 	ldrh.w	r3, [r3, #1596]	; 0x63c
 800d98e:	f5b3 4f7f 	cmp.w	r3, #65280	; 0xff00
 800d992:	d10d      	bne.n	800d9b0 <ModBUS+0xa88>
												{
													m3->_Coils |= 1 << m3->_05_WriteSingleCoil_StrtAddr;
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 800d99a:	687a      	ldr	r2, [r7, #4]
 800d99c:	f8b2 263a 	ldrh.w	r2, [r2, #1594]	; 0x63a
 800d9a0:	4611      	mov	r1, r2
 800d9a2:	2201      	movs	r2, #1
 800d9a4:	408a      	lsls	r2, r1
 800d9a6:	431a      	orrs	r2, r3
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
 800d9ae:	e003      	b.n	800d9b8 <ModBUS+0xa90>
												}
												else
												{
													m3->_Coils &= 0 << m3->_05_WriteSingleCoil_StrtAddr;
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	2200      	movs	r2, #0
 800d9b4:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
												}

												m3->_MBUS_2SND[11]=m3->_MBUS_RCVD[11];
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	7f5a      	ldrb	r2, [r3, #29]
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	f883 2223 	strb.w	r2, [r3, #547]	; 0x223
												m3->_MBUS_2SND[10]=m3->_MBUS_RCVD[10];
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	7f1a      	ldrb	r2, [r3, #28]
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	f883 2222 	strb.w	r2, [r3, #546]	; 0x222
												m3->_MBUS_2SND[9]=m3->_MBUS_RCVD[9];
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	7eda      	ldrb	r2, [r3, #27]
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	f883 2221 	strb.w	r2, [r3, #545]	; 0x221
												m3->_MBUS_2SND[8]=m3->_MBUS_RCVD[8];
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	7e9a      	ldrb	r2, [r3, #26]
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
												m3->_MBUS_2SND[7]=0x05;
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	2205      	movs	r2, #5
 800d9e4:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
												m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	2201      	movs	r2, #1
 800d9ec:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
												m3->_MBUS_2SND[5]=m3->_MBUS_2SND[8]+6; //Cdad de datos
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	f893 3220 	ldrb.w	r3, [r3, #544]	; 0x220
 800d9f6:	3306      	adds	r3, #6
 800d9f8:	b2da      	uxtb	r2, r3
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d


												m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800da06:	1d9a      	adds	r2, r3, #6
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
									return(1);//Error excepcion 01
								}
							}
				break;
 800da0e:	f000 bc71 	b.w	800e2f4 <ModBUS+0x13cc>
												m3->_MBUS_2SND[8]=0x02;
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	2202      	movs	r2, #2
 800da16:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
												m3->_MBUS_2SND[7]=0x85;
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	2285      	movs	r2, #133	; 0x85
 800da1e:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
												m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	2201      	movs	r2, #1
 800da26:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
												m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	2203      	movs	r2, #3
 800da2e:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
												m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800da38:	1d9a      	adds	r2, r3, #6
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
												return(2);//Error excepcion 02
 800da40:	2302      	movs	r3, #2
 800da42:	f000 bc57 	b.w	800e2f4 <ModBUS+0x13cc>
											m3->_MBUS_2SND[8]=0x03;
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	2203      	movs	r2, #3
 800da4a:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
											m3->_MBUS_2SND[7]=0x85;
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	2285      	movs	r2, #133	; 0x85
 800da52:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
											m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	2201      	movs	r2, #1
 800da5a:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
											m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	2203      	movs	r2, #3
 800da62:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
											m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800da6c:	1d9a      	adds	r2, r3, #6
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
											return(3);//Erroe excepcion 03
 800da74:	2303      	movs	r3, #3
 800da76:	f000 bc3d 	b.w	800e2f4 <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x01;
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	2201      	movs	r2, #1
 800da7e:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x85;
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	2285      	movs	r2, #133	; 0x85
 800da86:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	2201      	movs	r2, #1
 800da8e:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	2203      	movs	r2, #3
 800da96:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800daa0:	1d9a      	adds	r2, r3, #6
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
									return(1);//Error excepcion 01
 800daa8:	2301      	movs	r3, #1
 800daaa:	f000 bc23 	b.w	800e2f4 <ModBUS+0x13cc>

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	7d9a      	ldrb	r2, [r3, #22]
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	7d5a      	ldrb	r2, [r3, #21]
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	7d1a      	ldrb	r2, [r3, #20]
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	7cda      	ldrb	r2, [r3, #19]
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	7c9a      	ldrb	r2, [r3, #18]
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

					uint16_t qty_reg=0, start_address=0;
 800dae0:	2300      	movs	r3, #0
 800dae2:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800dae4:	2300      	movs	r3, #0
 800dae6:	85bb      	strh	r3, [r7, #44]	; 0x2c
					if  ( m3->_06_WriteSingleRegister_EN == 1 ) //Debe estar habilitado el código de funcion
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	7bdb      	ldrb	r3, [r3, #15]
 800daec:	2b01      	cmp	r3, #1
 800daee:	f040 80a3 	bne.w	800dc38 <ModBUS+0xd10>
					{


							m3->_06_WriteSingleRegister_Addr = m3->_MBUS_RCVD[8];
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	7e9b      	ldrb	r3, [r3, #26]
 800daf6:	b29a      	uxth	r2, r3
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	f8a3 2646 	strh.w	r2, [r3, #1606]	; 0x646
							m3->_06_WriteSingleRegister_Addr = m3->_06_WriteSingleRegister_Addr<<8;
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	f8b3 3646 	ldrh.w	r3, [r3, #1606]	; 0x646
 800db04:	021b      	lsls	r3, r3, #8
 800db06:	b29a      	uxth	r2, r3
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	f8a3 2646 	strh.w	r2, [r3, #1606]	; 0x646
							m3->_06_WriteSingleRegister_Addr &= 0xFF00;
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	f8b3 3646 	ldrh.w	r3, [r3, #1606]	; 0x646
 800db14:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800db18:	b29a      	uxth	r2, r3
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	f8a3 2646 	strh.w	r2, [r3, #1606]	; 0x646
							m3->_06_WriteSingleRegister_Addr |= m3->_MBUS_RCVD[9];
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	f8b3 2646 	ldrh.w	r2, [r3, #1606]	; 0x646
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	7edb      	ldrb	r3, [r3, #27]
 800db2a:	b29b      	uxth	r3, r3
 800db2c:	4313      	orrs	r3, r2
 800db2e:	b29a      	uxth	r2, r3
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	f8a3 2646 	strh.w	r2, [r3, #1606]	; 0x646

							start_address=m3->_06_WriteSingleRegister_Addr;
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	f8b3 3646 	ldrh.w	r3, [r3, #1606]	; 0x646
 800db3c:	85bb      	strh	r3, [r7, #44]	; 0x2c

							m3->_06_WriteSingleRegister_Value = m3->_MBUS_RCVD[10];
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	7f1b      	ldrb	r3, [r3, #28]
 800db42:	b29a      	uxth	r2, r3
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	f8a3 2648 	strh.w	r2, [r3, #1608]	; 0x648
							m3->_06_WriteSingleRegister_Value = m3->_06_WriteSingleRegister_Value<<8;
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	f8b3 3648 	ldrh.w	r3, [r3, #1608]	; 0x648
 800db50:	021b      	lsls	r3, r3, #8
 800db52:	b29a      	uxth	r2, r3
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	f8a3 2648 	strh.w	r2, [r3, #1608]	; 0x648
							m3->_06_WriteSingleRegister_Value &= 0xFF00;
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	f8b3 3648 	ldrh.w	r3, [r3, #1608]	; 0x648
 800db60:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800db64:	b29a      	uxth	r2, r3
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	f8a3 2648 	strh.w	r2, [r3, #1608]	; 0x648
							m3->_06_WriteSingleRegister_Value |= m3->_MBUS_RCVD[11];
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	f8b3 2648 	ldrh.w	r2, [r3, #1608]	; 0x648
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	7f5b      	ldrb	r3, [r3, #29]
 800db76:	b29b      	uxth	r3, r3
 800db78:	4313      	orrs	r3, r2
 800db7a:	b29a      	uxth	r2, r3
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	f8a3 2648 	strh.w	r2, [r3, #1608]	; 0x648



							if ((m3->_06_WriteSingleRegister_Value <=  0xFFFF)&&(m3->_06_WriteSingleRegister_Value >=  0x0000)) //Cdad pedida menor a igual que disponible
							{
								if ( m3->_06_WriteSingleRegister_Addr  <=  m3->_06_WriteSingleRegister_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	f8b3 2646 	ldrh.w	r2, [r3, #1606]	; 0x646
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	f893 3644 	ldrb.w	r3, [r3, #1604]	; 0x644
 800db8e:	b29b      	uxth	r3, r3
 800db90:	429a      	cmp	r2, r3
 800db92:	d838      	bhi.n	800dc06 <ModBUS+0xcde>
								{
								// Verificado el mensaje, se procesa.

										m3->_Holding_Registers[start_address] = m3->_MBUS_RCVD[10];
 800db94:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800db96:	687a      	ldr	r2, [r7, #4]
 800db98:	7f11      	ldrb	r1, [r2, #28]
 800db9a:	687a      	ldr	r2, [r7, #4]
 800db9c:	4413      	add	r3, r2
 800db9e:	460a      	mov	r2, r1
 800dba0:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
										m3->_Holding_Registers[start_address + 1] = m3->_MBUS_RCVD[11];
 800dba4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800dba6:	3301      	adds	r3, #1
 800dba8:	687a      	ldr	r2, [r7, #4]
 800dbaa:	7f51      	ldrb	r1, [r2, #29]
 800dbac:	687a      	ldr	r2, [r7, #4]
 800dbae:	4413      	add	r3, r2
 800dbb0:	460a      	mov	r2, r1
 800dbb2:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424


									m3->_MBUS_2SND[11]=m3->_MBUS_RCVD[11];
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	7f5a      	ldrb	r2, [r3, #29]
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	f883 2223 	strb.w	r2, [r3, #547]	; 0x223
									m3->_MBUS_2SND[10]=m3->_MBUS_RCVD[10];
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	7f1a      	ldrb	r2, [r3, #28]
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	f883 2222 	strb.w	r2, [r3, #546]	; 0x222
									m3->_MBUS_2SND[9]=m3->_MBUS_RCVD[9];
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	7eda      	ldrb	r2, [r3, #27]
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	f883 2221 	strb.w	r2, [r3, #545]	; 0x221
									m3->_MBUS_2SND[8]=m3->_MBUS_RCVD[8];
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	7e9a      	ldrb	r2, [r3, #26]
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x06;
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	2206      	movs	r2, #6
 800dbe2:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	2201      	movs	r2, #1
 800dbea:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=0x06; //Cdad de datos
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	2206      	movs	r2, #6
 800dbf2:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d


									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800dbfc:	1d9a      	adds	r2, r3, #6
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800dc04:	e376      	b.n	800e2f4 <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x02;
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	2202      	movs	r2, #2
 800dc0a:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x86;
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	2286      	movs	r2, #134	; 0x86
 800dc12:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	2201      	movs	r2, #1
 800dc1a:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	2203      	movs	r2, #3
 800dc22:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800dc2c:	1d9a      	adds	r2, r3, #6
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
									return(2);//Error excepcion 02
 800dc34:	2302      	movs	r3, #2
 800dc36:	e35d      	b.n	800e2f4 <ModBUS+0x13cc>
						m3->_MBUS_2SND[8]=0x01;
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	2201      	movs	r2, #1
 800dc3c:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
						m3->_MBUS_2SND[7]=0x86;
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	2286      	movs	r2, #134	; 0x86
 800dc44:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	2201      	movs	r2, #1
 800dc4c:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	2203      	movs	r2, #3
 800dc54:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800dc5e:	1d9a      	adds	r2, r3, #6
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
						return(1);//Error excepcion 01
 800dc66:	2301      	movs	r3, #1
 800dc68:	e344      	b.n	800e2f4 <ModBUS+0x13cc>

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	7d9a      	ldrb	r2, [r3, #22]
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	7d5a      	ldrb	r2, [r3, #21]
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	7d1a      	ldrb	r2, [r3, #20]
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	7cda      	ldrb	r2, [r3, #19]
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	7c9a      	ldrb	r2, [r3, #18]
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

					int qty_reg=0;
 800dc9c:	2300      	movs	r3, #0
 800dc9e:	633b      	str	r3, [r7, #48]	; 0x30
					if  ( m3->_15_WriteMultipleCoils_EN == 1 ) //Debe estar habilitado el código de funcion
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	7c1b      	ldrb	r3, [r3, #16]
 800dca4:	2b01      	cmp	r3, #1
 800dca6:	f040 810f 	bne.w	800dec8 <ModBUS+0xfa0>
					{


							m3->_15_WriteMultipleCoils_StrtAddr = m3->_MBUS_RCVD[8];
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	7e9b      	ldrb	r3, [r3, #26]
 800dcae:	b29a      	uxth	r2, r3
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	f8a3 2640 	strh.w	r2, [r3, #1600]	; 0x640
							m3->_15_WriteMultipleCoils_StrtAddr = m3->_15_WriteMultipleCoils_StrtAddr<<8;
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	f8b3 3640 	ldrh.w	r3, [r3, #1600]	; 0x640
 800dcbc:	021b      	lsls	r3, r3, #8
 800dcbe:	b29a      	uxth	r2, r3
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	f8a3 2640 	strh.w	r2, [r3, #1600]	; 0x640
							m3->_15_WriteMultipleCoils_StrtAddr &= 0xFF00;
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	f8b3 3640 	ldrh.w	r3, [r3, #1600]	; 0x640
 800dccc:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800dcd0:	b29a      	uxth	r2, r3
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	f8a3 2640 	strh.w	r2, [r3, #1600]	; 0x640
							m3->_15_WriteMultipleCoils_StrtAddr |= m3->_MBUS_RCVD[9];
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	f8b3 2640 	ldrh.w	r2, [r3, #1600]	; 0x640
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	7edb      	ldrb	r3, [r3, #27]
 800dce2:	b29b      	uxth	r3, r3
 800dce4:	4313      	orrs	r3, r2
 800dce6:	b29a      	uxth	r2, r3
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	f8a3 2640 	strh.w	r2, [r3, #1600]	; 0x640

							m3->_15_WriteMultipleCoils_QTYReg = m3->_MBUS_RCVD[10];
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	7f1b      	ldrb	r3, [r3, #28]
 800dcf2:	b29a      	uxth	r2, r3
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	f8a3 2642 	strh.w	r2, [r3, #1602]	; 0x642
							m3->_15_WriteMultipleCoils_QTYReg = m3->_15_WriteMultipleCoils_QTYReg<<8;
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	f8b3 3642 	ldrh.w	r3, [r3, #1602]	; 0x642
 800dd00:	021b      	lsls	r3, r3, #8
 800dd02:	b29a      	uxth	r2, r3
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	f8a3 2642 	strh.w	r2, [r3, #1602]	; 0x642
							m3->_15_WriteMultipleCoils_QTYReg &= 0xFF00;
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	f8b3 3642 	ldrh.w	r3, [r3, #1602]	; 0x642
 800dd10:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800dd14:	b29a      	uxth	r2, r3
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	f8a3 2642 	strh.w	r2, [r3, #1602]	; 0x642
							m3->_15_WriteMultipleCoils_QTYReg |= m3->_MBUS_RCVD[11];
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	f8b3 2642 	ldrh.w	r2, [r3, #1602]	; 0x642
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	7f5b      	ldrb	r3, [r3, #29]
 800dd26:	b29b      	uxth	r3, r3
 800dd28:	4313      	orrs	r3, r2
 800dd2a:	b29a      	uxth	r2, r3
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	f8a3 2642 	strh.w	r2, [r3, #1602]	; 0x642



							if ( m3->_15_WriteMultipleCoils_QTYReg <=  m3->_15_WriteMultipleCoils_QTY) //Cdad pedida menor a igual que disponible
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	f8b3 2642 	ldrh.w	r2, [r3, #1602]	; 0x642
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	f893 363e 	ldrb.w	r3, [r3, #1598]	; 0x63e
 800dd3e:	b29b      	uxth	r3, r3
 800dd40:	429a      	cmp	r2, r3
 800dd42:	f200 80a8 	bhi.w	800de96 <ModBUS+0xf6e>
							{
								if ( (m3->_15_WriteMultipleCoils_StrtAddr + m3->_15_WriteMultipleCoils_QTYReg) <=  m3->_15_WriteMultipleCoils_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	f8b3 3640 	ldrh.w	r3, [r3, #1600]	; 0x640
 800dd4c:	461a      	mov	r2, r3
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	f8b3 3642 	ldrh.w	r3, [r3, #1602]	; 0x642
 800dd54:	4413      	add	r3, r2
 800dd56:	687a      	ldr	r2, [r7, #4]
 800dd58:	f892 263e 	ldrb.w	r2, [r2, #1598]	; 0x63e
 800dd5c:	4293      	cmp	r3, r2
 800dd5e:	f300 8081 	bgt.w	800de64 <ModBUS+0xf3c>
								{
								// Verificado el mensaje, se procesa.
								uint32_t data=0x00000000,cdad_bytes=0,cdad_datos=0, mascara=0x00000000;
 800dd62:	2300      	movs	r3, #0
 800dd64:	657b      	str	r3, [r7, #84]	; 0x54
 800dd66:	2300      	movs	r3, #0
 800dd68:	653b      	str	r3, [r7, #80]	; 0x50
 800dd6a:	2300      	movs	r3, #0
 800dd6c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800dd6e:	2300      	movs	r3, #0
 800dd70:	64bb      	str	r3, [r7, #72]	; 0x48

									cdad_bytes=m3->_MBUS_RCVD[12];
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	7f9b      	ldrb	r3, [r3, #30]
 800dd76:	653b      	str	r3, [r7, #80]	; 0x50


									while(cdad_bytes > 0)
 800dd78:	e00e      	b.n	800dd98 <ModBUS+0xe70>
									{
										data=data<<8;
 800dd7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dd7c:	021b      	lsls	r3, r3, #8
 800dd7e:	657b      	str	r3, [r7, #84]	; 0x54
										data|=m3->_MBUS_RCVD[12+cdad_bytes];
 800dd80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dd82:	330c      	adds	r3, #12
 800dd84:	687a      	ldr	r2, [r7, #4]
 800dd86:	4413      	add	r3, r2
 800dd88:	7c9b      	ldrb	r3, [r3, #18]
 800dd8a:	461a      	mov	r2, r3
 800dd8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dd8e:	4313      	orrs	r3, r2
 800dd90:	657b      	str	r3, [r7, #84]	; 0x54
										cdad_bytes--;
 800dd92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dd94:	3b01      	subs	r3, #1
 800dd96:	653b      	str	r3, [r7, #80]	; 0x50
									while(cdad_bytes > 0)
 800dd98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	d1ed      	bne.n	800dd7a <ModBUS+0xe52>
									}
									data=data << m3->_15_WriteMultipleCoils_StrtAddr; //Dejo los datos listo para la OR de Transferencia
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	f8b3 3640 	ldrh.w	r3, [r3, #1600]	; 0x640
 800dda4:	461a      	mov	r2, r3
 800dda6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dda8:	4093      	lsls	r3, r2
 800ddaa:	657b      	str	r3, [r7, #84]	; 0x54

									while (cdad_datos < m3->_15_WriteMultipleCoils_QTYReg)
 800ddac:	e00f      	b.n	800ddce <ModBUS+0xea6>
									{
										mascara |= (1 << (m3->_15_WriteMultipleCoils_StrtAddr + cdad_datos));
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	f8b3 3640 	ldrh.w	r3, [r3, #1600]	; 0x640
 800ddb4:	461a      	mov	r2, r3
 800ddb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ddb8:	4413      	add	r3, r2
 800ddba:	2201      	movs	r2, #1
 800ddbc:	fa02 f303 	lsl.w	r3, r2, r3
 800ddc0:	461a      	mov	r2, r3
 800ddc2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ddc4:	4313      	orrs	r3, r2
 800ddc6:	64bb      	str	r3, [r7, #72]	; 0x48
										cdad_datos++;
 800ddc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ddca:	3301      	adds	r3, #1
 800ddcc:	64fb      	str	r3, [r7, #76]	; 0x4c
									while (cdad_datos < m3->_15_WriteMultipleCoils_QTYReg)
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	f8b3 3642 	ldrh.w	r3, [r3, #1602]	; 0x642
 800ddd4:	461a      	mov	r2, r3
 800ddd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ddd8:	4293      	cmp	r3, r2
 800ddda:	d3e8      	bcc.n	800ddae <ModBUS+0xe86>
									}

									mascara = ~ mascara;
 800dddc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ddde:	43db      	mvns	r3, r3
 800dde0:	64bb      	str	r3, [r7, #72]	; 0x48

									m3->_Coils &= mascara;
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
 800dde8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ddea:	401a      	ands	r2, r3
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c


									data &= ~mascara;
 800ddf2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ddf4:	43db      	mvns	r3, r3
 800ddf6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ddf8:	4013      	ands	r3, r2
 800ddfa:	657b      	str	r3, [r7, #84]	; 0x54

									m3->_Coils |= data;
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
 800de02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800de04:	431a      	orrs	r2, r3
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c

									m3->_MBUS_2SND[11]=m3->_MBUS_RCVD[11];
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	7f5a      	ldrb	r2, [r3, #29]
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	f883 2223 	strb.w	r2, [r3, #547]	; 0x223
									m3->_MBUS_2SND[10]=m3->_MBUS_RCVD[10];
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	7f1a      	ldrb	r2, [r3, #28]
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	f883 2222 	strb.w	r2, [r3, #546]	; 0x222
									m3->_MBUS_2SND[9]=m3->_MBUS_RCVD[9];
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	7eda      	ldrb	r2, [r3, #27]
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	f883 2221 	strb.w	r2, [r3, #545]	; 0x221
									m3->_MBUS_2SND[8]=m3->_MBUS_RCVD[8];
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	7e9a      	ldrb	r2, [r3, #26]
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x0F;
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	220f      	movs	r2, #15
 800de38:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	2201      	movs	r2, #1
 800de40:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=m3->_MBUS_2SND[8]+6; //Cdad de datos
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	f893 3220 	ldrb.w	r3, [r3, #544]	; 0x220
 800de4a:	3306      	adds	r3, #6
 800de4c:	b2da      	uxtb	r2, r3
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d


									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800de5a:	1d9a      	adds	r2, r3, #6
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800de62:	e247      	b.n	800e2f4 <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x02;
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	2202      	movs	r2, #2
 800de68:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x8F;
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	228f      	movs	r2, #143	; 0x8f
 800de70:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	2201      	movs	r2, #1
 800de78:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	2203      	movs	r2, #3
 800de80:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800de8a:	1d9a      	adds	r2, r3, #6
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
									return(2);//Error excepcion 02
 800de92:	2302      	movs	r3, #2
 800de94:	e22e      	b.n	800e2f4 <ModBUS+0x13cc>
								m3->_MBUS_2SND[8]=0x03;
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	2203      	movs	r2, #3
 800de9a:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
								m3->_MBUS_2SND[7]=0x8F;
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	228f      	movs	r2, #143	; 0x8f
 800dea2:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
								m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	2201      	movs	r2, #1
 800deaa:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
								m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	2203      	movs	r2, #3
 800deb2:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
								m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800debc:	1d9a      	adds	r2, r3, #6
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
								return(3);//Erroe excepcion 03
 800dec4:	2303      	movs	r3, #3
 800dec6:	e215      	b.n	800e2f4 <ModBUS+0x13cc>
						m3->_MBUS_2SND[8]=0x01;
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	2201      	movs	r2, #1
 800decc:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
						m3->_MBUS_2SND[7]=0x8F;
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	228f      	movs	r2, #143	; 0x8f
 800ded4:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	2201      	movs	r2, #1
 800dedc:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	2203      	movs	r2, #3
 800dee4:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800deee:	1d9a      	adds	r2, r3, #6
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
						return(1);//Error excepcion 01
 800def6:	2301      	movs	r3, #1
 800def8:	e1fc      	b.n	800e2f4 <ModBUS+0x13cc>

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	7d9a      	ldrb	r2, [r3, #22]
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	7d5a      	ldrb	r2, [r3, #21]
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	7d1a      	ldrb	r2, [r3, #20]
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	7cda      	ldrb	r2, [r3, #19]
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	7c9a      	ldrb	r2, [r3, #18]
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

					uint16_t qty_reg=0, start_address=0;
 800df2c:	2300      	movs	r3, #0
 800df2e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800df32:	2300      	movs	r3, #0
 800df34:	86fb      	strh	r3, [r7, #54]	; 0x36
					if  ( m3->_16_WriteMultipleRegisters_EN == 1 ) //Debe estar habilitado el código de funcion
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	7c5b      	ldrb	r3, [r3, #17]
 800df3a:	2b01      	cmp	r3, #1
 800df3c:	f040 80eb 	bne.w	800e116 <ModBUS+0x11ee>
					{


							m3->_16_WriteMultipleRegisters_StrtAddr = m3->_MBUS_RCVD[8];
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	7e9b      	ldrb	r3, [r3, #26]
 800df44:	b29a      	uxth	r2, r3
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	f8a3 264c 	strh.w	r2, [r3, #1612]	; 0x64c
							m3->_16_WriteMultipleRegisters_StrtAddr = m3->_16_WriteMultipleRegisters_StrtAddr<<8;
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	f8b3 364c 	ldrh.w	r3, [r3, #1612]	; 0x64c
 800df52:	021b      	lsls	r3, r3, #8
 800df54:	b29a      	uxth	r2, r3
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	f8a3 264c 	strh.w	r2, [r3, #1612]	; 0x64c
							m3->_16_WriteMultipleRegisters_StrtAddr &= 0xFF00;
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	f8b3 364c 	ldrh.w	r3, [r3, #1612]	; 0x64c
 800df62:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800df66:	b29a      	uxth	r2, r3
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	f8a3 264c 	strh.w	r2, [r3, #1612]	; 0x64c
							m3->_16_WriteMultipleRegisters_StrtAddr |= m3->_MBUS_RCVD[9];
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	f8b3 264c 	ldrh.w	r2, [r3, #1612]	; 0x64c
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	7edb      	ldrb	r3, [r3, #27]
 800df78:	b29b      	uxth	r3, r3
 800df7a:	4313      	orrs	r3, r2
 800df7c:	b29a      	uxth	r2, r3
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	f8a3 264c 	strh.w	r2, [r3, #1612]	; 0x64c

							start_address= (2 * m3->_16_WriteMultipleRegisters_StrtAddr);
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	f8b3 364c 	ldrh.w	r3, [r3, #1612]	; 0x64c
 800df8a:	005b      	lsls	r3, r3, #1
 800df8c:	86fb      	strh	r3, [r7, #54]	; 0x36

							m3->_16_WriteMultipleRegisters_QTYReg = m3->_MBUS_RCVD[10];
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	7f1b      	ldrb	r3, [r3, #28]
 800df92:	b29a      	uxth	r2, r3
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	f8a3 264e 	strh.w	r2, [r3, #1614]	; 0x64e
							m3->_16_WriteMultipleRegisters_QTYReg = m3->_16_WriteMultipleRegisters_QTYReg<<8;
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	f8b3 364e 	ldrh.w	r3, [r3, #1614]	; 0x64e
 800dfa0:	021b      	lsls	r3, r3, #8
 800dfa2:	b29a      	uxth	r2, r3
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	f8a3 264e 	strh.w	r2, [r3, #1614]	; 0x64e
							m3->_16_WriteMultipleRegisters_QTYReg &= 0xFF00;
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	f8b3 364e 	ldrh.w	r3, [r3, #1614]	; 0x64e
 800dfb0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800dfb4:	b29a      	uxth	r2, r3
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	f8a3 264e 	strh.w	r2, [r3, #1614]	; 0x64e
							m3->_16_WriteMultipleRegisters_QTYReg |= m3->_MBUS_RCVD[11];
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	f8b3 264e 	ldrh.w	r2, [r3, #1614]	; 0x64e
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	7f5b      	ldrb	r3, [r3, #29]
 800dfc6:	b29b      	uxth	r3, r3
 800dfc8:	4313      	orrs	r3, r2
 800dfca:	b29a      	uxth	r2, r3
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	f8a3 264e 	strh.w	r2, [r3, #1614]	; 0x64e



							if ( m3->_16_WriteMultipleRegisters_QTYReg <=  m3->_16_WriteMultipleRegisters_QTY) //Cdad pedida menor a igual que disponible
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	f8b3 264e 	ldrh.w	r2, [r3, #1614]	; 0x64e
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	f893 364a 	ldrb.w	r3, [r3, #1610]	; 0x64a
 800dfde:	b29b      	uxth	r3, r3
 800dfe0:	429a      	cmp	r2, r3
 800dfe2:	d87f      	bhi.n	800e0e4 <ModBUS+0x11bc>
							{
								if ( (m3->_16_WriteMultipleRegisters_StrtAddr + m3->_16_WriteMultipleRegisters_QTYReg) <=  m3->_16_WriteMultipleRegisters_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	f8b3 364c 	ldrh.w	r3, [r3, #1612]	; 0x64c
 800dfea:	461a      	mov	r2, r3
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	f8b3 364e 	ldrh.w	r3, [r3, #1614]	; 0x64e
 800dff2:	4413      	add	r3, r2
 800dff4:	687a      	ldr	r2, [r7, #4]
 800dff6:	f892 264a 	ldrb.w	r2, [r2, #1610]	; 0x64a
 800dffa:	4293      	cmp	r3, r2
 800dffc:	dc59      	bgt.n	800e0b2 <ModBUS+0x118a>
								{
								// Verificado el mensaje, se procesa.

									while(qty_reg < m3->_MBUS_RCVD[12])
 800dffe:	e029      	b.n	800e054 <ModBUS+0x112c>
									{
										m3->_Holding_Registers[start_address + qty_reg] = m3->_MBUS_RCVD[13 + qty_reg];
 800e000:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800e004:	f103 020d 	add.w	r2, r3, #13
 800e008:	8ef9      	ldrh	r1, [r7, #54]	; 0x36
 800e00a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800e00e:	440b      	add	r3, r1
 800e010:	6879      	ldr	r1, [r7, #4]
 800e012:	440a      	add	r2, r1
 800e014:	7c91      	ldrb	r1, [r2, #18]
 800e016:	687a      	ldr	r2, [r7, #4]
 800e018:	4413      	add	r3, r2
 800e01a:	460a      	mov	r2, r1
 800e01c:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
										//Esto era para vectores de UINT16_T
										//m3->_Holding_Registers[start_address + qty_reg] = m3->_Holding_Registers[start_address + qty_reg]<<8;
										//m3->_Holding_Registers[start_address + qty_reg] &= 0xFF00;
										qty_reg++;
 800e020:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800e024:	3301      	adds	r3, #1
 800e026:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
										m3->_Holding_Registers[start_address + qty_reg] = m3->_MBUS_RCVD[13 + qty_reg];
 800e02a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800e02e:	f103 020d 	add.w	r2, r3, #13
 800e032:	8ef9      	ldrh	r1, [r7, #54]	; 0x36
 800e034:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800e038:	440b      	add	r3, r1
 800e03a:	6879      	ldr	r1, [r7, #4]
 800e03c:	440a      	add	r2, r1
 800e03e:	7c91      	ldrb	r1, [r2, #18]
 800e040:	687a      	ldr	r2, [r7, #4]
 800e042:	4413      	add	r3, r2
 800e044:	460a      	mov	r2, r1
 800e046:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
										qty_reg++;
 800e04a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800e04e:	3301      	adds	r3, #1
 800e050:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
									while(qty_reg < m3->_MBUS_RCVD[12])
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	7f9b      	ldrb	r3, [r3, #30]
 800e058:	b29b      	uxth	r3, r3
 800e05a:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800e05e:	429a      	cmp	r2, r3
 800e060:	d3ce      	bcc.n	800e000 <ModBUS+0x10d8>

									}
									m3->_MBUS_2SND[11]=m3->_MBUS_RCVD[11];
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	7f5a      	ldrb	r2, [r3, #29]
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	f883 2223 	strb.w	r2, [r3, #547]	; 0x223
									m3->_MBUS_2SND[10]=m3->_MBUS_RCVD[10];
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	7f1a      	ldrb	r2, [r3, #28]
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	f883 2222 	strb.w	r2, [r3, #546]	; 0x222
									m3->_MBUS_2SND[9]=m3->_MBUS_RCVD[9];
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	7eda      	ldrb	r2, [r3, #27]
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	f883 2221 	strb.w	r2, [r3, #545]	; 0x221
									m3->_MBUS_2SND[8]=m3->_MBUS_RCVD[8];
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	7e9a      	ldrb	r2, [r3, #26]
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x10;
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	2210      	movs	r2, #16
 800e08e:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	2201      	movs	r2, #1
 800e096:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=0x06; //Cdad de datos
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	2206      	movs	r2, #6
 800e09e:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d


									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800e0a8:	1d9a      	adds	r2, r3, #6
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800e0b0:	e120      	b.n	800e2f4 <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x02;
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	2202      	movs	r2, #2
 800e0b6:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x90;
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	2290      	movs	r2, #144	; 0x90
 800e0be:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	2201      	movs	r2, #1
 800e0c6:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	2203      	movs	r2, #3
 800e0ce:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800e0d8:	1d9a      	adds	r2, r3, #6
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
									return(2);//Error excepcion 02
 800e0e0:	2302      	movs	r3, #2
 800e0e2:	e107      	b.n	800e2f4 <ModBUS+0x13cc>
								m3->_MBUS_2SND[8]=0x03;
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	2203      	movs	r2, #3
 800e0e8:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
								m3->_MBUS_2SND[7]=0x90;
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	2290      	movs	r2, #144	; 0x90
 800e0f0:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
								m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	2201      	movs	r2, #1
 800e0f8:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
								m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	2203      	movs	r2, #3
 800e100:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
								m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800e10a:	1d9a      	adds	r2, r3, #6
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
								return(3);//Erroe excepcion 03
 800e112:	2303      	movs	r3, #3
 800e114:	e0ee      	b.n	800e2f4 <ModBUS+0x13cc>
						m3->_MBUS_2SND[8]=0x01;
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	2201      	movs	r2, #1
 800e11a:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
						m3->_MBUS_2SND[7]=0x90;
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	2290      	movs	r2, #144	; 0x90
 800e122:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	2201      	movs	r2, #1
 800e12a:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	2203      	movs	r2, #3
 800e132:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800e13c:	1d9a      	adds	r2, r3, #6
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
						return(1);//Error excepcion 01
 800e144:	2301      	movs	r3, #1
 800e146:	e0d5      	b.n	800e2f4 <ModBUS+0x13cc>
				{	// Comando no soportado
					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[8]=0x01;
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	2201      	movs	r2, #1
 800e14c:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
					m3->_MBUS_2SND[7]=m3->_MBUS_RCVD[7] + 0x80;
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	7e5b      	ldrb	r3, [r3, #25]
 800e154:	3b80      	subs	r3, #128	; 0x80
 800e156:	b2da      	uxtb	r2, r3
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
					m3->_MBUS_2SND[6]=m3->_MBUS_RCVD[6];
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	7e1a      	ldrb	r2, [r3, #24]
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
					m3->_MBUS_2SND[5]=0x03;
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	2203      	movs	r2, #3
 800e16c:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	7d9a      	ldrb	r2, [r3, #22]
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	7d5a      	ldrb	r2, [r3, #21]
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	7d1a      	ldrb	r2, [r3, #20]
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	7cda      	ldrb	r2, [r3, #19]
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	7c9a      	ldrb	r2, [r3, #18]
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

					m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800e1a8:	1d9a      	adds	r2, r3, #6
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
					return(1);
 800e1b0:	2301      	movs	r3, #1
 800e1b2:	e09f      	b.n	800e2f4 <ModBUS+0x13cc>


		}
		else
		{
			return(1);
 800e1b4:	2301      	movs	r3, #1
 800e1b6:	e09d      	b.n	800e2f4 <ModBUS+0x13cc>
		}
	}
	else if (m3->_mode == CLIENTE)
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	791b      	ldrb	r3, [r3, #4]
 800e1bc:	2b00      	cmp	r3, #0
 800e1be:	f040 8099 	bne.w	800e2f4 <ModBUS+0x13cc>
	{
		if(ModBUS_Check(m3->_MBUS_RCVD,m3->_n_MBUS_RCVD))   //Verifico si el vector recibido es ModBUS
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	f103 0212 	add.w	r2, r3, #18
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800e1ce:	4619      	mov	r1, r3
 800e1d0:	4610      	mov	r0, r2
 800e1d2:	f7fe fda5 	bl	800cd20 <ModBUS_Check>
 800e1d6:	4603      	mov	r3, r0
 800e1d8:	2b00      	cmp	r3, #0
 800e1da:	f000 808b 	beq.w	800e2f4 <ModBUS+0x13cc>
		{
			if(ModBUS_Check_tid(m3))
 800e1de:	6878      	ldr	r0, [r7, #4]
 800e1e0:	f7fe fdbd 	bl	800cd5e <ModBUS_Check_tid>
 800e1e4:	4603      	mov	r3, r0
 800e1e6:	2b00      	cmp	r3, #0
 800e1e8:	d04f      	beq.n	800e28a <ModBUS+0x1362>
			{

				switch (m3->_MBUS_RCVD[7])
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	7e5b      	ldrb	r3, [r3, #25]
 800e1ee:	2b03      	cmp	r3, #3
 800e1f0:	d143      	bne.n	800e27a <ModBUS+0x1352>
				{
					case 0x03: // Si el comando fue un ReadHoldingRegisters
					{
						uint16_t start_address = 0;
 800e1f2:	2300      	movs	r3, #0
 800e1f4:	87fb      	strh	r3, [r7, #62]	; 0x3e
						uint8_t qty=0;
 800e1f6:	2300      	movs	r3, #0
 800e1f8:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

						start_address = m3->_MBUS_2SND[8];
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	f893 3220 	ldrb.w	r3, [r3, #544]	; 0x220
 800e202:	87fb      	strh	r3, [r7, #62]	; 0x3e
						start_address = start_address << 8 ;
 800e204:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800e206:	021b      	lsls	r3, r3, #8
 800e208:	87fb      	strh	r3, [r7, #62]	; 0x3e
						start_address |= m3->_MBUS_2SND[9];
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	f893 3221 	ldrb.w	r3, [r3, #545]	; 0x221
 800e210:	b29a      	uxth	r2, r3
 800e212:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800e214:	4313      	orrs	r3, r2
 800e216:	87fb      	strh	r3, [r7, #62]	; 0x3e

						qty = m3->_MBUS_2SND[11];
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	f893 3223 	ldrb.w	r3, [r3, #547]	; 0x223
 800e21e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

						for (int i=0;i< qty; i++)
 800e222:	2300      	movs	r3, #0
 800e224:	643b      	str	r3, [r7, #64]	; 0x40
 800e226:	e022      	b.n	800e26e <ModBUS+0x1346>
						{
							m3->_Holding_Registers[(start_address*2)+(2*i)]=m3->_MBUS_RCVD[9+2*i];
 800e228:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e22a:	005b      	lsls	r3, r3, #1
 800e22c:	f103 0209 	add.w	r2, r3, #9
 800e230:	8ff9      	ldrh	r1, [r7, #62]	; 0x3e
 800e232:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e234:	440b      	add	r3, r1
 800e236:	005b      	lsls	r3, r3, #1
 800e238:	6879      	ldr	r1, [r7, #4]
 800e23a:	440a      	add	r2, r1
 800e23c:	7c91      	ldrb	r1, [r2, #18]
 800e23e:	687a      	ldr	r2, [r7, #4]
 800e240:	4413      	add	r3, r2
 800e242:	460a      	mov	r2, r1
 800e244:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
							m3->_Holding_Registers[(start_address*2)+(2*i) + 1]=m3->_MBUS_RCVD[10+2*i];
 800e248:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e24a:	3305      	adds	r3, #5
 800e24c:	005a      	lsls	r2, r3, #1
 800e24e:	8ff9      	ldrh	r1, [r7, #62]	; 0x3e
 800e250:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e252:	440b      	add	r3, r1
 800e254:	005b      	lsls	r3, r3, #1
 800e256:	3301      	adds	r3, #1
 800e258:	6879      	ldr	r1, [r7, #4]
 800e25a:	440a      	add	r2, r1
 800e25c:	7c91      	ldrb	r1, [r2, #18]
 800e25e:	687a      	ldr	r2, [r7, #4]
 800e260:	4413      	add	r3, r2
 800e262:	460a      	mov	r2, r1
 800e264:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
						for (int i=0;i< qty; i++)
 800e268:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e26a:	3301      	adds	r3, #1
 800e26c:	643b      	str	r3, [r7, #64]	; 0x40
 800e26e:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800e272:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e274:	429a      	cmp	r2, r3
 800e276:	dbd7      	blt.n	800e228 <ModBUS+0x1300>

						}


					}
					break;
 800e278:	bf00      	nop
					}
				}



				int qty = m3->_MBUS_RCVD[5]-m3->_MBUS_RCVD[8];
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	7ddb      	ldrb	r3, [r3, #23]
 800e27e:	461a      	mov	r2, r3
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	7e9b      	ldrb	r3, [r3, #26]
 800e284:	1ad3      	subs	r3, r2, r3
 800e286:	63bb      	str	r3, [r7, #56]	; 0x38
 800e288:	e034      	b.n	800e2f4 <ModBUS+0x13cc>

			}
			else
			{
				switch(m3->_MBUS_RCVD[7])
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	7e5b      	ldrb	r3, [r3, #25]
 800e28e:	3b81      	subs	r3, #129	; 0x81
 800e290:	2b15      	cmp	r3, #21
 800e292:	d82f      	bhi.n	800e2f4 <ModBUS+0x13cc>
 800e294:	a201      	add	r2, pc, #4	; (adr r2, 800e29c <ModBUS+0x1374>)
 800e296:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e29a:	bf00      	nop
 800e29c:	0800e2f5 	.word	0x0800e2f5
 800e2a0:	0800e2f5 	.word	0x0800e2f5
 800e2a4:	0800e2f5 	.word	0x0800e2f5
 800e2a8:	0800e2f5 	.word	0x0800e2f5
 800e2ac:	0800e2f5 	.word	0x0800e2f5
 800e2b0:	0800e2f5 	.word	0x0800e2f5
 800e2b4:	0800e2f5 	.word	0x0800e2f5
 800e2b8:	0800e2f5 	.word	0x0800e2f5
 800e2bc:	0800e2f5 	.word	0x0800e2f5
 800e2c0:	0800e2f5 	.word	0x0800e2f5
 800e2c4:	0800e2f5 	.word	0x0800e2f5
 800e2c8:	0800e2f5 	.word	0x0800e2f5
 800e2cc:	0800e2f5 	.word	0x0800e2f5
 800e2d0:	0800e2f5 	.word	0x0800e2f5
 800e2d4:	0800e2f5 	.word	0x0800e2f5
 800e2d8:	0800e2f5 	.word	0x0800e2f5
 800e2dc:	0800e2f5 	.word	0x0800e2f5
 800e2e0:	0800e2f5 	.word	0x0800e2f5
 800e2e4:	0800e2f5 	.word	0x0800e2f5
 800e2e8:	0800e2f5 	.word	0x0800e2f5
 800e2ec:	0800e2f5 	.word	0x0800e2f5
 800e2f0:	0800e2f5 	.word	0x0800e2f5
			}
		}
	}


}
 800e2f4:	4618      	mov	r0, r3
 800e2f6:	3770      	adds	r7, #112	; 0x70
 800e2f8:	46bd      	mov	sp, r7
 800e2fa:	bd80      	pop	{r7, pc}

0800e2fc <SPI_ETH>:

#include "ETH_W5100.h"


uint8_t  SPI_ETH(struct  W5100_SPI * x )
{
 800e2fc:	b580      	push	{r7, lr}
 800e2fe:	b084      	sub	sp, #16
 800e300:	af02      	add	r7, sp, #8
 800e302:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(x->NSS_PORT, x->NSS_PIN , GPIO_PIN_RESET);				// NSS LOW
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	6858      	ldr	r0, [r3, #4]
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	891b      	ldrh	r3, [r3, #8]
 800e30c:	2200      	movs	r2, #0
 800e30e:	4619      	mov	r1, r3
 800e310:	f7f5 f978 	bl	8003604 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(x->SPI, x->TX , x->RX, 4, 100);						//SPI COMM
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	6818      	ldr	r0, [r3, #0]
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	f103 0114 	add.w	r1, r3, #20
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	f103 0218 	add.w	r2, r3, #24
 800e324:	2364      	movs	r3, #100	; 0x64
 800e326:	9300      	str	r3, [sp, #0]
 800e328:	2304      	movs	r3, #4
 800e32a:	f7f5 fe80 	bl	800402e <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(x->NSS_PORT, x->NSS_PIN , GPIO_PIN_SET);			//NSS HIGH
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	6858      	ldr	r0, [r3, #4]
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	891b      	ldrh	r3, [r3, #8]
 800e336:	2201      	movs	r2, #1
 800e338:	4619      	mov	r1, r3
 800e33a:	f7f5 f963 	bl	8003604 <HAL_GPIO_WritePin>
	return (x->RX[3]);
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	7edb      	ldrb	r3, [r3, #27]
}
 800e342:	4618      	mov	r0, r3
 800e344:	3708      	adds	r7, #8
 800e346:	46bd      	mov	sp, r7
 800e348:	bd80      	pop	{r7, pc}

0800e34a <SPI_ETH_REG>:

uint16_t SPI_ETH_REG(struct W5100_SPI * x, uint8_t addrh, uint8_t addrl, uint8_t op, uint8_t * data, uint8_t lnght)
{
 800e34a:	b580      	push	{r7, lr}
 800e34c:	b086      	sub	sp, #24
 800e34e:	af00      	add	r7, sp, #0
 800e350:	6078      	str	r0, [r7, #4]
 800e352:	4608      	mov	r0, r1
 800e354:	4611      	mov	r1, r2
 800e356:	461a      	mov	r2, r3
 800e358:	4603      	mov	r3, r0
 800e35a:	70fb      	strb	r3, [r7, #3]
 800e35c:	460b      	mov	r3, r1
 800e35e:	70bb      	strb	r3, [r7, #2]
 800e360:	4613      	mov	r3, r2
 800e362:	707b      	strb	r3, [r7, #1]
 uint16_t res=0;
 800e364:	2300      	movs	r3, #0
 800e366:	82fb      	strh	r3, [r7, #22]

 x->TX[0]= op; //asigno lectura o escritura
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	787a      	ldrb	r2, [r7, #1]
 800e36c:	751a      	strb	r2, [r3, #20]
 x->TX[1]= addrh;
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	78fa      	ldrb	r2, [r7, #3]
 800e372:	755a      	strb	r2, [r3, #21]
 x->TX[2]= addrl;
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	78ba      	ldrb	r2, [r7, #2]
 800e378:	759a      	strb	r2, [r3, #22]
 x->TX[3]=0x00;
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	2200      	movs	r2, #0
 800e37e:	75da      	strb	r2, [r3, #23]
 if(op == SPI_WRITE)
 800e380:	787b      	ldrb	r3, [r7, #1]
 800e382:	2bf0      	cmp	r3, #240	; 0xf0
 800e384:	d11d      	bne.n	800e3c2 <SPI_ETH_REG+0x78>
 {
	 for(int i=0; i<(lnght); i++)
 800e386:	2300      	movs	r3, #0
 800e388:	613b      	str	r3, [r7, #16]
 800e38a:	e013      	b.n	800e3b4 <SPI_ETH_REG+0x6a>
	 {
		x->TX[3]=data[i];
 800e38c:	693b      	ldr	r3, [r7, #16]
 800e38e:	6a3a      	ldr	r2, [r7, #32]
 800e390:	4413      	add	r3, r2
 800e392:	781a      	ldrb	r2, [r3, #0]
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	75da      	strb	r2, [r3, #23]
		res=SPI_ETH(x);
 800e398:	6878      	ldr	r0, [r7, #4]
 800e39a:	f7ff ffaf 	bl	800e2fc <SPI_ETH>
 800e39e:	4603      	mov	r3, r0
 800e3a0:	82fb      	strh	r3, [r7, #22]
		x->TX[2]++;
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	7d9b      	ldrb	r3, [r3, #22]
 800e3a6:	3301      	adds	r3, #1
 800e3a8:	b2da      	uxtb	r2, r3
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	759a      	strb	r2, [r3, #22]
	 for(int i=0; i<(lnght); i++)
 800e3ae:	693b      	ldr	r3, [r7, #16]
 800e3b0:	3301      	adds	r3, #1
 800e3b2:	613b      	str	r3, [r7, #16]
 800e3b4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e3b8:	693a      	ldr	r2, [r7, #16]
 800e3ba:	429a      	cmp	r2, r3
 800e3bc:	dbe6      	blt.n	800e38c <SPI_ETH_REG+0x42>
	 }
	 return(res);
 800e3be:	8afb      	ldrh	r3, [r7, #22]
 800e3c0:	e037      	b.n	800e432 <SPI_ETH_REG+0xe8>
 }
	 if(op == SPI_READ)
 800e3c2:	787b      	ldrb	r3, [r7, #1]
 800e3c4:	2b0f      	cmp	r3, #15
 800e3c6:	d134      	bne.n	800e432 <SPI_ETH_REG+0xe8>
	 {
		 x->TX[3]=0x00;
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	2200      	movs	r2, #0
 800e3cc:	75da      	strb	r2, [r3, #23]
		 if (lnght==2)
 800e3ce:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e3d2:	2b02      	cmp	r3, #2
 800e3d4:	d120      	bne.n	800e418 <SPI_ETH_REG+0xce>
		{
		for(int i=0; i<(lnght); i++)
 800e3d6:	2300      	movs	r3, #0
 800e3d8:	60fb      	str	r3, [r7, #12]
 800e3da:	e016      	b.n	800e40a <SPI_ETH_REG+0xc0>
			{
			res|=SPI_ETH(x);
 800e3dc:	6878      	ldr	r0, [r7, #4]
 800e3de:	f7ff ff8d 	bl	800e2fc <SPI_ETH>
 800e3e2:	4603      	mov	r3, r0
 800e3e4:	b29a      	uxth	r2, r3
 800e3e6:	8afb      	ldrh	r3, [r7, #22]
 800e3e8:	4313      	orrs	r3, r2
 800e3ea:	82fb      	strh	r3, [r7, #22]
			x->TX[2]++;
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	7d9b      	ldrb	r3, [r3, #22]
 800e3f0:	3301      	adds	r3, #1
 800e3f2:	b2da      	uxtb	r2, r3
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	759a      	strb	r2, [r3, #22]
			if (i==0)res=res<<8;
 800e3f8:	68fb      	ldr	r3, [r7, #12]
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	d102      	bne.n	800e404 <SPI_ETH_REG+0xba>
 800e3fe:	8afb      	ldrh	r3, [r7, #22]
 800e400:	021b      	lsls	r3, r3, #8
 800e402:	82fb      	strh	r3, [r7, #22]
		for(int i=0; i<(lnght); i++)
 800e404:	68fb      	ldr	r3, [r7, #12]
 800e406:	3301      	adds	r3, #1
 800e408:	60fb      	str	r3, [r7, #12]
 800e40a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e40e:	68fa      	ldr	r2, [r7, #12]
 800e410:	429a      	cmp	r2, r3
 800e412:	dbe3      	blt.n	800e3dc <SPI_ETH_REG+0x92>
			}
		 return(res);
 800e414:	8afb      	ldrh	r3, [r7, #22]
 800e416:	e00c      	b.n	800e432 <SPI_ETH_REG+0xe8>
		}else
		{
			res=SPI_ETH(x);
 800e418:	6878      	ldr	r0, [r7, #4]
 800e41a:	f7ff ff6f 	bl	800e2fc <SPI_ETH>
 800e41e:	4603      	mov	r3, r0
 800e420:	82fb      	strh	r3, [r7, #22]
			x->TX[2]++;
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	7d9b      	ldrb	r3, [r3, #22]
 800e426:	3301      	adds	r3, #1
 800e428:	b2da      	uxtb	r2, r3
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	759a      	strb	r2, [r3, #22]
			return(res);
 800e42e:	8afb      	ldrh	r3, [r7, #22]
 800e430:	e7ff      	b.n	800e432 <SPI_ETH_REG+0xe8>
		}
 	 }
}
 800e432:	4618      	mov	r0, r3
 800e434:	3718      	adds	r7, #24
 800e436:	46bd      	mov	sp, r7
 800e438:	bd80      	pop	{r7, pc}

0800e43a <SPI_ETH_WR_REG_16>:

uint16_t SPI_ETH_WR_REG_16(struct W5100_SPI * x, uint16_t addr, uint16_t  data)
{
 800e43a:	b580      	push	{r7, lr}
 800e43c:	b086      	sub	sp, #24
 800e43e:	af00      	add	r7, sp, #0
 800e440:	6078      	str	r0, [r7, #4]
 800e442:	460b      	mov	r3, r1
 800e444:	807b      	strh	r3, [r7, #2]
 800e446:	4613      	mov	r3, r2
 800e448:	803b      	strh	r3, [r7, #0]
 uint16_t res=0;
 800e44a:	2300      	movs	r3, #0
 800e44c:	82fb      	strh	r3, [r7, #22]
 uint8_t num[2];

 x->TX[0]= SPI_WRITE; //asigno lectura o escritura
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	22f0      	movs	r2, #240	; 0xf0
 800e452:	751a      	strb	r2, [r3, #20]

 num[1] = data & 0x00FF ;
 800e454:	883b      	ldrh	r3, [r7, #0]
 800e456:	b2db      	uxtb	r3, r3
 800e458:	737b      	strb	r3, [r7, #13]
 num[0] = (data & 0xFF00)>>8 ;
 800e45a:	883b      	ldrh	r3, [r7, #0]
 800e45c:	0a1b      	lsrs	r3, r3, #8
 800e45e:	b29b      	uxth	r3, r3
 800e460:	b2db      	uxtb	r3, r3
 800e462:	733b      	strb	r3, [r7, #12]

	 for(int i=0; i<(2); i++)
 800e464:	2300      	movs	r3, #0
 800e466:	613b      	str	r3, [r7, #16]
 800e468:	e01b      	b.n	800e4a2 <SPI_ETH_WR_REG_16+0x68>
	 {
		x->TX[2]= addr & 0x00FF;
 800e46a:	887b      	ldrh	r3, [r7, #2]
 800e46c:	b2da      	uxtb	r2, r3
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	759a      	strb	r2, [r3, #22]
		x->TX[1]=(addr & 0xFF00)>>8;
 800e472:	887b      	ldrh	r3, [r7, #2]
 800e474:	0a1b      	lsrs	r3, r3, #8
 800e476:	b29b      	uxth	r3, r3
 800e478:	b2da      	uxtb	r2, r3
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	755a      	strb	r2, [r3, #21]
		addr++;
 800e47e:	887b      	ldrh	r3, [r7, #2]
 800e480:	3301      	adds	r3, #1
 800e482:	807b      	strh	r3, [r7, #2]
		x->TX[3]=num[i];
 800e484:	f107 020c 	add.w	r2, r7, #12
 800e488:	693b      	ldr	r3, [r7, #16]
 800e48a:	4413      	add	r3, r2
 800e48c:	781a      	ldrb	r2, [r3, #0]
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	75da      	strb	r2, [r3, #23]
		res=SPI_ETH(x);
 800e492:	6878      	ldr	r0, [r7, #4]
 800e494:	f7ff ff32 	bl	800e2fc <SPI_ETH>
 800e498:	4603      	mov	r3, r0
 800e49a:	82fb      	strh	r3, [r7, #22]
	 for(int i=0; i<(2); i++)
 800e49c:	693b      	ldr	r3, [r7, #16]
 800e49e:	3301      	adds	r3, #1
 800e4a0:	613b      	str	r3, [r7, #16]
 800e4a2:	693b      	ldr	r3, [r7, #16]
 800e4a4:	2b01      	cmp	r3, #1
 800e4a6:	dde0      	ble.n	800e46a <SPI_ETH_WR_REG_16+0x30>
	 }
	 return(res);
 800e4a8:	8afb      	ldrh	r3, [r7, #22]
}
 800e4aa:	4618      	mov	r0, r3
 800e4ac:	3718      	adds	r7, #24
 800e4ae:	46bd      	mov	sp, r7
 800e4b0:	bd80      	pop	{r7, pc}

0800e4b2 <SPI_ETH_RD_RCV_REG_16>:
	return(1);
	}
}

uint16_t SPI_ETH_RD_RCV_REG_16(struct W5100_SPI * x, uint16_t addr, uint8_t * data, uint16_t offset, uint16_t lnght )
{
 800e4b2:	b590      	push	{r4, r7, lr}
 800e4b4:	b087      	sub	sp, #28
 800e4b6:	af00      	add	r7, sp, #0
 800e4b8:	60f8      	str	r0, [r7, #12]
 800e4ba:	607a      	str	r2, [r7, #4]
 800e4bc:	461a      	mov	r2, r3
 800e4be:	460b      	mov	r3, r1
 800e4c0:	817b      	strh	r3, [r7, #10]
 800e4c2:	4613      	mov	r3, r2
 800e4c4:	813b      	strh	r3, [r7, #8]
	x->TX[0]=0x0F; //read operation
 800e4c6:	68fb      	ldr	r3, [r7, #12]
 800e4c8:	220f      	movs	r2, #15
 800e4ca:	751a      	strb	r2, [r3, #20]
	if(lnght < 2048)
 800e4cc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e4ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e4d2:	d226      	bcs.n	800e522 <SPI_ETH_RD_RCV_REG_16+0x70>
	{
			x->TX[3]=0x00;
 800e4d4:	68fb      	ldr	r3, [r7, #12]
 800e4d6:	2200      	movs	r2, #0
 800e4d8:	75da      	strb	r2, [r3, #23]
			for(int i=0; i<(lnght); i++)
 800e4da:	2300      	movs	r3, #0
 800e4dc:	617b      	str	r3, [r7, #20]
 800e4de:	e01a      	b.n	800e516 <SPI_ETH_RD_RCV_REG_16+0x64>
				{
				x->TX[2] = addr & 0x00FF;
 800e4e0:	897b      	ldrh	r3, [r7, #10]
 800e4e2:	b2da      	uxtb	r2, r3
 800e4e4:	68fb      	ldr	r3, [r7, #12]
 800e4e6:	759a      	strb	r2, [r3, #22]
				x->TX[1] = (addr & 0xFF00)>>8;
 800e4e8:	897b      	ldrh	r3, [r7, #10]
 800e4ea:	0a1b      	lsrs	r3, r3, #8
 800e4ec:	b29b      	uxth	r3, r3
 800e4ee:	b2da      	uxtb	r2, r3
 800e4f0:	68fb      	ldr	r3, [r7, #12]
 800e4f2:	755a      	strb	r2, [r3, #21]
				data[i+offset]=SPI_ETH(x);
 800e4f4:	893a      	ldrh	r2, [r7, #8]
 800e4f6:	697b      	ldr	r3, [r7, #20]
 800e4f8:	4413      	add	r3, r2
 800e4fa:	461a      	mov	r2, r3
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	189c      	adds	r4, r3, r2
 800e500:	68f8      	ldr	r0, [r7, #12]
 800e502:	f7ff fefb 	bl	800e2fc <SPI_ETH>
 800e506:	4603      	mov	r3, r0
 800e508:	7023      	strb	r3, [r4, #0]
				addr++;
 800e50a:	897b      	ldrh	r3, [r7, #10]
 800e50c:	3301      	adds	r3, #1
 800e50e:	817b      	strh	r3, [r7, #10]
			for(int i=0; i<(lnght); i++)
 800e510:	697b      	ldr	r3, [r7, #20]
 800e512:	3301      	adds	r3, #1
 800e514:	617b      	str	r3, [r7, #20]
 800e516:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e518:	697a      	ldr	r2, [r7, #20]
 800e51a:	429a      	cmp	r2, r3
 800e51c:	dbe0      	blt.n	800e4e0 <SPI_ETH_RD_RCV_REG_16+0x2e>
				}
		return (0); //Retorno la dirección del puntero a la memoria
 800e51e:	2300      	movs	r3, #0
 800e520:	e000      	b.n	800e524 <SPI_ETH_RD_RCV_REG_16+0x72>
	}
	else
	{
	return(1);
 800e522:	2301      	movs	r3, #1
	}
}
 800e524:	4618      	mov	r0, r3
 800e526:	371c      	adds	r7, #28
 800e528:	46bd      	mov	sp, r7
 800e52a:	bd90      	pop	{r4, r7, pc}

0800e52c <SPI_ETH_WR_TX_REG_16>:

uint16_t SPI_ETH_WR_TX_REG_16(struct W5100_SPI * x, uint16_t addr, uint8_t * data, uint16_t offset, uint16_t lnght )
{
 800e52c:	b580      	push	{r7, lr}
 800e52e:	b086      	sub	sp, #24
 800e530:	af00      	add	r7, sp, #0
 800e532:	60f8      	str	r0, [r7, #12]
 800e534:	607a      	str	r2, [r7, #4]
 800e536:	461a      	mov	r2, r3
 800e538:	460b      	mov	r3, r1
 800e53a:	817b      	strh	r3, [r7, #10]
 800e53c:	4613      	mov	r3, r2
 800e53e:	813b      	strh	r3, [r7, #8]
	x->TX[0]=0xF0; //write operation
 800e540:	68fb      	ldr	r3, [r7, #12]
 800e542:	22f0      	movs	r2, #240	; 0xf0
 800e544:	751a      	strb	r2, [r3, #20]
	if(lnght < 2048)
 800e546:	8c3b      	ldrh	r3, [r7, #32]
 800e548:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e54c:	d223      	bcs.n	800e596 <SPI_ETH_WR_TX_REG_16+0x6a>
	{

			for(int i=0; i<(lnght); i++)
 800e54e:	2300      	movs	r3, #0
 800e550:	617b      	str	r3, [r7, #20]
 800e552:	e01a      	b.n	800e58a <SPI_ETH_WR_TX_REG_16+0x5e>
				{
				x->TX[2] = addr & 0x00FF;
 800e554:	897b      	ldrh	r3, [r7, #10]
 800e556:	b2da      	uxtb	r2, r3
 800e558:	68fb      	ldr	r3, [r7, #12]
 800e55a:	759a      	strb	r2, [r3, #22]
				x->TX[1] = (addr & 0xFF00)>>8;
 800e55c:	897b      	ldrh	r3, [r7, #10]
 800e55e:	0a1b      	lsrs	r3, r3, #8
 800e560:	b29b      	uxth	r3, r3
 800e562:	b2da      	uxtb	r2, r3
 800e564:	68fb      	ldr	r3, [r7, #12]
 800e566:	755a      	strb	r2, [r3, #21]
				x->TX[3]= x->data[i+offset];
 800e568:	893a      	ldrh	r2, [r7, #8]
 800e56a:	697b      	ldr	r3, [r7, #20]
 800e56c:	4413      	add	r3, r2
 800e56e:	68fa      	ldr	r2, [r7, #12]
 800e570:	4413      	add	r3, r2
 800e572:	7f1a      	ldrb	r2, [r3, #28]
 800e574:	68fb      	ldr	r3, [r7, #12]
 800e576:	75da      	strb	r2, [r3, #23]
				SPI_ETH(x);
 800e578:	68f8      	ldr	r0, [r7, #12]
 800e57a:	f7ff febf 	bl	800e2fc <SPI_ETH>
				addr++;
 800e57e:	897b      	ldrh	r3, [r7, #10]
 800e580:	3301      	adds	r3, #1
 800e582:	817b      	strh	r3, [r7, #10]
			for(int i=0; i<(lnght); i++)
 800e584:	697b      	ldr	r3, [r7, #20]
 800e586:	3301      	adds	r3, #1
 800e588:	617b      	str	r3, [r7, #20]
 800e58a:	8c3b      	ldrh	r3, [r7, #32]
 800e58c:	697a      	ldr	r2, [r7, #20]
 800e58e:	429a      	cmp	r2, r3
 800e590:	dbe0      	blt.n	800e554 <SPI_ETH_WR_TX_REG_16+0x28>
				}
		return (0); //Retorno la dirección del puntero a la memoria
 800e592:	2300      	movs	r3, #0
 800e594:	e000      	b.n	800e598 <SPI_ETH_WR_TX_REG_16+0x6c>
	}
	else
	{
	return(1);
 800e596:	2301      	movs	r3, #1
	}
}
 800e598:	4618      	mov	r0, r3
 800e59a:	3718      	adds	r7, #24
 800e59c:	46bd      	mov	sp, r7
 800e59e:	bd80      	pop	{r7, pc}

0800e5a0 <eth_wr_SOCKET_CMD>:

eth_wr_SOCKET_CMD(struct  W5100_SPI * y, uint8_t s, uint8_t z)
{
 800e5a0:	b580      	push	{r7, lr}
 800e5a2:	b082      	sub	sp, #8
 800e5a4:	af00      	add	r7, sp, #0
 800e5a6:	6078      	str	r0, [r7, #4]
 800e5a8:	460b      	mov	r3, r1
 800e5aa:	70fb      	strb	r3, [r7, #3]
 800e5ac:	4613      	mov	r3, r2
 800e5ae:	70bb      	strb	r3, [r7, #2]
	y->TX[0]= SPI_WRITE ;
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	22f0      	movs	r2, #240	; 0xf0
 800e5b4:	751a      	strb	r2, [r3, #20]
	y->TX[1]= S0_CR_ADDR_BASEH + s;
 800e5b6:	78fb      	ldrb	r3, [r7, #3]
 800e5b8:	3304      	adds	r3, #4
 800e5ba:	b2da      	uxtb	r2, r3
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	755a      	strb	r2, [r3, #21]
	y->TX[2]= S0_CR_ADDR_BASEL ;
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	2201      	movs	r2, #1
 800e5c4:	759a      	strb	r2, [r3, #22]
	y->TX[3]= z ;		//Lo carga en la info a enviar
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	78ba      	ldrb	r2, [r7, #2]
 800e5ca:	75da      	strb	r2, [r3, #23]
	SPI_ETH(y);
 800e5cc:	6878      	ldr	r0, [r7, #4]
 800e5ce:	f7ff fe95 	bl	800e2fc <SPI_ETH>
}
 800e5d2:	bf00      	nop
 800e5d4:	4618      	mov	r0, r3
 800e5d6:	3708      	adds	r7, #8
 800e5d8:	46bd      	mov	sp, r7
 800e5da:	bd80      	pop	{r7, pc}

0800e5dc <eth_wr_SOCKET_MODE>:

eth_wr_SOCKET_MODE(struct  W5100_SPI * y, uint8_t s, uint8_t z)
{
 800e5dc:	b580      	push	{r7, lr}
 800e5de:	b082      	sub	sp, #8
 800e5e0:	af00      	add	r7, sp, #0
 800e5e2:	6078      	str	r0, [r7, #4]
 800e5e4:	460b      	mov	r3, r1
 800e5e6:	70fb      	strb	r3, [r7, #3]
 800e5e8:	4613      	mov	r3, r2
 800e5ea:	70bb      	strb	r3, [r7, #2]
	y->TX[0]= SPI_WRITE ;
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	22f0      	movs	r2, #240	; 0xf0
 800e5f0:	751a      	strb	r2, [r3, #20]
	y->TX[1]= S0_MR_ADDR_BASEH + s;
 800e5f2:	78fb      	ldrb	r3, [r7, #3]
 800e5f4:	3304      	adds	r3, #4
 800e5f6:	b2da      	uxtb	r2, r3
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	755a      	strb	r2, [r3, #21]
	y->TX[2]= S0_MR_ADDR_BASEL ;
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	2200      	movs	r2, #0
 800e600:	759a      	strb	r2, [r3, #22]
	y->TX[3]= z ;		//Lo carga en la info a enviar
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	78ba      	ldrb	r2, [r7, #2]
 800e606:	75da      	strb	r2, [r3, #23]
	SPI_ETH(y);
 800e608:	6878      	ldr	r0, [r7, #4]
 800e60a:	f7ff fe77 	bl	800e2fc <SPI_ETH>
}
 800e60e:	bf00      	nop
 800e610:	4618      	mov	r0, r3
 800e612:	3708      	adds	r7, #8
 800e614:	46bd      	mov	sp, r7
 800e616:	bd80      	pop	{r7, pc}

0800e618 <eth_init>:


uint8_t eth_init(struct W5100_SPI * ETH)
{
 800e618:	b580      	push	{r7, lr}
 800e61a:	b084      	sub	sp, #16
 800e61c:	af02      	add	r7, sp, #8
 800e61e:	6078      	str	r0, [r7, #4]
	 SPI_ETH_REG(ETH, GAR_ADDR_BASEH,GAR_ADDR_BASEL,SPI_WRITE, ETH->GAR,4);													//same for server and client
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e626:	331c      	adds	r3, #28
 800e628:	2204      	movs	r2, #4
 800e62a:	9201      	str	r2, [sp, #4]
 800e62c:	9300      	str	r3, [sp, #0]
 800e62e:	23f0      	movs	r3, #240	; 0xf0
 800e630:	2201      	movs	r2, #1
 800e632:	2100      	movs	r1, #0
 800e634:	6878      	ldr	r0, [r7, #4]
 800e636:	f7ff fe88 	bl	800e34a <SPI_ETH_REG>
	 // ITM0_Write("\r\nETH-W5100-GATEWAY SET\r\n",strlen("\r\nETH-W5100-GATEWAY SET\r\n"));									//same for server and client
	 SPI_ETH_REG(ETH, SUBR_ADDR_BASEH,SUBR_ADDR_BASEL,SPI_WRITE, ETH->SUBR,4);												//same for server and client
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800e640:	2204      	movs	r2, #4
 800e642:	9201      	str	r2, [sp, #4]
 800e644:	9300      	str	r3, [sp, #0]
 800e646:	23f0      	movs	r3, #240	; 0xf0
 800e648:	2205      	movs	r2, #5
 800e64a:	2100      	movs	r1, #0
 800e64c:	6878      	ldr	r0, [r7, #4]
 800e64e:	f7ff fe7c 	bl	800e34a <SPI_ETH_REG>
	 //ITM0_Write("\r\nETH-W5100-SUBNET SET\r\n",strlen("\r\nETH-W5100-SUBNET SET"));											//same for server and client
	 SPI_ETH_REG(ETH, SHAR_ADDR_BASEH,SHAR_ADDR_BASEL,SPI_WRITE, ETH->SHAR,6);												//same for server and client
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800e658:	3304      	adds	r3, #4
 800e65a:	2206      	movs	r2, #6
 800e65c:	9201      	str	r2, [sp, #4]
 800e65e:	9300      	str	r3, [sp, #0]
 800e660:	23f0      	movs	r3, #240	; 0xf0
 800e662:	2209      	movs	r2, #9
 800e664:	2100      	movs	r1, #0
 800e666:	6878      	ldr	r0, [r7, #4]
 800e668:	f7ff fe6f 	bl	800e34a <SPI_ETH_REG>
	 //ITM0_Write("\r\nETH-W5100-MAC SET\r\n",strlen("\r\nETH-W5100-MAC SET"));												//same for server and client
	 SPI_ETH_REG(ETH, SIPR_ADDR_BASEH,SIPR_ADDR_BASEL,SPI_WRITE, ETH->SIPR,4);												//same for server and client
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800e672:	330a      	adds	r3, #10
 800e674:	2204      	movs	r2, #4
 800e676:	9201      	str	r2, [sp, #4]
 800e678:	9300      	str	r3, [sp, #0]
 800e67a:	23f0      	movs	r3, #240	; 0xf0
 800e67c:	220f      	movs	r2, #15
 800e67e:	2100      	movs	r1, #0
 800e680:	6878      	ldr	r0, [r7, #4]
 800e682:	f7ff fe62 	bl	800e34a <SPI_ETH_REG>
	 //ITM0_Write("\r\nETH-W5100-IP SET\r\n",strlen("\r\nETH-W5100-IP SET"));													//same for server and client
	 SPI_ETH_REG(ETH, RMSR_ADDR_BASEH,RMSR_ADDR_BASEL,SPI_WRITE, &ETH->RMSR,1);												//same for server and client
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800e68c:	330e      	adds	r3, #14
 800e68e:	2201      	movs	r2, #1
 800e690:	9201      	str	r2, [sp, #4]
 800e692:	9300      	str	r3, [sp, #0]
 800e694:	23f0      	movs	r3, #240	; 0xf0
 800e696:	221a      	movs	r2, #26
 800e698:	2100      	movs	r1, #0
 800e69a:	6878      	ldr	r0, [r7, #4]
 800e69c:	f7ff fe55 	bl	800e34a <SPI_ETH_REG>
	 //ITM0_Write("\r\nETH-W5100-DEFINE SOCKET RX MEMORY 2K\r\n",strlen("\r\nETH-W5100-DEFINE SOCKET RX MEMORY 2K\r\n")); 	//same for server and client
	 SPI_ETH_REG(ETH, TMSR_ADDR_BASEH,TMSR_ADDR_BASEL,SPI_WRITE, &ETH->TMSR,1);												//same for server and client
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800e6a6:	330f      	adds	r3, #15
 800e6a8:	2201      	movs	r2, #1
 800e6aa:	9201      	str	r2, [sp, #4]
 800e6ac:	9300      	str	r3, [sp, #0]
 800e6ae:	23f0      	movs	r3, #240	; 0xf0
 800e6b0:	221b      	movs	r2, #27
 800e6b2:	2100      	movs	r1, #0
 800e6b4:	6878      	ldr	r0, [r7, #4]
 800e6b6:	f7ff fe48 	bl	800e34a <SPI_ETH_REG>
	 //ITM0_Write("\r\nETH-W5100-DEFINE SOCKET TX MEMORY 2K\r\n",strlen("\r\nETH-W5100-DEFINE SOCKET TX MEMORY 2K\r\n"));		//same for server and client

}
 800e6ba:	bf00      	nop
 800e6bc:	4618      	mov	r0, r3
 800e6be:	3708      	adds	r7, #8
 800e6c0:	46bd      	mov	sp, r7
 800e6c2:	bd80      	pop	{r7, pc}

0800e6c4 <eth_socket_init>:

uint8_t eth_socket_init(struct W5100_SPI * ETH, uint8_t socket)
{
 800e6c4:	b580      	push	{r7, lr}
 800e6c6:	b084      	sub	sp, #16
 800e6c8:	af02      	add	r7, sp, #8
 800e6ca:	6078      	str	r0, [r7, #4]
 800e6cc:	460b      	mov	r3, r1
 800e6ce:	70fb      	strb	r3, [r7, #3]
	 eth_wr_SOCKET_MODE(ETH,socket, MODE_TCP);																				//same for server and client
 800e6d0:	78fb      	ldrb	r3, [r7, #3]
 800e6d2:	2201      	movs	r2, #1
 800e6d4:	4619      	mov	r1, r3
 800e6d6:	6878      	ldr	r0, [r7, #4]
 800e6d8:	f7ff ff80 	bl	800e5dc <eth_wr_SOCKET_MODE>
	 //ITM0_Write("\r\nETH-W5100-SOCK0 TCP SET\r\n",strlen("\r\nETH-W5100-SOCK0 TCP SET"));									//same for server and client
	 SPI_ETH_REG(ETH, S0_PORT_ADDR_BASELH,S0_PORT_ADDR_BASELL,SPI_WRITE, ETH->S0_PORT,2);									//same for server and client
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800e6e2:	331a      	adds	r3, #26
 800e6e4:	2202      	movs	r2, #2
 800e6e6:	9201      	str	r2, [sp, #4]
 800e6e8:	9300      	str	r3, [sp, #0]
 800e6ea:	23f0      	movs	r3, #240	; 0xf0
 800e6ec:	2204      	movs	r2, #4
 800e6ee:	2104      	movs	r1, #4
 800e6f0:	6878      	ldr	r0, [r7, #4]
 800e6f2:	f7ff fe2a 	bl	800e34a <SPI_ETH_REG>

	 //ITM0_Write("\r\nETH-W5100-SOCK0 TCP REMOTE IP TO CONNECT\r\n",strlen("\r\nETH-W5100-SOCK0 TCP REMOTE IP TO CONNECT\r\n"));									// client
	 SPI_ETH_REG(ETH, 0x04,0x0C,SPI_WRITE, ETH->S0_DIPR,4);									// client
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800e6fc:	331c      	adds	r3, #28
 800e6fe:	2204      	movs	r2, #4
 800e700:	9201      	str	r2, [sp, #4]
 800e702:	9300      	str	r3, [sp, #0]
 800e704:	23f0      	movs	r3, #240	; 0xf0
 800e706:	220c      	movs	r2, #12
 800e708:	2104      	movs	r1, #4
 800e70a:	6878      	ldr	r0, [r7, #4]
 800e70c:	f7ff fe1d 	bl	800e34a <SPI_ETH_REG>
	 //ITM0_Write("\r\nETH-W5100-SOCK0 TCP REMOTE PORT TO CONNECT\r\n",strlen("\r\nETH-W5100-SOCK0 TCP REMOTE PORT TO CONNECT\r\n"));									// client
	 SPI_ETH_REG(ETH, 0x04,0x10,SPI_WRITE, ETH->S0_DPORT,2);									// client
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e716:	2202      	movs	r2, #2
 800e718:	9201      	str	r2, [sp, #4]
 800e71a:	9300      	str	r3, [sp, #0]
 800e71c:	23f0      	movs	r3, #240	; 0xf0
 800e71e:	2210      	movs	r2, #16
 800e720:	2104      	movs	r1, #4
 800e722:	6878      	ldr	r0, [r7, #4]
 800e724:	f7ff fe11 	bl	800e34a <SPI_ETH_REG>


	 //ITM0_Write("\r\nETH-W5100-SOCK0 TCP PORT SET\r\n",strlen("\r\nETH-W5100-SOCK0 TCP PORT SET\r\n"));						//same for server and client
	 eth_wr_SOCKET_CMD(ETH,socket, OPEN);																					//same for server and client
 800e728:	78fb      	ldrb	r3, [r7, #3]
 800e72a:	2201      	movs	r2, #1
 800e72c:	4619      	mov	r1, r3
 800e72e:	6878      	ldr	r0, [r7, #4]
 800e730:	f7ff ff36 	bl	800e5a0 <eth_wr_SOCKET_CMD>
	 //ITM0_Write("\r\nETH-W5100-OPEN SOCKET\r\n",strlen("\r\nETH-W5100-OPEN SOCKET\r\n"));									//same for server and client

	 if(ETH->S0_ENserver == 1)
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e73a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e73e:	2b01      	cmp	r3, #1
 800e740:	d106      	bne.n	800e750 <eth_socket_init+0x8c>
	 {
		 eth_wr_SOCKET_CMD(ETH,socket, LISTEN);																				//only for server
 800e742:	78fb      	ldrb	r3, [r7, #3]
 800e744:	2202      	movs	r2, #2
 800e746:	4619      	mov	r1, r3
 800e748:	6878      	ldr	r0, [r7, #4]
 800e74a:	f7ff ff29 	bl	800e5a0 <eth_wr_SOCKET_CMD>
 800e74e:	e009      	b.n	800e764 <eth_socket_init+0xa0>
		 //ITM0_Write("\r\nETH-W5100-LISTEN SOCKET\r\n",strlen("\r\nETH-W5100-LISTEN SOCKET\r\n"));							//only for server
	 }
	 else
	 {

		 	 eth_wr_SOCKET_CMD(ETH,socket, CONNECT);																				//only for server
 800e750:	78fb      	ldrb	r3, [r7, #3]
 800e752:	2204      	movs	r2, #4
 800e754:	4619      	mov	r1, r3
 800e756:	6878      	ldr	r0, [r7, #4]
 800e758:	f7ff ff22 	bl	800e5a0 <eth_wr_SOCKET_CMD>
			 ITM0_Write("\r\nETH-W5100-CONNECT\r\n",strlen("\r\nETH-W5100-CONNECT\r\n"));											//only fir server
 800e75c:	2115      	movs	r1, #21
 800e75e:	4804      	ldr	r0, [pc, #16]	; (800e770 <eth_socket_init+0xac>)
 800e760:	f7f2 ff66 	bl	8001630 <ITM0_Write>
	 }
}
 800e764:	bf00      	nop
 800e766:	4618      	mov	r0, r3
 800e768:	3708      	adds	r7, #8
 800e76a:	46bd      	mov	sp, r7
 800e76c:	bd80      	pop	{r7, pc}
 800e76e:	bf00      	nop
 800e770:	08010fbc 	.word	0x08010fbc

0800e774 <eth_rd_SOCKET_STAT>:

uint8_t eth_rd_SOCKET_STAT(struct  W5100_SPI * y, uint8_t socket)
{
 800e774:	b580      	push	{r7, lr}
 800e776:	b082      	sub	sp, #8
 800e778:	af00      	add	r7, sp, #0
 800e77a:	6078      	str	r0, [r7, #4]
 800e77c:	460b      	mov	r3, r1
 800e77e:	70fb      	strb	r3, [r7, #3]
	y->TX[0]= SPI_READ;
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	220f      	movs	r2, #15
 800e784:	751a      	strb	r2, [r3, #20]
	y->TX[1]=  S0_SR_ADDR_BASEH + socket;
 800e786:	78fb      	ldrb	r3, [r7, #3]
 800e788:	3304      	adds	r3, #4
 800e78a:	b2da      	uxtb	r2, r3
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	755a      	strb	r2, [r3, #21]
	y->TX[2]=  S0_SR_ADDR_BASEL ;
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	2203      	movs	r2, #3
 800e794:	759a      	strb	r2, [r3, #22]
	y->TX[3]= 0 ;		//Lo carga en la info a enviar
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	2200      	movs	r2, #0
 800e79a:	75da      	strb	r2, [r3, #23]
	SPI_ETH(y);
 800e79c:	6878      	ldr	r0, [r7, #4]
 800e79e:	f7ff fdad 	bl	800e2fc <SPI_ETH>
	return(y->RX[3]);
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	7edb      	ldrb	r3, [r3, #27]
}
 800e7a6:	4618      	mov	r0, r3
 800e7a8:	3708      	adds	r7, #8
 800e7aa:	46bd      	mov	sp, r7
 800e7ac:	bd80      	pop	{r7, pc}

0800e7ae <eth_rd_SOCKET_CMD>:

uint8_t eth_rd_SOCKET_CMD(struct  W5100_SPI * y, uint8_t socket)
{
 800e7ae:	b580      	push	{r7, lr}
 800e7b0:	b082      	sub	sp, #8
 800e7b2:	af00      	add	r7, sp, #0
 800e7b4:	6078      	str	r0, [r7, #4]
 800e7b6:	460b      	mov	r3, r1
 800e7b8:	70fb      	strb	r3, [r7, #3]
	y->TX[0]= SPI_READ;
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	220f      	movs	r2, #15
 800e7be:	751a      	strb	r2, [r3, #20]
	y->TX[1]=  S0_CR_ADDR_BASEH + socket;
 800e7c0:	78fb      	ldrb	r3, [r7, #3]
 800e7c2:	3304      	adds	r3, #4
 800e7c4:	b2da      	uxtb	r2, r3
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	755a      	strb	r2, [r3, #21]
	y->TX[2]=  S0_CR_ADDR_BASEL ;
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	2201      	movs	r2, #1
 800e7ce:	759a      	strb	r2, [r3, #22]
	y->TX[3]= 0 ;		//Lo carga en la info a enviar
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	2200      	movs	r2, #0
 800e7d4:	75da      	strb	r2, [r3, #23]
	SPI_ETH(y);
 800e7d6:	6878      	ldr	r0, [r7, #4]
 800e7d8:	f7ff fd90 	bl	800e2fc <SPI_ETH>
	return(y->RX[3]);
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	7edb      	ldrb	r3, [r3, #27]
}
 800e7e0:	4618      	mov	r0, r3
 800e7e2:	3708      	adds	r7, #8
 800e7e4:	46bd      	mov	sp, r7
 800e7e6:	bd80      	pop	{r7, pc}

0800e7e8 <eth_rd_SOCKET_DATA>:

uint16_t  eth_rd_SOCKET_DATA(struct W5100_SPI * ETH, uint8_t socket, uint16_t * mem_pointer, uint16_t sizedata)
{
 800e7e8:	b580      	push	{r7, lr}
 800e7ea:	b08c      	sub	sp, #48	; 0x30
 800e7ec:	af02      	add	r7, sp, #8
 800e7ee:	60f8      	str	r0, [r7, #12]
 800e7f0:	607a      	str	r2, [r7, #4]
 800e7f2:	461a      	mov	r2, r3
 800e7f4:	460b      	mov	r3, r1
 800e7f6:	72fb      	strb	r3, [r7, #11]
 800e7f8:	4613      	mov	r3, r2
 800e7fa:	813b      	strh	r3, [r7, #8]
	uint16_t S0_bf_rcv_offset=0,
 800e7fc:	2300      	movs	r3, #0
 800e7fe:	847b      	strh	r3, [r7, #34]	; 0x22
			 left_size=0,
 800e800:	2300      	movs	r3, #0
 800e802:	843b      	strh	r3, [r7, #32]
			 upper_size=0,
 800e804:	2300      	movs	r3, #0
 800e806:	83fb      	strh	r3, [r7, #30]
			 destination_addr=0,
 800e808:	2300      	movs	r3, #0
 800e80a:	83bb      	strh	r3, [r7, #28]
			 S0_RX_RD=0,
 800e80c:	2300      	movs	r3, #0
 800e80e:	837b      	strh	r3, [r7, #26]
			 S0_get_offset=0,
 800e810:	2300      	movs	r3, #0
 800e812:	833b      	strh	r3, [r7, #24]
			 S0_get_start_address=0,
 800e814:	2300      	movs	r3, #0
 800e816:	82fb      	strh	r3, [r7, #22]
			 S0_mem_pointer=0,
 800e818:	2300      	movs	r3, #0
 800e81a:	82bb      	strh	r3, [r7, #20]
			 RX_MASK=0,
 800e81c:	2300      	movs	r3, #0
 800e81e:	84fb      	strh	r3, [r7, #38]	; 0x26
			 RX_BASE=0;
 800e820:	2300      	movs	r3, #0
 800e822:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint8_t spi_Data[2];

	switch (socket)
 800e824:	7afb      	ldrb	r3, [r7, #11]
 800e826:	2b03      	cmp	r3, #3
 800e828:	d83e      	bhi.n	800e8a8 <eth_rd_SOCKET_DATA+0xc0>
 800e82a:	a201      	add	r2, pc, #4	; (adr r2, 800e830 <eth_rd_SOCKET_DATA+0x48>)
 800e82c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e830:	0800e841 	.word	0x0800e841
 800e834:	0800e85b 	.word	0x0800e85b
 800e838:	0800e875 	.word	0x0800e875
 800e83c:	0800e88f 	.word	0x0800e88f
	{
		case 0 :
		{
			RX_MASK=ETH->gS0_RX_MASK;
 800e840:	68fb      	ldr	r3, [r7, #12]
 800e842:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e846:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e84a:	84fb      	strh	r3, [r7, #38]	; 0x26
			RX_BASE=ETH->gS0_RX_BASE;
 800e84c:	68fb      	ldr	r3, [r7, #12]
 800e84e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e852:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e856:	84bb      	strh	r3, [r7, #36]	; 0x24
		}
		break;
 800e858:	e033      	b.n	800e8c2 <eth_rd_SOCKET_DATA+0xda>
		case 1 :
		{
			RX_MASK=ETH->gS1_RX_MASK;
 800e85a:	68fb      	ldr	r3, [r7, #12]
 800e85c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e860:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 800e864:	84fb      	strh	r3, [r7, #38]	; 0x26
			RX_BASE=ETH->gS1_RX_BASE;
 800e866:	68fb      	ldr	r3, [r7, #12]
 800e868:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e86c:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800e870:	84bb      	strh	r3, [r7, #36]	; 0x24
		}
		break;
 800e872:	e026      	b.n	800e8c2 <eth_rd_SOCKET_DATA+0xda>
		case 2 :
		{
			RX_MASK=ETH->gS2_RX_MASK;
 800e874:	68fb      	ldr	r3, [r7, #12]
 800e876:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e87a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e87e:	84fb      	strh	r3, [r7, #38]	; 0x26
			RX_BASE=ETH->gS2_RX_BASE;
 800e880:	68fb      	ldr	r3, [r7, #12]
 800e882:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e886:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 800e88a:	84bb      	strh	r3, [r7, #36]	; 0x24
		}
		break;
 800e88c:	e019      	b.n	800e8c2 <eth_rd_SOCKET_DATA+0xda>
		case 3 :
		{
			RX_MASK=ETH->gS3_RX_MASK;
 800e88e:	68fb      	ldr	r3, [r7, #12]
 800e890:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e894:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800e898:	84fb      	strh	r3, [r7, #38]	; 0x26
			RX_BASE=ETH->gS3_RX_BASE;
 800e89a:	68fb      	ldr	r3, [r7, #12]
 800e89c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e8a0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800e8a4:	84bb      	strh	r3, [r7, #36]	; 0x24
		}
		break;
 800e8a6:	e00c      	b.n	800e8c2 <eth_rd_SOCKET_DATA+0xda>
		default :
		{
			RX_MASK=ETH->gS0_RX_MASK;
 800e8a8:	68fb      	ldr	r3, [r7, #12]
 800e8aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e8ae:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e8b2:	84fb      	strh	r3, [r7, #38]	; 0x26
			RX_BASE=ETH->gS0_RX_BASE;
 800e8b4:	68fb      	ldr	r3, [r7, #12]
 800e8b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e8ba:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e8be:	84bb      	strh	r3, [r7, #36]	; 0x24
		}
		break;
 800e8c0:	bf00      	nop
	}

	S0_RX_RD = SPI_ETH_REG(ETH, S0_RX_RD_ADDR_BASEHH + socket ,S0_RX_RD_ADDR_BASEHL ,SPI_READ, spi_Data,2);
 800e8c2:	7afb      	ldrb	r3, [r7, #11]
 800e8c4:	3304      	adds	r3, #4
 800e8c6:	b2d9      	uxtb	r1, r3
 800e8c8:	2302      	movs	r3, #2
 800e8ca:	9301      	str	r3, [sp, #4]
 800e8cc:	f107 0310 	add.w	r3, r7, #16
 800e8d0:	9300      	str	r3, [sp, #0]
 800e8d2:	230f      	movs	r3, #15
 800e8d4:	2228      	movs	r2, #40	; 0x28
 800e8d6:	68f8      	ldr	r0, [r7, #12]
 800e8d8:	f7ff fd37 	bl	800e34a <SPI_ETH_REG>
 800e8dc:	4603      	mov	r3, r0
 800e8de:	837b      	strh	r3, [r7, #26]
	S0_get_offset = S0_RX_RD & RX_MASK;
 800e8e0:	8b7a      	ldrh	r2, [r7, #26]
 800e8e2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e8e4:	4013      	ands	r3, r2
 800e8e6:	833b      	strh	r3, [r7, #24]
	S0_get_start_address  = RX_BASE + S0_get_offset;
 800e8e8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e8ea:	8b3b      	ldrh	r3, [r7, #24]
 800e8ec:	4413      	add	r3, r2
 800e8ee:	82fb      	strh	r3, [r7, #22]
	if((S0_get_offset  + sizedata )>(RX_MASK + 1))
 800e8f0:	8b3a      	ldrh	r2, [r7, #24]
 800e8f2:	893b      	ldrh	r3, [r7, #8]
 800e8f4:	441a      	add	r2, r3
 800e8f6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e8f8:	3301      	adds	r3, #1
 800e8fa:	429a      	cmp	r2, r3
 800e8fc:	dd2c      	ble.n	800e958 <eth_rd_SOCKET_DATA+0x170>
		{
			upper_size = (RX_MASK + 1) - S0_get_offset ;
 800e8fe:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800e900:	8b3b      	ldrh	r3, [r7, #24]
 800e902:	1ad3      	subs	r3, r2, r3
 800e904:	b29b      	uxth	r3, r3
 800e906:	3301      	adds	r3, #1
 800e908:	83fb      	strh	r3, [r7, #30]
			SPI_ETH_RD_RCV_REG_16(ETH , S0_get_start_address , ETH->data , S0_bf_rcv_offset, upper_size);
 800e90a:	68fb      	ldr	r3, [r7, #12]
 800e90c:	f103 021c 	add.w	r2, r3, #28
 800e910:	8c78      	ldrh	r0, [r7, #34]	; 0x22
 800e912:	8af9      	ldrh	r1, [r7, #22]
 800e914:	8bfb      	ldrh	r3, [r7, #30]
 800e916:	9300      	str	r3, [sp, #0]
 800e918:	4603      	mov	r3, r0
 800e91a:	68f8      	ldr	r0, [r7, #12]
 800e91c:	f7ff fdc9 	bl	800e4b2 <SPI_ETH_RD_RCV_REG_16>
			destination_addr+=upper_size;
 800e920:	8bba      	ldrh	r2, [r7, #28]
 800e922:	8bfb      	ldrh	r3, [r7, #30]
 800e924:	4413      	add	r3, r2
 800e926:	83bb      	strh	r3, [r7, #28]
			left_size=sizedata-upper_size;
 800e928:	893a      	ldrh	r2, [r7, #8]
 800e92a:	8bfb      	ldrh	r3, [r7, #30]
 800e92c:	1ad3      	subs	r3, r2, r3
 800e92e:	843b      	strh	r3, [r7, #32]
			S0_bf_rcv_offset=upper_size;
 800e930:	8bfb      	ldrh	r3, [r7, #30]
 800e932:	847b      	strh	r3, [r7, #34]	; 0x22
			SPI_ETH_RD_RCV_REG_16(ETH , RX_BASE , ETH->data , S0_bf_rcv_offset, left_size);
 800e934:	68fb      	ldr	r3, [r7, #12]
 800e936:	f103 021c 	add.w	r2, r3, #28
 800e93a:	8c78      	ldrh	r0, [r7, #34]	; 0x22
 800e93c:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 800e93e:	8c3b      	ldrh	r3, [r7, #32]
 800e940:	9300      	str	r3, [sp, #0]
 800e942:	4603      	mov	r3, r0
 800e944:	68f8      	ldr	r0, [r7, #12]
 800e946:	f7ff fdb4 	bl	800e4b2 <SPI_ETH_RD_RCV_REG_16>
			*mem_pointer=S0_RX_RD + sizedata;
 800e94a:	8b7a      	ldrh	r2, [r7, #26]
 800e94c:	893b      	ldrh	r3, [r7, #8]
 800e94e:	4413      	add	r3, r2
 800e950:	b29a      	uxth	r2, r3
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	801a      	strh	r2, [r3, #0]
 800e956:	e010      	b.n	800e97a <eth_rd_SOCKET_DATA+0x192>
		}
		else
			{
				SPI_ETH_RD_RCV_REG_16(ETH , S0_get_start_address , ETH->data , S0_bf_rcv_offset, sizedata);
 800e958:	68fb      	ldr	r3, [r7, #12]
 800e95a:	f103 021c 	add.w	r2, r3, #28
 800e95e:	8c78      	ldrh	r0, [r7, #34]	; 0x22
 800e960:	8af9      	ldrh	r1, [r7, #22]
 800e962:	893b      	ldrh	r3, [r7, #8]
 800e964:	9300      	str	r3, [sp, #0]
 800e966:	4603      	mov	r3, r0
 800e968:	68f8      	ldr	r0, [r7, #12]
 800e96a:	f7ff fda2 	bl	800e4b2 <SPI_ETH_RD_RCV_REG_16>
				*mem_pointer=S0_RX_RD + sizedata;
 800e96e:	8b7a      	ldrh	r2, [r7, #26]
 800e970:	893b      	ldrh	r3, [r7, #8]
 800e972:	4413      	add	r3, r2
 800e974:	b29a      	uxth	r2, r3
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	801a      	strh	r2, [r3, #0]
			}
	return(mem_pointer);
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	b29b      	uxth	r3, r3
}
 800e97e:	4618      	mov	r0, r3
 800e980:	3728      	adds	r7, #40	; 0x28
 800e982:	46bd      	mov	sp, r7
 800e984:	bd80      	pop	{r7, pc}
 800e986:	bf00      	nop

0800e988 <eth_wr_SOCKET_DATA>:

uint16_t eth_wr_SOCKET_DATA(struct W5100_SPI * ETH, uint8_t socket, uint16_t * mem_pointer, uint16_t send_size)
{
 800e988:	b580      	push	{r7, lr}
 800e98a:	b08c      	sub	sp, #48	; 0x30
 800e98c:	af02      	add	r7, sp, #8
 800e98e:	60f8      	str	r0, [r7, #12]
 800e990:	607a      	str	r2, [r7, #4]
 800e992:	461a      	mov	r2, r3
 800e994:	460b      	mov	r3, r1
 800e996:	72fb      	strb	r3, [r7, #11]
 800e998:	4613      	mov	r3, r2
 800e99a:	813b      	strh	r3, [r7, #8]
	uint16_t S0_bf_rcv_offset=0,
 800e99c:	2300      	movs	r3, #0
 800e99e:	843b      	strh	r3, [r7, #32]
			 left_size=0,
 800e9a0:	2300      	movs	r3, #0
 800e9a2:	83fb      	strh	r3, [r7, #30]
			 upper_size=0,
 800e9a4:	2300      	movs	r3, #0
 800e9a6:	83bb      	strh	r3, [r7, #28]
			 source_addr=0,
 800e9a8:	2300      	movs	r3, #0
 800e9aa:	837b      	strh	r3, [r7, #26]
			 Sn_TX_WR=0,
 800e9ac:	2300      	movs	r3, #0
 800e9ae:	833b      	strh	r3, [r7, #24]
			 get_offset=0,
 800e9b0:	2300      	movs	r3, #0
 800e9b2:	82fb      	strh	r3, [r7, #22]
			 get_free_size=0,
 800e9b4:	2300      	movs	r3, #0
 800e9b6:	84fb      	strh	r3, [r7, #38]	; 0x26
			 get_start_address=0,
 800e9b8:	2300      	movs	r3, #0
 800e9ba:	82bb      	strh	r3, [r7, #20]
			 S0_mem_pointer=0,
 800e9bc:	2300      	movs	r3, #0
 800e9be:	827b      	strh	r3, [r7, #18]
			 TX_MASK=0,
 800e9c0:	2300      	movs	r3, #0
 800e9c2:	84bb      	strh	r3, [r7, #36]	; 0x24
			 TX_BASE=0;
 800e9c4:	2300      	movs	r3, #0
 800e9c6:	847b      	strh	r3, [r7, #34]	; 0x22
	uint8_t spi_Data[2];

	switch (socket)
 800e9c8:	7afb      	ldrb	r3, [r7, #11]
 800e9ca:	2b03      	cmp	r3, #3
 800e9cc:	d83e      	bhi.n	800ea4c <eth_wr_SOCKET_DATA+0xc4>
 800e9ce:	a201      	add	r2, pc, #4	; (adr r2, 800e9d4 <eth_wr_SOCKET_DATA+0x4c>)
 800e9d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e9d4:	0800e9e5 	.word	0x0800e9e5
 800e9d8:	0800e9ff 	.word	0x0800e9ff
 800e9dc:	0800ea19 	.word	0x0800ea19
 800e9e0:	0800ea33 	.word	0x0800ea33
	{
		case 0 :
		{
			TX_MASK=ETH->gS0_TX_MASK;
 800e9e4:	68fb      	ldr	r3, [r7, #12]
 800e9e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e9ea:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800e9ee:	84bb      	strh	r3, [r7, #36]	; 0x24
			TX_BASE=ETH->gS0_TX_BASE;
 800e9f0:	68fb      	ldr	r3, [r7, #12]
 800e9f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e9f6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800e9fa:	847b      	strh	r3, [r7, #34]	; 0x22
		}
		break;
 800e9fc:	e033      	b.n	800ea66 <eth_wr_SOCKET_DATA+0xde>
		case 1 :
		{
			TX_MASK=ETH->gS1_TX_MASK;
 800e9fe:	68fb      	ldr	r3, [r7, #12]
 800ea00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ea04:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ea08:	84bb      	strh	r3, [r7, #36]	; 0x24
			TX_BASE=ETH->gS1_TX_BASE;
 800ea0a:	68fb      	ldr	r3, [r7, #12]
 800ea0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ea10:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800ea14:	847b      	strh	r3, [r7, #34]	; 0x22
		}
		break;
 800ea16:	e026      	b.n	800ea66 <eth_wr_SOCKET_DATA+0xde>
		case 2 :
		{
			TX_MASK=ETH->gS2_TX_MASK;
 800ea18:	68fb      	ldr	r3, [r7, #12]
 800ea1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ea1e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ea22:	84bb      	strh	r3, [r7, #36]	; 0x24
			TX_BASE=ETH->gS2_TX_BASE;
 800ea24:	68fb      	ldr	r3, [r7, #12]
 800ea26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ea2a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ea2e:	847b      	strh	r3, [r7, #34]	; 0x22
		}
		break;
 800ea30:	e019      	b.n	800ea66 <eth_wr_SOCKET_DATA+0xde>
		case 3 :
		{
			TX_MASK=ETH->gS3_TX_MASK;
 800ea32:	68fb      	ldr	r3, [r7, #12]
 800ea34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ea38:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800ea3c:	84bb      	strh	r3, [r7, #36]	; 0x24
			TX_BASE=ETH->gS3_TX_BASE;
 800ea3e:	68fb      	ldr	r3, [r7, #12]
 800ea40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ea44:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ea48:	847b      	strh	r3, [r7, #34]	; 0x22
		}
		break;
 800ea4a:	e00c      	b.n	800ea66 <eth_wr_SOCKET_DATA+0xde>
		default :
		{
			TX_MASK=ETH->gS0_TX_MASK;
 800ea4c:	68fb      	ldr	r3, [r7, #12]
 800ea4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ea52:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800ea56:	84bb      	strh	r3, [r7, #36]	; 0x24
			TX_BASE=ETH->gS0_TX_BASE;
 800ea58:	68fb      	ldr	r3, [r7, #12]
 800ea5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ea5e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800ea62:	847b      	strh	r3, [r7, #34]	; 0x22
		}
		break;
 800ea64:	bf00      	nop
	}

	while(get_free_size<send_size)
 800ea66:	e00e      	b.n	800ea86 <eth_wr_SOCKET_DATA+0xfe>
			{
				get_free_size=SPI_ETH_REG(ETH, 0x04 + socket, 0x20 ,SPI_READ, spi_Data,2); //Leo registro S0_TX_FSR	=   0x420,
 800ea68:	7afb      	ldrb	r3, [r7, #11]
 800ea6a:	3304      	adds	r3, #4
 800ea6c:	b2d9      	uxtb	r1, r3
 800ea6e:	2302      	movs	r3, #2
 800ea70:	9301      	str	r3, [sp, #4]
 800ea72:	f107 0310 	add.w	r3, r7, #16
 800ea76:	9300      	str	r3, [sp, #0]
 800ea78:	230f      	movs	r3, #15
 800ea7a:	2220      	movs	r2, #32
 800ea7c:	68f8      	ldr	r0, [r7, #12]
 800ea7e:	f7ff fc64 	bl	800e34a <SPI_ETH_REG>
 800ea82:	4603      	mov	r3, r0
 800ea84:	84fb      	strh	r3, [r7, #38]	; 0x26
	while(get_free_size<send_size)
 800ea86:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800ea88:	893b      	ldrh	r3, [r7, #8]
 800ea8a:	429a      	cmp	r2, r3
 800ea8c:	d3ec      	bcc.n	800ea68 <eth_wr_SOCKET_DATA+0xe0>
			}
				Sn_TX_WR = SPI_ETH_REG(ETH, 0x04 + socket,0x24 ,SPI_READ, spi_Data,2); // S0_TX_RD =   0x424,
 800ea8e:	7afb      	ldrb	r3, [r7, #11]
 800ea90:	3304      	adds	r3, #4
 800ea92:	b2d9      	uxtb	r1, r3
 800ea94:	2302      	movs	r3, #2
 800ea96:	9301      	str	r3, [sp, #4]
 800ea98:	f107 0310 	add.w	r3, r7, #16
 800ea9c:	9300      	str	r3, [sp, #0]
 800ea9e:	230f      	movs	r3, #15
 800eaa0:	2224      	movs	r2, #36	; 0x24
 800eaa2:	68f8      	ldr	r0, [r7, #12]
 800eaa4:	f7ff fc51 	bl	800e34a <SPI_ETH_REG>
 800eaa8:	4603      	mov	r3, r0
 800eaaa:	833b      	strh	r3, [r7, #24]
				get_offset= Sn_TX_WR & TX_MASK;
 800eaac:	8b3a      	ldrh	r2, [r7, #24]
 800eaae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800eab0:	4013      	ands	r3, r2
 800eab2:	82fb      	strh	r3, [r7, #22]
				get_start_address=TX_BASE + get_offset;
 800eab4:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800eab6:	8afb      	ldrh	r3, [r7, #22]
 800eab8:	4413      	add	r3, r2
 800eaba:	82bb      	strh	r3, [r7, #20]

				if((get_offset + send_size)>(TX_MASK + 1))
 800eabc:	8afa      	ldrh	r2, [r7, #22]
 800eabe:	893b      	ldrh	r3, [r7, #8]
 800eac0:	441a      	add	r2, r3
 800eac2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800eac4:	3301      	adds	r3, #1
 800eac6:	429a      	cmp	r2, r3
 800eac8:	dd2c      	ble.n	800eb24 <eth_wr_SOCKET_DATA+0x19c>
					{
						upper_size=( TX_MASK + 1) - get_offset;
 800eaca:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800eacc:	8afb      	ldrh	r3, [r7, #22]
 800eace:	1ad3      	subs	r3, r2, r3
 800ead0:	b29b      	uxth	r3, r3
 800ead2:	3301      	adds	r3, #1
 800ead4:	83bb      	strh	r3, [r7, #28]
						SPI_ETH_WR_TX_REG_16(ETH , get_start_address , ETH->data , S0_bf_rcv_offset, upper_size);
 800ead6:	68fb      	ldr	r3, [r7, #12]
 800ead8:	f103 021c 	add.w	r2, r3, #28
 800eadc:	8c38      	ldrh	r0, [r7, #32]
 800eade:	8ab9      	ldrh	r1, [r7, #20]
 800eae0:	8bbb      	ldrh	r3, [r7, #28]
 800eae2:	9300      	str	r3, [sp, #0]
 800eae4:	4603      	mov	r3, r0
 800eae6:	68f8      	ldr	r0, [r7, #12]
 800eae8:	f7ff fd20 	bl	800e52c <SPI_ETH_WR_TX_REG_16>
						source_addr+=upper_size;
 800eaec:	8b7a      	ldrh	r2, [r7, #26]
 800eaee:	8bbb      	ldrh	r3, [r7, #28]
 800eaf0:	4413      	add	r3, r2
 800eaf2:	837b      	strh	r3, [r7, #26]
						left_size=send_size-upper_size;
 800eaf4:	893a      	ldrh	r2, [r7, #8]
 800eaf6:	8bbb      	ldrh	r3, [r7, #28]
 800eaf8:	1ad3      	subs	r3, r2, r3
 800eafa:	83fb      	strh	r3, [r7, #30]
						S0_bf_rcv_offset=upper_size;
 800eafc:	8bbb      	ldrh	r3, [r7, #28]
 800eafe:	843b      	strh	r3, [r7, #32]
						SPI_ETH_WR_TX_REG_16(ETH , TX_BASE , ETH->data , S0_bf_rcv_offset, left_size);
 800eb00:	68fb      	ldr	r3, [r7, #12]
 800eb02:	f103 021c 	add.w	r2, r3, #28
 800eb06:	8c38      	ldrh	r0, [r7, #32]
 800eb08:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 800eb0a:	8bfb      	ldrh	r3, [r7, #30]
 800eb0c:	9300      	str	r3, [sp, #0]
 800eb0e:	4603      	mov	r3, r0
 800eb10:	68f8      	ldr	r0, [r7, #12]
 800eb12:	f7ff fd0b 	bl	800e52c <SPI_ETH_WR_TX_REG_16>
						*mem_pointer=Sn_TX_WR + send_size;
 800eb16:	8b3a      	ldrh	r2, [r7, #24]
 800eb18:	893b      	ldrh	r3, [r7, #8]
 800eb1a:	4413      	add	r3, r2
 800eb1c:	b29a      	uxth	r2, r3
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	801a      	strh	r2, [r3, #0]
 800eb22:	e010      	b.n	800eb46 <eth_wr_SOCKET_DATA+0x1be>
					}
				else
					{
					SPI_ETH_WR_TX_REG_16(ETH , get_start_address , ETH->data , S0_bf_rcv_offset, send_size);
 800eb24:	68fb      	ldr	r3, [r7, #12]
 800eb26:	f103 021c 	add.w	r2, r3, #28
 800eb2a:	8c38      	ldrh	r0, [r7, #32]
 800eb2c:	8ab9      	ldrh	r1, [r7, #20]
 800eb2e:	893b      	ldrh	r3, [r7, #8]
 800eb30:	9300      	str	r3, [sp, #0]
 800eb32:	4603      	mov	r3, r0
 800eb34:	68f8      	ldr	r0, [r7, #12]
 800eb36:	f7ff fcf9 	bl	800e52c <SPI_ETH_WR_TX_REG_16>
					*mem_pointer=Sn_TX_WR + send_size;
 800eb3a:	8b3a      	ldrh	r2, [r7, #24]
 800eb3c:	893b      	ldrh	r3, [r7, #8]
 800eb3e:	4413      	add	r3, r2
 800eb40:	b29a      	uxth	r2, r3
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	801a      	strh	r2, [r3, #0]
					}

}
 800eb46:	bf00      	nop
 800eb48:	4618      	mov	r0, r3
 800eb4a:	3728      	adds	r7, #40	; 0x28
 800eb4c:	46bd      	mov	sp, r7
 800eb4e:	bd80      	pop	{r7, pc}

0800eb50 <FT_String_ND>:
				return(2);
			}
}

int FT_String_ND( unsigned char * a, int *an, unsigned char * b, int *bn, unsigned char * c,int *cn, int *ubicacion, int *idcom, int of, int tf)
{
 800eb50:	b580      	push	{r7, lr}
 800eb52:	b090      	sub	sp, #64	; 0x40
 800eb54:	af00      	add	r7, sp, #0
 800eb56:	60f8      	str	r0, [r7, #12]
 800eb58:	60b9      	str	r1, [r7, #8]
 800eb5a:	607a      	str	r2, [r7, #4]
 800eb5c:	603b      	str	r3, [r7, #0]
	int n=0,n2=0,n3=0,n4=0,n5=0, lnga=0, lngb=0,lngd=0,lnge=0,h=0,estado=0,cliente=0;
 800eb5e:	2300      	movs	r3, #0
 800eb60:	63fb      	str	r3, [r7, #60]	; 0x3c
 800eb62:	2300      	movs	r3, #0
 800eb64:	63bb      	str	r3, [r7, #56]	; 0x38
 800eb66:	2300      	movs	r3, #0
 800eb68:	637b      	str	r3, [r7, #52]	; 0x34
 800eb6a:	2300      	movs	r3, #0
 800eb6c:	633b      	str	r3, [r7, #48]	; 0x30
 800eb6e:	2300      	movs	r3, #0
 800eb70:	62fb      	str	r3, [r7, #44]	; 0x2c
 800eb72:	2300      	movs	r3, #0
 800eb74:	61fb      	str	r3, [r7, #28]
 800eb76:	2300      	movs	r3, #0
 800eb78:	61bb      	str	r3, [r7, #24]
 800eb7a:	2300      	movs	r3, #0
 800eb7c:	62bb      	str	r3, [r7, #40]	; 0x28
 800eb7e:	2300      	movs	r3, #0
 800eb80:	627b      	str	r3, [r7, #36]	; 0x24
 800eb82:	2300      	movs	r3, #0
 800eb84:	617b      	str	r3, [r7, #20]
 800eb86:	2300      	movs	r3, #0
 800eb88:	623b      	str	r3, [r7, #32]
 800eb8a:	2300      	movs	r3, #0
 800eb8c:	613b      	str	r3, [r7, #16]

	lnga=*an;
 800eb8e:	68bb      	ldr	r3, [r7, #8]
 800eb90:	681b      	ldr	r3, [r3, #0]
 800eb92:	61fb      	str	r3, [r7, #28]
	lngb=*bn;
 800eb94:	683b      	ldr	r3, [r7, #0]
 800eb96:	681b      	ldr	r3, [r3, #0]
 800eb98:	61bb      	str	r3, [r7, #24]
			if (lnga>=lngb) //Solo buscao si la cadena a buscar es menor a la que la contiene
 800eb9a:	69fa      	ldr	r2, [r7, #28]
 800eb9c:	69bb      	ldr	r3, [r7, #24]
 800eb9e:	429a      	cmp	r2, r3
 800eba0:	f2c0 8315 	blt.w	800f1ce <FT_String_ND+0x67e>
			{
				//Debo preguntar por el primer caracter, recorro hasta encontrar el primero, si no lo encuentro me voy
				do{
						n2=0;
 800eba4:	2300      	movs	r3, #0
 800eba6:	63bb      	str	r3, [r7, #56]	; 0x38
							while(a[n]!= b[n2])
 800eba8:	e00c      	b.n	800ebc4 <FT_String_ND+0x74>
							{
								n++;
 800ebaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ebac:	3301      	adds	r3, #1
 800ebae:	63fb      	str	r3, [r7, #60]	; 0x3c
								if(n+lngb>(lnga+1))
 800ebb0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ebb2:	69bb      	ldr	r3, [r7, #24]
 800ebb4:	441a      	add	r2, r3
 800ebb6:	69fb      	ldr	r3, [r7, #28]
 800ebb8:	3301      	adds	r3, #1
 800ebba:	429a      	cmp	r2, r3
 800ebbc:	dd02      	ble.n	800ebc4 <FT_String_ND+0x74>
								{
									estado=0;
 800ebbe:	2300      	movs	r3, #0
 800ebc0:	623b      	str	r3, [r7, #32]
									break;
 800ebc2:	e009      	b.n	800ebd8 <FT_String_ND+0x88>
							while(a[n]!= b[n2])
 800ebc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ebc6:	68fa      	ldr	r2, [r7, #12]
 800ebc8:	4413      	add	r3, r2
 800ebca:	781a      	ldrb	r2, [r3, #0]
 800ebcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebce:	6879      	ldr	r1, [r7, #4]
 800ebd0:	440b      	add	r3, r1
 800ebd2:	781b      	ldrb	r3, [r3, #0]
 800ebd4:	429a      	cmp	r2, r3
 800ebd6:	d1e8      	bne.n	800ebaa <FT_String_ND+0x5a>
								}//return(0); //No esta el string
							}

							do
							{   //Aca el primero ya es igual
							 n++;
 800ebd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ebda:	3301      	adds	r3, #1
 800ebdc:	63fb      	str	r3, [r7, #60]	; 0x3c

							 n2++;
 800ebde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebe0:	3301      	adds	r3, #1
 800ebe2:	63bb      	str	r3, [r7, #56]	; 0x38
							 if(n2==lngb)				//Si pasé poracá recorriendo todo el vector ya se que lo contiene
 800ebe4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ebe6:	69bb      	ldr	r3, [r7, #24]
 800ebe8:	429a      	cmp	r2, r3
 800ebea:	d108      	bne.n	800ebfe <FT_String_ND+0xae>
									{
									*ubicacion=n-lngb+1;
 800ebec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ebee:	69bb      	ldr	r3, [r7, #24]
 800ebf0:	1ad3      	subs	r3, r2, r3
 800ebf2:	1c5a      	adds	r2, r3, #1
 800ebf4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ebf6:	601a      	str	r2, [r3, #0]
									estado=1;
 800ebf8:	2301      	movs	r3, #1
 800ebfa:	623b      	str	r3, [r7, #32]
									break;
 800ebfc:	e010      	b.n	800ec20 <FT_String_ND+0xd0>
									//if (tf==0) return(1);	//Si solo pido buscar salgo ahora
									}		//Esta el string if(n2>=lngb-1) return(1);

							 if(n2>lngb)//if((a[n]=='\0')||(n2>lngb))	//Si finaliz� el vector o bien ya reviso mas caracteres que los que contiene el vector
 800ebfe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ec00:	69bb      	ldr	r3, [r7, #24]
 800ec02:	429a      	cmp	r2, r3
 800ec04:	dd02      	ble.n	800ec0c <FT_String_ND+0xbc>
									 {
									 estado=0;
 800ec06:	2300      	movs	r3, #0
 800ec08:	623b      	str	r3, [r7, #32]
									 break;
 800ec0a:	e009      	b.n	800ec20 <FT_String_ND+0xd0>
									 //return(0);//if(n+lngb>=lnga) return(0);//No esta el string
									 }
							}while(a[n]== b[n2]);
 800ec0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ec0e:	68fa      	ldr	r2, [r7, #12]
 800ec10:	4413      	add	r3, r2
 800ec12:	781a      	ldrb	r2, [r3, #0]
 800ec14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec16:	6879      	ldr	r1, [r7, #4]
 800ec18:	440b      	add	r3, r1
 800ec1a:	781b      	ldrb	r3, [r3, #0]
 800ec1c:	429a      	cmp	r2, r3
 800ec1e:	d0db      	beq.n	800ebd8 <FT_String_ND+0x88>

					}	while((n+(lngb-1)<=(lnga-1))&&(estado!=1));	//while(n+lngb<=lnga);
 800ec20:	69bb      	ldr	r3, [r7, #24]
 800ec22:	1e5a      	subs	r2, r3, #1
 800ec24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ec26:	4413      	add	r3, r2
 800ec28:	69fa      	ldr	r2, [r7, #28]
 800ec2a:	429a      	cmp	r2, r3
 800ec2c:	dd02      	ble.n	800ec34 <FT_String_ND+0xe4>
 800ec2e:	6a3b      	ldr	r3, [r7, #32]
 800ec30:	2b01      	cmp	r3, #1
 800ec32:	d1b7      	bne.n	800eba4 <FT_String_ND+0x54>

					if (tf==0) 					//Si solo pido buscar
 800ec34:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ec36:	2b00      	cmp	r3, #0
 800ec38:	d101      	bne.n	800ec3e <FT_String_ND+0xee>
					{return(estado);			//Agregado para no dejar valor si solo quiero buscar
 800ec3a:	6a3b      	ldr	r3, [r7, #32]
 800ec3c:	e2c8      	b.n	800f1d0 <FT_String_ND+0x680>
					}
					else
					{								//Si quiero eliminar lo encontrado
						if((tf==1)&&(estado==1))//------------------------------Si la voy a eliminar tiene que estar
 800ec3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ec40:	2b01      	cmp	r3, #1
 800ec42:	d12c      	bne.n	800ec9e <FT_String_ND+0x14e>
 800ec44:	6a3b      	ldr	r3, [r7, #32]
 800ec46:	2b01      	cmp	r3, #1
 800ec48:	d129      	bne.n	800ec9e <FT_String_ND+0x14e>
							/*while (a[*ubicacion+n2+n3]!='\0')
									{
										a[*ubicacion+n3]=a[*ubicacion+lngb+n3];
										n3++;
									}*/
							while ((*ubicacion+n2+n3)<=lnga)
 800ec4a:	e014      	b.n	800ec76 <FT_String_ND+0x126>
									{
										a[*ubicacion+n3-1]=a[*ubicacion+lngb+n3-1];
 800ec4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ec4e:	681a      	ldr	r2, [r3, #0]
 800ec50:	69bb      	ldr	r3, [r7, #24]
 800ec52:	441a      	add	r2, r3
 800ec54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ec56:	4413      	add	r3, r2
 800ec58:	3b01      	subs	r3, #1
 800ec5a:	68fa      	ldr	r2, [r7, #12]
 800ec5c:	441a      	add	r2, r3
 800ec5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ec60:	6819      	ldr	r1, [r3, #0]
 800ec62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ec64:	440b      	add	r3, r1
 800ec66:	3b01      	subs	r3, #1
 800ec68:	68f9      	ldr	r1, [r7, #12]
 800ec6a:	440b      	add	r3, r1
 800ec6c:	7812      	ldrb	r2, [r2, #0]
 800ec6e:	701a      	strb	r2, [r3, #0]
										n3++;
 800ec70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ec72:	3301      	adds	r3, #1
 800ec74:	637b      	str	r3, [r7, #52]	; 0x34
							while ((*ubicacion+n2+n3)<=lnga)
 800ec76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ec78:	681a      	ldr	r2, [r3, #0]
 800ec7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec7c:	441a      	add	r2, r3
 800ec7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ec80:	4413      	add	r3, r2
 800ec82:	69fa      	ldr	r2, [r7, #28]
 800ec84:	429a      	cmp	r2, r3
 800ec86:	dae1      	bge.n	800ec4c <FT_String_ND+0xfc>
									}

							//a[*ubicacion+n3-1]='\0';	//Identifico finalizacion del vector
							*an=*ubicacion+n3-1;		//Largo del vector
 800ec88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ec8a:	681a      	ldr	r2, [r3, #0]
 800ec8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ec8e:	4413      	add	r3, r2
 800ec90:	1e5a      	subs	r2, r3, #1
 800ec92:	68bb      	ldr	r3, [r7, #8]
 800ec94:	601a      	str	r2, [r3, #0]
							estado=3;
 800ec96:	2303      	movs	r3, #3
 800ec98:	623b      	str	r3, [r7, #32]
							return(estado);
 800ec9a:	6a3b      	ldr	r3, [r7, #32]
 800ec9c:	e298      	b.n	800f1d0 <FT_String_ND+0x680>
						}
						//------------------------------------------------------------------------------------
						//---DECODIFICACION DE IPD, EXTRACCI�N DE CADENA PRINCIPAL Y COPIA A CADENA SECUNDARIA
						//------------------------------------------------------------------------------------
						if((tf==2)&&(estado==1))
 800ec9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800eca0:	2b02      	cmp	r3, #2
 800eca2:	f040 80be 	bne.w	800ee22 <FT_String_ND+0x2d2>
 800eca6:	6a3b      	ldr	r3, [r7, #32]
 800eca8:	2b01      	cmp	r3, #1
 800ecaa:	f040 80ba 	bne.w	800ee22 <FT_String_ND+0x2d2>
						{
							while((n-lngb+n4)<=lnga)//---------------Copio a partir del IPD al vector tok que es el c.
 800ecae:	e012      	b.n	800ecd6 <FT_String_ND+0x186>
							{						 // n quedó en la ultima posicion del vector b
								c[n4]=a[n-lngb+n4];
 800ecb0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ecb2:	69bb      	ldr	r3, [r7, #24]
 800ecb4:	1ad2      	subs	r2, r2, r3
 800ecb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecb8:	4413      	add	r3, r2
 800ecba:	461a      	mov	r2, r3
 800ecbc:	68fb      	ldr	r3, [r7, #12]
 800ecbe:	441a      	add	r2, r3
 800ecc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecc2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800ecc4:	440b      	add	r3, r1
 800ecc6:	7812      	ldrb	r2, [r2, #0]
 800ecc8:	701a      	strb	r2, [r3, #0]
								n4++;
 800ecca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eccc:	3301      	adds	r3, #1
 800ecce:	633b      	str	r3, [r7, #48]	; 0x30
								*cn=n4;
 800ecd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ecd2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ecd4:	601a      	str	r2, [r3, #0]
							while((n-lngb+n4)<=lnga)//---------------Copio a partir del IPD al vector tok que es el c.
 800ecd6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ecd8:	69bb      	ldr	r3, [r7, #24]
 800ecda:	1ad2      	subs	r2, r2, r3
 800ecdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecde:	4413      	add	r3, r2
 800ece0:	69fa      	ldr	r2, [r7, #28]
 800ece2:	429a      	cmp	r2, r3
 800ece4:	dae4      	bge.n	800ecb0 <FT_String_ND+0x160>
							}
							strtok(c,",:");
 800ece6:	499d      	ldr	r1, [pc, #628]	; (800ef5c <FT_String_ND+0x40c>)
 800ece8:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800ecea:	f000 fd13 	bl	800f714 <strtok>
							lngd= atoi(strtok(NULL,",: "));
 800ecee:	499c      	ldr	r1, [pc, #624]	; (800ef60 <FT_String_ND+0x410>)
 800ecf0:	2000      	movs	r0, #0
 800ecf2:	f000 fd0f 	bl	800f714 <strtok>
 800ecf6:	4603      	mov	r3, r0
 800ecf8:	4618      	mov	r0, r3
 800ecfa:	f000 faf0 	bl	800f2de <atoi>
 800ecfe:	62b8      	str	r0, [r7, #40]	; 0x28
							if(lngd>=of-1)
 800ed00:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ed02:	3b01      	subs	r3, #1
 800ed04:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ed06:	429a      	cmp	r2, r3
 800ed08:	db02      	blt.n	800ed10 <FT_String_ND+0x1c0>
							{
								lngd=of-1;
 800ed0a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ed0c:	3b01      	subs	r3, #1
 800ed0e:	62bb      	str	r3, [r7, #40]	; 0x28
							}
							c[6]=',';//------------------------------Reconstruyo vector
 800ed10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ed12:	3306      	adds	r3, #6
 800ed14:	222c      	movs	r2, #44	; 0x2c
 800ed16:	701a      	strb	r2, [r3, #0]
									if (lngd < 10)
 800ed18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed1a:	2b09      	cmp	r3, #9
 800ed1c:	dc0d      	bgt.n	800ed3a <FT_String_ND+0x1ea>
											{
												c[8]=':';
 800ed1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ed20:	3308      	adds	r3, #8
 800ed22:	223a      	movs	r2, #58	; 0x3a
 800ed24:	701a      	strb	r2, [r3, #0]
												c[8+lngd+1]='\0';
 800ed26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed28:	3309      	adds	r3, #9
 800ed2a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ed2c:	4413      	add	r3, r2
 800ed2e:	2200      	movs	r2, #0
 800ed30:	701a      	strb	r2, [r3, #0]
												lnge=9+lngd;
 800ed32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed34:	3309      	adds	r3, #9
 800ed36:	627b      	str	r3, [r7, #36]	; 0x24
 800ed38:	e021      	b.n	800ed7e <FT_String_ND+0x22e>
											}
											else{
														if (lngd< 100)
 800ed3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed3c:	2b63      	cmp	r3, #99	; 0x63
 800ed3e:	dc0d      	bgt.n	800ed5c <FT_String_ND+0x20c>
														{
															c[9]=':';
 800ed40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ed42:	3309      	adds	r3, #9
 800ed44:	223a      	movs	r2, #58	; 0x3a
 800ed46:	701a      	strb	r2, [r3, #0]
															c[9+lngd+1]='\0';
 800ed48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed4a:	330a      	adds	r3, #10
 800ed4c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ed4e:	4413      	add	r3, r2
 800ed50:	2200      	movs	r2, #0
 800ed52:	701a      	strb	r2, [r3, #0]
															lnge=10+lngd;
 800ed54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed56:	330a      	adds	r3, #10
 800ed58:	627b      	str	r3, [r7, #36]	; 0x24
 800ed5a:	e010      	b.n	800ed7e <FT_String_ND+0x22e>
														}
														else
														{
														if (lngd < 1000)
 800ed5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed5e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ed62:	da0c      	bge.n	800ed7e <FT_String_ND+0x22e>
														{
															c[10]=':';
 800ed64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ed66:	330a      	adds	r3, #10
 800ed68:	223a      	movs	r2, #58	; 0x3a
 800ed6a:	701a      	strb	r2, [r3, #0]
															c[10+lngd+1]='\0';
 800ed6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed6e:	330b      	adds	r3, #11
 800ed70:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ed72:	4413      	add	r3, r2
 800ed74:	2200      	movs	r2, #0
 800ed76:	701a      	strb	r2, [r3, #0]
															lnge=11+lngd;
 800ed78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed7a:	330b      	adds	r3, #11
 800ed7c:	627b      	str	r3, [r7, #36]	; 0x24
														}
														}
													}
												//------------------------------Vector reconstruido
							  //------------------------------Extraccion del vector en el original
							*cn=lnge;
 800ed7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ed80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ed82:	601a      	str	r2, [r3, #0]
							n4=0;
 800ed84:	2300      	movs	r3, #0
 800ed86:	633b      	str	r3, [r7, #48]	; 0x30
							while((n-lngb+lnge+n4)<=lnga)//while(a[n-lngb+lnge+n4]!='\0')//---------------Copio a partir del IPD al vector tok.
 800ed88:	e016      	b.n	800edb8 <FT_String_ND+0x268>
							{
								a[n-lngb+n4]=a[n-lngb+lnge+n4];
 800ed8a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ed8c:	69bb      	ldr	r3, [r7, #24]
 800ed8e:	1ad2      	subs	r2, r2, r3
 800ed90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed92:	441a      	add	r2, r3
 800ed94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed96:	4413      	add	r3, r2
 800ed98:	461a      	mov	r2, r3
 800ed9a:	68fb      	ldr	r3, [r7, #12]
 800ed9c:	441a      	add	r2, r3
 800ed9e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800eda0:	69bb      	ldr	r3, [r7, #24]
 800eda2:	1ac9      	subs	r1, r1, r3
 800eda4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eda6:	440b      	add	r3, r1
 800eda8:	4619      	mov	r1, r3
 800edaa:	68fb      	ldr	r3, [r7, #12]
 800edac:	440b      	add	r3, r1
 800edae:	7812      	ldrb	r2, [r2, #0]
 800edb0:	701a      	strb	r2, [r3, #0]
								n4++;
 800edb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edb4:	3301      	adds	r3, #1
 800edb6:	633b      	str	r3, [r7, #48]	; 0x30
							while((n-lngb+lnge+n4)<=lnga)//while(a[n-lngb+lnge+n4]!='\0')//---------------Copio a partir del IPD al vector tok.
 800edb8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800edba:	69bb      	ldr	r3, [r7, #24]
 800edbc:	1ad2      	subs	r2, r2, r3
 800edbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edc0:	441a      	add	r2, r3
 800edc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edc4:	4413      	add	r3, r2
 800edc6:	69fa      	ldr	r2, [r7, #28]
 800edc8:	429a      	cmp	r2, r3
 800edca:	dade      	bge.n	800ed8a <FT_String_ND+0x23a>
							}
							*an=n+n4-lngb-1;
 800edcc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800edce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edd0:	441a      	add	r2, r3
 800edd2:	69bb      	ldr	r3, [r7, #24]
 800edd4:	1ad3      	subs	r3, r2, r3
 800edd6:	1e5a      	subs	r2, r3, #1
 800edd8:	68bb      	ldr	r3, [r7, #8]
 800edda:	601a      	str	r2, [r3, #0]
							a[n-lngb+lnge+n4]='\0';
 800eddc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800edde:	69bb      	ldr	r3, [r7, #24]
 800ede0:	1ad2      	subs	r2, r2, r3
 800ede2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ede4:	441a      	add	r2, r3
 800ede6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ede8:	4413      	add	r3, r2
 800edea:	461a      	mov	r2, r3
 800edec:	68fb      	ldr	r3, [r7, #12]
 800edee:	4413      	add	r3, r2
 800edf0:	2200      	movs	r2, #0
 800edf2:	701a      	strb	r2, [r3, #0]
							a[n-lngb+n4]='\0';
 800edf4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800edf6:	69bb      	ldr	r3, [r7, #24]
 800edf8:	1ad2      	subs	r2, r2, r3
 800edfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edfc:	4413      	add	r3, r2
 800edfe:	461a      	mov	r2, r3
 800ee00:	68fb      	ldr	r3, [r7, #12]
 800ee02:	4413      	add	r3, r2
 800ee04:	2200      	movs	r2, #0
 800ee06:	701a      	strb	r2, [r3, #0]
							if((n-lngb)==(lnge+n4)) a[0]='\0';
 800ee08:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ee0a:	69bb      	ldr	r3, [r7, #24]
 800ee0c:	1ad2      	subs	r2, r2, r3
 800ee0e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ee10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee12:	440b      	add	r3, r1
 800ee14:	429a      	cmp	r2, r3
 800ee16:	d102      	bne.n	800ee1e <FT_String_ND+0x2ce>
 800ee18:	68fb      	ldr	r3, [r7, #12]
 800ee1a:	2200      	movs	r2, #0
 800ee1c:	701a      	strb	r2, [r3, #0]
							estado=3;
 800ee1e:	2303      	movs	r3, #3
 800ee20:	623b      	str	r3, [r7, #32]

						}
						//------------------------------------------------------------------------------------
						//---EXTRACCI�N DE CADENA PRINCIPAL Y COPIA A CADENA SECUNDARIA-----------------------
						//------------------------------------------------------------------------------------
						if((tf==3)&&(estado==1))
 800ee22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ee24:	2b03      	cmp	r3, #3
 800ee26:	d146      	bne.n	800eeb6 <FT_String_ND+0x366>
 800ee28:	6a3b      	ldr	r3, [r7, #32]
 800ee2a:	2b01      	cmp	r3, #1
 800ee2c:	d143      	bne.n	800eeb6 <FT_String_ND+0x366>
						{
						n3=0;
 800ee2e:	2300      	movs	r3, #0
 800ee30:	637b      	str	r3, [r7, #52]	; 0x34
						while (n3<lngb)//---------------Copio la info a extraer
 800ee32:	e00e      	b.n	800ee52 <FT_String_ND+0x302>
									{
										c[n3]=a[*ubicacion+n3-1];
 800ee34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ee36:	681a      	ldr	r2, [r3, #0]
 800ee38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ee3a:	4413      	add	r3, r2
 800ee3c:	3b01      	subs	r3, #1
 800ee3e:	68fa      	ldr	r2, [r7, #12]
 800ee40:	441a      	add	r2, r3
 800ee42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ee44:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800ee46:	440b      	add	r3, r1
 800ee48:	7812      	ldrb	r2, [r2, #0]
 800ee4a:	701a      	strb	r2, [r3, #0]
										n3++;
 800ee4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ee4e:	3301      	adds	r3, #1
 800ee50:	637b      	str	r3, [r7, #52]	; 0x34
						while (n3<lngb)//---------------Copio la info a extraer
 800ee52:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ee54:	69bb      	ldr	r3, [r7, #24]
 800ee56:	429a      	cmp	r2, r3
 800ee58:	dbec      	blt.n	800ee34 <FT_String_ND+0x2e4>
									}
									//c[n3]='\0';//---------------Finalizo el vector extra�do
						n5=0;
 800ee5a:	2300      	movs	r3, #0
 800ee5c:	62fb      	str	r3, [r7, #44]	; 0x2c
						while ((*ubicacion+lngb+n5)<=*an)
 800ee5e:	e014      	b.n	800ee8a <FT_String_ND+0x33a>
									{
										a[*ubicacion+n5-1]=a[*ubicacion+lngb+n5-1];
 800ee60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ee62:	681a      	ldr	r2, [r3, #0]
 800ee64:	69bb      	ldr	r3, [r7, #24]
 800ee66:	441a      	add	r2, r3
 800ee68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee6a:	4413      	add	r3, r2
 800ee6c:	3b01      	subs	r3, #1
 800ee6e:	68fa      	ldr	r2, [r7, #12]
 800ee70:	441a      	add	r2, r3
 800ee72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ee74:	6819      	ldr	r1, [r3, #0]
 800ee76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee78:	440b      	add	r3, r1
 800ee7a:	3b01      	subs	r3, #1
 800ee7c:	68f9      	ldr	r1, [r7, #12]
 800ee7e:	440b      	add	r3, r1
 800ee80:	7812      	ldrb	r2, [r2, #0]
 800ee82:	701a      	strb	r2, [r3, #0]
										n5++;
 800ee84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee86:	3301      	adds	r3, #1
 800ee88:	62fb      	str	r3, [r7, #44]	; 0x2c
						while ((*ubicacion+lngb+n5)<=*an)
 800ee8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ee8c:	681a      	ldr	r2, [r3, #0]
 800ee8e:	69bb      	ldr	r3, [r7, #24]
 800ee90:	441a      	add	r2, r3
 800ee92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee94:	441a      	add	r2, r3
 800ee96:	68bb      	ldr	r3, [r7, #8]
 800ee98:	681b      	ldr	r3, [r3, #0]
 800ee9a:	429a      	cmp	r2, r3
 800ee9c:	dde0      	ble.n	800ee60 <FT_String_ND+0x310>
									}
							//a[*ubicacion+n3]='\0';	//Identifico finalizacion del vector
						    *an=*ubicacion+n5-1;
 800ee9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eea0:	681a      	ldr	r2, [r3, #0]
 800eea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eea4:	4413      	add	r3, r2
 800eea6:	1e5a      	subs	r2, r3, #1
 800eea8:	68bb      	ldr	r3, [r7, #8]
 800eeaa:	601a      	str	r2, [r3, #0]
							*cn=n3;
 800eeac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eeae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800eeb0:	601a      	str	r2, [r3, #0]
							estado=3;
 800eeb2:	2303      	movs	r3, #3
 800eeb4:	623b      	str	r3, [r7, #32]
						}
						//------------------------------------------------------------------------------------
						//---DECODIFICACION DE IPD, EXTRACCI�N DE CADENA PRINCIPAL COPIA A CADENA SECUNDARIA DE
						//--- LOS DATOS CON EVALUACION DE INTEGRIDAD DE LOS MISMOS 4 DATOS OK 5 DATOS NO OK
						//------------------------------------------------------------------------------------
						if((tf==4)&&(estado==1))
 800eeb6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800eeb8:	2b04      	cmp	r3, #4
 800eeba:	f040 80bd 	bne.w	800f038 <FT_String_ND+0x4e8>
 800eebe:	6a3b      	ldr	r3, [r7, #32]
 800eec0:	2b01      	cmp	r3, #1
 800eec2:	f040 80b9 	bne.w	800f038 <FT_String_ND+0x4e8>
						{
							while((n-lngb+n4)<=lnga)//---------------Copio a partir del IPD al vector tok que es el c.
 800eec6:	e012      	b.n	800eeee <FT_String_ND+0x39e>
							{						 // n quedó en la ultima posicion del vector b
								c[n4]=a[n-lngb+n4];
 800eec8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800eeca:	69bb      	ldr	r3, [r7, #24]
 800eecc:	1ad2      	subs	r2, r2, r3
 800eece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eed0:	4413      	add	r3, r2
 800eed2:	461a      	mov	r2, r3
 800eed4:	68fb      	ldr	r3, [r7, #12]
 800eed6:	441a      	add	r2, r3
 800eed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eeda:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800eedc:	440b      	add	r3, r1
 800eede:	7812      	ldrb	r2, [r2, #0]
 800eee0:	701a      	strb	r2, [r3, #0]
								n4++;
 800eee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eee4:	3301      	adds	r3, #1
 800eee6:	633b      	str	r3, [r7, #48]	; 0x30
								*cn=n4;  //lonitud del vector tok + el /r/n+IPD,XX:
 800eee8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eeea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eeec:	601a      	str	r2, [r3, #0]
							while((n-lngb+n4)<=lnga)//---------------Copio a partir del IPD al vector tok que es el c.
 800eeee:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800eef0:	69bb      	ldr	r3, [r7, #24]
 800eef2:	1ad2      	subs	r2, r2, r3
 800eef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eef6:	4413      	add	r3, r2
 800eef8:	69fa      	ldr	r2, [r7, #28]
 800eefa:	429a      	cmp	r2, r3
 800eefc:	dae4      	bge.n	800eec8 <FT_String_ND+0x378>
							}
							strtok(c,",:"); //En teoria no afecta el vector
 800eefe:	4917      	ldr	r1, [pc, #92]	; (800ef5c <FT_String_ND+0x40c>)
 800ef00:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800ef02:	f000 fc07 	bl	800f714 <strtok>
							lngd= atoi(strtok(NULL,",: ")); //Datos informados de +IPD,XX: no deberia afectar el vector
 800ef06:	4916      	ldr	r1, [pc, #88]	; (800ef60 <FT_String_ND+0x410>)
 800ef08:	2000      	movs	r0, #0
 800ef0a:	f000 fc03 	bl	800f714 <strtok>
 800ef0e:	4603      	mov	r3, r0
 800ef10:	4618      	mov	r0, r3
 800ef12:	f000 f9e4 	bl	800f2de <atoi>
 800ef16:	62b8      	str	r0, [r7, #40]	; 0x28

							if(lngd>=of-1)//if(lngd>=of-1)
 800ef18:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ef1a:	3b01      	subs	r3, #1
 800ef1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ef1e:	429a      	cmp	r2, r3
 800ef20:	db02      	blt.n	800ef28 <FT_String_ND+0x3d8>
							{
								lngd=of-1;
 800ef22:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ef24:	3b01      	subs	r3, #1
 800ef26:	62bb      	str	r3, [r7, #40]	; 0x28
							}
							c[6]=',';//------------------------------Reconstruyo vector
 800ef28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ef2a:	3306      	adds	r3, #6
 800ef2c:	222c      	movs	r2, #44	; 0x2c
 800ef2e:	701a      	strb	r2, [r3, #0]
									if (lngd < 10)
 800ef30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef32:	2b09      	cmp	r3, #9
 800ef34:	dc07      	bgt.n	800ef46 <FT_String_ND+0x3f6>
											{
												c[8]=':';
 800ef36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ef38:	3308      	adds	r3, #8
 800ef3a:	223a      	movs	r2, #58	; 0x3a
 800ef3c:	701a      	strb	r2, [r3, #0]
												//c[8+lngd+1]='\0';
												lnge=9+lngd;
 800ef3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef40:	3309      	adds	r3, #9
 800ef42:	627b      	str	r3, [r7, #36]	; 0x24
 800ef44:	e019      	b.n	800ef7a <FT_String_ND+0x42a>
											}
											else{
														if (lngd< 100)
 800ef46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef48:	2b63      	cmp	r3, #99	; 0x63
 800ef4a:	dc0b      	bgt.n	800ef64 <FT_String_ND+0x414>
														{
															c[9]=':';
 800ef4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ef4e:	3309      	adds	r3, #9
 800ef50:	223a      	movs	r2, #58	; 0x3a
 800ef52:	701a      	strb	r2, [r3, #0]
															//c[9+lngd+1]='\0';
															lnge=10+lngd;
 800ef54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef56:	330a      	adds	r3, #10
 800ef58:	627b      	str	r3, [r7, #36]	; 0x24
 800ef5a:	e00e      	b.n	800ef7a <FT_String_ND+0x42a>
 800ef5c:	08010fd4 	.word	0x08010fd4
 800ef60:	08010fd8 	.word	0x08010fd8
														}
														else
														{
														if (lngd < 1000)
 800ef64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef66:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ef6a:	da06      	bge.n	800ef7a <FT_String_ND+0x42a>
														{
															c[10]=':';
 800ef6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ef6e:	330a      	adds	r3, #10
 800ef70:	223a      	movs	r2, #58	; 0x3a
 800ef72:	701a      	strb	r2, [r3, #0]
															//c[10+lngd+1]='\0';
															lnge=11+lngd;
 800ef74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef76:	330b      	adds	r3, #11
 800ef78:	627b      	str	r3, [r7, #36]	; 0x24
														}
														}
													}
												//------------------------------Vector reconstruido
							  //------------------------------Extraccion del vector en el original
							*cn=lnge; //Longitud del vecto TOK completo
 800ef7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ef7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ef7e:	601a      	str	r2, [r3, #0]
							n4=0;
 800ef80:	2300      	movs	r3, #0
 800ef82:	633b      	str	r3, [r7, #48]	; 0x30
							while((n-lngb+lnge+n4)<=lnga)//while(a[n-lngb+lnge+n4]!='\0')//---------------Copio a partir del IPD al vector tok.
 800ef84:	e016      	b.n	800efb4 <FT_String_ND+0x464>
							{
								a[n-lngb+n4]=a[n-lngb+lnge+n4];
 800ef86:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ef88:	69bb      	ldr	r3, [r7, #24]
 800ef8a:	1ad2      	subs	r2, r2, r3
 800ef8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef8e:	441a      	add	r2, r3
 800ef90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef92:	4413      	add	r3, r2
 800ef94:	461a      	mov	r2, r3
 800ef96:	68fb      	ldr	r3, [r7, #12]
 800ef98:	441a      	add	r2, r3
 800ef9a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ef9c:	69bb      	ldr	r3, [r7, #24]
 800ef9e:	1ac9      	subs	r1, r1, r3
 800efa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efa2:	440b      	add	r3, r1
 800efa4:	4619      	mov	r1, r3
 800efa6:	68fb      	ldr	r3, [r7, #12]
 800efa8:	440b      	add	r3, r1
 800efaa:	7812      	ldrb	r2, [r2, #0]
 800efac:	701a      	strb	r2, [r3, #0]
								n4++;
 800efae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efb0:	3301      	adds	r3, #1
 800efb2:	633b      	str	r3, [r7, #48]	; 0x30
							while((n-lngb+lnge+n4)<=lnga)//while(a[n-lngb+lnge+n4]!='\0')//---------------Copio a partir del IPD al vector tok.
 800efb4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800efb6:	69bb      	ldr	r3, [r7, #24]
 800efb8:	1ad2      	subs	r2, r2, r3
 800efba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efbc:	441a      	add	r2, r3
 800efbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efc0:	4413      	add	r3, r2
 800efc2:	69fa      	ldr	r2, [r7, #28]
 800efc4:	429a      	cmp	r2, r3
 800efc6:	dade      	bge.n	800ef86 <FT_String_ND+0x436>
							}
							*an=n+n4-lngb-1; //longitud del vector A
 800efc8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800efca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efcc:	441a      	add	r2, r3
 800efce:	69bb      	ldr	r3, [r7, #24]
 800efd0:	1ad3      	subs	r3, r2, r3
 800efd2:	1e5a      	subs	r2, r3, #1
 800efd4:	68bb      	ldr	r3, [r7, #8]
 800efd6:	601a      	str	r2, [r3, #0]
							n5=0;
 800efd8:	2300      	movs	r3, #0
 800efda:	62fb      	str	r3, [r7, #44]	; 0x2c
							while((lnge-lngd+n5)<*cn)
 800efdc:	e00f      	b.n	800effe <FT_String_ND+0x4ae>
							{
								c[n5]=c[(lnge-lngd+n5)];
 800efde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800efe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efe2:	1ad2      	subs	r2, r2, r3
 800efe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efe6:	4413      	add	r3, r2
 800efe8:	461a      	mov	r2, r3
 800efea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800efec:	441a      	add	r2, r3
 800efee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eff0:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800eff2:	440b      	add	r3, r1
 800eff4:	7812      	ldrb	r2, [r2, #0]
 800eff6:	701a      	strb	r2, [r3, #0]
								n5++;
 800eff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800effa:	3301      	adds	r3, #1
 800effc:	62fb      	str	r3, [r7, #44]	; 0x2c
							while((lnge-lngd+n5)<*cn)
 800effe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f002:	1ad2      	subs	r2, r2, r3
 800f004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f006:	441a      	add	r2, r3
 800f008:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f00a:	681b      	ldr	r3, [r3, #0]
 800f00c:	429a      	cmp	r2, r3
 800f00e:	dbe6      	blt.n	800efde <FT_String_ND+0x48e>
							}
							*cn=n5; //Nueva longitud del vector con datos extaidos
 800f010:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f012:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f014:	601a      	str	r2, [r3, #0]

							if((*cn+lnge-lngd+*an)==lnga)
 800f016:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f018:	681a      	ldr	r2, [r3, #0]
 800f01a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f01c:	441a      	add	r2, r3
 800f01e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f020:	1ad2      	subs	r2, r2, r3
 800f022:	68bb      	ldr	r3, [r7, #8]
 800f024:	681b      	ldr	r3, [r3, #0]
 800f026:	4413      	add	r3, r2
 800f028:	69fa      	ldr	r2, [r7, #28]
 800f02a:	429a      	cmp	r2, r3
 800f02c:	d102      	bne.n	800f034 <FT_String_ND+0x4e4>
							{
								estado=4;
 800f02e:	2304      	movs	r3, #4
 800f030:	623b      	str	r3, [r7, #32]
 800f032:	e001      	b.n	800f038 <FT_String_ND+0x4e8>

							}
							else
							{
								estado=5;
 800f034:	2305      	movs	r3, #5
 800f036:	623b      	str	r3, [r7, #32]
						//--------------------------------    MODO SERVIDOR    -------------------------------
						//---DECODIFICACION DE IPD, EXTRACCI�N DE CADENA PRINCIPAL COPIA A CADENA SECUNDARIA DE
						//--- LOS DATOS CON EVALUACION DE INTEGRIDAD DE LOS MISMOS 4 DATOS OK 5 DATOS NO OK
						//------------------- SOLO VALIDO PARA CLIENTES DE 0 A 9     -------------------------
						//------------------------------------------------------------------------------------
						if((tf==5)&&(estado==1))
 800f038:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f03a:	2b05      	cmp	r3, #5
 800f03c:	f040 80c5 	bne.w	800f1ca <FT_String_ND+0x67a>
 800f040:	6a3b      	ldr	r3, [r7, #32]
 800f042:	2b01      	cmp	r3, #1
 800f044:	f040 80c1 	bne.w	800f1ca <FT_String_ND+0x67a>
						{
							while((n-lngb+n4)<=lnga)//---------------Copio a partir del IPD al vector tok que es el c.
 800f048:	e012      	b.n	800f070 <FT_String_ND+0x520>
							{						 // n quedó en la ultima posicion del vector b
								c[n4]=a[n-lngb+n4];
 800f04a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f04c:	69bb      	ldr	r3, [r7, #24]
 800f04e:	1ad2      	subs	r2, r2, r3
 800f050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f052:	4413      	add	r3, r2
 800f054:	461a      	mov	r2, r3
 800f056:	68fb      	ldr	r3, [r7, #12]
 800f058:	441a      	add	r2, r3
 800f05a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f05c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800f05e:	440b      	add	r3, r1
 800f060:	7812      	ldrb	r2, [r2, #0]
 800f062:	701a      	strb	r2, [r3, #0]
								n4++;
 800f064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f066:	3301      	adds	r3, #1
 800f068:	633b      	str	r3, [r7, #48]	; 0x30
								*cn=n4;  //lonitud del vector tok + el /r/n+IPD,XXX:
 800f06a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f06c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f06e:	601a      	str	r2, [r3, #0]
							while((n-lngb+n4)<=lnga)//---------------Copio a partir del IPD al vector tok que es el c.
 800f070:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f072:	69bb      	ldr	r3, [r7, #24]
 800f074:	1ad2      	subs	r2, r2, r3
 800f076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f078:	4413      	add	r3, r2
 800f07a:	69fa      	ldr	r2, [r7, #28]
 800f07c:	429a      	cmp	r2, r3
 800f07e:	dae4      	bge.n	800f04a <FT_String_ND+0x4fa>
							}
							strtok(c,",:"); //En teoria no afecta el vector
 800f080:	4955      	ldr	r1, [pc, #340]	; (800f1d8 <FT_String_ND+0x688>)
 800f082:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800f084:	f000 fb46 	bl	800f714 <strtok>
							cliente= atoi(strtok(NULL,",: ")); //Clieng del cual se reciben los datos
 800f088:	4954      	ldr	r1, [pc, #336]	; (800f1dc <FT_String_ND+0x68c>)
 800f08a:	2000      	movs	r0, #0
 800f08c:	f000 fb42 	bl	800f714 <strtok>
 800f090:	4603      	mov	r3, r0
 800f092:	4618      	mov	r0, r3
 800f094:	f000 f923 	bl	800f2de <atoi>
 800f098:	6138      	str	r0, [r7, #16]
							lngd= atoi(strtok(NULL,",: ")); //Datos informados de +IPD,XX: no deberia afectar el vector
 800f09a:	4950      	ldr	r1, [pc, #320]	; (800f1dc <FT_String_ND+0x68c>)
 800f09c:	2000      	movs	r0, #0
 800f09e:	f000 fb39 	bl	800f714 <strtok>
 800f0a2:	4603      	mov	r3, r0
 800f0a4:	4618      	mov	r0, r3
 800f0a6:	f000 f91a 	bl	800f2de <atoi>
 800f0aa:	62b8      	str	r0, [r7, #40]	; 0x28
							if(lngd>=of-1)
 800f0ac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f0ae:	3b01      	subs	r3, #1
 800f0b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f0b2:	429a      	cmp	r2, r3
 800f0b4:	db02      	blt.n	800f0bc <FT_String_ND+0x56c>
							{
								lngd=of-1;
 800f0b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f0b8:	3b01      	subs	r3, #1
 800f0ba:	62bb      	str	r3, [r7, #40]	; 0x28
							}
							c[6]=',';//------------------------------Reconstruyo vector
 800f0bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f0be:	3306      	adds	r3, #6
 800f0c0:	222c      	movs	r2, #44	; 0x2c
 800f0c2:	701a      	strb	r2, [r3, #0]
									if (lngd < 10)
 800f0c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0c6:	2b09      	cmp	r3, #9
 800f0c8:	dc07      	bgt.n	800f0da <FT_String_ND+0x58a>
											{
												c[10]=':';
 800f0ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f0cc:	330a      	adds	r3, #10
 800f0ce:	223a      	movs	r2, #58	; 0x3a
 800f0d0:	701a      	strb	r2, [r3, #0]
												//c[8+lngd+1]='\0';
												lnge=11+lngd;
 800f0d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0d4:	330b      	adds	r3, #11
 800f0d6:	627b      	str	r3, [r7, #36]	; 0x24
 800f0d8:	e015      	b.n	800f106 <FT_String_ND+0x5b6>
											}
											else{
														if (lngd< 100)
 800f0da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0dc:	2b63      	cmp	r3, #99	; 0x63
 800f0de:	dc07      	bgt.n	800f0f0 <FT_String_ND+0x5a0>
														{
															c[11]=':';
 800f0e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f0e2:	330b      	adds	r3, #11
 800f0e4:	223a      	movs	r2, #58	; 0x3a
 800f0e6:	701a      	strb	r2, [r3, #0]
															//c[9+lngd+1]='\0';
															lnge=12+lngd;
 800f0e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0ea:	330c      	adds	r3, #12
 800f0ec:	627b      	str	r3, [r7, #36]	; 0x24
 800f0ee:	e00a      	b.n	800f106 <FT_String_ND+0x5b6>
														}
														else
														{
														if (lngd < 1000)
 800f0f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0f2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800f0f6:	da06      	bge.n	800f106 <FT_String_ND+0x5b6>
														{
															c[12]=':';
 800f0f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f0fa:	330c      	adds	r3, #12
 800f0fc:	223a      	movs	r2, #58	; 0x3a
 800f0fe:	701a      	strb	r2, [r3, #0]
															//c[10+lngd+1]='\0';
															lnge=13+lngd;
 800f100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f102:	330d      	adds	r3, #13
 800f104:	627b      	str	r3, [r7, #36]	; 0x24
														}
														}
													}
												//------------------------------Vector reconstruido
							  //------------------------------Extraccion del vector en el original
							*cn=lnge; //Longitud del vecto TOK completo
 800f106:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f108:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f10a:	601a      	str	r2, [r3, #0]
							n4=0;
 800f10c:	2300      	movs	r3, #0
 800f10e:	633b      	str	r3, [r7, #48]	; 0x30
							while((n-lngb+lnge+n4)<=lnga)//while(a[n-lngb+lnge+n4]!='\0')//---------------Copio a partir del IPD al vector tok.
 800f110:	e016      	b.n	800f140 <FT_String_ND+0x5f0>
							{
								a[n-lngb+n4]=a[n-lngb+lnge+n4];
 800f112:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f114:	69bb      	ldr	r3, [r7, #24]
 800f116:	1ad2      	subs	r2, r2, r3
 800f118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f11a:	441a      	add	r2, r3
 800f11c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f11e:	4413      	add	r3, r2
 800f120:	461a      	mov	r2, r3
 800f122:	68fb      	ldr	r3, [r7, #12]
 800f124:	441a      	add	r2, r3
 800f126:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f128:	69bb      	ldr	r3, [r7, #24]
 800f12a:	1ac9      	subs	r1, r1, r3
 800f12c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f12e:	440b      	add	r3, r1
 800f130:	4619      	mov	r1, r3
 800f132:	68fb      	ldr	r3, [r7, #12]
 800f134:	440b      	add	r3, r1
 800f136:	7812      	ldrb	r2, [r2, #0]
 800f138:	701a      	strb	r2, [r3, #0]
								n4++;
 800f13a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f13c:	3301      	adds	r3, #1
 800f13e:	633b      	str	r3, [r7, #48]	; 0x30
							while((n-lngb+lnge+n4)<=lnga)//while(a[n-lngb+lnge+n4]!='\0')//---------------Copio a partir del IPD al vector tok.
 800f140:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f142:	69bb      	ldr	r3, [r7, #24]
 800f144:	1ad2      	subs	r2, r2, r3
 800f146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f148:	441a      	add	r2, r3
 800f14a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f14c:	4413      	add	r3, r2
 800f14e:	69fa      	ldr	r2, [r7, #28]
 800f150:	429a      	cmp	r2, r3
 800f152:	dade      	bge.n	800f112 <FT_String_ND+0x5c2>
							}
							*an=n+n4-lngb-1; //longitud del vector A
 800f154:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f158:	441a      	add	r2, r3
 800f15a:	69bb      	ldr	r3, [r7, #24]
 800f15c:	1ad3      	subs	r3, r2, r3
 800f15e:	1e5a      	subs	r2, r3, #1
 800f160:	68bb      	ldr	r3, [r7, #8]
 800f162:	601a      	str	r2, [r3, #0]
							n5=0;
 800f164:	2300      	movs	r3, #0
 800f166:	62fb      	str	r3, [r7, #44]	; 0x2c
							while((lnge-lngd+n5)<*cn)
 800f168:	e00f      	b.n	800f18a <FT_String_ND+0x63a>
							{
								c[n5]=c[(lnge-lngd+n5)];
 800f16a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f16c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f16e:	1ad2      	subs	r2, r2, r3
 800f170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f172:	4413      	add	r3, r2
 800f174:	461a      	mov	r2, r3
 800f176:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f178:	441a      	add	r2, r3
 800f17a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f17c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800f17e:	440b      	add	r3, r1
 800f180:	7812      	ldrb	r2, [r2, #0]
 800f182:	701a      	strb	r2, [r3, #0]
								n5++;
 800f184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f186:	3301      	adds	r3, #1
 800f188:	62fb      	str	r3, [r7, #44]	; 0x2c
							while((lnge-lngd+n5)<*cn)
 800f18a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f18c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f18e:	1ad2      	subs	r2, r2, r3
 800f190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f192:	441a      	add	r2, r3
 800f194:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f196:	681b      	ldr	r3, [r3, #0]
 800f198:	429a      	cmp	r2, r3
 800f19a:	dbe6      	blt.n	800f16a <FT_String_ND+0x61a>
							}
							*cn=n5; //Nueva longitud del vector con datos extaidos
 800f19c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f19e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f1a0:	601a      	str	r2, [r3, #0]

							if((*cn+lnge-lngd+*an)==lnga)
 800f1a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f1a4:	681a      	ldr	r2, [r3, #0]
 800f1a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1a8:	441a      	add	r2, r3
 800f1aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1ac:	1ad2      	subs	r2, r2, r3
 800f1ae:	68bb      	ldr	r3, [r7, #8]
 800f1b0:	681b      	ldr	r3, [r3, #0]
 800f1b2:	4413      	add	r3, r2
 800f1b4:	69fa      	ldr	r2, [r7, #28]
 800f1b6:	429a      	cmp	r2, r3
 800f1b8:	d105      	bne.n	800f1c6 <FT_String_ND+0x676>
							{
								estado=4;
 800f1ba:	2304      	movs	r3, #4
 800f1bc:	623b      	str	r3, [r7, #32]
								*idcom=cliente;
 800f1be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f1c0:	693a      	ldr	r2, [r7, #16]
 800f1c2:	601a      	str	r2, [r3, #0]
 800f1c4:	e001      	b.n	800f1ca <FT_String_ND+0x67a>
							}
							else
							{
								estado=5;
 800f1c6:	2305      	movs	r3, #5
 800f1c8:	623b      	str	r3, [r7, #32]
							//a[n-lngb+n4]='\0';
							//if((n-lngb)==(lnge+n4)) a[0]='\0';
							//estado=3;

						}
						return(estado);
 800f1ca:	6a3b      	ldr	r3, [r7, #32]
 800f1cc:	e000      	b.n	800f1d0 <FT_String_ND+0x680>
					}
			}
			else
			{
				return(2);
 800f1ce:	2302      	movs	r3, #2
			}
}
 800f1d0:	4618      	mov	r0, r3
 800f1d2:	3740      	adds	r7, #64	; 0x40
 800f1d4:	46bd      	mov	sp, r7
 800f1d6:	bd80      	pop	{r7, pc}
 800f1d8:	08010fd4 	.word	0x08010fd4
 800f1dc:	08010fd8 	.word	0x08010fd8

0800f1e0 <INTOA>:


int INTOA( int a,  unsigned char *v1)
{
 800f1e0:	b580      	push	{r7, lr}
 800f1e2:	b088      	sub	sp, #32
 800f1e4:	af00      	add	r7, sp, #0
 800f1e6:	6078      	str	r0, [r7, #4]
 800f1e8:	6039      	str	r1, [r7, #0]
char origbuff[20]="0";	
 800f1ea:	2330      	movs	r3, #48	; 0x30
 800f1ec:	60bb      	str	r3, [r7, #8]
 800f1ee:	f107 030c 	add.w	r3, r7, #12
 800f1f2:	2200      	movs	r2, #0
 800f1f4:	601a      	str	r2, [r3, #0]
 800f1f6:	605a      	str	r2, [r3, #4]
 800f1f8:	609a      	str	r2, [r3, #8]
 800f1fa:	60da      	str	r2, [r3, #12]
int i=0;	
 800f1fc:	2300      	movs	r3, #0
 800f1fe:	61fb      	str	r3, [r7, #28]
	
		sprintf(origbuff,"%i",a);	
 800f200:	f107 0308 	add.w	r3, r7, #8
 800f204:	687a      	ldr	r2, [r7, #4]
 800f206:	490f      	ldr	r1, [pc, #60]	; (800f244 <INTOA+0x64>)
 800f208:	4618      	mov	r0, r3
 800f20a:	f000 fa05 	bl	800f618 <siprintf>
		while(i<=strlen(origbuff))
 800f20e:	e00b      	b.n	800f228 <INTOA+0x48>
		{			
		*v1++=(unsigned char)origbuff[i];
 800f210:	683b      	ldr	r3, [r7, #0]
 800f212:	1c5a      	adds	r2, r3, #1
 800f214:	603a      	str	r2, [r7, #0]
 800f216:	f107 0108 	add.w	r1, r7, #8
 800f21a:	69fa      	ldr	r2, [r7, #28]
 800f21c:	440a      	add	r2, r1
 800f21e:	7812      	ldrb	r2, [r2, #0]
 800f220:	701a      	strb	r2, [r3, #0]
		i++;
 800f222:	69fb      	ldr	r3, [r7, #28]
 800f224:	3301      	adds	r3, #1
 800f226:	61fb      	str	r3, [r7, #28]
		while(i<=strlen(origbuff))
 800f228:	f107 0308 	add.w	r3, r7, #8
 800f22c:	4618      	mov	r0, r3
 800f22e:	f7f0 ffe1 	bl	80001f4 <strlen>
 800f232:	4602      	mov	r2, r0
 800f234:	69fb      	ldr	r3, [r7, #28]
 800f236:	429a      	cmp	r2, r3
 800f238:	d2ea      	bcs.n	800f210 <INTOA+0x30>
		}
		return(i);
 800f23a:	69fb      	ldr	r3, [r7, #28]
}
 800f23c:	4618      	mov	r0, r3
 800f23e:	3720      	adds	r7, #32
 800f240:	46bd      	mov	sp, r7
 800f242:	bd80      	pop	{r7, pc}
 800f244:	08010fdc 	.word	0x08010fdc

0800f248 <CopiaVector>:
					 c|=(b);
	return (c);
}

int CopiaVector( char *a, char *b, int c, int d,char *e)
{
 800f248:	b580      	push	{r7, lr}
 800f24a:	b088      	sub	sp, #32
 800f24c:	af00      	add	r7, sp, #0
 800f24e:	60f8      	str	r0, [r7, #12]
 800f250:	60b9      	str	r1, [r7, #8]
 800f252:	607a      	str	r2, [r7, #4]
 800f254:	603b      	str	r3, [r7, #0]
int x =0;
 800f256:	2300      	movs	r3, #0
 800f258:	61bb      	str	r3, [r7, #24]
char j[]="\0";  //Vector
 800f25a:	2300      	movs	r3, #0
 800f25c:	823b      	strh	r3, [r7, #16]
char *f=&j;		//Puntero tipo char que aloja las direcciones de memoria del vector j
 800f25e:	f107 0310 	add.w	r3, r7, #16
 800f262:	617b      	str	r3, [r7, #20]
if (c==0) x=strlen(b);
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	2b00      	cmp	r3, #0
 800f268:	d105      	bne.n	800f276 <CopiaVector+0x2e>
 800f26a:	68b8      	ldr	r0, [r7, #8]
 800f26c:	f7f0 ffc2 	bl	80001f4 <strlen>
 800f270:	4603      	mov	r3, r0
 800f272:	61bb      	str	r3, [r7, #24]
 800f274:	e02e      	b.n	800f2d4 <CopiaVector+0x8c>
else
	{
		x=c;
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	61bb      	str	r3, [r7, #24]
		if (x>512)// OJO SOLO HTTP if (x>128)
 800f27a:	69bb      	ldr	r3, [r7, #24]
 800f27c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f280:	dd01      	ble.n	800f286 <CopiaVector+0x3e>
			{
				return(1);
 800f282:	2301      	movs	r3, #1
 800f284:	e027      	b.n	800f2d6 <CopiaVector+0x8e>
			}
		else
			{
				int p=0;
 800f286:	2300      	movs	r3, #0
 800f288:	61fb      	str	r3, [r7, #28]
				while(p<x)
 800f28a:	e00a      	b.n	800f2a2 <CopiaVector+0x5a>
				{
					*a++=*b++;
 800f28c:	68ba      	ldr	r2, [r7, #8]
 800f28e:	1c53      	adds	r3, r2, #1
 800f290:	60bb      	str	r3, [r7, #8]
 800f292:	68fb      	ldr	r3, [r7, #12]
 800f294:	1c59      	adds	r1, r3, #1
 800f296:	60f9      	str	r1, [r7, #12]
 800f298:	7812      	ldrb	r2, [r2, #0]
 800f29a:	701a      	strb	r2, [r3, #0]
					p++;
 800f29c:	69fb      	ldr	r3, [r7, #28]
 800f29e:	3301      	adds	r3, #1
 800f2a0:	61fb      	str	r3, [r7, #28]
				while(p<x)
 800f2a2:	69fa      	ldr	r2, [r7, #28]
 800f2a4:	69bb      	ldr	r3, [r7, #24]
 800f2a6:	429a      	cmp	r2, r3
 800f2a8:	dbf0      	blt.n	800f28c <CopiaVector+0x44>
				}
				if (d==1)
 800f2aa:	683b      	ldr	r3, [r7, #0]
 800f2ac:	2b01      	cmp	r3, #1
 800f2ae:	d111      	bne.n	800f2d4 <CopiaVector+0x8c>
				{
				  p=c;
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	61fb      	str	r3, [r7, #28]
				  while (p<c+1)//512)// OJO SOLO HTTP while (p<128)
 800f2b4:	e008      	b.n	800f2c8 <CopiaVector+0x80>
				  {
					  *a++=*f;//*a++=*e; //Lo que está en la memoria de f vaya a la memoria de a
 800f2b6:	68fb      	ldr	r3, [r7, #12]
 800f2b8:	1c5a      	adds	r2, r3, #1
 800f2ba:	60fa      	str	r2, [r7, #12]
 800f2bc:	697a      	ldr	r2, [r7, #20]
 800f2be:	7812      	ldrb	r2, [r2, #0]
 800f2c0:	701a      	strb	r2, [r3, #0]
					  p++;
 800f2c2:	69fb      	ldr	r3, [r7, #28]
 800f2c4:	3301      	adds	r3, #1
 800f2c6:	61fb      	str	r3, [r7, #28]
				  while (p<c+1)//512)// OJO SOLO HTTP while (p<128)
 800f2c8:	687a      	ldr	r2, [r7, #4]
 800f2ca:	69fb      	ldr	r3, [r7, #28]
 800f2cc:	429a      	cmp	r2, r3
 800f2ce:	daf2      	bge.n	800f2b6 <CopiaVector+0x6e>
				  }
				return (0);
 800f2d0:	2300      	movs	r3, #0
 800f2d2:	e000      	b.n	800f2d6 <CopiaVector+0x8e>
				}
			}
	}
return (1);
 800f2d4:	2301      	movs	r3, #1
}
 800f2d6:	4618      	mov	r0, r3
 800f2d8:	3720      	adds	r7, #32
 800f2da:	46bd      	mov	sp, r7
 800f2dc:	bd80      	pop	{r7, pc}

0800f2de <atoi>:
 800f2de:	220a      	movs	r2, #10
 800f2e0:	2100      	movs	r1, #0
 800f2e2:	f000 b89d 	b.w	800f420 <strtol>

0800f2e6 <__itoa>:
 800f2e6:	1e93      	subs	r3, r2, #2
 800f2e8:	2b22      	cmp	r3, #34	; 0x22
 800f2ea:	b510      	push	{r4, lr}
 800f2ec:	460c      	mov	r4, r1
 800f2ee:	d904      	bls.n	800f2fa <__itoa+0x14>
 800f2f0:	2300      	movs	r3, #0
 800f2f2:	700b      	strb	r3, [r1, #0]
 800f2f4:	461c      	mov	r4, r3
 800f2f6:	4620      	mov	r0, r4
 800f2f8:	bd10      	pop	{r4, pc}
 800f2fa:	2a0a      	cmp	r2, #10
 800f2fc:	d109      	bne.n	800f312 <__itoa+0x2c>
 800f2fe:	2800      	cmp	r0, #0
 800f300:	da07      	bge.n	800f312 <__itoa+0x2c>
 800f302:	232d      	movs	r3, #45	; 0x2d
 800f304:	700b      	strb	r3, [r1, #0]
 800f306:	4240      	negs	r0, r0
 800f308:	2101      	movs	r1, #1
 800f30a:	4421      	add	r1, r4
 800f30c:	f000 f892 	bl	800f434 <__utoa>
 800f310:	e7f1      	b.n	800f2f6 <__itoa+0x10>
 800f312:	2100      	movs	r1, #0
 800f314:	e7f9      	b.n	800f30a <__itoa+0x24>

0800f316 <itoa>:
 800f316:	f7ff bfe6 	b.w	800f2e6 <__itoa>
	...

0800f31c <_strtol_l.constprop.0>:
 800f31c:	2b01      	cmp	r3, #1
 800f31e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f322:	d001      	beq.n	800f328 <_strtol_l.constprop.0+0xc>
 800f324:	2b24      	cmp	r3, #36	; 0x24
 800f326:	d906      	bls.n	800f336 <_strtol_l.constprop.0+0x1a>
 800f328:	f000 fa96 	bl	800f858 <__errno>
 800f32c:	2316      	movs	r3, #22
 800f32e:	6003      	str	r3, [r0, #0]
 800f330:	2000      	movs	r0, #0
 800f332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f336:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800f41c <_strtol_l.constprop.0+0x100>
 800f33a:	460d      	mov	r5, r1
 800f33c:	462e      	mov	r6, r5
 800f33e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f342:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800f346:	f017 0708 	ands.w	r7, r7, #8
 800f34a:	d1f7      	bne.n	800f33c <_strtol_l.constprop.0+0x20>
 800f34c:	2c2d      	cmp	r4, #45	; 0x2d
 800f34e:	d132      	bne.n	800f3b6 <_strtol_l.constprop.0+0x9a>
 800f350:	782c      	ldrb	r4, [r5, #0]
 800f352:	2701      	movs	r7, #1
 800f354:	1cb5      	adds	r5, r6, #2
 800f356:	2b00      	cmp	r3, #0
 800f358:	d05b      	beq.n	800f412 <_strtol_l.constprop.0+0xf6>
 800f35a:	2b10      	cmp	r3, #16
 800f35c:	d109      	bne.n	800f372 <_strtol_l.constprop.0+0x56>
 800f35e:	2c30      	cmp	r4, #48	; 0x30
 800f360:	d107      	bne.n	800f372 <_strtol_l.constprop.0+0x56>
 800f362:	782c      	ldrb	r4, [r5, #0]
 800f364:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800f368:	2c58      	cmp	r4, #88	; 0x58
 800f36a:	d14d      	bne.n	800f408 <_strtol_l.constprop.0+0xec>
 800f36c:	786c      	ldrb	r4, [r5, #1]
 800f36e:	2310      	movs	r3, #16
 800f370:	3502      	adds	r5, #2
 800f372:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800f376:	f108 38ff 	add.w	r8, r8, #4294967295
 800f37a:	f04f 0e00 	mov.w	lr, #0
 800f37e:	fbb8 f9f3 	udiv	r9, r8, r3
 800f382:	4676      	mov	r6, lr
 800f384:	fb03 8a19 	mls	sl, r3, r9, r8
 800f388:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800f38c:	f1bc 0f09 	cmp.w	ip, #9
 800f390:	d816      	bhi.n	800f3c0 <_strtol_l.constprop.0+0xa4>
 800f392:	4664      	mov	r4, ip
 800f394:	42a3      	cmp	r3, r4
 800f396:	dd24      	ble.n	800f3e2 <_strtol_l.constprop.0+0xc6>
 800f398:	f1be 3fff 	cmp.w	lr, #4294967295
 800f39c:	d008      	beq.n	800f3b0 <_strtol_l.constprop.0+0x94>
 800f39e:	45b1      	cmp	r9, r6
 800f3a0:	d31c      	bcc.n	800f3dc <_strtol_l.constprop.0+0xc0>
 800f3a2:	d101      	bne.n	800f3a8 <_strtol_l.constprop.0+0x8c>
 800f3a4:	45a2      	cmp	sl, r4
 800f3a6:	db19      	blt.n	800f3dc <_strtol_l.constprop.0+0xc0>
 800f3a8:	fb06 4603 	mla	r6, r6, r3, r4
 800f3ac:	f04f 0e01 	mov.w	lr, #1
 800f3b0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f3b4:	e7e8      	b.n	800f388 <_strtol_l.constprop.0+0x6c>
 800f3b6:	2c2b      	cmp	r4, #43	; 0x2b
 800f3b8:	bf04      	itt	eq
 800f3ba:	782c      	ldrbeq	r4, [r5, #0]
 800f3bc:	1cb5      	addeq	r5, r6, #2
 800f3be:	e7ca      	b.n	800f356 <_strtol_l.constprop.0+0x3a>
 800f3c0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800f3c4:	f1bc 0f19 	cmp.w	ip, #25
 800f3c8:	d801      	bhi.n	800f3ce <_strtol_l.constprop.0+0xb2>
 800f3ca:	3c37      	subs	r4, #55	; 0x37
 800f3cc:	e7e2      	b.n	800f394 <_strtol_l.constprop.0+0x78>
 800f3ce:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800f3d2:	f1bc 0f19 	cmp.w	ip, #25
 800f3d6:	d804      	bhi.n	800f3e2 <_strtol_l.constprop.0+0xc6>
 800f3d8:	3c57      	subs	r4, #87	; 0x57
 800f3da:	e7db      	b.n	800f394 <_strtol_l.constprop.0+0x78>
 800f3dc:	f04f 3eff 	mov.w	lr, #4294967295
 800f3e0:	e7e6      	b.n	800f3b0 <_strtol_l.constprop.0+0x94>
 800f3e2:	f1be 3fff 	cmp.w	lr, #4294967295
 800f3e6:	d105      	bne.n	800f3f4 <_strtol_l.constprop.0+0xd8>
 800f3e8:	2322      	movs	r3, #34	; 0x22
 800f3ea:	6003      	str	r3, [r0, #0]
 800f3ec:	4646      	mov	r6, r8
 800f3ee:	b942      	cbnz	r2, 800f402 <_strtol_l.constprop.0+0xe6>
 800f3f0:	4630      	mov	r0, r6
 800f3f2:	e79e      	b.n	800f332 <_strtol_l.constprop.0+0x16>
 800f3f4:	b107      	cbz	r7, 800f3f8 <_strtol_l.constprop.0+0xdc>
 800f3f6:	4276      	negs	r6, r6
 800f3f8:	2a00      	cmp	r2, #0
 800f3fa:	d0f9      	beq.n	800f3f0 <_strtol_l.constprop.0+0xd4>
 800f3fc:	f1be 0f00 	cmp.w	lr, #0
 800f400:	d000      	beq.n	800f404 <_strtol_l.constprop.0+0xe8>
 800f402:	1e69      	subs	r1, r5, #1
 800f404:	6011      	str	r1, [r2, #0]
 800f406:	e7f3      	b.n	800f3f0 <_strtol_l.constprop.0+0xd4>
 800f408:	2430      	movs	r4, #48	; 0x30
 800f40a:	2b00      	cmp	r3, #0
 800f40c:	d1b1      	bne.n	800f372 <_strtol_l.constprop.0+0x56>
 800f40e:	2308      	movs	r3, #8
 800f410:	e7af      	b.n	800f372 <_strtol_l.constprop.0+0x56>
 800f412:	2c30      	cmp	r4, #48	; 0x30
 800f414:	d0a5      	beq.n	800f362 <_strtol_l.constprop.0+0x46>
 800f416:	230a      	movs	r3, #10
 800f418:	e7ab      	b.n	800f372 <_strtol_l.constprop.0+0x56>
 800f41a:	bf00      	nop
 800f41c:	0801101e 	.word	0x0801101e

0800f420 <strtol>:
 800f420:	4613      	mov	r3, r2
 800f422:	460a      	mov	r2, r1
 800f424:	4601      	mov	r1, r0
 800f426:	4802      	ldr	r0, [pc, #8]	; (800f430 <strtol+0x10>)
 800f428:	6800      	ldr	r0, [r0, #0]
 800f42a:	f7ff bf77 	b.w	800f31c <_strtol_l.constprop.0>
 800f42e:	bf00      	nop
 800f430:	20000174 	.word	0x20000174

0800f434 <__utoa>:
 800f434:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f436:	4c1f      	ldr	r4, [pc, #124]	; (800f4b4 <__utoa+0x80>)
 800f438:	b08b      	sub	sp, #44	; 0x2c
 800f43a:	4605      	mov	r5, r0
 800f43c:	460b      	mov	r3, r1
 800f43e:	466e      	mov	r6, sp
 800f440:	f104 0c20 	add.w	ip, r4, #32
 800f444:	6820      	ldr	r0, [r4, #0]
 800f446:	6861      	ldr	r1, [r4, #4]
 800f448:	4637      	mov	r7, r6
 800f44a:	c703      	stmia	r7!, {r0, r1}
 800f44c:	3408      	adds	r4, #8
 800f44e:	4564      	cmp	r4, ip
 800f450:	463e      	mov	r6, r7
 800f452:	d1f7      	bne.n	800f444 <__utoa+0x10>
 800f454:	7921      	ldrb	r1, [r4, #4]
 800f456:	7139      	strb	r1, [r7, #4]
 800f458:	1e91      	subs	r1, r2, #2
 800f45a:	6820      	ldr	r0, [r4, #0]
 800f45c:	6038      	str	r0, [r7, #0]
 800f45e:	2922      	cmp	r1, #34	; 0x22
 800f460:	f04f 0100 	mov.w	r1, #0
 800f464:	d904      	bls.n	800f470 <__utoa+0x3c>
 800f466:	7019      	strb	r1, [r3, #0]
 800f468:	460b      	mov	r3, r1
 800f46a:	4618      	mov	r0, r3
 800f46c:	b00b      	add	sp, #44	; 0x2c
 800f46e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f470:	1e58      	subs	r0, r3, #1
 800f472:	4684      	mov	ip, r0
 800f474:	fbb5 f7f2 	udiv	r7, r5, r2
 800f478:	fb02 5617 	mls	r6, r2, r7, r5
 800f47c:	3628      	adds	r6, #40	; 0x28
 800f47e:	446e      	add	r6, sp
 800f480:	460c      	mov	r4, r1
 800f482:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800f486:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800f48a:	462e      	mov	r6, r5
 800f48c:	42b2      	cmp	r2, r6
 800f48e:	f101 0101 	add.w	r1, r1, #1
 800f492:	463d      	mov	r5, r7
 800f494:	d9ee      	bls.n	800f474 <__utoa+0x40>
 800f496:	2200      	movs	r2, #0
 800f498:	545a      	strb	r2, [r3, r1]
 800f49a:	1919      	adds	r1, r3, r4
 800f49c:	1aa5      	subs	r5, r4, r2
 800f49e:	42aa      	cmp	r2, r5
 800f4a0:	dae3      	bge.n	800f46a <__utoa+0x36>
 800f4a2:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800f4a6:	780e      	ldrb	r6, [r1, #0]
 800f4a8:	7006      	strb	r6, [r0, #0]
 800f4aa:	3201      	adds	r2, #1
 800f4ac:	f801 5901 	strb.w	r5, [r1], #-1
 800f4b0:	e7f4      	b.n	800f49c <__utoa+0x68>
 800f4b2:	bf00      	nop
 800f4b4:	08010ff8 	.word	0x08010ff8

0800f4b8 <std>:
 800f4b8:	2300      	movs	r3, #0
 800f4ba:	b510      	push	{r4, lr}
 800f4bc:	4604      	mov	r4, r0
 800f4be:	e9c0 3300 	strd	r3, r3, [r0]
 800f4c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f4c6:	6083      	str	r3, [r0, #8]
 800f4c8:	8181      	strh	r1, [r0, #12]
 800f4ca:	6643      	str	r3, [r0, #100]	; 0x64
 800f4cc:	81c2      	strh	r2, [r0, #14]
 800f4ce:	6183      	str	r3, [r0, #24]
 800f4d0:	4619      	mov	r1, r3
 800f4d2:	2208      	movs	r2, #8
 800f4d4:	305c      	adds	r0, #92	; 0x5c
 800f4d6:	f000 f902 	bl	800f6de <memset>
 800f4da:	4b05      	ldr	r3, [pc, #20]	; (800f4f0 <std+0x38>)
 800f4dc:	6263      	str	r3, [r4, #36]	; 0x24
 800f4de:	4b05      	ldr	r3, [pc, #20]	; (800f4f4 <std+0x3c>)
 800f4e0:	62a3      	str	r3, [r4, #40]	; 0x28
 800f4e2:	4b05      	ldr	r3, [pc, #20]	; (800f4f8 <std+0x40>)
 800f4e4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f4e6:	4b05      	ldr	r3, [pc, #20]	; (800f4fc <std+0x44>)
 800f4e8:	6224      	str	r4, [r4, #32]
 800f4ea:	6323      	str	r3, [r4, #48]	; 0x30
 800f4ec:	bd10      	pop	{r4, pc}
 800f4ee:	bf00      	nop
 800f4f0:	0800f659 	.word	0x0800f659
 800f4f4:	0800f67b 	.word	0x0800f67b
 800f4f8:	0800f6b3 	.word	0x0800f6b3
 800f4fc:	0800f6d7 	.word	0x0800f6d7

0800f500 <stdio_exit_handler>:
 800f500:	4a02      	ldr	r2, [pc, #8]	; (800f50c <stdio_exit_handler+0xc>)
 800f502:	4903      	ldr	r1, [pc, #12]	; (800f510 <stdio_exit_handler+0x10>)
 800f504:	4803      	ldr	r0, [pc, #12]	; (800f514 <stdio_exit_handler+0x14>)
 800f506:	f000 b869 	b.w	800f5dc <_fwalk_sglue>
 800f50a:	bf00      	nop
 800f50c:	2000011c 	.word	0x2000011c
 800f510:	080101d9 	.word	0x080101d9
 800f514:	20000128 	.word	0x20000128

0800f518 <cleanup_stdio>:
 800f518:	6841      	ldr	r1, [r0, #4]
 800f51a:	4b0c      	ldr	r3, [pc, #48]	; (800f54c <cleanup_stdio+0x34>)
 800f51c:	4299      	cmp	r1, r3
 800f51e:	b510      	push	{r4, lr}
 800f520:	4604      	mov	r4, r0
 800f522:	d001      	beq.n	800f528 <cleanup_stdio+0x10>
 800f524:	f000 fe58 	bl	80101d8 <_fflush_r>
 800f528:	68a1      	ldr	r1, [r4, #8]
 800f52a:	4b09      	ldr	r3, [pc, #36]	; (800f550 <cleanup_stdio+0x38>)
 800f52c:	4299      	cmp	r1, r3
 800f52e:	d002      	beq.n	800f536 <cleanup_stdio+0x1e>
 800f530:	4620      	mov	r0, r4
 800f532:	f000 fe51 	bl	80101d8 <_fflush_r>
 800f536:	68e1      	ldr	r1, [r4, #12]
 800f538:	4b06      	ldr	r3, [pc, #24]	; (800f554 <cleanup_stdio+0x3c>)
 800f53a:	4299      	cmp	r1, r3
 800f53c:	d004      	beq.n	800f548 <cleanup_stdio+0x30>
 800f53e:	4620      	mov	r0, r4
 800f540:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f544:	f000 be48 	b.w	80101d8 <_fflush_r>
 800f548:	bd10      	pop	{r4, pc}
 800f54a:	bf00      	nop
 800f54c:	20004074 	.word	0x20004074
 800f550:	200040dc 	.word	0x200040dc
 800f554:	20004144 	.word	0x20004144

0800f558 <global_stdio_init.part.0>:
 800f558:	b510      	push	{r4, lr}
 800f55a:	4b0b      	ldr	r3, [pc, #44]	; (800f588 <global_stdio_init.part.0+0x30>)
 800f55c:	4c0b      	ldr	r4, [pc, #44]	; (800f58c <global_stdio_init.part.0+0x34>)
 800f55e:	4a0c      	ldr	r2, [pc, #48]	; (800f590 <global_stdio_init.part.0+0x38>)
 800f560:	601a      	str	r2, [r3, #0]
 800f562:	4620      	mov	r0, r4
 800f564:	2200      	movs	r2, #0
 800f566:	2104      	movs	r1, #4
 800f568:	f7ff ffa6 	bl	800f4b8 <std>
 800f56c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800f570:	2201      	movs	r2, #1
 800f572:	2109      	movs	r1, #9
 800f574:	f7ff ffa0 	bl	800f4b8 <std>
 800f578:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800f57c:	2202      	movs	r2, #2
 800f57e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f582:	2112      	movs	r1, #18
 800f584:	f7ff bf98 	b.w	800f4b8 <std>
 800f588:	200041ac 	.word	0x200041ac
 800f58c:	20004074 	.word	0x20004074
 800f590:	0800f501 	.word	0x0800f501

0800f594 <__sfp_lock_acquire>:
 800f594:	4801      	ldr	r0, [pc, #4]	; (800f59c <__sfp_lock_acquire+0x8>)
 800f596:	f000 b989 	b.w	800f8ac <__retarget_lock_acquire_recursive>
 800f59a:	bf00      	nop
 800f59c:	200041b5 	.word	0x200041b5

0800f5a0 <__sfp_lock_release>:
 800f5a0:	4801      	ldr	r0, [pc, #4]	; (800f5a8 <__sfp_lock_release+0x8>)
 800f5a2:	f000 b984 	b.w	800f8ae <__retarget_lock_release_recursive>
 800f5a6:	bf00      	nop
 800f5a8:	200041b5 	.word	0x200041b5

0800f5ac <__sinit>:
 800f5ac:	b510      	push	{r4, lr}
 800f5ae:	4604      	mov	r4, r0
 800f5b0:	f7ff fff0 	bl	800f594 <__sfp_lock_acquire>
 800f5b4:	6a23      	ldr	r3, [r4, #32]
 800f5b6:	b11b      	cbz	r3, 800f5c0 <__sinit+0x14>
 800f5b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f5bc:	f7ff bff0 	b.w	800f5a0 <__sfp_lock_release>
 800f5c0:	4b04      	ldr	r3, [pc, #16]	; (800f5d4 <__sinit+0x28>)
 800f5c2:	6223      	str	r3, [r4, #32]
 800f5c4:	4b04      	ldr	r3, [pc, #16]	; (800f5d8 <__sinit+0x2c>)
 800f5c6:	681b      	ldr	r3, [r3, #0]
 800f5c8:	2b00      	cmp	r3, #0
 800f5ca:	d1f5      	bne.n	800f5b8 <__sinit+0xc>
 800f5cc:	f7ff ffc4 	bl	800f558 <global_stdio_init.part.0>
 800f5d0:	e7f2      	b.n	800f5b8 <__sinit+0xc>
 800f5d2:	bf00      	nop
 800f5d4:	0800f519 	.word	0x0800f519
 800f5d8:	200041ac 	.word	0x200041ac

0800f5dc <_fwalk_sglue>:
 800f5dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f5e0:	4607      	mov	r7, r0
 800f5e2:	4688      	mov	r8, r1
 800f5e4:	4614      	mov	r4, r2
 800f5e6:	2600      	movs	r6, #0
 800f5e8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f5ec:	f1b9 0901 	subs.w	r9, r9, #1
 800f5f0:	d505      	bpl.n	800f5fe <_fwalk_sglue+0x22>
 800f5f2:	6824      	ldr	r4, [r4, #0]
 800f5f4:	2c00      	cmp	r4, #0
 800f5f6:	d1f7      	bne.n	800f5e8 <_fwalk_sglue+0xc>
 800f5f8:	4630      	mov	r0, r6
 800f5fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f5fe:	89ab      	ldrh	r3, [r5, #12]
 800f600:	2b01      	cmp	r3, #1
 800f602:	d907      	bls.n	800f614 <_fwalk_sglue+0x38>
 800f604:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f608:	3301      	adds	r3, #1
 800f60a:	d003      	beq.n	800f614 <_fwalk_sglue+0x38>
 800f60c:	4629      	mov	r1, r5
 800f60e:	4638      	mov	r0, r7
 800f610:	47c0      	blx	r8
 800f612:	4306      	orrs	r6, r0
 800f614:	3568      	adds	r5, #104	; 0x68
 800f616:	e7e9      	b.n	800f5ec <_fwalk_sglue+0x10>

0800f618 <siprintf>:
 800f618:	b40e      	push	{r1, r2, r3}
 800f61a:	b500      	push	{lr}
 800f61c:	b09c      	sub	sp, #112	; 0x70
 800f61e:	ab1d      	add	r3, sp, #116	; 0x74
 800f620:	9002      	str	r0, [sp, #8]
 800f622:	9006      	str	r0, [sp, #24]
 800f624:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f628:	4809      	ldr	r0, [pc, #36]	; (800f650 <siprintf+0x38>)
 800f62a:	9107      	str	r1, [sp, #28]
 800f62c:	9104      	str	r1, [sp, #16]
 800f62e:	4909      	ldr	r1, [pc, #36]	; (800f654 <siprintf+0x3c>)
 800f630:	f853 2b04 	ldr.w	r2, [r3], #4
 800f634:	9105      	str	r1, [sp, #20]
 800f636:	6800      	ldr	r0, [r0, #0]
 800f638:	9301      	str	r3, [sp, #4]
 800f63a:	a902      	add	r1, sp, #8
 800f63c:	f000 fab8 	bl	800fbb0 <_svfiprintf_r>
 800f640:	9b02      	ldr	r3, [sp, #8]
 800f642:	2200      	movs	r2, #0
 800f644:	701a      	strb	r2, [r3, #0]
 800f646:	b01c      	add	sp, #112	; 0x70
 800f648:	f85d eb04 	ldr.w	lr, [sp], #4
 800f64c:	b003      	add	sp, #12
 800f64e:	4770      	bx	lr
 800f650:	20000174 	.word	0x20000174
 800f654:	ffff0208 	.word	0xffff0208

0800f658 <__sread>:
 800f658:	b510      	push	{r4, lr}
 800f65a:	460c      	mov	r4, r1
 800f65c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f660:	f000 f8d6 	bl	800f810 <_read_r>
 800f664:	2800      	cmp	r0, #0
 800f666:	bfab      	itete	ge
 800f668:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f66a:	89a3      	ldrhlt	r3, [r4, #12]
 800f66c:	181b      	addge	r3, r3, r0
 800f66e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f672:	bfac      	ite	ge
 800f674:	6563      	strge	r3, [r4, #84]	; 0x54
 800f676:	81a3      	strhlt	r3, [r4, #12]
 800f678:	bd10      	pop	{r4, pc}

0800f67a <__swrite>:
 800f67a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f67e:	461f      	mov	r7, r3
 800f680:	898b      	ldrh	r3, [r1, #12]
 800f682:	05db      	lsls	r3, r3, #23
 800f684:	4605      	mov	r5, r0
 800f686:	460c      	mov	r4, r1
 800f688:	4616      	mov	r6, r2
 800f68a:	d505      	bpl.n	800f698 <__swrite+0x1e>
 800f68c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f690:	2302      	movs	r3, #2
 800f692:	2200      	movs	r2, #0
 800f694:	f000 f8aa 	bl	800f7ec <_lseek_r>
 800f698:	89a3      	ldrh	r3, [r4, #12]
 800f69a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f69e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f6a2:	81a3      	strh	r3, [r4, #12]
 800f6a4:	4632      	mov	r2, r6
 800f6a6:	463b      	mov	r3, r7
 800f6a8:	4628      	mov	r0, r5
 800f6aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f6ae:	f000 b8c1 	b.w	800f834 <_write_r>

0800f6b2 <__sseek>:
 800f6b2:	b510      	push	{r4, lr}
 800f6b4:	460c      	mov	r4, r1
 800f6b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f6ba:	f000 f897 	bl	800f7ec <_lseek_r>
 800f6be:	1c43      	adds	r3, r0, #1
 800f6c0:	89a3      	ldrh	r3, [r4, #12]
 800f6c2:	bf15      	itete	ne
 800f6c4:	6560      	strne	r0, [r4, #84]	; 0x54
 800f6c6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f6ca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f6ce:	81a3      	strheq	r3, [r4, #12]
 800f6d0:	bf18      	it	ne
 800f6d2:	81a3      	strhne	r3, [r4, #12]
 800f6d4:	bd10      	pop	{r4, pc}

0800f6d6 <__sclose>:
 800f6d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f6da:	f000 b877 	b.w	800f7cc <_close_r>

0800f6de <memset>:
 800f6de:	4402      	add	r2, r0
 800f6e0:	4603      	mov	r3, r0
 800f6e2:	4293      	cmp	r3, r2
 800f6e4:	d100      	bne.n	800f6e8 <memset+0xa>
 800f6e6:	4770      	bx	lr
 800f6e8:	f803 1b01 	strb.w	r1, [r3], #1
 800f6ec:	e7f9      	b.n	800f6e2 <memset+0x4>

0800f6ee <strncat>:
 800f6ee:	b530      	push	{r4, r5, lr}
 800f6f0:	4604      	mov	r4, r0
 800f6f2:	7825      	ldrb	r5, [r4, #0]
 800f6f4:	4623      	mov	r3, r4
 800f6f6:	3401      	adds	r4, #1
 800f6f8:	2d00      	cmp	r5, #0
 800f6fa:	d1fa      	bne.n	800f6f2 <strncat+0x4>
 800f6fc:	3a01      	subs	r2, #1
 800f6fe:	d304      	bcc.n	800f70a <strncat+0x1c>
 800f700:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f704:	f803 4b01 	strb.w	r4, [r3], #1
 800f708:	b904      	cbnz	r4, 800f70c <strncat+0x1e>
 800f70a:	bd30      	pop	{r4, r5, pc}
 800f70c:	2a00      	cmp	r2, #0
 800f70e:	d1f5      	bne.n	800f6fc <strncat+0xe>
 800f710:	701a      	strb	r2, [r3, #0]
 800f712:	e7f3      	b.n	800f6fc <strncat+0xe>

0800f714 <strtok>:
 800f714:	4b16      	ldr	r3, [pc, #88]	; (800f770 <strtok+0x5c>)
 800f716:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f718:	681e      	ldr	r6, [r3, #0]
 800f71a:	6c74      	ldr	r4, [r6, #68]	; 0x44
 800f71c:	4605      	mov	r5, r0
 800f71e:	b9fc      	cbnz	r4, 800f760 <strtok+0x4c>
 800f720:	2050      	movs	r0, #80	; 0x50
 800f722:	9101      	str	r1, [sp, #4]
 800f724:	f000 f936 	bl	800f994 <malloc>
 800f728:	9901      	ldr	r1, [sp, #4]
 800f72a:	6470      	str	r0, [r6, #68]	; 0x44
 800f72c:	4602      	mov	r2, r0
 800f72e:	b920      	cbnz	r0, 800f73a <strtok+0x26>
 800f730:	4b10      	ldr	r3, [pc, #64]	; (800f774 <strtok+0x60>)
 800f732:	4811      	ldr	r0, [pc, #68]	; (800f778 <strtok+0x64>)
 800f734:	215b      	movs	r1, #91	; 0x5b
 800f736:	f000 f8c3 	bl	800f8c0 <__assert_func>
 800f73a:	e9c0 4400 	strd	r4, r4, [r0]
 800f73e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800f742:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800f746:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800f74a:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800f74e:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800f752:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800f756:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800f75a:	6184      	str	r4, [r0, #24]
 800f75c:	7704      	strb	r4, [r0, #28]
 800f75e:	6244      	str	r4, [r0, #36]	; 0x24
 800f760:	6c72      	ldr	r2, [r6, #68]	; 0x44
 800f762:	2301      	movs	r3, #1
 800f764:	4628      	mov	r0, r5
 800f766:	b002      	add	sp, #8
 800f768:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f76c:	f000 b806 	b.w	800f77c <__strtok_r>
 800f770:	20000174 	.word	0x20000174
 800f774:	0801111e 	.word	0x0801111e
 800f778:	08011135 	.word	0x08011135

0800f77c <__strtok_r>:
 800f77c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f77e:	b908      	cbnz	r0, 800f784 <__strtok_r+0x8>
 800f780:	6810      	ldr	r0, [r2, #0]
 800f782:	b188      	cbz	r0, 800f7a8 <__strtok_r+0x2c>
 800f784:	4604      	mov	r4, r0
 800f786:	4620      	mov	r0, r4
 800f788:	f814 5b01 	ldrb.w	r5, [r4], #1
 800f78c:	460f      	mov	r7, r1
 800f78e:	f817 6b01 	ldrb.w	r6, [r7], #1
 800f792:	b91e      	cbnz	r6, 800f79c <__strtok_r+0x20>
 800f794:	b965      	cbnz	r5, 800f7b0 <__strtok_r+0x34>
 800f796:	6015      	str	r5, [r2, #0]
 800f798:	4628      	mov	r0, r5
 800f79a:	e005      	b.n	800f7a8 <__strtok_r+0x2c>
 800f79c:	42b5      	cmp	r5, r6
 800f79e:	d1f6      	bne.n	800f78e <__strtok_r+0x12>
 800f7a0:	2b00      	cmp	r3, #0
 800f7a2:	d1f0      	bne.n	800f786 <__strtok_r+0xa>
 800f7a4:	6014      	str	r4, [r2, #0]
 800f7a6:	7003      	strb	r3, [r0, #0]
 800f7a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f7aa:	461c      	mov	r4, r3
 800f7ac:	e00c      	b.n	800f7c8 <__strtok_r+0x4c>
 800f7ae:	b915      	cbnz	r5, 800f7b6 <__strtok_r+0x3a>
 800f7b0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f7b4:	460e      	mov	r6, r1
 800f7b6:	f816 5b01 	ldrb.w	r5, [r6], #1
 800f7ba:	42ab      	cmp	r3, r5
 800f7bc:	d1f7      	bne.n	800f7ae <__strtok_r+0x32>
 800f7be:	2b00      	cmp	r3, #0
 800f7c0:	d0f3      	beq.n	800f7aa <__strtok_r+0x2e>
 800f7c2:	2300      	movs	r3, #0
 800f7c4:	f804 3c01 	strb.w	r3, [r4, #-1]
 800f7c8:	6014      	str	r4, [r2, #0]
 800f7ca:	e7ed      	b.n	800f7a8 <__strtok_r+0x2c>

0800f7cc <_close_r>:
 800f7cc:	b538      	push	{r3, r4, r5, lr}
 800f7ce:	4d06      	ldr	r5, [pc, #24]	; (800f7e8 <_close_r+0x1c>)
 800f7d0:	2300      	movs	r3, #0
 800f7d2:	4604      	mov	r4, r0
 800f7d4:	4608      	mov	r0, r1
 800f7d6:	602b      	str	r3, [r5, #0]
 800f7d8:	f7f3 f999 	bl	8002b0e <_close>
 800f7dc:	1c43      	adds	r3, r0, #1
 800f7de:	d102      	bne.n	800f7e6 <_close_r+0x1a>
 800f7e0:	682b      	ldr	r3, [r5, #0]
 800f7e2:	b103      	cbz	r3, 800f7e6 <_close_r+0x1a>
 800f7e4:	6023      	str	r3, [r4, #0]
 800f7e6:	bd38      	pop	{r3, r4, r5, pc}
 800f7e8:	200041b0 	.word	0x200041b0

0800f7ec <_lseek_r>:
 800f7ec:	b538      	push	{r3, r4, r5, lr}
 800f7ee:	4d07      	ldr	r5, [pc, #28]	; (800f80c <_lseek_r+0x20>)
 800f7f0:	4604      	mov	r4, r0
 800f7f2:	4608      	mov	r0, r1
 800f7f4:	4611      	mov	r1, r2
 800f7f6:	2200      	movs	r2, #0
 800f7f8:	602a      	str	r2, [r5, #0]
 800f7fa:	461a      	mov	r2, r3
 800f7fc:	f7f3 f9ae 	bl	8002b5c <_lseek>
 800f800:	1c43      	adds	r3, r0, #1
 800f802:	d102      	bne.n	800f80a <_lseek_r+0x1e>
 800f804:	682b      	ldr	r3, [r5, #0]
 800f806:	b103      	cbz	r3, 800f80a <_lseek_r+0x1e>
 800f808:	6023      	str	r3, [r4, #0]
 800f80a:	bd38      	pop	{r3, r4, r5, pc}
 800f80c:	200041b0 	.word	0x200041b0

0800f810 <_read_r>:
 800f810:	b538      	push	{r3, r4, r5, lr}
 800f812:	4d07      	ldr	r5, [pc, #28]	; (800f830 <_read_r+0x20>)
 800f814:	4604      	mov	r4, r0
 800f816:	4608      	mov	r0, r1
 800f818:	4611      	mov	r1, r2
 800f81a:	2200      	movs	r2, #0
 800f81c:	602a      	str	r2, [r5, #0]
 800f81e:	461a      	mov	r2, r3
 800f820:	f7f3 f93c 	bl	8002a9c <_read>
 800f824:	1c43      	adds	r3, r0, #1
 800f826:	d102      	bne.n	800f82e <_read_r+0x1e>
 800f828:	682b      	ldr	r3, [r5, #0]
 800f82a:	b103      	cbz	r3, 800f82e <_read_r+0x1e>
 800f82c:	6023      	str	r3, [r4, #0]
 800f82e:	bd38      	pop	{r3, r4, r5, pc}
 800f830:	200041b0 	.word	0x200041b0

0800f834 <_write_r>:
 800f834:	b538      	push	{r3, r4, r5, lr}
 800f836:	4d07      	ldr	r5, [pc, #28]	; (800f854 <_write_r+0x20>)
 800f838:	4604      	mov	r4, r0
 800f83a:	4608      	mov	r0, r1
 800f83c:	4611      	mov	r1, r2
 800f83e:	2200      	movs	r2, #0
 800f840:	602a      	str	r2, [r5, #0]
 800f842:	461a      	mov	r2, r3
 800f844:	f7f3 f947 	bl	8002ad6 <_write>
 800f848:	1c43      	adds	r3, r0, #1
 800f84a:	d102      	bne.n	800f852 <_write_r+0x1e>
 800f84c:	682b      	ldr	r3, [r5, #0]
 800f84e:	b103      	cbz	r3, 800f852 <_write_r+0x1e>
 800f850:	6023      	str	r3, [r4, #0]
 800f852:	bd38      	pop	{r3, r4, r5, pc}
 800f854:	200041b0 	.word	0x200041b0

0800f858 <__errno>:
 800f858:	4b01      	ldr	r3, [pc, #4]	; (800f860 <__errno+0x8>)
 800f85a:	6818      	ldr	r0, [r3, #0]
 800f85c:	4770      	bx	lr
 800f85e:	bf00      	nop
 800f860:	20000174 	.word	0x20000174

0800f864 <__libc_init_array>:
 800f864:	b570      	push	{r4, r5, r6, lr}
 800f866:	4d0d      	ldr	r5, [pc, #52]	; (800f89c <__libc_init_array+0x38>)
 800f868:	4c0d      	ldr	r4, [pc, #52]	; (800f8a0 <__libc_init_array+0x3c>)
 800f86a:	1b64      	subs	r4, r4, r5
 800f86c:	10a4      	asrs	r4, r4, #2
 800f86e:	2600      	movs	r6, #0
 800f870:	42a6      	cmp	r6, r4
 800f872:	d109      	bne.n	800f888 <__libc_init_array+0x24>
 800f874:	4d0b      	ldr	r5, [pc, #44]	; (800f8a4 <__libc_init_array+0x40>)
 800f876:	4c0c      	ldr	r4, [pc, #48]	; (800f8a8 <__libc_init_array+0x44>)
 800f878:	f001 f800 	bl	801087c <_init>
 800f87c:	1b64      	subs	r4, r4, r5
 800f87e:	10a4      	asrs	r4, r4, #2
 800f880:	2600      	movs	r6, #0
 800f882:	42a6      	cmp	r6, r4
 800f884:	d105      	bne.n	800f892 <__libc_init_array+0x2e>
 800f886:	bd70      	pop	{r4, r5, r6, pc}
 800f888:	f855 3b04 	ldr.w	r3, [r5], #4
 800f88c:	4798      	blx	r3
 800f88e:	3601      	adds	r6, #1
 800f890:	e7ee      	b.n	800f870 <__libc_init_array+0xc>
 800f892:	f855 3b04 	ldr.w	r3, [r5], #4
 800f896:	4798      	blx	r3
 800f898:	3601      	adds	r6, #1
 800f89a:	e7f2      	b.n	800f882 <__libc_init_array+0x1e>
 800f89c:	08011208 	.word	0x08011208
 800f8a0:	08011208 	.word	0x08011208
 800f8a4:	08011208 	.word	0x08011208
 800f8a8:	0801120c 	.word	0x0801120c

0800f8ac <__retarget_lock_acquire_recursive>:
 800f8ac:	4770      	bx	lr

0800f8ae <__retarget_lock_release_recursive>:
 800f8ae:	4770      	bx	lr

0800f8b0 <strcpy>:
 800f8b0:	4603      	mov	r3, r0
 800f8b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f8b6:	f803 2b01 	strb.w	r2, [r3], #1
 800f8ba:	2a00      	cmp	r2, #0
 800f8bc:	d1f9      	bne.n	800f8b2 <strcpy+0x2>
 800f8be:	4770      	bx	lr

0800f8c0 <__assert_func>:
 800f8c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f8c2:	4614      	mov	r4, r2
 800f8c4:	461a      	mov	r2, r3
 800f8c6:	4b09      	ldr	r3, [pc, #36]	; (800f8ec <__assert_func+0x2c>)
 800f8c8:	681b      	ldr	r3, [r3, #0]
 800f8ca:	4605      	mov	r5, r0
 800f8cc:	68d8      	ldr	r0, [r3, #12]
 800f8ce:	b14c      	cbz	r4, 800f8e4 <__assert_func+0x24>
 800f8d0:	4b07      	ldr	r3, [pc, #28]	; (800f8f0 <__assert_func+0x30>)
 800f8d2:	9100      	str	r1, [sp, #0]
 800f8d4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f8d8:	4906      	ldr	r1, [pc, #24]	; (800f8f4 <__assert_func+0x34>)
 800f8da:	462b      	mov	r3, r5
 800f8dc:	f000 fca4 	bl	8010228 <fiprintf>
 800f8e0:	f000 fcec 	bl	80102bc <abort>
 800f8e4:	4b04      	ldr	r3, [pc, #16]	; (800f8f8 <__assert_func+0x38>)
 800f8e6:	461c      	mov	r4, r3
 800f8e8:	e7f3      	b.n	800f8d2 <__assert_func+0x12>
 800f8ea:	bf00      	nop
 800f8ec:	20000174 	.word	0x20000174
 800f8f0:	0801118f 	.word	0x0801118f
 800f8f4:	0801119c 	.word	0x0801119c
 800f8f8:	080111ca 	.word	0x080111ca

0800f8fc <_free_r>:
 800f8fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f8fe:	2900      	cmp	r1, #0
 800f900:	d044      	beq.n	800f98c <_free_r+0x90>
 800f902:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f906:	9001      	str	r0, [sp, #4]
 800f908:	2b00      	cmp	r3, #0
 800f90a:	f1a1 0404 	sub.w	r4, r1, #4
 800f90e:	bfb8      	it	lt
 800f910:	18e4      	addlt	r4, r4, r3
 800f912:	f000 f8e7 	bl	800fae4 <__malloc_lock>
 800f916:	4a1e      	ldr	r2, [pc, #120]	; (800f990 <_free_r+0x94>)
 800f918:	9801      	ldr	r0, [sp, #4]
 800f91a:	6813      	ldr	r3, [r2, #0]
 800f91c:	b933      	cbnz	r3, 800f92c <_free_r+0x30>
 800f91e:	6063      	str	r3, [r4, #4]
 800f920:	6014      	str	r4, [r2, #0]
 800f922:	b003      	add	sp, #12
 800f924:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f928:	f000 b8e2 	b.w	800faf0 <__malloc_unlock>
 800f92c:	42a3      	cmp	r3, r4
 800f92e:	d908      	bls.n	800f942 <_free_r+0x46>
 800f930:	6825      	ldr	r5, [r4, #0]
 800f932:	1961      	adds	r1, r4, r5
 800f934:	428b      	cmp	r3, r1
 800f936:	bf01      	itttt	eq
 800f938:	6819      	ldreq	r1, [r3, #0]
 800f93a:	685b      	ldreq	r3, [r3, #4]
 800f93c:	1949      	addeq	r1, r1, r5
 800f93e:	6021      	streq	r1, [r4, #0]
 800f940:	e7ed      	b.n	800f91e <_free_r+0x22>
 800f942:	461a      	mov	r2, r3
 800f944:	685b      	ldr	r3, [r3, #4]
 800f946:	b10b      	cbz	r3, 800f94c <_free_r+0x50>
 800f948:	42a3      	cmp	r3, r4
 800f94a:	d9fa      	bls.n	800f942 <_free_r+0x46>
 800f94c:	6811      	ldr	r1, [r2, #0]
 800f94e:	1855      	adds	r5, r2, r1
 800f950:	42a5      	cmp	r5, r4
 800f952:	d10b      	bne.n	800f96c <_free_r+0x70>
 800f954:	6824      	ldr	r4, [r4, #0]
 800f956:	4421      	add	r1, r4
 800f958:	1854      	adds	r4, r2, r1
 800f95a:	42a3      	cmp	r3, r4
 800f95c:	6011      	str	r1, [r2, #0]
 800f95e:	d1e0      	bne.n	800f922 <_free_r+0x26>
 800f960:	681c      	ldr	r4, [r3, #0]
 800f962:	685b      	ldr	r3, [r3, #4]
 800f964:	6053      	str	r3, [r2, #4]
 800f966:	440c      	add	r4, r1
 800f968:	6014      	str	r4, [r2, #0]
 800f96a:	e7da      	b.n	800f922 <_free_r+0x26>
 800f96c:	d902      	bls.n	800f974 <_free_r+0x78>
 800f96e:	230c      	movs	r3, #12
 800f970:	6003      	str	r3, [r0, #0]
 800f972:	e7d6      	b.n	800f922 <_free_r+0x26>
 800f974:	6825      	ldr	r5, [r4, #0]
 800f976:	1961      	adds	r1, r4, r5
 800f978:	428b      	cmp	r3, r1
 800f97a:	bf04      	itt	eq
 800f97c:	6819      	ldreq	r1, [r3, #0]
 800f97e:	685b      	ldreq	r3, [r3, #4]
 800f980:	6063      	str	r3, [r4, #4]
 800f982:	bf04      	itt	eq
 800f984:	1949      	addeq	r1, r1, r5
 800f986:	6021      	streq	r1, [r4, #0]
 800f988:	6054      	str	r4, [r2, #4]
 800f98a:	e7ca      	b.n	800f922 <_free_r+0x26>
 800f98c:	b003      	add	sp, #12
 800f98e:	bd30      	pop	{r4, r5, pc}
 800f990:	200041b8 	.word	0x200041b8

0800f994 <malloc>:
 800f994:	4b02      	ldr	r3, [pc, #8]	; (800f9a0 <malloc+0xc>)
 800f996:	4601      	mov	r1, r0
 800f998:	6818      	ldr	r0, [r3, #0]
 800f99a:	f000 b823 	b.w	800f9e4 <_malloc_r>
 800f99e:	bf00      	nop
 800f9a0:	20000174 	.word	0x20000174

0800f9a4 <sbrk_aligned>:
 800f9a4:	b570      	push	{r4, r5, r6, lr}
 800f9a6:	4e0e      	ldr	r6, [pc, #56]	; (800f9e0 <sbrk_aligned+0x3c>)
 800f9a8:	460c      	mov	r4, r1
 800f9aa:	6831      	ldr	r1, [r6, #0]
 800f9ac:	4605      	mov	r5, r0
 800f9ae:	b911      	cbnz	r1, 800f9b6 <sbrk_aligned+0x12>
 800f9b0:	f000 fc66 	bl	8010280 <_sbrk_r>
 800f9b4:	6030      	str	r0, [r6, #0]
 800f9b6:	4621      	mov	r1, r4
 800f9b8:	4628      	mov	r0, r5
 800f9ba:	f000 fc61 	bl	8010280 <_sbrk_r>
 800f9be:	1c43      	adds	r3, r0, #1
 800f9c0:	d00a      	beq.n	800f9d8 <sbrk_aligned+0x34>
 800f9c2:	1cc4      	adds	r4, r0, #3
 800f9c4:	f024 0403 	bic.w	r4, r4, #3
 800f9c8:	42a0      	cmp	r0, r4
 800f9ca:	d007      	beq.n	800f9dc <sbrk_aligned+0x38>
 800f9cc:	1a21      	subs	r1, r4, r0
 800f9ce:	4628      	mov	r0, r5
 800f9d0:	f000 fc56 	bl	8010280 <_sbrk_r>
 800f9d4:	3001      	adds	r0, #1
 800f9d6:	d101      	bne.n	800f9dc <sbrk_aligned+0x38>
 800f9d8:	f04f 34ff 	mov.w	r4, #4294967295
 800f9dc:	4620      	mov	r0, r4
 800f9de:	bd70      	pop	{r4, r5, r6, pc}
 800f9e0:	200041bc 	.word	0x200041bc

0800f9e4 <_malloc_r>:
 800f9e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f9e8:	1ccd      	adds	r5, r1, #3
 800f9ea:	f025 0503 	bic.w	r5, r5, #3
 800f9ee:	3508      	adds	r5, #8
 800f9f0:	2d0c      	cmp	r5, #12
 800f9f2:	bf38      	it	cc
 800f9f4:	250c      	movcc	r5, #12
 800f9f6:	2d00      	cmp	r5, #0
 800f9f8:	4607      	mov	r7, r0
 800f9fa:	db01      	blt.n	800fa00 <_malloc_r+0x1c>
 800f9fc:	42a9      	cmp	r1, r5
 800f9fe:	d905      	bls.n	800fa0c <_malloc_r+0x28>
 800fa00:	230c      	movs	r3, #12
 800fa02:	603b      	str	r3, [r7, #0]
 800fa04:	2600      	movs	r6, #0
 800fa06:	4630      	mov	r0, r6
 800fa08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fa0c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800fae0 <_malloc_r+0xfc>
 800fa10:	f000 f868 	bl	800fae4 <__malloc_lock>
 800fa14:	f8d8 3000 	ldr.w	r3, [r8]
 800fa18:	461c      	mov	r4, r3
 800fa1a:	bb5c      	cbnz	r4, 800fa74 <_malloc_r+0x90>
 800fa1c:	4629      	mov	r1, r5
 800fa1e:	4638      	mov	r0, r7
 800fa20:	f7ff ffc0 	bl	800f9a4 <sbrk_aligned>
 800fa24:	1c43      	adds	r3, r0, #1
 800fa26:	4604      	mov	r4, r0
 800fa28:	d155      	bne.n	800fad6 <_malloc_r+0xf2>
 800fa2a:	f8d8 4000 	ldr.w	r4, [r8]
 800fa2e:	4626      	mov	r6, r4
 800fa30:	2e00      	cmp	r6, #0
 800fa32:	d145      	bne.n	800fac0 <_malloc_r+0xdc>
 800fa34:	2c00      	cmp	r4, #0
 800fa36:	d048      	beq.n	800faca <_malloc_r+0xe6>
 800fa38:	6823      	ldr	r3, [r4, #0]
 800fa3a:	4631      	mov	r1, r6
 800fa3c:	4638      	mov	r0, r7
 800fa3e:	eb04 0903 	add.w	r9, r4, r3
 800fa42:	f000 fc1d 	bl	8010280 <_sbrk_r>
 800fa46:	4581      	cmp	r9, r0
 800fa48:	d13f      	bne.n	800faca <_malloc_r+0xe6>
 800fa4a:	6821      	ldr	r1, [r4, #0]
 800fa4c:	1a6d      	subs	r5, r5, r1
 800fa4e:	4629      	mov	r1, r5
 800fa50:	4638      	mov	r0, r7
 800fa52:	f7ff ffa7 	bl	800f9a4 <sbrk_aligned>
 800fa56:	3001      	adds	r0, #1
 800fa58:	d037      	beq.n	800faca <_malloc_r+0xe6>
 800fa5a:	6823      	ldr	r3, [r4, #0]
 800fa5c:	442b      	add	r3, r5
 800fa5e:	6023      	str	r3, [r4, #0]
 800fa60:	f8d8 3000 	ldr.w	r3, [r8]
 800fa64:	2b00      	cmp	r3, #0
 800fa66:	d038      	beq.n	800fada <_malloc_r+0xf6>
 800fa68:	685a      	ldr	r2, [r3, #4]
 800fa6a:	42a2      	cmp	r2, r4
 800fa6c:	d12b      	bne.n	800fac6 <_malloc_r+0xe2>
 800fa6e:	2200      	movs	r2, #0
 800fa70:	605a      	str	r2, [r3, #4]
 800fa72:	e00f      	b.n	800fa94 <_malloc_r+0xb0>
 800fa74:	6822      	ldr	r2, [r4, #0]
 800fa76:	1b52      	subs	r2, r2, r5
 800fa78:	d41f      	bmi.n	800faba <_malloc_r+0xd6>
 800fa7a:	2a0b      	cmp	r2, #11
 800fa7c:	d917      	bls.n	800faae <_malloc_r+0xca>
 800fa7e:	1961      	adds	r1, r4, r5
 800fa80:	42a3      	cmp	r3, r4
 800fa82:	6025      	str	r5, [r4, #0]
 800fa84:	bf18      	it	ne
 800fa86:	6059      	strne	r1, [r3, #4]
 800fa88:	6863      	ldr	r3, [r4, #4]
 800fa8a:	bf08      	it	eq
 800fa8c:	f8c8 1000 	streq.w	r1, [r8]
 800fa90:	5162      	str	r2, [r4, r5]
 800fa92:	604b      	str	r3, [r1, #4]
 800fa94:	4638      	mov	r0, r7
 800fa96:	f104 060b 	add.w	r6, r4, #11
 800fa9a:	f000 f829 	bl	800faf0 <__malloc_unlock>
 800fa9e:	f026 0607 	bic.w	r6, r6, #7
 800faa2:	1d23      	adds	r3, r4, #4
 800faa4:	1af2      	subs	r2, r6, r3
 800faa6:	d0ae      	beq.n	800fa06 <_malloc_r+0x22>
 800faa8:	1b9b      	subs	r3, r3, r6
 800faaa:	50a3      	str	r3, [r4, r2]
 800faac:	e7ab      	b.n	800fa06 <_malloc_r+0x22>
 800faae:	42a3      	cmp	r3, r4
 800fab0:	6862      	ldr	r2, [r4, #4]
 800fab2:	d1dd      	bne.n	800fa70 <_malloc_r+0x8c>
 800fab4:	f8c8 2000 	str.w	r2, [r8]
 800fab8:	e7ec      	b.n	800fa94 <_malloc_r+0xb0>
 800faba:	4623      	mov	r3, r4
 800fabc:	6864      	ldr	r4, [r4, #4]
 800fabe:	e7ac      	b.n	800fa1a <_malloc_r+0x36>
 800fac0:	4634      	mov	r4, r6
 800fac2:	6876      	ldr	r6, [r6, #4]
 800fac4:	e7b4      	b.n	800fa30 <_malloc_r+0x4c>
 800fac6:	4613      	mov	r3, r2
 800fac8:	e7cc      	b.n	800fa64 <_malloc_r+0x80>
 800faca:	230c      	movs	r3, #12
 800facc:	603b      	str	r3, [r7, #0]
 800face:	4638      	mov	r0, r7
 800fad0:	f000 f80e 	bl	800faf0 <__malloc_unlock>
 800fad4:	e797      	b.n	800fa06 <_malloc_r+0x22>
 800fad6:	6025      	str	r5, [r4, #0]
 800fad8:	e7dc      	b.n	800fa94 <_malloc_r+0xb0>
 800fada:	605b      	str	r3, [r3, #4]
 800fadc:	deff      	udf	#255	; 0xff
 800fade:	bf00      	nop
 800fae0:	200041b8 	.word	0x200041b8

0800fae4 <__malloc_lock>:
 800fae4:	4801      	ldr	r0, [pc, #4]	; (800faec <__malloc_lock+0x8>)
 800fae6:	f7ff bee1 	b.w	800f8ac <__retarget_lock_acquire_recursive>
 800faea:	bf00      	nop
 800faec:	200041b4 	.word	0x200041b4

0800faf0 <__malloc_unlock>:
 800faf0:	4801      	ldr	r0, [pc, #4]	; (800faf8 <__malloc_unlock+0x8>)
 800faf2:	f7ff bedc 	b.w	800f8ae <__retarget_lock_release_recursive>
 800faf6:	bf00      	nop
 800faf8:	200041b4 	.word	0x200041b4

0800fafc <__ssputs_r>:
 800fafc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fb00:	688e      	ldr	r6, [r1, #8]
 800fb02:	461f      	mov	r7, r3
 800fb04:	42be      	cmp	r6, r7
 800fb06:	680b      	ldr	r3, [r1, #0]
 800fb08:	4682      	mov	sl, r0
 800fb0a:	460c      	mov	r4, r1
 800fb0c:	4690      	mov	r8, r2
 800fb0e:	d82c      	bhi.n	800fb6a <__ssputs_r+0x6e>
 800fb10:	898a      	ldrh	r2, [r1, #12]
 800fb12:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800fb16:	d026      	beq.n	800fb66 <__ssputs_r+0x6a>
 800fb18:	6965      	ldr	r5, [r4, #20]
 800fb1a:	6909      	ldr	r1, [r1, #16]
 800fb1c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800fb20:	eba3 0901 	sub.w	r9, r3, r1
 800fb24:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800fb28:	1c7b      	adds	r3, r7, #1
 800fb2a:	444b      	add	r3, r9
 800fb2c:	106d      	asrs	r5, r5, #1
 800fb2e:	429d      	cmp	r5, r3
 800fb30:	bf38      	it	cc
 800fb32:	461d      	movcc	r5, r3
 800fb34:	0553      	lsls	r3, r2, #21
 800fb36:	d527      	bpl.n	800fb88 <__ssputs_r+0x8c>
 800fb38:	4629      	mov	r1, r5
 800fb3a:	f7ff ff53 	bl	800f9e4 <_malloc_r>
 800fb3e:	4606      	mov	r6, r0
 800fb40:	b360      	cbz	r0, 800fb9c <__ssputs_r+0xa0>
 800fb42:	6921      	ldr	r1, [r4, #16]
 800fb44:	464a      	mov	r2, r9
 800fb46:	f000 fbab 	bl	80102a0 <memcpy>
 800fb4a:	89a3      	ldrh	r3, [r4, #12]
 800fb4c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800fb50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fb54:	81a3      	strh	r3, [r4, #12]
 800fb56:	6126      	str	r6, [r4, #16]
 800fb58:	6165      	str	r5, [r4, #20]
 800fb5a:	444e      	add	r6, r9
 800fb5c:	eba5 0509 	sub.w	r5, r5, r9
 800fb60:	6026      	str	r6, [r4, #0]
 800fb62:	60a5      	str	r5, [r4, #8]
 800fb64:	463e      	mov	r6, r7
 800fb66:	42be      	cmp	r6, r7
 800fb68:	d900      	bls.n	800fb6c <__ssputs_r+0x70>
 800fb6a:	463e      	mov	r6, r7
 800fb6c:	6820      	ldr	r0, [r4, #0]
 800fb6e:	4632      	mov	r2, r6
 800fb70:	4641      	mov	r1, r8
 800fb72:	f000 fb6b 	bl	801024c <memmove>
 800fb76:	68a3      	ldr	r3, [r4, #8]
 800fb78:	1b9b      	subs	r3, r3, r6
 800fb7a:	60a3      	str	r3, [r4, #8]
 800fb7c:	6823      	ldr	r3, [r4, #0]
 800fb7e:	4433      	add	r3, r6
 800fb80:	6023      	str	r3, [r4, #0]
 800fb82:	2000      	movs	r0, #0
 800fb84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fb88:	462a      	mov	r2, r5
 800fb8a:	f000 fb9e 	bl	80102ca <_realloc_r>
 800fb8e:	4606      	mov	r6, r0
 800fb90:	2800      	cmp	r0, #0
 800fb92:	d1e0      	bne.n	800fb56 <__ssputs_r+0x5a>
 800fb94:	6921      	ldr	r1, [r4, #16]
 800fb96:	4650      	mov	r0, sl
 800fb98:	f7ff feb0 	bl	800f8fc <_free_r>
 800fb9c:	230c      	movs	r3, #12
 800fb9e:	f8ca 3000 	str.w	r3, [sl]
 800fba2:	89a3      	ldrh	r3, [r4, #12]
 800fba4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fba8:	81a3      	strh	r3, [r4, #12]
 800fbaa:	f04f 30ff 	mov.w	r0, #4294967295
 800fbae:	e7e9      	b.n	800fb84 <__ssputs_r+0x88>

0800fbb0 <_svfiprintf_r>:
 800fbb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fbb4:	4698      	mov	r8, r3
 800fbb6:	898b      	ldrh	r3, [r1, #12]
 800fbb8:	061b      	lsls	r3, r3, #24
 800fbba:	b09d      	sub	sp, #116	; 0x74
 800fbbc:	4607      	mov	r7, r0
 800fbbe:	460d      	mov	r5, r1
 800fbc0:	4614      	mov	r4, r2
 800fbc2:	d50e      	bpl.n	800fbe2 <_svfiprintf_r+0x32>
 800fbc4:	690b      	ldr	r3, [r1, #16]
 800fbc6:	b963      	cbnz	r3, 800fbe2 <_svfiprintf_r+0x32>
 800fbc8:	2140      	movs	r1, #64	; 0x40
 800fbca:	f7ff ff0b 	bl	800f9e4 <_malloc_r>
 800fbce:	6028      	str	r0, [r5, #0]
 800fbd0:	6128      	str	r0, [r5, #16]
 800fbd2:	b920      	cbnz	r0, 800fbde <_svfiprintf_r+0x2e>
 800fbd4:	230c      	movs	r3, #12
 800fbd6:	603b      	str	r3, [r7, #0]
 800fbd8:	f04f 30ff 	mov.w	r0, #4294967295
 800fbdc:	e0d0      	b.n	800fd80 <_svfiprintf_r+0x1d0>
 800fbde:	2340      	movs	r3, #64	; 0x40
 800fbe0:	616b      	str	r3, [r5, #20]
 800fbe2:	2300      	movs	r3, #0
 800fbe4:	9309      	str	r3, [sp, #36]	; 0x24
 800fbe6:	2320      	movs	r3, #32
 800fbe8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fbec:	f8cd 800c 	str.w	r8, [sp, #12]
 800fbf0:	2330      	movs	r3, #48	; 0x30
 800fbf2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800fd98 <_svfiprintf_r+0x1e8>
 800fbf6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fbfa:	f04f 0901 	mov.w	r9, #1
 800fbfe:	4623      	mov	r3, r4
 800fc00:	469a      	mov	sl, r3
 800fc02:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fc06:	b10a      	cbz	r2, 800fc0c <_svfiprintf_r+0x5c>
 800fc08:	2a25      	cmp	r2, #37	; 0x25
 800fc0a:	d1f9      	bne.n	800fc00 <_svfiprintf_r+0x50>
 800fc0c:	ebba 0b04 	subs.w	fp, sl, r4
 800fc10:	d00b      	beq.n	800fc2a <_svfiprintf_r+0x7a>
 800fc12:	465b      	mov	r3, fp
 800fc14:	4622      	mov	r2, r4
 800fc16:	4629      	mov	r1, r5
 800fc18:	4638      	mov	r0, r7
 800fc1a:	f7ff ff6f 	bl	800fafc <__ssputs_r>
 800fc1e:	3001      	adds	r0, #1
 800fc20:	f000 80a9 	beq.w	800fd76 <_svfiprintf_r+0x1c6>
 800fc24:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fc26:	445a      	add	r2, fp
 800fc28:	9209      	str	r2, [sp, #36]	; 0x24
 800fc2a:	f89a 3000 	ldrb.w	r3, [sl]
 800fc2e:	2b00      	cmp	r3, #0
 800fc30:	f000 80a1 	beq.w	800fd76 <_svfiprintf_r+0x1c6>
 800fc34:	2300      	movs	r3, #0
 800fc36:	f04f 32ff 	mov.w	r2, #4294967295
 800fc3a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fc3e:	f10a 0a01 	add.w	sl, sl, #1
 800fc42:	9304      	str	r3, [sp, #16]
 800fc44:	9307      	str	r3, [sp, #28]
 800fc46:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fc4a:	931a      	str	r3, [sp, #104]	; 0x68
 800fc4c:	4654      	mov	r4, sl
 800fc4e:	2205      	movs	r2, #5
 800fc50:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fc54:	4850      	ldr	r0, [pc, #320]	; (800fd98 <_svfiprintf_r+0x1e8>)
 800fc56:	f7f0 fadb 	bl	8000210 <memchr>
 800fc5a:	9a04      	ldr	r2, [sp, #16]
 800fc5c:	b9d8      	cbnz	r0, 800fc96 <_svfiprintf_r+0xe6>
 800fc5e:	06d0      	lsls	r0, r2, #27
 800fc60:	bf44      	itt	mi
 800fc62:	2320      	movmi	r3, #32
 800fc64:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fc68:	0711      	lsls	r1, r2, #28
 800fc6a:	bf44      	itt	mi
 800fc6c:	232b      	movmi	r3, #43	; 0x2b
 800fc6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fc72:	f89a 3000 	ldrb.w	r3, [sl]
 800fc76:	2b2a      	cmp	r3, #42	; 0x2a
 800fc78:	d015      	beq.n	800fca6 <_svfiprintf_r+0xf6>
 800fc7a:	9a07      	ldr	r2, [sp, #28]
 800fc7c:	4654      	mov	r4, sl
 800fc7e:	2000      	movs	r0, #0
 800fc80:	f04f 0c0a 	mov.w	ip, #10
 800fc84:	4621      	mov	r1, r4
 800fc86:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fc8a:	3b30      	subs	r3, #48	; 0x30
 800fc8c:	2b09      	cmp	r3, #9
 800fc8e:	d94d      	bls.n	800fd2c <_svfiprintf_r+0x17c>
 800fc90:	b1b0      	cbz	r0, 800fcc0 <_svfiprintf_r+0x110>
 800fc92:	9207      	str	r2, [sp, #28]
 800fc94:	e014      	b.n	800fcc0 <_svfiprintf_r+0x110>
 800fc96:	eba0 0308 	sub.w	r3, r0, r8
 800fc9a:	fa09 f303 	lsl.w	r3, r9, r3
 800fc9e:	4313      	orrs	r3, r2
 800fca0:	9304      	str	r3, [sp, #16]
 800fca2:	46a2      	mov	sl, r4
 800fca4:	e7d2      	b.n	800fc4c <_svfiprintf_r+0x9c>
 800fca6:	9b03      	ldr	r3, [sp, #12]
 800fca8:	1d19      	adds	r1, r3, #4
 800fcaa:	681b      	ldr	r3, [r3, #0]
 800fcac:	9103      	str	r1, [sp, #12]
 800fcae:	2b00      	cmp	r3, #0
 800fcb0:	bfbb      	ittet	lt
 800fcb2:	425b      	neglt	r3, r3
 800fcb4:	f042 0202 	orrlt.w	r2, r2, #2
 800fcb8:	9307      	strge	r3, [sp, #28]
 800fcba:	9307      	strlt	r3, [sp, #28]
 800fcbc:	bfb8      	it	lt
 800fcbe:	9204      	strlt	r2, [sp, #16]
 800fcc0:	7823      	ldrb	r3, [r4, #0]
 800fcc2:	2b2e      	cmp	r3, #46	; 0x2e
 800fcc4:	d10c      	bne.n	800fce0 <_svfiprintf_r+0x130>
 800fcc6:	7863      	ldrb	r3, [r4, #1]
 800fcc8:	2b2a      	cmp	r3, #42	; 0x2a
 800fcca:	d134      	bne.n	800fd36 <_svfiprintf_r+0x186>
 800fccc:	9b03      	ldr	r3, [sp, #12]
 800fcce:	1d1a      	adds	r2, r3, #4
 800fcd0:	681b      	ldr	r3, [r3, #0]
 800fcd2:	9203      	str	r2, [sp, #12]
 800fcd4:	2b00      	cmp	r3, #0
 800fcd6:	bfb8      	it	lt
 800fcd8:	f04f 33ff 	movlt.w	r3, #4294967295
 800fcdc:	3402      	adds	r4, #2
 800fcde:	9305      	str	r3, [sp, #20]
 800fce0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800fda8 <_svfiprintf_r+0x1f8>
 800fce4:	7821      	ldrb	r1, [r4, #0]
 800fce6:	2203      	movs	r2, #3
 800fce8:	4650      	mov	r0, sl
 800fcea:	f7f0 fa91 	bl	8000210 <memchr>
 800fcee:	b138      	cbz	r0, 800fd00 <_svfiprintf_r+0x150>
 800fcf0:	9b04      	ldr	r3, [sp, #16]
 800fcf2:	eba0 000a 	sub.w	r0, r0, sl
 800fcf6:	2240      	movs	r2, #64	; 0x40
 800fcf8:	4082      	lsls	r2, r0
 800fcfa:	4313      	orrs	r3, r2
 800fcfc:	3401      	adds	r4, #1
 800fcfe:	9304      	str	r3, [sp, #16]
 800fd00:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fd04:	4825      	ldr	r0, [pc, #148]	; (800fd9c <_svfiprintf_r+0x1ec>)
 800fd06:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fd0a:	2206      	movs	r2, #6
 800fd0c:	f7f0 fa80 	bl	8000210 <memchr>
 800fd10:	2800      	cmp	r0, #0
 800fd12:	d038      	beq.n	800fd86 <_svfiprintf_r+0x1d6>
 800fd14:	4b22      	ldr	r3, [pc, #136]	; (800fda0 <_svfiprintf_r+0x1f0>)
 800fd16:	bb1b      	cbnz	r3, 800fd60 <_svfiprintf_r+0x1b0>
 800fd18:	9b03      	ldr	r3, [sp, #12]
 800fd1a:	3307      	adds	r3, #7
 800fd1c:	f023 0307 	bic.w	r3, r3, #7
 800fd20:	3308      	adds	r3, #8
 800fd22:	9303      	str	r3, [sp, #12]
 800fd24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fd26:	4433      	add	r3, r6
 800fd28:	9309      	str	r3, [sp, #36]	; 0x24
 800fd2a:	e768      	b.n	800fbfe <_svfiprintf_r+0x4e>
 800fd2c:	fb0c 3202 	mla	r2, ip, r2, r3
 800fd30:	460c      	mov	r4, r1
 800fd32:	2001      	movs	r0, #1
 800fd34:	e7a6      	b.n	800fc84 <_svfiprintf_r+0xd4>
 800fd36:	2300      	movs	r3, #0
 800fd38:	3401      	adds	r4, #1
 800fd3a:	9305      	str	r3, [sp, #20]
 800fd3c:	4619      	mov	r1, r3
 800fd3e:	f04f 0c0a 	mov.w	ip, #10
 800fd42:	4620      	mov	r0, r4
 800fd44:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fd48:	3a30      	subs	r2, #48	; 0x30
 800fd4a:	2a09      	cmp	r2, #9
 800fd4c:	d903      	bls.n	800fd56 <_svfiprintf_r+0x1a6>
 800fd4e:	2b00      	cmp	r3, #0
 800fd50:	d0c6      	beq.n	800fce0 <_svfiprintf_r+0x130>
 800fd52:	9105      	str	r1, [sp, #20]
 800fd54:	e7c4      	b.n	800fce0 <_svfiprintf_r+0x130>
 800fd56:	fb0c 2101 	mla	r1, ip, r1, r2
 800fd5a:	4604      	mov	r4, r0
 800fd5c:	2301      	movs	r3, #1
 800fd5e:	e7f0      	b.n	800fd42 <_svfiprintf_r+0x192>
 800fd60:	ab03      	add	r3, sp, #12
 800fd62:	9300      	str	r3, [sp, #0]
 800fd64:	462a      	mov	r2, r5
 800fd66:	4b0f      	ldr	r3, [pc, #60]	; (800fda4 <_svfiprintf_r+0x1f4>)
 800fd68:	a904      	add	r1, sp, #16
 800fd6a:	4638      	mov	r0, r7
 800fd6c:	f3af 8000 	nop.w
 800fd70:	1c42      	adds	r2, r0, #1
 800fd72:	4606      	mov	r6, r0
 800fd74:	d1d6      	bne.n	800fd24 <_svfiprintf_r+0x174>
 800fd76:	89ab      	ldrh	r3, [r5, #12]
 800fd78:	065b      	lsls	r3, r3, #25
 800fd7a:	f53f af2d 	bmi.w	800fbd8 <_svfiprintf_r+0x28>
 800fd7e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fd80:	b01d      	add	sp, #116	; 0x74
 800fd82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd86:	ab03      	add	r3, sp, #12
 800fd88:	9300      	str	r3, [sp, #0]
 800fd8a:	462a      	mov	r2, r5
 800fd8c:	4b05      	ldr	r3, [pc, #20]	; (800fda4 <_svfiprintf_r+0x1f4>)
 800fd8e:	a904      	add	r1, sp, #16
 800fd90:	4638      	mov	r0, r7
 800fd92:	f000 f879 	bl	800fe88 <_printf_i>
 800fd96:	e7eb      	b.n	800fd70 <_svfiprintf_r+0x1c0>
 800fd98:	080111cb 	.word	0x080111cb
 800fd9c:	080111d5 	.word	0x080111d5
 800fda0:	00000000 	.word	0x00000000
 800fda4:	0800fafd 	.word	0x0800fafd
 800fda8:	080111d1 	.word	0x080111d1

0800fdac <_printf_common>:
 800fdac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fdb0:	4616      	mov	r6, r2
 800fdb2:	4699      	mov	r9, r3
 800fdb4:	688a      	ldr	r2, [r1, #8]
 800fdb6:	690b      	ldr	r3, [r1, #16]
 800fdb8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800fdbc:	4293      	cmp	r3, r2
 800fdbe:	bfb8      	it	lt
 800fdc0:	4613      	movlt	r3, r2
 800fdc2:	6033      	str	r3, [r6, #0]
 800fdc4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800fdc8:	4607      	mov	r7, r0
 800fdca:	460c      	mov	r4, r1
 800fdcc:	b10a      	cbz	r2, 800fdd2 <_printf_common+0x26>
 800fdce:	3301      	adds	r3, #1
 800fdd0:	6033      	str	r3, [r6, #0]
 800fdd2:	6823      	ldr	r3, [r4, #0]
 800fdd4:	0699      	lsls	r1, r3, #26
 800fdd6:	bf42      	ittt	mi
 800fdd8:	6833      	ldrmi	r3, [r6, #0]
 800fdda:	3302      	addmi	r3, #2
 800fddc:	6033      	strmi	r3, [r6, #0]
 800fdde:	6825      	ldr	r5, [r4, #0]
 800fde0:	f015 0506 	ands.w	r5, r5, #6
 800fde4:	d106      	bne.n	800fdf4 <_printf_common+0x48>
 800fde6:	f104 0a19 	add.w	sl, r4, #25
 800fdea:	68e3      	ldr	r3, [r4, #12]
 800fdec:	6832      	ldr	r2, [r6, #0]
 800fdee:	1a9b      	subs	r3, r3, r2
 800fdf0:	42ab      	cmp	r3, r5
 800fdf2:	dc26      	bgt.n	800fe42 <_printf_common+0x96>
 800fdf4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800fdf8:	1e13      	subs	r3, r2, #0
 800fdfa:	6822      	ldr	r2, [r4, #0]
 800fdfc:	bf18      	it	ne
 800fdfe:	2301      	movne	r3, #1
 800fe00:	0692      	lsls	r2, r2, #26
 800fe02:	d42b      	bmi.n	800fe5c <_printf_common+0xb0>
 800fe04:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800fe08:	4649      	mov	r1, r9
 800fe0a:	4638      	mov	r0, r7
 800fe0c:	47c0      	blx	r8
 800fe0e:	3001      	adds	r0, #1
 800fe10:	d01e      	beq.n	800fe50 <_printf_common+0xa4>
 800fe12:	6823      	ldr	r3, [r4, #0]
 800fe14:	6922      	ldr	r2, [r4, #16]
 800fe16:	f003 0306 	and.w	r3, r3, #6
 800fe1a:	2b04      	cmp	r3, #4
 800fe1c:	bf02      	ittt	eq
 800fe1e:	68e5      	ldreq	r5, [r4, #12]
 800fe20:	6833      	ldreq	r3, [r6, #0]
 800fe22:	1aed      	subeq	r5, r5, r3
 800fe24:	68a3      	ldr	r3, [r4, #8]
 800fe26:	bf0c      	ite	eq
 800fe28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800fe2c:	2500      	movne	r5, #0
 800fe2e:	4293      	cmp	r3, r2
 800fe30:	bfc4      	itt	gt
 800fe32:	1a9b      	subgt	r3, r3, r2
 800fe34:	18ed      	addgt	r5, r5, r3
 800fe36:	2600      	movs	r6, #0
 800fe38:	341a      	adds	r4, #26
 800fe3a:	42b5      	cmp	r5, r6
 800fe3c:	d11a      	bne.n	800fe74 <_printf_common+0xc8>
 800fe3e:	2000      	movs	r0, #0
 800fe40:	e008      	b.n	800fe54 <_printf_common+0xa8>
 800fe42:	2301      	movs	r3, #1
 800fe44:	4652      	mov	r2, sl
 800fe46:	4649      	mov	r1, r9
 800fe48:	4638      	mov	r0, r7
 800fe4a:	47c0      	blx	r8
 800fe4c:	3001      	adds	r0, #1
 800fe4e:	d103      	bne.n	800fe58 <_printf_common+0xac>
 800fe50:	f04f 30ff 	mov.w	r0, #4294967295
 800fe54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fe58:	3501      	adds	r5, #1
 800fe5a:	e7c6      	b.n	800fdea <_printf_common+0x3e>
 800fe5c:	18e1      	adds	r1, r4, r3
 800fe5e:	1c5a      	adds	r2, r3, #1
 800fe60:	2030      	movs	r0, #48	; 0x30
 800fe62:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800fe66:	4422      	add	r2, r4
 800fe68:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800fe6c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800fe70:	3302      	adds	r3, #2
 800fe72:	e7c7      	b.n	800fe04 <_printf_common+0x58>
 800fe74:	2301      	movs	r3, #1
 800fe76:	4622      	mov	r2, r4
 800fe78:	4649      	mov	r1, r9
 800fe7a:	4638      	mov	r0, r7
 800fe7c:	47c0      	blx	r8
 800fe7e:	3001      	adds	r0, #1
 800fe80:	d0e6      	beq.n	800fe50 <_printf_common+0xa4>
 800fe82:	3601      	adds	r6, #1
 800fe84:	e7d9      	b.n	800fe3a <_printf_common+0x8e>
	...

0800fe88 <_printf_i>:
 800fe88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fe8c:	7e0f      	ldrb	r7, [r1, #24]
 800fe8e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800fe90:	2f78      	cmp	r7, #120	; 0x78
 800fe92:	4691      	mov	r9, r2
 800fe94:	4680      	mov	r8, r0
 800fe96:	460c      	mov	r4, r1
 800fe98:	469a      	mov	sl, r3
 800fe9a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800fe9e:	d807      	bhi.n	800feb0 <_printf_i+0x28>
 800fea0:	2f62      	cmp	r7, #98	; 0x62
 800fea2:	d80a      	bhi.n	800feba <_printf_i+0x32>
 800fea4:	2f00      	cmp	r7, #0
 800fea6:	f000 80d4 	beq.w	8010052 <_printf_i+0x1ca>
 800feaa:	2f58      	cmp	r7, #88	; 0x58
 800feac:	f000 80c0 	beq.w	8010030 <_printf_i+0x1a8>
 800feb0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800feb4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800feb8:	e03a      	b.n	800ff30 <_printf_i+0xa8>
 800feba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800febe:	2b15      	cmp	r3, #21
 800fec0:	d8f6      	bhi.n	800feb0 <_printf_i+0x28>
 800fec2:	a101      	add	r1, pc, #4	; (adr r1, 800fec8 <_printf_i+0x40>)
 800fec4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800fec8:	0800ff21 	.word	0x0800ff21
 800fecc:	0800ff35 	.word	0x0800ff35
 800fed0:	0800feb1 	.word	0x0800feb1
 800fed4:	0800feb1 	.word	0x0800feb1
 800fed8:	0800feb1 	.word	0x0800feb1
 800fedc:	0800feb1 	.word	0x0800feb1
 800fee0:	0800ff35 	.word	0x0800ff35
 800fee4:	0800feb1 	.word	0x0800feb1
 800fee8:	0800feb1 	.word	0x0800feb1
 800feec:	0800feb1 	.word	0x0800feb1
 800fef0:	0800feb1 	.word	0x0800feb1
 800fef4:	08010039 	.word	0x08010039
 800fef8:	0800ff61 	.word	0x0800ff61
 800fefc:	0800fff3 	.word	0x0800fff3
 800ff00:	0800feb1 	.word	0x0800feb1
 800ff04:	0800feb1 	.word	0x0800feb1
 800ff08:	0801005b 	.word	0x0801005b
 800ff0c:	0800feb1 	.word	0x0800feb1
 800ff10:	0800ff61 	.word	0x0800ff61
 800ff14:	0800feb1 	.word	0x0800feb1
 800ff18:	0800feb1 	.word	0x0800feb1
 800ff1c:	0800fffb 	.word	0x0800fffb
 800ff20:	682b      	ldr	r3, [r5, #0]
 800ff22:	1d1a      	adds	r2, r3, #4
 800ff24:	681b      	ldr	r3, [r3, #0]
 800ff26:	602a      	str	r2, [r5, #0]
 800ff28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ff2c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ff30:	2301      	movs	r3, #1
 800ff32:	e09f      	b.n	8010074 <_printf_i+0x1ec>
 800ff34:	6820      	ldr	r0, [r4, #0]
 800ff36:	682b      	ldr	r3, [r5, #0]
 800ff38:	0607      	lsls	r7, r0, #24
 800ff3a:	f103 0104 	add.w	r1, r3, #4
 800ff3e:	6029      	str	r1, [r5, #0]
 800ff40:	d501      	bpl.n	800ff46 <_printf_i+0xbe>
 800ff42:	681e      	ldr	r6, [r3, #0]
 800ff44:	e003      	b.n	800ff4e <_printf_i+0xc6>
 800ff46:	0646      	lsls	r6, r0, #25
 800ff48:	d5fb      	bpl.n	800ff42 <_printf_i+0xba>
 800ff4a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800ff4e:	2e00      	cmp	r6, #0
 800ff50:	da03      	bge.n	800ff5a <_printf_i+0xd2>
 800ff52:	232d      	movs	r3, #45	; 0x2d
 800ff54:	4276      	negs	r6, r6
 800ff56:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ff5a:	485a      	ldr	r0, [pc, #360]	; (80100c4 <_printf_i+0x23c>)
 800ff5c:	230a      	movs	r3, #10
 800ff5e:	e012      	b.n	800ff86 <_printf_i+0xfe>
 800ff60:	682b      	ldr	r3, [r5, #0]
 800ff62:	6820      	ldr	r0, [r4, #0]
 800ff64:	1d19      	adds	r1, r3, #4
 800ff66:	6029      	str	r1, [r5, #0]
 800ff68:	0605      	lsls	r5, r0, #24
 800ff6a:	d501      	bpl.n	800ff70 <_printf_i+0xe8>
 800ff6c:	681e      	ldr	r6, [r3, #0]
 800ff6e:	e002      	b.n	800ff76 <_printf_i+0xee>
 800ff70:	0641      	lsls	r1, r0, #25
 800ff72:	d5fb      	bpl.n	800ff6c <_printf_i+0xe4>
 800ff74:	881e      	ldrh	r6, [r3, #0]
 800ff76:	4853      	ldr	r0, [pc, #332]	; (80100c4 <_printf_i+0x23c>)
 800ff78:	2f6f      	cmp	r7, #111	; 0x6f
 800ff7a:	bf0c      	ite	eq
 800ff7c:	2308      	moveq	r3, #8
 800ff7e:	230a      	movne	r3, #10
 800ff80:	2100      	movs	r1, #0
 800ff82:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ff86:	6865      	ldr	r5, [r4, #4]
 800ff88:	60a5      	str	r5, [r4, #8]
 800ff8a:	2d00      	cmp	r5, #0
 800ff8c:	bfa2      	ittt	ge
 800ff8e:	6821      	ldrge	r1, [r4, #0]
 800ff90:	f021 0104 	bicge.w	r1, r1, #4
 800ff94:	6021      	strge	r1, [r4, #0]
 800ff96:	b90e      	cbnz	r6, 800ff9c <_printf_i+0x114>
 800ff98:	2d00      	cmp	r5, #0
 800ff9a:	d04b      	beq.n	8010034 <_printf_i+0x1ac>
 800ff9c:	4615      	mov	r5, r2
 800ff9e:	fbb6 f1f3 	udiv	r1, r6, r3
 800ffa2:	fb03 6711 	mls	r7, r3, r1, r6
 800ffa6:	5dc7      	ldrb	r7, [r0, r7]
 800ffa8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ffac:	4637      	mov	r7, r6
 800ffae:	42bb      	cmp	r3, r7
 800ffb0:	460e      	mov	r6, r1
 800ffb2:	d9f4      	bls.n	800ff9e <_printf_i+0x116>
 800ffb4:	2b08      	cmp	r3, #8
 800ffb6:	d10b      	bne.n	800ffd0 <_printf_i+0x148>
 800ffb8:	6823      	ldr	r3, [r4, #0]
 800ffba:	07de      	lsls	r6, r3, #31
 800ffbc:	d508      	bpl.n	800ffd0 <_printf_i+0x148>
 800ffbe:	6923      	ldr	r3, [r4, #16]
 800ffc0:	6861      	ldr	r1, [r4, #4]
 800ffc2:	4299      	cmp	r1, r3
 800ffc4:	bfde      	ittt	le
 800ffc6:	2330      	movle	r3, #48	; 0x30
 800ffc8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ffcc:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ffd0:	1b52      	subs	r2, r2, r5
 800ffd2:	6122      	str	r2, [r4, #16]
 800ffd4:	f8cd a000 	str.w	sl, [sp]
 800ffd8:	464b      	mov	r3, r9
 800ffda:	aa03      	add	r2, sp, #12
 800ffdc:	4621      	mov	r1, r4
 800ffde:	4640      	mov	r0, r8
 800ffe0:	f7ff fee4 	bl	800fdac <_printf_common>
 800ffe4:	3001      	adds	r0, #1
 800ffe6:	d14a      	bne.n	801007e <_printf_i+0x1f6>
 800ffe8:	f04f 30ff 	mov.w	r0, #4294967295
 800ffec:	b004      	add	sp, #16
 800ffee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fff2:	6823      	ldr	r3, [r4, #0]
 800fff4:	f043 0320 	orr.w	r3, r3, #32
 800fff8:	6023      	str	r3, [r4, #0]
 800fffa:	4833      	ldr	r0, [pc, #204]	; (80100c8 <_printf_i+0x240>)
 800fffc:	2778      	movs	r7, #120	; 0x78
 800fffe:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8010002:	6823      	ldr	r3, [r4, #0]
 8010004:	6829      	ldr	r1, [r5, #0]
 8010006:	061f      	lsls	r7, r3, #24
 8010008:	f851 6b04 	ldr.w	r6, [r1], #4
 801000c:	d402      	bmi.n	8010014 <_printf_i+0x18c>
 801000e:	065f      	lsls	r7, r3, #25
 8010010:	bf48      	it	mi
 8010012:	b2b6      	uxthmi	r6, r6
 8010014:	07df      	lsls	r7, r3, #31
 8010016:	bf48      	it	mi
 8010018:	f043 0320 	orrmi.w	r3, r3, #32
 801001c:	6029      	str	r1, [r5, #0]
 801001e:	bf48      	it	mi
 8010020:	6023      	strmi	r3, [r4, #0]
 8010022:	b91e      	cbnz	r6, 801002c <_printf_i+0x1a4>
 8010024:	6823      	ldr	r3, [r4, #0]
 8010026:	f023 0320 	bic.w	r3, r3, #32
 801002a:	6023      	str	r3, [r4, #0]
 801002c:	2310      	movs	r3, #16
 801002e:	e7a7      	b.n	800ff80 <_printf_i+0xf8>
 8010030:	4824      	ldr	r0, [pc, #144]	; (80100c4 <_printf_i+0x23c>)
 8010032:	e7e4      	b.n	800fffe <_printf_i+0x176>
 8010034:	4615      	mov	r5, r2
 8010036:	e7bd      	b.n	800ffb4 <_printf_i+0x12c>
 8010038:	682b      	ldr	r3, [r5, #0]
 801003a:	6826      	ldr	r6, [r4, #0]
 801003c:	6961      	ldr	r1, [r4, #20]
 801003e:	1d18      	adds	r0, r3, #4
 8010040:	6028      	str	r0, [r5, #0]
 8010042:	0635      	lsls	r5, r6, #24
 8010044:	681b      	ldr	r3, [r3, #0]
 8010046:	d501      	bpl.n	801004c <_printf_i+0x1c4>
 8010048:	6019      	str	r1, [r3, #0]
 801004a:	e002      	b.n	8010052 <_printf_i+0x1ca>
 801004c:	0670      	lsls	r0, r6, #25
 801004e:	d5fb      	bpl.n	8010048 <_printf_i+0x1c0>
 8010050:	8019      	strh	r1, [r3, #0]
 8010052:	2300      	movs	r3, #0
 8010054:	6123      	str	r3, [r4, #16]
 8010056:	4615      	mov	r5, r2
 8010058:	e7bc      	b.n	800ffd4 <_printf_i+0x14c>
 801005a:	682b      	ldr	r3, [r5, #0]
 801005c:	1d1a      	adds	r2, r3, #4
 801005e:	602a      	str	r2, [r5, #0]
 8010060:	681d      	ldr	r5, [r3, #0]
 8010062:	6862      	ldr	r2, [r4, #4]
 8010064:	2100      	movs	r1, #0
 8010066:	4628      	mov	r0, r5
 8010068:	f7f0 f8d2 	bl	8000210 <memchr>
 801006c:	b108      	cbz	r0, 8010072 <_printf_i+0x1ea>
 801006e:	1b40      	subs	r0, r0, r5
 8010070:	6060      	str	r0, [r4, #4]
 8010072:	6863      	ldr	r3, [r4, #4]
 8010074:	6123      	str	r3, [r4, #16]
 8010076:	2300      	movs	r3, #0
 8010078:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801007c:	e7aa      	b.n	800ffd4 <_printf_i+0x14c>
 801007e:	6923      	ldr	r3, [r4, #16]
 8010080:	462a      	mov	r2, r5
 8010082:	4649      	mov	r1, r9
 8010084:	4640      	mov	r0, r8
 8010086:	47d0      	blx	sl
 8010088:	3001      	adds	r0, #1
 801008a:	d0ad      	beq.n	800ffe8 <_printf_i+0x160>
 801008c:	6823      	ldr	r3, [r4, #0]
 801008e:	079b      	lsls	r3, r3, #30
 8010090:	d413      	bmi.n	80100ba <_printf_i+0x232>
 8010092:	68e0      	ldr	r0, [r4, #12]
 8010094:	9b03      	ldr	r3, [sp, #12]
 8010096:	4298      	cmp	r0, r3
 8010098:	bfb8      	it	lt
 801009a:	4618      	movlt	r0, r3
 801009c:	e7a6      	b.n	800ffec <_printf_i+0x164>
 801009e:	2301      	movs	r3, #1
 80100a0:	4632      	mov	r2, r6
 80100a2:	4649      	mov	r1, r9
 80100a4:	4640      	mov	r0, r8
 80100a6:	47d0      	blx	sl
 80100a8:	3001      	adds	r0, #1
 80100aa:	d09d      	beq.n	800ffe8 <_printf_i+0x160>
 80100ac:	3501      	adds	r5, #1
 80100ae:	68e3      	ldr	r3, [r4, #12]
 80100b0:	9903      	ldr	r1, [sp, #12]
 80100b2:	1a5b      	subs	r3, r3, r1
 80100b4:	42ab      	cmp	r3, r5
 80100b6:	dcf2      	bgt.n	801009e <_printf_i+0x216>
 80100b8:	e7eb      	b.n	8010092 <_printf_i+0x20a>
 80100ba:	2500      	movs	r5, #0
 80100bc:	f104 0619 	add.w	r6, r4, #25
 80100c0:	e7f5      	b.n	80100ae <_printf_i+0x226>
 80100c2:	bf00      	nop
 80100c4:	080111dc 	.word	0x080111dc
 80100c8:	080111ed 	.word	0x080111ed

080100cc <__sflush_r>:
 80100cc:	898a      	ldrh	r2, [r1, #12]
 80100ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80100d2:	4605      	mov	r5, r0
 80100d4:	0710      	lsls	r0, r2, #28
 80100d6:	460c      	mov	r4, r1
 80100d8:	d458      	bmi.n	801018c <__sflush_r+0xc0>
 80100da:	684b      	ldr	r3, [r1, #4]
 80100dc:	2b00      	cmp	r3, #0
 80100de:	dc05      	bgt.n	80100ec <__sflush_r+0x20>
 80100e0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80100e2:	2b00      	cmp	r3, #0
 80100e4:	dc02      	bgt.n	80100ec <__sflush_r+0x20>
 80100e6:	2000      	movs	r0, #0
 80100e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80100ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80100ee:	2e00      	cmp	r6, #0
 80100f0:	d0f9      	beq.n	80100e6 <__sflush_r+0x1a>
 80100f2:	2300      	movs	r3, #0
 80100f4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80100f8:	682f      	ldr	r7, [r5, #0]
 80100fa:	6a21      	ldr	r1, [r4, #32]
 80100fc:	602b      	str	r3, [r5, #0]
 80100fe:	d032      	beq.n	8010166 <__sflush_r+0x9a>
 8010100:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010102:	89a3      	ldrh	r3, [r4, #12]
 8010104:	075a      	lsls	r2, r3, #29
 8010106:	d505      	bpl.n	8010114 <__sflush_r+0x48>
 8010108:	6863      	ldr	r3, [r4, #4]
 801010a:	1ac0      	subs	r0, r0, r3
 801010c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801010e:	b10b      	cbz	r3, 8010114 <__sflush_r+0x48>
 8010110:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010112:	1ac0      	subs	r0, r0, r3
 8010114:	2300      	movs	r3, #0
 8010116:	4602      	mov	r2, r0
 8010118:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801011a:	6a21      	ldr	r1, [r4, #32]
 801011c:	4628      	mov	r0, r5
 801011e:	47b0      	blx	r6
 8010120:	1c43      	adds	r3, r0, #1
 8010122:	89a3      	ldrh	r3, [r4, #12]
 8010124:	d106      	bne.n	8010134 <__sflush_r+0x68>
 8010126:	6829      	ldr	r1, [r5, #0]
 8010128:	291d      	cmp	r1, #29
 801012a:	d82b      	bhi.n	8010184 <__sflush_r+0xb8>
 801012c:	4a29      	ldr	r2, [pc, #164]	; (80101d4 <__sflush_r+0x108>)
 801012e:	410a      	asrs	r2, r1
 8010130:	07d6      	lsls	r6, r2, #31
 8010132:	d427      	bmi.n	8010184 <__sflush_r+0xb8>
 8010134:	2200      	movs	r2, #0
 8010136:	6062      	str	r2, [r4, #4]
 8010138:	04d9      	lsls	r1, r3, #19
 801013a:	6922      	ldr	r2, [r4, #16]
 801013c:	6022      	str	r2, [r4, #0]
 801013e:	d504      	bpl.n	801014a <__sflush_r+0x7e>
 8010140:	1c42      	adds	r2, r0, #1
 8010142:	d101      	bne.n	8010148 <__sflush_r+0x7c>
 8010144:	682b      	ldr	r3, [r5, #0]
 8010146:	b903      	cbnz	r3, 801014a <__sflush_r+0x7e>
 8010148:	6560      	str	r0, [r4, #84]	; 0x54
 801014a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801014c:	602f      	str	r7, [r5, #0]
 801014e:	2900      	cmp	r1, #0
 8010150:	d0c9      	beq.n	80100e6 <__sflush_r+0x1a>
 8010152:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010156:	4299      	cmp	r1, r3
 8010158:	d002      	beq.n	8010160 <__sflush_r+0x94>
 801015a:	4628      	mov	r0, r5
 801015c:	f7ff fbce 	bl	800f8fc <_free_r>
 8010160:	2000      	movs	r0, #0
 8010162:	6360      	str	r0, [r4, #52]	; 0x34
 8010164:	e7c0      	b.n	80100e8 <__sflush_r+0x1c>
 8010166:	2301      	movs	r3, #1
 8010168:	4628      	mov	r0, r5
 801016a:	47b0      	blx	r6
 801016c:	1c41      	adds	r1, r0, #1
 801016e:	d1c8      	bne.n	8010102 <__sflush_r+0x36>
 8010170:	682b      	ldr	r3, [r5, #0]
 8010172:	2b00      	cmp	r3, #0
 8010174:	d0c5      	beq.n	8010102 <__sflush_r+0x36>
 8010176:	2b1d      	cmp	r3, #29
 8010178:	d001      	beq.n	801017e <__sflush_r+0xb2>
 801017a:	2b16      	cmp	r3, #22
 801017c:	d101      	bne.n	8010182 <__sflush_r+0xb6>
 801017e:	602f      	str	r7, [r5, #0]
 8010180:	e7b1      	b.n	80100e6 <__sflush_r+0x1a>
 8010182:	89a3      	ldrh	r3, [r4, #12]
 8010184:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010188:	81a3      	strh	r3, [r4, #12]
 801018a:	e7ad      	b.n	80100e8 <__sflush_r+0x1c>
 801018c:	690f      	ldr	r7, [r1, #16]
 801018e:	2f00      	cmp	r7, #0
 8010190:	d0a9      	beq.n	80100e6 <__sflush_r+0x1a>
 8010192:	0793      	lsls	r3, r2, #30
 8010194:	680e      	ldr	r6, [r1, #0]
 8010196:	bf08      	it	eq
 8010198:	694b      	ldreq	r3, [r1, #20]
 801019a:	600f      	str	r7, [r1, #0]
 801019c:	bf18      	it	ne
 801019e:	2300      	movne	r3, #0
 80101a0:	eba6 0807 	sub.w	r8, r6, r7
 80101a4:	608b      	str	r3, [r1, #8]
 80101a6:	f1b8 0f00 	cmp.w	r8, #0
 80101aa:	dd9c      	ble.n	80100e6 <__sflush_r+0x1a>
 80101ac:	6a21      	ldr	r1, [r4, #32]
 80101ae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80101b0:	4643      	mov	r3, r8
 80101b2:	463a      	mov	r2, r7
 80101b4:	4628      	mov	r0, r5
 80101b6:	47b0      	blx	r6
 80101b8:	2800      	cmp	r0, #0
 80101ba:	dc06      	bgt.n	80101ca <__sflush_r+0xfe>
 80101bc:	89a3      	ldrh	r3, [r4, #12]
 80101be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80101c2:	81a3      	strh	r3, [r4, #12]
 80101c4:	f04f 30ff 	mov.w	r0, #4294967295
 80101c8:	e78e      	b.n	80100e8 <__sflush_r+0x1c>
 80101ca:	4407      	add	r7, r0
 80101cc:	eba8 0800 	sub.w	r8, r8, r0
 80101d0:	e7e9      	b.n	80101a6 <__sflush_r+0xda>
 80101d2:	bf00      	nop
 80101d4:	dfbffffe 	.word	0xdfbffffe

080101d8 <_fflush_r>:
 80101d8:	b538      	push	{r3, r4, r5, lr}
 80101da:	690b      	ldr	r3, [r1, #16]
 80101dc:	4605      	mov	r5, r0
 80101de:	460c      	mov	r4, r1
 80101e0:	b913      	cbnz	r3, 80101e8 <_fflush_r+0x10>
 80101e2:	2500      	movs	r5, #0
 80101e4:	4628      	mov	r0, r5
 80101e6:	bd38      	pop	{r3, r4, r5, pc}
 80101e8:	b118      	cbz	r0, 80101f2 <_fflush_r+0x1a>
 80101ea:	6a03      	ldr	r3, [r0, #32]
 80101ec:	b90b      	cbnz	r3, 80101f2 <_fflush_r+0x1a>
 80101ee:	f7ff f9dd 	bl	800f5ac <__sinit>
 80101f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80101f6:	2b00      	cmp	r3, #0
 80101f8:	d0f3      	beq.n	80101e2 <_fflush_r+0xa>
 80101fa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80101fc:	07d0      	lsls	r0, r2, #31
 80101fe:	d404      	bmi.n	801020a <_fflush_r+0x32>
 8010200:	0599      	lsls	r1, r3, #22
 8010202:	d402      	bmi.n	801020a <_fflush_r+0x32>
 8010204:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010206:	f7ff fb51 	bl	800f8ac <__retarget_lock_acquire_recursive>
 801020a:	4628      	mov	r0, r5
 801020c:	4621      	mov	r1, r4
 801020e:	f7ff ff5d 	bl	80100cc <__sflush_r>
 8010212:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010214:	07da      	lsls	r2, r3, #31
 8010216:	4605      	mov	r5, r0
 8010218:	d4e4      	bmi.n	80101e4 <_fflush_r+0xc>
 801021a:	89a3      	ldrh	r3, [r4, #12]
 801021c:	059b      	lsls	r3, r3, #22
 801021e:	d4e1      	bmi.n	80101e4 <_fflush_r+0xc>
 8010220:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010222:	f7ff fb44 	bl	800f8ae <__retarget_lock_release_recursive>
 8010226:	e7dd      	b.n	80101e4 <_fflush_r+0xc>

08010228 <fiprintf>:
 8010228:	b40e      	push	{r1, r2, r3}
 801022a:	b503      	push	{r0, r1, lr}
 801022c:	4601      	mov	r1, r0
 801022e:	ab03      	add	r3, sp, #12
 8010230:	4805      	ldr	r0, [pc, #20]	; (8010248 <fiprintf+0x20>)
 8010232:	f853 2b04 	ldr.w	r2, [r3], #4
 8010236:	6800      	ldr	r0, [r0, #0]
 8010238:	9301      	str	r3, [sp, #4]
 801023a:	f000 f89f 	bl	801037c <_vfiprintf_r>
 801023e:	b002      	add	sp, #8
 8010240:	f85d eb04 	ldr.w	lr, [sp], #4
 8010244:	b003      	add	sp, #12
 8010246:	4770      	bx	lr
 8010248:	20000174 	.word	0x20000174

0801024c <memmove>:
 801024c:	4288      	cmp	r0, r1
 801024e:	b510      	push	{r4, lr}
 8010250:	eb01 0402 	add.w	r4, r1, r2
 8010254:	d902      	bls.n	801025c <memmove+0x10>
 8010256:	4284      	cmp	r4, r0
 8010258:	4623      	mov	r3, r4
 801025a:	d807      	bhi.n	801026c <memmove+0x20>
 801025c:	1e43      	subs	r3, r0, #1
 801025e:	42a1      	cmp	r1, r4
 8010260:	d008      	beq.n	8010274 <memmove+0x28>
 8010262:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010266:	f803 2f01 	strb.w	r2, [r3, #1]!
 801026a:	e7f8      	b.n	801025e <memmove+0x12>
 801026c:	4402      	add	r2, r0
 801026e:	4601      	mov	r1, r0
 8010270:	428a      	cmp	r2, r1
 8010272:	d100      	bne.n	8010276 <memmove+0x2a>
 8010274:	bd10      	pop	{r4, pc}
 8010276:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801027a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801027e:	e7f7      	b.n	8010270 <memmove+0x24>

08010280 <_sbrk_r>:
 8010280:	b538      	push	{r3, r4, r5, lr}
 8010282:	4d06      	ldr	r5, [pc, #24]	; (801029c <_sbrk_r+0x1c>)
 8010284:	2300      	movs	r3, #0
 8010286:	4604      	mov	r4, r0
 8010288:	4608      	mov	r0, r1
 801028a:	602b      	str	r3, [r5, #0]
 801028c:	f7f2 fc74 	bl	8002b78 <_sbrk>
 8010290:	1c43      	adds	r3, r0, #1
 8010292:	d102      	bne.n	801029a <_sbrk_r+0x1a>
 8010294:	682b      	ldr	r3, [r5, #0]
 8010296:	b103      	cbz	r3, 801029a <_sbrk_r+0x1a>
 8010298:	6023      	str	r3, [r4, #0]
 801029a:	bd38      	pop	{r3, r4, r5, pc}
 801029c:	200041b0 	.word	0x200041b0

080102a0 <memcpy>:
 80102a0:	440a      	add	r2, r1
 80102a2:	4291      	cmp	r1, r2
 80102a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80102a8:	d100      	bne.n	80102ac <memcpy+0xc>
 80102aa:	4770      	bx	lr
 80102ac:	b510      	push	{r4, lr}
 80102ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80102b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80102b6:	4291      	cmp	r1, r2
 80102b8:	d1f9      	bne.n	80102ae <memcpy+0xe>
 80102ba:	bd10      	pop	{r4, pc}

080102bc <abort>:
 80102bc:	b508      	push	{r3, lr}
 80102be:	2006      	movs	r0, #6
 80102c0:	f000 fa34 	bl	801072c <raise>
 80102c4:	2001      	movs	r0, #1
 80102c6:	f7f2 fbdf 	bl	8002a88 <_exit>

080102ca <_realloc_r>:
 80102ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80102ce:	4680      	mov	r8, r0
 80102d0:	4614      	mov	r4, r2
 80102d2:	460e      	mov	r6, r1
 80102d4:	b921      	cbnz	r1, 80102e0 <_realloc_r+0x16>
 80102d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80102da:	4611      	mov	r1, r2
 80102dc:	f7ff bb82 	b.w	800f9e4 <_malloc_r>
 80102e0:	b92a      	cbnz	r2, 80102ee <_realloc_r+0x24>
 80102e2:	f7ff fb0b 	bl	800f8fc <_free_r>
 80102e6:	4625      	mov	r5, r4
 80102e8:	4628      	mov	r0, r5
 80102ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80102ee:	f000 fa39 	bl	8010764 <_malloc_usable_size_r>
 80102f2:	4284      	cmp	r4, r0
 80102f4:	4607      	mov	r7, r0
 80102f6:	d802      	bhi.n	80102fe <_realloc_r+0x34>
 80102f8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80102fc:	d812      	bhi.n	8010324 <_realloc_r+0x5a>
 80102fe:	4621      	mov	r1, r4
 8010300:	4640      	mov	r0, r8
 8010302:	f7ff fb6f 	bl	800f9e4 <_malloc_r>
 8010306:	4605      	mov	r5, r0
 8010308:	2800      	cmp	r0, #0
 801030a:	d0ed      	beq.n	80102e8 <_realloc_r+0x1e>
 801030c:	42bc      	cmp	r4, r7
 801030e:	4622      	mov	r2, r4
 8010310:	4631      	mov	r1, r6
 8010312:	bf28      	it	cs
 8010314:	463a      	movcs	r2, r7
 8010316:	f7ff ffc3 	bl	80102a0 <memcpy>
 801031a:	4631      	mov	r1, r6
 801031c:	4640      	mov	r0, r8
 801031e:	f7ff faed 	bl	800f8fc <_free_r>
 8010322:	e7e1      	b.n	80102e8 <_realloc_r+0x1e>
 8010324:	4635      	mov	r5, r6
 8010326:	e7df      	b.n	80102e8 <_realloc_r+0x1e>

08010328 <__sfputc_r>:
 8010328:	6893      	ldr	r3, [r2, #8]
 801032a:	3b01      	subs	r3, #1
 801032c:	2b00      	cmp	r3, #0
 801032e:	b410      	push	{r4}
 8010330:	6093      	str	r3, [r2, #8]
 8010332:	da08      	bge.n	8010346 <__sfputc_r+0x1e>
 8010334:	6994      	ldr	r4, [r2, #24]
 8010336:	42a3      	cmp	r3, r4
 8010338:	db01      	blt.n	801033e <__sfputc_r+0x16>
 801033a:	290a      	cmp	r1, #10
 801033c:	d103      	bne.n	8010346 <__sfputc_r+0x1e>
 801033e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010342:	f000 b935 	b.w	80105b0 <__swbuf_r>
 8010346:	6813      	ldr	r3, [r2, #0]
 8010348:	1c58      	adds	r0, r3, #1
 801034a:	6010      	str	r0, [r2, #0]
 801034c:	7019      	strb	r1, [r3, #0]
 801034e:	4608      	mov	r0, r1
 8010350:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010354:	4770      	bx	lr

08010356 <__sfputs_r>:
 8010356:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010358:	4606      	mov	r6, r0
 801035a:	460f      	mov	r7, r1
 801035c:	4614      	mov	r4, r2
 801035e:	18d5      	adds	r5, r2, r3
 8010360:	42ac      	cmp	r4, r5
 8010362:	d101      	bne.n	8010368 <__sfputs_r+0x12>
 8010364:	2000      	movs	r0, #0
 8010366:	e007      	b.n	8010378 <__sfputs_r+0x22>
 8010368:	f814 1b01 	ldrb.w	r1, [r4], #1
 801036c:	463a      	mov	r2, r7
 801036e:	4630      	mov	r0, r6
 8010370:	f7ff ffda 	bl	8010328 <__sfputc_r>
 8010374:	1c43      	adds	r3, r0, #1
 8010376:	d1f3      	bne.n	8010360 <__sfputs_r+0xa>
 8010378:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801037c <_vfiprintf_r>:
 801037c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010380:	460d      	mov	r5, r1
 8010382:	b09d      	sub	sp, #116	; 0x74
 8010384:	4614      	mov	r4, r2
 8010386:	4698      	mov	r8, r3
 8010388:	4606      	mov	r6, r0
 801038a:	b118      	cbz	r0, 8010394 <_vfiprintf_r+0x18>
 801038c:	6a03      	ldr	r3, [r0, #32]
 801038e:	b90b      	cbnz	r3, 8010394 <_vfiprintf_r+0x18>
 8010390:	f7ff f90c 	bl	800f5ac <__sinit>
 8010394:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010396:	07d9      	lsls	r1, r3, #31
 8010398:	d405      	bmi.n	80103a6 <_vfiprintf_r+0x2a>
 801039a:	89ab      	ldrh	r3, [r5, #12]
 801039c:	059a      	lsls	r2, r3, #22
 801039e:	d402      	bmi.n	80103a6 <_vfiprintf_r+0x2a>
 80103a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80103a2:	f7ff fa83 	bl	800f8ac <__retarget_lock_acquire_recursive>
 80103a6:	89ab      	ldrh	r3, [r5, #12]
 80103a8:	071b      	lsls	r3, r3, #28
 80103aa:	d501      	bpl.n	80103b0 <_vfiprintf_r+0x34>
 80103ac:	692b      	ldr	r3, [r5, #16]
 80103ae:	b99b      	cbnz	r3, 80103d8 <_vfiprintf_r+0x5c>
 80103b0:	4629      	mov	r1, r5
 80103b2:	4630      	mov	r0, r6
 80103b4:	f000 f93a 	bl	801062c <__swsetup_r>
 80103b8:	b170      	cbz	r0, 80103d8 <_vfiprintf_r+0x5c>
 80103ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80103bc:	07dc      	lsls	r4, r3, #31
 80103be:	d504      	bpl.n	80103ca <_vfiprintf_r+0x4e>
 80103c0:	f04f 30ff 	mov.w	r0, #4294967295
 80103c4:	b01d      	add	sp, #116	; 0x74
 80103c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80103ca:	89ab      	ldrh	r3, [r5, #12]
 80103cc:	0598      	lsls	r0, r3, #22
 80103ce:	d4f7      	bmi.n	80103c0 <_vfiprintf_r+0x44>
 80103d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80103d2:	f7ff fa6c 	bl	800f8ae <__retarget_lock_release_recursive>
 80103d6:	e7f3      	b.n	80103c0 <_vfiprintf_r+0x44>
 80103d8:	2300      	movs	r3, #0
 80103da:	9309      	str	r3, [sp, #36]	; 0x24
 80103dc:	2320      	movs	r3, #32
 80103de:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80103e2:	f8cd 800c 	str.w	r8, [sp, #12]
 80103e6:	2330      	movs	r3, #48	; 0x30
 80103e8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 801059c <_vfiprintf_r+0x220>
 80103ec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80103f0:	f04f 0901 	mov.w	r9, #1
 80103f4:	4623      	mov	r3, r4
 80103f6:	469a      	mov	sl, r3
 80103f8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80103fc:	b10a      	cbz	r2, 8010402 <_vfiprintf_r+0x86>
 80103fe:	2a25      	cmp	r2, #37	; 0x25
 8010400:	d1f9      	bne.n	80103f6 <_vfiprintf_r+0x7a>
 8010402:	ebba 0b04 	subs.w	fp, sl, r4
 8010406:	d00b      	beq.n	8010420 <_vfiprintf_r+0xa4>
 8010408:	465b      	mov	r3, fp
 801040a:	4622      	mov	r2, r4
 801040c:	4629      	mov	r1, r5
 801040e:	4630      	mov	r0, r6
 8010410:	f7ff ffa1 	bl	8010356 <__sfputs_r>
 8010414:	3001      	adds	r0, #1
 8010416:	f000 80a9 	beq.w	801056c <_vfiprintf_r+0x1f0>
 801041a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801041c:	445a      	add	r2, fp
 801041e:	9209      	str	r2, [sp, #36]	; 0x24
 8010420:	f89a 3000 	ldrb.w	r3, [sl]
 8010424:	2b00      	cmp	r3, #0
 8010426:	f000 80a1 	beq.w	801056c <_vfiprintf_r+0x1f0>
 801042a:	2300      	movs	r3, #0
 801042c:	f04f 32ff 	mov.w	r2, #4294967295
 8010430:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010434:	f10a 0a01 	add.w	sl, sl, #1
 8010438:	9304      	str	r3, [sp, #16]
 801043a:	9307      	str	r3, [sp, #28]
 801043c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010440:	931a      	str	r3, [sp, #104]	; 0x68
 8010442:	4654      	mov	r4, sl
 8010444:	2205      	movs	r2, #5
 8010446:	f814 1b01 	ldrb.w	r1, [r4], #1
 801044a:	4854      	ldr	r0, [pc, #336]	; (801059c <_vfiprintf_r+0x220>)
 801044c:	f7ef fee0 	bl	8000210 <memchr>
 8010450:	9a04      	ldr	r2, [sp, #16]
 8010452:	b9d8      	cbnz	r0, 801048c <_vfiprintf_r+0x110>
 8010454:	06d1      	lsls	r1, r2, #27
 8010456:	bf44      	itt	mi
 8010458:	2320      	movmi	r3, #32
 801045a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801045e:	0713      	lsls	r3, r2, #28
 8010460:	bf44      	itt	mi
 8010462:	232b      	movmi	r3, #43	; 0x2b
 8010464:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010468:	f89a 3000 	ldrb.w	r3, [sl]
 801046c:	2b2a      	cmp	r3, #42	; 0x2a
 801046e:	d015      	beq.n	801049c <_vfiprintf_r+0x120>
 8010470:	9a07      	ldr	r2, [sp, #28]
 8010472:	4654      	mov	r4, sl
 8010474:	2000      	movs	r0, #0
 8010476:	f04f 0c0a 	mov.w	ip, #10
 801047a:	4621      	mov	r1, r4
 801047c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010480:	3b30      	subs	r3, #48	; 0x30
 8010482:	2b09      	cmp	r3, #9
 8010484:	d94d      	bls.n	8010522 <_vfiprintf_r+0x1a6>
 8010486:	b1b0      	cbz	r0, 80104b6 <_vfiprintf_r+0x13a>
 8010488:	9207      	str	r2, [sp, #28]
 801048a:	e014      	b.n	80104b6 <_vfiprintf_r+0x13a>
 801048c:	eba0 0308 	sub.w	r3, r0, r8
 8010490:	fa09 f303 	lsl.w	r3, r9, r3
 8010494:	4313      	orrs	r3, r2
 8010496:	9304      	str	r3, [sp, #16]
 8010498:	46a2      	mov	sl, r4
 801049a:	e7d2      	b.n	8010442 <_vfiprintf_r+0xc6>
 801049c:	9b03      	ldr	r3, [sp, #12]
 801049e:	1d19      	adds	r1, r3, #4
 80104a0:	681b      	ldr	r3, [r3, #0]
 80104a2:	9103      	str	r1, [sp, #12]
 80104a4:	2b00      	cmp	r3, #0
 80104a6:	bfbb      	ittet	lt
 80104a8:	425b      	neglt	r3, r3
 80104aa:	f042 0202 	orrlt.w	r2, r2, #2
 80104ae:	9307      	strge	r3, [sp, #28]
 80104b0:	9307      	strlt	r3, [sp, #28]
 80104b2:	bfb8      	it	lt
 80104b4:	9204      	strlt	r2, [sp, #16]
 80104b6:	7823      	ldrb	r3, [r4, #0]
 80104b8:	2b2e      	cmp	r3, #46	; 0x2e
 80104ba:	d10c      	bne.n	80104d6 <_vfiprintf_r+0x15a>
 80104bc:	7863      	ldrb	r3, [r4, #1]
 80104be:	2b2a      	cmp	r3, #42	; 0x2a
 80104c0:	d134      	bne.n	801052c <_vfiprintf_r+0x1b0>
 80104c2:	9b03      	ldr	r3, [sp, #12]
 80104c4:	1d1a      	adds	r2, r3, #4
 80104c6:	681b      	ldr	r3, [r3, #0]
 80104c8:	9203      	str	r2, [sp, #12]
 80104ca:	2b00      	cmp	r3, #0
 80104cc:	bfb8      	it	lt
 80104ce:	f04f 33ff 	movlt.w	r3, #4294967295
 80104d2:	3402      	adds	r4, #2
 80104d4:	9305      	str	r3, [sp, #20]
 80104d6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80105ac <_vfiprintf_r+0x230>
 80104da:	7821      	ldrb	r1, [r4, #0]
 80104dc:	2203      	movs	r2, #3
 80104de:	4650      	mov	r0, sl
 80104e0:	f7ef fe96 	bl	8000210 <memchr>
 80104e4:	b138      	cbz	r0, 80104f6 <_vfiprintf_r+0x17a>
 80104e6:	9b04      	ldr	r3, [sp, #16]
 80104e8:	eba0 000a 	sub.w	r0, r0, sl
 80104ec:	2240      	movs	r2, #64	; 0x40
 80104ee:	4082      	lsls	r2, r0
 80104f0:	4313      	orrs	r3, r2
 80104f2:	3401      	adds	r4, #1
 80104f4:	9304      	str	r3, [sp, #16]
 80104f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80104fa:	4829      	ldr	r0, [pc, #164]	; (80105a0 <_vfiprintf_r+0x224>)
 80104fc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010500:	2206      	movs	r2, #6
 8010502:	f7ef fe85 	bl	8000210 <memchr>
 8010506:	2800      	cmp	r0, #0
 8010508:	d03f      	beq.n	801058a <_vfiprintf_r+0x20e>
 801050a:	4b26      	ldr	r3, [pc, #152]	; (80105a4 <_vfiprintf_r+0x228>)
 801050c:	bb1b      	cbnz	r3, 8010556 <_vfiprintf_r+0x1da>
 801050e:	9b03      	ldr	r3, [sp, #12]
 8010510:	3307      	adds	r3, #7
 8010512:	f023 0307 	bic.w	r3, r3, #7
 8010516:	3308      	adds	r3, #8
 8010518:	9303      	str	r3, [sp, #12]
 801051a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801051c:	443b      	add	r3, r7
 801051e:	9309      	str	r3, [sp, #36]	; 0x24
 8010520:	e768      	b.n	80103f4 <_vfiprintf_r+0x78>
 8010522:	fb0c 3202 	mla	r2, ip, r2, r3
 8010526:	460c      	mov	r4, r1
 8010528:	2001      	movs	r0, #1
 801052a:	e7a6      	b.n	801047a <_vfiprintf_r+0xfe>
 801052c:	2300      	movs	r3, #0
 801052e:	3401      	adds	r4, #1
 8010530:	9305      	str	r3, [sp, #20]
 8010532:	4619      	mov	r1, r3
 8010534:	f04f 0c0a 	mov.w	ip, #10
 8010538:	4620      	mov	r0, r4
 801053a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801053e:	3a30      	subs	r2, #48	; 0x30
 8010540:	2a09      	cmp	r2, #9
 8010542:	d903      	bls.n	801054c <_vfiprintf_r+0x1d0>
 8010544:	2b00      	cmp	r3, #0
 8010546:	d0c6      	beq.n	80104d6 <_vfiprintf_r+0x15a>
 8010548:	9105      	str	r1, [sp, #20]
 801054a:	e7c4      	b.n	80104d6 <_vfiprintf_r+0x15a>
 801054c:	fb0c 2101 	mla	r1, ip, r1, r2
 8010550:	4604      	mov	r4, r0
 8010552:	2301      	movs	r3, #1
 8010554:	e7f0      	b.n	8010538 <_vfiprintf_r+0x1bc>
 8010556:	ab03      	add	r3, sp, #12
 8010558:	9300      	str	r3, [sp, #0]
 801055a:	462a      	mov	r2, r5
 801055c:	4b12      	ldr	r3, [pc, #72]	; (80105a8 <_vfiprintf_r+0x22c>)
 801055e:	a904      	add	r1, sp, #16
 8010560:	4630      	mov	r0, r6
 8010562:	f3af 8000 	nop.w
 8010566:	4607      	mov	r7, r0
 8010568:	1c78      	adds	r0, r7, #1
 801056a:	d1d6      	bne.n	801051a <_vfiprintf_r+0x19e>
 801056c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801056e:	07d9      	lsls	r1, r3, #31
 8010570:	d405      	bmi.n	801057e <_vfiprintf_r+0x202>
 8010572:	89ab      	ldrh	r3, [r5, #12]
 8010574:	059a      	lsls	r2, r3, #22
 8010576:	d402      	bmi.n	801057e <_vfiprintf_r+0x202>
 8010578:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801057a:	f7ff f998 	bl	800f8ae <__retarget_lock_release_recursive>
 801057e:	89ab      	ldrh	r3, [r5, #12]
 8010580:	065b      	lsls	r3, r3, #25
 8010582:	f53f af1d 	bmi.w	80103c0 <_vfiprintf_r+0x44>
 8010586:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010588:	e71c      	b.n	80103c4 <_vfiprintf_r+0x48>
 801058a:	ab03      	add	r3, sp, #12
 801058c:	9300      	str	r3, [sp, #0]
 801058e:	462a      	mov	r2, r5
 8010590:	4b05      	ldr	r3, [pc, #20]	; (80105a8 <_vfiprintf_r+0x22c>)
 8010592:	a904      	add	r1, sp, #16
 8010594:	4630      	mov	r0, r6
 8010596:	f7ff fc77 	bl	800fe88 <_printf_i>
 801059a:	e7e4      	b.n	8010566 <_vfiprintf_r+0x1ea>
 801059c:	080111cb 	.word	0x080111cb
 80105a0:	080111d5 	.word	0x080111d5
 80105a4:	00000000 	.word	0x00000000
 80105a8:	08010357 	.word	0x08010357
 80105ac:	080111d1 	.word	0x080111d1

080105b0 <__swbuf_r>:
 80105b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80105b2:	460e      	mov	r6, r1
 80105b4:	4614      	mov	r4, r2
 80105b6:	4605      	mov	r5, r0
 80105b8:	b118      	cbz	r0, 80105c2 <__swbuf_r+0x12>
 80105ba:	6a03      	ldr	r3, [r0, #32]
 80105bc:	b90b      	cbnz	r3, 80105c2 <__swbuf_r+0x12>
 80105be:	f7fe fff5 	bl	800f5ac <__sinit>
 80105c2:	69a3      	ldr	r3, [r4, #24]
 80105c4:	60a3      	str	r3, [r4, #8]
 80105c6:	89a3      	ldrh	r3, [r4, #12]
 80105c8:	071a      	lsls	r2, r3, #28
 80105ca:	d525      	bpl.n	8010618 <__swbuf_r+0x68>
 80105cc:	6923      	ldr	r3, [r4, #16]
 80105ce:	b31b      	cbz	r3, 8010618 <__swbuf_r+0x68>
 80105d0:	6823      	ldr	r3, [r4, #0]
 80105d2:	6922      	ldr	r2, [r4, #16]
 80105d4:	1a98      	subs	r0, r3, r2
 80105d6:	6963      	ldr	r3, [r4, #20]
 80105d8:	b2f6      	uxtb	r6, r6
 80105da:	4283      	cmp	r3, r0
 80105dc:	4637      	mov	r7, r6
 80105de:	dc04      	bgt.n	80105ea <__swbuf_r+0x3a>
 80105e0:	4621      	mov	r1, r4
 80105e2:	4628      	mov	r0, r5
 80105e4:	f7ff fdf8 	bl	80101d8 <_fflush_r>
 80105e8:	b9e0      	cbnz	r0, 8010624 <__swbuf_r+0x74>
 80105ea:	68a3      	ldr	r3, [r4, #8]
 80105ec:	3b01      	subs	r3, #1
 80105ee:	60a3      	str	r3, [r4, #8]
 80105f0:	6823      	ldr	r3, [r4, #0]
 80105f2:	1c5a      	adds	r2, r3, #1
 80105f4:	6022      	str	r2, [r4, #0]
 80105f6:	701e      	strb	r6, [r3, #0]
 80105f8:	6962      	ldr	r2, [r4, #20]
 80105fa:	1c43      	adds	r3, r0, #1
 80105fc:	429a      	cmp	r2, r3
 80105fe:	d004      	beq.n	801060a <__swbuf_r+0x5a>
 8010600:	89a3      	ldrh	r3, [r4, #12]
 8010602:	07db      	lsls	r3, r3, #31
 8010604:	d506      	bpl.n	8010614 <__swbuf_r+0x64>
 8010606:	2e0a      	cmp	r6, #10
 8010608:	d104      	bne.n	8010614 <__swbuf_r+0x64>
 801060a:	4621      	mov	r1, r4
 801060c:	4628      	mov	r0, r5
 801060e:	f7ff fde3 	bl	80101d8 <_fflush_r>
 8010612:	b938      	cbnz	r0, 8010624 <__swbuf_r+0x74>
 8010614:	4638      	mov	r0, r7
 8010616:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010618:	4621      	mov	r1, r4
 801061a:	4628      	mov	r0, r5
 801061c:	f000 f806 	bl	801062c <__swsetup_r>
 8010620:	2800      	cmp	r0, #0
 8010622:	d0d5      	beq.n	80105d0 <__swbuf_r+0x20>
 8010624:	f04f 37ff 	mov.w	r7, #4294967295
 8010628:	e7f4      	b.n	8010614 <__swbuf_r+0x64>
	...

0801062c <__swsetup_r>:
 801062c:	b538      	push	{r3, r4, r5, lr}
 801062e:	4b2a      	ldr	r3, [pc, #168]	; (80106d8 <__swsetup_r+0xac>)
 8010630:	4605      	mov	r5, r0
 8010632:	6818      	ldr	r0, [r3, #0]
 8010634:	460c      	mov	r4, r1
 8010636:	b118      	cbz	r0, 8010640 <__swsetup_r+0x14>
 8010638:	6a03      	ldr	r3, [r0, #32]
 801063a:	b90b      	cbnz	r3, 8010640 <__swsetup_r+0x14>
 801063c:	f7fe ffb6 	bl	800f5ac <__sinit>
 8010640:	89a3      	ldrh	r3, [r4, #12]
 8010642:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010646:	0718      	lsls	r0, r3, #28
 8010648:	d422      	bmi.n	8010690 <__swsetup_r+0x64>
 801064a:	06d9      	lsls	r1, r3, #27
 801064c:	d407      	bmi.n	801065e <__swsetup_r+0x32>
 801064e:	2309      	movs	r3, #9
 8010650:	602b      	str	r3, [r5, #0]
 8010652:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8010656:	81a3      	strh	r3, [r4, #12]
 8010658:	f04f 30ff 	mov.w	r0, #4294967295
 801065c:	e034      	b.n	80106c8 <__swsetup_r+0x9c>
 801065e:	0758      	lsls	r0, r3, #29
 8010660:	d512      	bpl.n	8010688 <__swsetup_r+0x5c>
 8010662:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010664:	b141      	cbz	r1, 8010678 <__swsetup_r+0x4c>
 8010666:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801066a:	4299      	cmp	r1, r3
 801066c:	d002      	beq.n	8010674 <__swsetup_r+0x48>
 801066e:	4628      	mov	r0, r5
 8010670:	f7ff f944 	bl	800f8fc <_free_r>
 8010674:	2300      	movs	r3, #0
 8010676:	6363      	str	r3, [r4, #52]	; 0x34
 8010678:	89a3      	ldrh	r3, [r4, #12]
 801067a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801067e:	81a3      	strh	r3, [r4, #12]
 8010680:	2300      	movs	r3, #0
 8010682:	6063      	str	r3, [r4, #4]
 8010684:	6923      	ldr	r3, [r4, #16]
 8010686:	6023      	str	r3, [r4, #0]
 8010688:	89a3      	ldrh	r3, [r4, #12]
 801068a:	f043 0308 	orr.w	r3, r3, #8
 801068e:	81a3      	strh	r3, [r4, #12]
 8010690:	6923      	ldr	r3, [r4, #16]
 8010692:	b94b      	cbnz	r3, 80106a8 <__swsetup_r+0x7c>
 8010694:	89a3      	ldrh	r3, [r4, #12]
 8010696:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801069a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801069e:	d003      	beq.n	80106a8 <__swsetup_r+0x7c>
 80106a0:	4621      	mov	r1, r4
 80106a2:	4628      	mov	r0, r5
 80106a4:	f000 f88c 	bl	80107c0 <__smakebuf_r>
 80106a8:	89a0      	ldrh	r0, [r4, #12]
 80106aa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80106ae:	f010 0301 	ands.w	r3, r0, #1
 80106b2:	d00a      	beq.n	80106ca <__swsetup_r+0x9e>
 80106b4:	2300      	movs	r3, #0
 80106b6:	60a3      	str	r3, [r4, #8]
 80106b8:	6963      	ldr	r3, [r4, #20]
 80106ba:	425b      	negs	r3, r3
 80106bc:	61a3      	str	r3, [r4, #24]
 80106be:	6923      	ldr	r3, [r4, #16]
 80106c0:	b943      	cbnz	r3, 80106d4 <__swsetup_r+0xa8>
 80106c2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80106c6:	d1c4      	bne.n	8010652 <__swsetup_r+0x26>
 80106c8:	bd38      	pop	{r3, r4, r5, pc}
 80106ca:	0781      	lsls	r1, r0, #30
 80106cc:	bf58      	it	pl
 80106ce:	6963      	ldrpl	r3, [r4, #20]
 80106d0:	60a3      	str	r3, [r4, #8]
 80106d2:	e7f4      	b.n	80106be <__swsetup_r+0x92>
 80106d4:	2000      	movs	r0, #0
 80106d6:	e7f7      	b.n	80106c8 <__swsetup_r+0x9c>
 80106d8:	20000174 	.word	0x20000174

080106dc <_raise_r>:
 80106dc:	291f      	cmp	r1, #31
 80106de:	b538      	push	{r3, r4, r5, lr}
 80106e0:	4604      	mov	r4, r0
 80106e2:	460d      	mov	r5, r1
 80106e4:	d904      	bls.n	80106f0 <_raise_r+0x14>
 80106e6:	2316      	movs	r3, #22
 80106e8:	6003      	str	r3, [r0, #0]
 80106ea:	f04f 30ff 	mov.w	r0, #4294967295
 80106ee:	bd38      	pop	{r3, r4, r5, pc}
 80106f0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80106f2:	b112      	cbz	r2, 80106fa <_raise_r+0x1e>
 80106f4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80106f8:	b94b      	cbnz	r3, 801070e <_raise_r+0x32>
 80106fa:	4620      	mov	r0, r4
 80106fc:	f000 f830 	bl	8010760 <_getpid_r>
 8010700:	462a      	mov	r2, r5
 8010702:	4601      	mov	r1, r0
 8010704:	4620      	mov	r0, r4
 8010706:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801070a:	f000 b817 	b.w	801073c <_kill_r>
 801070e:	2b01      	cmp	r3, #1
 8010710:	d00a      	beq.n	8010728 <_raise_r+0x4c>
 8010712:	1c59      	adds	r1, r3, #1
 8010714:	d103      	bne.n	801071e <_raise_r+0x42>
 8010716:	2316      	movs	r3, #22
 8010718:	6003      	str	r3, [r0, #0]
 801071a:	2001      	movs	r0, #1
 801071c:	e7e7      	b.n	80106ee <_raise_r+0x12>
 801071e:	2400      	movs	r4, #0
 8010720:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8010724:	4628      	mov	r0, r5
 8010726:	4798      	blx	r3
 8010728:	2000      	movs	r0, #0
 801072a:	e7e0      	b.n	80106ee <_raise_r+0x12>

0801072c <raise>:
 801072c:	4b02      	ldr	r3, [pc, #8]	; (8010738 <raise+0xc>)
 801072e:	4601      	mov	r1, r0
 8010730:	6818      	ldr	r0, [r3, #0]
 8010732:	f7ff bfd3 	b.w	80106dc <_raise_r>
 8010736:	bf00      	nop
 8010738:	20000174 	.word	0x20000174

0801073c <_kill_r>:
 801073c:	b538      	push	{r3, r4, r5, lr}
 801073e:	4d07      	ldr	r5, [pc, #28]	; (801075c <_kill_r+0x20>)
 8010740:	2300      	movs	r3, #0
 8010742:	4604      	mov	r4, r0
 8010744:	4608      	mov	r0, r1
 8010746:	4611      	mov	r1, r2
 8010748:	602b      	str	r3, [r5, #0]
 801074a:	f7f2 f98d 	bl	8002a68 <_kill>
 801074e:	1c43      	adds	r3, r0, #1
 8010750:	d102      	bne.n	8010758 <_kill_r+0x1c>
 8010752:	682b      	ldr	r3, [r5, #0]
 8010754:	b103      	cbz	r3, 8010758 <_kill_r+0x1c>
 8010756:	6023      	str	r3, [r4, #0]
 8010758:	bd38      	pop	{r3, r4, r5, pc}
 801075a:	bf00      	nop
 801075c:	200041b0 	.word	0x200041b0

08010760 <_getpid_r>:
 8010760:	f7f2 b97a 	b.w	8002a58 <_getpid>

08010764 <_malloc_usable_size_r>:
 8010764:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010768:	1f18      	subs	r0, r3, #4
 801076a:	2b00      	cmp	r3, #0
 801076c:	bfbc      	itt	lt
 801076e:	580b      	ldrlt	r3, [r1, r0]
 8010770:	18c0      	addlt	r0, r0, r3
 8010772:	4770      	bx	lr

08010774 <__swhatbuf_r>:
 8010774:	b570      	push	{r4, r5, r6, lr}
 8010776:	460c      	mov	r4, r1
 8010778:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801077c:	2900      	cmp	r1, #0
 801077e:	b096      	sub	sp, #88	; 0x58
 8010780:	4615      	mov	r5, r2
 8010782:	461e      	mov	r6, r3
 8010784:	da0d      	bge.n	80107a2 <__swhatbuf_r+0x2e>
 8010786:	89a3      	ldrh	r3, [r4, #12]
 8010788:	f013 0f80 	tst.w	r3, #128	; 0x80
 801078c:	f04f 0100 	mov.w	r1, #0
 8010790:	bf0c      	ite	eq
 8010792:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8010796:	2340      	movne	r3, #64	; 0x40
 8010798:	2000      	movs	r0, #0
 801079a:	6031      	str	r1, [r6, #0]
 801079c:	602b      	str	r3, [r5, #0]
 801079e:	b016      	add	sp, #88	; 0x58
 80107a0:	bd70      	pop	{r4, r5, r6, pc}
 80107a2:	466a      	mov	r2, sp
 80107a4:	f000 f848 	bl	8010838 <_fstat_r>
 80107a8:	2800      	cmp	r0, #0
 80107aa:	dbec      	blt.n	8010786 <__swhatbuf_r+0x12>
 80107ac:	9901      	ldr	r1, [sp, #4]
 80107ae:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80107b2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80107b6:	4259      	negs	r1, r3
 80107b8:	4159      	adcs	r1, r3
 80107ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80107be:	e7eb      	b.n	8010798 <__swhatbuf_r+0x24>

080107c0 <__smakebuf_r>:
 80107c0:	898b      	ldrh	r3, [r1, #12]
 80107c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80107c4:	079d      	lsls	r5, r3, #30
 80107c6:	4606      	mov	r6, r0
 80107c8:	460c      	mov	r4, r1
 80107ca:	d507      	bpl.n	80107dc <__smakebuf_r+0x1c>
 80107cc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80107d0:	6023      	str	r3, [r4, #0]
 80107d2:	6123      	str	r3, [r4, #16]
 80107d4:	2301      	movs	r3, #1
 80107d6:	6163      	str	r3, [r4, #20]
 80107d8:	b002      	add	sp, #8
 80107da:	bd70      	pop	{r4, r5, r6, pc}
 80107dc:	ab01      	add	r3, sp, #4
 80107de:	466a      	mov	r2, sp
 80107e0:	f7ff ffc8 	bl	8010774 <__swhatbuf_r>
 80107e4:	9900      	ldr	r1, [sp, #0]
 80107e6:	4605      	mov	r5, r0
 80107e8:	4630      	mov	r0, r6
 80107ea:	f7ff f8fb 	bl	800f9e4 <_malloc_r>
 80107ee:	b948      	cbnz	r0, 8010804 <__smakebuf_r+0x44>
 80107f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80107f4:	059a      	lsls	r2, r3, #22
 80107f6:	d4ef      	bmi.n	80107d8 <__smakebuf_r+0x18>
 80107f8:	f023 0303 	bic.w	r3, r3, #3
 80107fc:	f043 0302 	orr.w	r3, r3, #2
 8010800:	81a3      	strh	r3, [r4, #12]
 8010802:	e7e3      	b.n	80107cc <__smakebuf_r+0xc>
 8010804:	89a3      	ldrh	r3, [r4, #12]
 8010806:	6020      	str	r0, [r4, #0]
 8010808:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801080c:	81a3      	strh	r3, [r4, #12]
 801080e:	9b00      	ldr	r3, [sp, #0]
 8010810:	6163      	str	r3, [r4, #20]
 8010812:	9b01      	ldr	r3, [sp, #4]
 8010814:	6120      	str	r0, [r4, #16]
 8010816:	b15b      	cbz	r3, 8010830 <__smakebuf_r+0x70>
 8010818:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801081c:	4630      	mov	r0, r6
 801081e:	f000 f81d 	bl	801085c <_isatty_r>
 8010822:	b128      	cbz	r0, 8010830 <__smakebuf_r+0x70>
 8010824:	89a3      	ldrh	r3, [r4, #12]
 8010826:	f023 0303 	bic.w	r3, r3, #3
 801082a:	f043 0301 	orr.w	r3, r3, #1
 801082e:	81a3      	strh	r3, [r4, #12]
 8010830:	89a3      	ldrh	r3, [r4, #12]
 8010832:	431d      	orrs	r5, r3
 8010834:	81a5      	strh	r5, [r4, #12]
 8010836:	e7cf      	b.n	80107d8 <__smakebuf_r+0x18>

08010838 <_fstat_r>:
 8010838:	b538      	push	{r3, r4, r5, lr}
 801083a:	4d07      	ldr	r5, [pc, #28]	; (8010858 <_fstat_r+0x20>)
 801083c:	2300      	movs	r3, #0
 801083e:	4604      	mov	r4, r0
 8010840:	4608      	mov	r0, r1
 8010842:	4611      	mov	r1, r2
 8010844:	602b      	str	r3, [r5, #0]
 8010846:	f7f2 f96e 	bl	8002b26 <_fstat>
 801084a:	1c43      	adds	r3, r0, #1
 801084c:	d102      	bne.n	8010854 <_fstat_r+0x1c>
 801084e:	682b      	ldr	r3, [r5, #0]
 8010850:	b103      	cbz	r3, 8010854 <_fstat_r+0x1c>
 8010852:	6023      	str	r3, [r4, #0]
 8010854:	bd38      	pop	{r3, r4, r5, pc}
 8010856:	bf00      	nop
 8010858:	200041b0 	.word	0x200041b0

0801085c <_isatty_r>:
 801085c:	b538      	push	{r3, r4, r5, lr}
 801085e:	4d06      	ldr	r5, [pc, #24]	; (8010878 <_isatty_r+0x1c>)
 8010860:	2300      	movs	r3, #0
 8010862:	4604      	mov	r4, r0
 8010864:	4608      	mov	r0, r1
 8010866:	602b      	str	r3, [r5, #0]
 8010868:	f7f2 f96d 	bl	8002b46 <_isatty>
 801086c:	1c43      	adds	r3, r0, #1
 801086e:	d102      	bne.n	8010876 <_isatty_r+0x1a>
 8010870:	682b      	ldr	r3, [r5, #0]
 8010872:	b103      	cbz	r3, 8010876 <_isatty_r+0x1a>
 8010874:	6023      	str	r3, [r4, #0]
 8010876:	bd38      	pop	{r3, r4, r5, pc}
 8010878:	200041b0 	.word	0x200041b0

0801087c <_init>:
 801087c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801087e:	bf00      	nop
 8010880:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010882:	bc08      	pop	{r3}
 8010884:	469e      	mov	lr, r3
 8010886:	4770      	bx	lr

08010888 <_fini>:
 8010888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801088a:	bf00      	nop
 801088c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801088e:	bc08      	pop	{r3}
 8010890:	469e      	mov	lr, r3
 8010892:	4770      	bx	lr
