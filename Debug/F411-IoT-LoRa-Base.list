
F411-IoT-LoRa-Base.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fdd8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009b4  0800ff78  0800ff78  0001ff78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801092c  0801092c  00030178  2**0
                  CONTENTS
  4 .ARM          00000008  0801092c  0801092c  0002092c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010934  08010934  00030178  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010934  08010934  00020934  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010938  08010938  00020938  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000178  20000000  0801093c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004448  20000178  08010ab4  00030178  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200045c0  08010ab4  000345c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030178  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000301a8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015b8a  00000000  00000000  000301eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000030a7  00000000  00000000  00045d75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001190  00000000  00000000  00048e20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e3b  00000000  00000000  00049fb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018878  00000000  00000000  0004adeb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018124  00000000  00000000  00063663  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00093b1c  00000000  00000000  0007b787  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005668  00000000  00000000  0010f2a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  0011490c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000178 	.word	0x20000178
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800ff60 	.word	0x0800ff60

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000017c 	.word	0x2000017c
 80001dc:	0800ff60 	.word	0x0800ff60

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b970 	b.w	80005a8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	460d      	mov	r5, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	460f      	mov	r7, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4694      	mov	ip, r2
 80002f4:	d965      	bls.n	80003c2 <__udivmoddi4+0xe2>
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	b143      	cbz	r3, 800030e <__udivmoddi4+0x2e>
 80002fc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000300:	f1c3 0220 	rsb	r2, r3, #32
 8000304:	409f      	lsls	r7, r3
 8000306:	fa20 f202 	lsr.w	r2, r0, r2
 800030a:	4317      	orrs	r7, r2
 800030c:	409c      	lsls	r4, r3
 800030e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000312:	fa1f f58c 	uxth.w	r5, ip
 8000316:	fbb7 f1fe 	udiv	r1, r7, lr
 800031a:	0c22      	lsrs	r2, r4, #16
 800031c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000320:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000324:	fb01 f005 	mul.w	r0, r1, r5
 8000328:	4290      	cmp	r0, r2
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x62>
 800032c:	eb1c 0202 	adds.w	r2, ip, r2
 8000330:	f101 37ff 	add.w	r7, r1, #4294967295
 8000334:	f080 811c 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000338:	4290      	cmp	r0, r2
 800033a:	f240 8119 	bls.w	8000570 <__udivmoddi4+0x290>
 800033e:	3902      	subs	r1, #2
 8000340:	4462      	add	r2, ip
 8000342:	1a12      	subs	r2, r2, r0
 8000344:	b2a4      	uxth	r4, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000352:	fb00 f505 	mul.w	r5, r0, r5
 8000356:	42a5      	cmp	r5, r4
 8000358:	d90a      	bls.n	8000370 <__udivmoddi4+0x90>
 800035a:	eb1c 0404 	adds.w	r4, ip, r4
 800035e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000362:	f080 8107 	bcs.w	8000574 <__udivmoddi4+0x294>
 8000366:	42a5      	cmp	r5, r4
 8000368:	f240 8104 	bls.w	8000574 <__udivmoddi4+0x294>
 800036c:	4464      	add	r4, ip
 800036e:	3802      	subs	r0, #2
 8000370:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000374:	1b64      	subs	r4, r4, r5
 8000376:	2100      	movs	r1, #0
 8000378:	b11e      	cbz	r6, 8000382 <__udivmoddi4+0xa2>
 800037a:	40dc      	lsrs	r4, r3
 800037c:	2300      	movs	r3, #0
 800037e:	e9c6 4300 	strd	r4, r3, [r6]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0xbc>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80ed 	beq.w	800056a <__udivmoddi4+0x28a>
 8000390:	2100      	movs	r1, #0
 8000392:	e9c6 0500 	strd	r0, r5, [r6]
 8000396:	4608      	mov	r0, r1
 8000398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039c:	fab3 f183 	clz	r1, r3
 80003a0:	2900      	cmp	r1, #0
 80003a2:	d149      	bne.n	8000438 <__udivmoddi4+0x158>
 80003a4:	42ab      	cmp	r3, r5
 80003a6:	d302      	bcc.n	80003ae <__udivmoddi4+0xce>
 80003a8:	4282      	cmp	r2, r0
 80003aa:	f200 80f8 	bhi.w	800059e <__udivmoddi4+0x2be>
 80003ae:	1a84      	subs	r4, r0, r2
 80003b0:	eb65 0203 	sbc.w	r2, r5, r3
 80003b4:	2001      	movs	r0, #1
 80003b6:	4617      	mov	r7, r2
 80003b8:	2e00      	cmp	r6, #0
 80003ba:	d0e2      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	e9c6 4700 	strd	r4, r7, [r6]
 80003c0:	e7df      	b.n	8000382 <__udivmoddi4+0xa2>
 80003c2:	b902      	cbnz	r2, 80003c6 <__udivmoddi4+0xe6>
 80003c4:	deff      	udf	#255	; 0xff
 80003c6:	fab2 f382 	clz	r3, r2
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8090 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d0:	1a8a      	subs	r2, r1, r2
 80003d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d6:	fa1f fe8c 	uxth.w	lr, ip
 80003da:	2101      	movs	r1, #1
 80003dc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003e0:	fb07 2015 	mls	r0, r7, r5, r2
 80003e4:	0c22      	lsrs	r2, r4, #16
 80003e6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ea:	fb0e f005 	mul.w	r0, lr, r5
 80003ee:	4290      	cmp	r0, r2
 80003f0:	d908      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f2:	eb1c 0202 	adds.w	r2, ip, r2
 80003f6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4290      	cmp	r0, r2
 80003fe:	f200 80cb 	bhi.w	8000598 <__udivmoddi4+0x2b8>
 8000402:	4645      	mov	r5, r8
 8000404:	1a12      	subs	r2, r2, r0
 8000406:	b2a4      	uxth	r4, r4
 8000408:	fbb2 f0f7 	udiv	r0, r2, r7
 800040c:	fb07 2210 	mls	r2, r7, r0, r2
 8000410:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000414:	fb0e fe00 	mul.w	lr, lr, r0
 8000418:	45a6      	cmp	lr, r4
 800041a:	d908      	bls.n	800042e <__udivmoddi4+0x14e>
 800041c:	eb1c 0404 	adds.w	r4, ip, r4
 8000420:	f100 32ff 	add.w	r2, r0, #4294967295
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x14c>
 8000426:	45a6      	cmp	lr, r4
 8000428:	f200 80bb 	bhi.w	80005a2 <__udivmoddi4+0x2c2>
 800042c:	4610      	mov	r0, r2
 800042e:	eba4 040e 	sub.w	r4, r4, lr
 8000432:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000436:	e79f      	b.n	8000378 <__udivmoddi4+0x98>
 8000438:	f1c1 0720 	rsb	r7, r1, #32
 800043c:	408b      	lsls	r3, r1
 800043e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000442:	ea4c 0c03 	orr.w	ip, ip, r3
 8000446:	fa05 f401 	lsl.w	r4, r5, r1
 800044a:	fa20 f307 	lsr.w	r3, r0, r7
 800044e:	40fd      	lsrs	r5, r7
 8000450:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000454:	4323      	orrs	r3, r4
 8000456:	fbb5 f8f9 	udiv	r8, r5, r9
 800045a:	fa1f fe8c 	uxth.w	lr, ip
 800045e:	fb09 5518 	mls	r5, r9, r8, r5
 8000462:	0c1c      	lsrs	r4, r3, #16
 8000464:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000468:	fb08 f50e 	mul.w	r5, r8, lr
 800046c:	42a5      	cmp	r5, r4
 800046e:	fa02 f201 	lsl.w	r2, r2, r1
 8000472:	fa00 f001 	lsl.w	r0, r0, r1
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000480:	f080 8088 	bcs.w	8000594 <__udivmoddi4+0x2b4>
 8000484:	42a5      	cmp	r5, r4
 8000486:	f240 8085 	bls.w	8000594 <__udivmoddi4+0x2b4>
 800048a:	f1a8 0802 	sub.w	r8, r8, #2
 800048e:	4464      	add	r4, ip
 8000490:	1b64      	subs	r4, r4, r5
 8000492:	b29d      	uxth	r5, r3
 8000494:	fbb4 f3f9 	udiv	r3, r4, r9
 8000498:	fb09 4413 	mls	r4, r9, r3, r4
 800049c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004a0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004a4:	45a6      	cmp	lr, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f103 35ff 	add.w	r5, r3, #4294967295
 80004b0:	d26c      	bcs.n	800058c <__udivmoddi4+0x2ac>
 80004b2:	45a6      	cmp	lr, r4
 80004b4:	d96a      	bls.n	800058c <__udivmoddi4+0x2ac>
 80004b6:	3b02      	subs	r3, #2
 80004b8:	4464      	add	r4, ip
 80004ba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004be:	fba3 9502 	umull	r9, r5, r3, r2
 80004c2:	eba4 040e 	sub.w	r4, r4, lr
 80004c6:	42ac      	cmp	r4, r5
 80004c8:	46c8      	mov	r8, r9
 80004ca:	46ae      	mov	lr, r5
 80004cc:	d356      	bcc.n	800057c <__udivmoddi4+0x29c>
 80004ce:	d053      	beq.n	8000578 <__udivmoddi4+0x298>
 80004d0:	b156      	cbz	r6, 80004e8 <__udivmoddi4+0x208>
 80004d2:	ebb0 0208 	subs.w	r2, r0, r8
 80004d6:	eb64 040e 	sbc.w	r4, r4, lr
 80004da:	fa04 f707 	lsl.w	r7, r4, r7
 80004de:	40ca      	lsrs	r2, r1
 80004e0:	40cc      	lsrs	r4, r1
 80004e2:	4317      	orrs	r7, r2
 80004e4:	e9c6 7400 	strd	r7, r4, [r6]
 80004e8:	4618      	mov	r0, r3
 80004ea:	2100      	movs	r1, #0
 80004ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004f0:	f1c3 0120 	rsb	r1, r3, #32
 80004f4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004f8:	fa20 f201 	lsr.w	r2, r0, r1
 80004fc:	fa25 f101 	lsr.w	r1, r5, r1
 8000500:	409d      	lsls	r5, r3
 8000502:	432a      	orrs	r2, r5
 8000504:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000508:	fa1f fe8c 	uxth.w	lr, ip
 800050c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000510:	fb07 1510 	mls	r5, r7, r0, r1
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800051a:	fb00 f50e 	mul.w	r5, r0, lr
 800051e:	428d      	cmp	r5, r1
 8000520:	fa04 f403 	lsl.w	r4, r4, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x258>
 8000526:	eb1c 0101 	adds.w	r1, ip, r1
 800052a:	f100 38ff 	add.w	r8, r0, #4294967295
 800052e:	d22f      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000530:	428d      	cmp	r5, r1
 8000532:	d92d      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000534:	3802      	subs	r0, #2
 8000536:	4461      	add	r1, ip
 8000538:	1b49      	subs	r1, r1, r5
 800053a:	b292      	uxth	r2, r2
 800053c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000540:	fb07 1115 	mls	r1, r7, r5, r1
 8000544:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000548:	fb05 f10e 	mul.w	r1, r5, lr
 800054c:	4291      	cmp	r1, r2
 800054e:	d908      	bls.n	8000562 <__udivmoddi4+0x282>
 8000550:	eb1c 0202 	adds.w	r2, ip, r2
 8000554:	f105 38ff 	add.w	r8, r5, #4294967295
 8000558:	d216      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 800055a:	4291      	cmp	r1, r2
 800055c:	d914      	bls.n	8000588 <__udivmoddi4+0x2a8>
 800055e:	3d02      	subs	r5, #2
 8000560:	4462      	add	r2, ip
 8000562:	1a52      	subs	r2, r2, r1
 8000564:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000568:	e738      	b.n	80003dc <__udivmoddi4+0xfc>
 800056a:	4631      	mov	r1, r6
 800056c:	4630      	mov	r0, r6
 800056e:	e708      	b.n	8000382 <__udivmoddi4+0xa2>
 8000570:	4639      	mov	r1, r7
 8000572:	e6e6      	b.n	8000342 <__udivmoddi4+0x62>
 8000574:	4610      	mov	r0, r2
 8000576:	e6fb      	b.n	8000370 <__udivmoddi4+0x90>
 8000578:	4548      	cmp	r0, r9
 800057a:	d2a9      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 800057c:	ebb9 0802 	subs.w	r8, r9, r2
 8000580:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000584:	3b01      	subs	r3, #1
 8000586:	e7a3      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000588:	4645      	mov	r5, r8
 800058a:	e7ea      	b.n	8000562 <__udivmoddi4+0x282>
 800058c:	462b      	mov	r3, r5
 800058e:	e794      	b.n	80004ba <__udivmoddi4+0x1da>
 8000590:	4640      	mov	r0, r8
 8000592:	e7d1      	b.n	8000538 <__udivmoddi4+0x258>
 8000594:	46d0      	mov	r8, sl
 8000596:	e77b      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000598:	3d02      	subs	r5, #2
 800059a:	4462      	add	r2, ip
 800059c:	e732      	b.n	8000404 <__udivmoddi4+0x124>
 800059e:	4608      	mov	r0, r1
 80005a0:	e70a      	b.n	80003b8 <__udivmoddi4+0xd8>
 80005a2:	4464      	add	r4, ip
 80005a4:	3802      	subs	r0, #2
 80005a6:	e742      	b.n	800042e <__udivmoddi4+0x14e>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80005ac:	b480      	push	{r7}
 80005ae:	b083      	sub	sp, #12
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	4603      	mov	r3, r0
 80005b4:	6039      	str	r1, [r7, #0]
 80005b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005bc:	2b00      	cmp	r3, #0
 80005be:	db0a      	blt.n	80005d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005c0:	683b      	ldr	r3, [r7, #0]
 80005c2:	b2da      	uxtb	r2, r3
 80005c4:	490c      	ldr	r1, [pc, #48]	; (80005f8 <__NVIC_SetPriority+0x4c>)
 80005c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005ca:	0112      	lsls	r2, r2, #4
 80005cc:	b2d2      	uxtb	r2, r2
 80005ce:	440b      	add	r3, r1
 80005d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80005d4:	e00a      	b.n	80005ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005d6:	683b      	ldr	r3, [r7, #0]
 80005d8:	b2da      	uxtb	r2, r3
 80005da:	4908      	ldr	r1, [pc, #32]	; (80005fc <__NVIC_SetPriority+0x50>)
 80005dc:	79fb      	ldrb	r3, [r7, #7]
 80005de:	f003 030f 	and.w	r3, r3, #15
 80005e2:	3b04      	subs	r3, #4
 80005e4:	0112      	lsls	r2, r2, #4
 80005e6:	b2d2      	uxtb	r2, r2
 80005e8:	440b      	add	r3, r1
 80005ea:	761a      	strb	r2, [r3, #24]
}
 80005ec:	bf00      	nop
 80005ee:	370c      	adds	r7, #12
 80005f0:	46bd      	mov	sp, r7
 80005f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f6:	4770      	bx	lr
 80005f8:	e000e100 	.word	0xe000e100
 80005fc:	e000ed00 	.word	0xe000ed00

08000600 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	3b01      	subs	r3, #1
 800060c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000610:	d301      	bcc.n	8000616 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000612:	2301      	movs	r3, #1
 8000614:	e00f      	b.n	8000636 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000616:	4a0a      	ldr	r2, [pc, #40]	; (8000640 <SysTick_Config+0x40>)
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	3b01      	subs	r3, #1
 800061c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800061e:	210f      	movs	r1, #15
 8000620:	f04f 30ff 	mov.w	r0, #4294967295
 8000624:	f7ff ffc2 	bl	80005ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000628:	4b05      	ldr	r3, [pc, #20]	; (8000640 <SysTick_Config+0x40>)
 800062a:	2200      	movs	r2, #0
 800062c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800062e:	4b04      	ldr	r3, [pc, #16]	; (8000640 <SysTick_Config+0x40>)
 8000630:	2207      	movs	r2, #7
 8000632:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000634:	2300      	movs	r3, #0
}
 8000636:	4618      	mov	r0, r3
 8000638:	3708      	adds	r7, #8
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	e000e010 	.word	0xe000e010

08000644 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000644:	b480      	push	{r7}
 8000646:	b083      	sub	sp, #12
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800064c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000650:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000654:	f003 0301 	and.w	r3, r3, #1
 8000658:	2b00      	cmp	r3, #0
 800065a:	d013      	beq.n	8000684 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800065c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000660:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000664:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000668:	2b00      	cmp	r3, #0
 800066a:	d00b      	beq.n	8000684 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800066c:	e000      	b.n	8000670 <ITM_SendChar+0x2c>
    {
      __NOP();
 800066e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000670:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	2b00      	cmp	r3, #0
 8000678:	d0f9      	beq.n	800066e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800067a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800067e:	687a      	ldr	r2, [r7, #4]
 8000680:	b2d2      	uxtb	r2, r2
 8000682:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000684:	687b      	ldr	r3, [r7, #4]
}
 8000686:	4618      	mov	r0, r3
 8000688:	370c      	adds	r7, #12
 800068a:	46bd      	mov	sp, r7
 800068c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000690:	4770      	bx	lr
	...

08000694 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000694:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000698:	b0a6      	sub	sp, #152	; 0x98
 800069a:	af14      	add	r7, sp, #80	; 0x50
  /* USER CODE BEGIN 1 */
	//----------------------- ETHERNET W5100 Environment-------------------------//

	//	GATEWAY ADDRESS
		ETH.GAR[0]=192;
 800069c:	4bcf      	ldr	r3, [pc, #828]	; (80009dc <main+0x348>)
 800069e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006a2:	22c0      	movs	r2, #192	; 0xc0
 80006a4:	771a      	strb	r2, [r3, #28]
		ETH.GAR[1]=168;
 80006a6:	4bcd      	ldr	r3, [pc, #820]	; (80009dc <main+0x348>)
 80006a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006ac:	22a8      	movs	r2, #168	; 0xa8
 80006ae:	775a      	strb	r2, [r3, #29]
		ETH.GAR[2]=0;
 80006b0:	4bca      	ldr	r3, [pc, #808]	; (80009dc <main+0x348>)
 80006b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006b6:	2200      	movs	r2, #0
 80006b8:	779a      	strb	r2, [r3, #30]
		ETH.GAR[3]=1;
 80006ba:	4bc8      	ldr	r3, [pc, #800]	; (80009dc <main+0x348>)
 80006bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006c0:	2201      	movs	r2, #1
 80006c2:	77da      	strb	r2, [r3, #31]
	//	SUBNET MASK
		ETH.SUBR[0]=255;
 80006c4:	4bc5      	ldr	r3, [pc, #788]	; (80009dc <main+0x348>)
 80006c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006ca:	22ff      	movs	r2, #255	; 0xff
 80006cc:	f883 2020 	strb.w	r2, [r3, #32]
		ETH.SUBR[1]=255;
 80006d0:	4bc2      	ldr	r3, [pc, #776]	; (80009dc <main+0x348>)
 80006d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006d6:	22ff      	movs	r2, #255	; 0xff
 80006d8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		ETH.SUBR[2]=255;
 80006dc:	4bbf      	ldr	r3, [pc, #764]	; (80009dc <main+0x348>)
 80006de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006e2:	22ff      	movs	r2, #255	; 0xff
 80006e4:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		ETH.SUBR[3]=0;
 80006e8:	4bbc      	ldr	r3, [pc, #752]	; (80009dc <main+0x348>)
 80006ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006ee:	2200      	movs	r2, #0
 80006f0:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	//	MAC ADDRESS
		ETH.SHAR[0]=0x00;
 80006f4:	4bb9      	ldr	r3, [pc, #740]	; (80009dc <main+0x348>)
 80006f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006fa:	2200      	movs	r2, #0
 80006fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		ETH.SHAR[1]=0x08;
 8000700:	4bb6      	ldr	r3, [pc, #728]	; (80009dc <main+0x348>)
 8000702:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000706:	2208      	movs	r2, #8
 8000708:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		ETH.SHAR[2]=0xDC;
 800070c:	4bb3      	ldr	r3, [pc, #716]	; (80009dc <main+0x348>)
 800070e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000712:	22dc      	movs	r2, #220	; 0xdc
 8000714:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
		ETH.SHAR[3]=0x00;
 8000718:	4bb0      	ldr	r3, [pc, #704]	; (80009dc <main+0x348>)
 800071a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800071e:	2200      	movs	r2, #0
 8000720:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		ETH.SHAR[4]=0x00;
 8000724:	4bad      	ldr	r3, [pc, #692]	; (80009dc <main+0x348>)
 8000726:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800072a:	2200      	movs	r2, #0
 800072c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		ETH.SHAR[5]=0x01;
 8000730:	4baa      	ldr	r3, [pc, #680]	; (80009dc <main+0x348>)
 8000732:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000736:	2201      	movs	r2, #1
 8000738:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

	//	IP ADDRESS
		ETH.SIPR[0]=192;
 800073c:	4ba7      	ldr	r3, [pc, #668]	; (80009dc <main+0x348>)
 800073e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000742:	22c0      	movs	r2, #192	; 0xc0
 8000744:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		ETH.SIPR[1]=168;
 8000748:	4ba4      	ldr	r3, [pc, #656]	; (80009dc <main+0x348>)
 800074a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800074e:	22a8      	movs	r2, #168	; 0xa8
 8000750:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		ETH.SIPR[2]=0;
 8000754:	4ba1      	ldr	r3, [pc, #644]	; (80009dc <main+0x348>)
 8000756:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800075a:	2200      	movs	r2, #0
 800075c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		ETH.SIPR[3]=6,//ETH.SIPR[3]=34,
 8000760:	4b9e      	ldr	r3, [pc, #632]	; (80009dc <main+0x348>)
 8000762:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000766:	2206      	movs	r2, #6
 8000768:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	//  Socket RX memory
		ETH.RMSR=0x55;
 800076c:	4b9b      	ldr	r3, [pc, #620]	; (80009dc <main+0x348>)
 800076e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000772:	2255      	movs	r2, #85	; 0x55
 8000774:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	//  Socket TX memory


		ETH.TMSR=0x55;
 8000778:	4b98      	ldr	r3, [pc, #608]	; (80009dc <main+0x348>)
 800077a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800077e:	2255      	movs	r2, #85	; 0x55
 8000780:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	//  S0 Port Number
		ETH.S0_PORT[0]=0x01;
 8000784:	4b95      	ldr	r3, [pc, #596]	; (80009dc <main+0x348>)
 8000786:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800078a:	2201      	movs	r2, #1
 800078c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
		ETH.S0_PORT[1]=0xF6;
 8000790:	4b92      	ldr	r3, [pc, #584]	; (80009dc <main+0x348>)
 8000792:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000796:	22f6      	movs	r2, #246	; 0xf6
 8000798:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	//	S0 Client IP ADDRESS
		ETH.S0_DIPR[0]=192;
 800079c:	4b8f      	ldr	r3, [pc, #572]	; (80009dc <main+0x348>)
 800079e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007a2:	22c0      	movs	r2, #192	; 0xc0
 80007a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
		ETH.S0_DIPR[1]=168;
 80007a8:	4b8c      	ldr	r3, [pc, #560]	; (80009dc <main+0x348>)
 80007aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007ae:	22a8      	movs	r2, #168	; 0xa8
 80007b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
		ETH.S0_DIPR[2]=0;
 80007b4:	4b89      	ldr	r3, [pc, #548]	; (80009dc <main+0x348>)
 80007b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007ba:	2200      	movs	r2, #0
 80007bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
		ETH.S0_DIPR[3]=3;
 80007c0:	4b86      	ldr	r3, [pc, #536]	; (80009dc <main+0x348>)
 80007c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007c6:	2203      	movs	r2, #3
 80007c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
	//	S0 Client IP ADDRESS
		ETH.S0_DPORT[0]=0x01;
 80007cc:	4b83      	ldr	r3, [pc, #524]	; (80009dc <main+0x348>)
 80007ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007d2:	2201      	movs	r2, #1
 80007d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		ETH.S0_DPORT[1]=0xF6;
 80007d8:	4b80      	ldr	r3, [pc, #512]	; (80009dc <main+0x348>)
 80007da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007de:	22f6      	movs	r2, #246	; 0xf6
 80007e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

		ETH.gS0_RX_BASE = 0x6000;
 80007e4:	4b7d      	ldr	r3, [pc, #500]	; (80009dc <main+0x348>)
 80007e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007ea:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 80007ee:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
		ETH.gS0_RX_MASK = 0x07FF;
 80007f2:	4b7a      	ldr	r3, [pc, #488]	; (80009dc <main+0x348>)
 80007f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007f8:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80007fc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
		ETH.gS1_RX_BASE = 0x6800;
 8000800:	4b76      	ldr	r3, [pc, #472]	; (80009dc <main+0x348>)
 8000802:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000806:	f44f 42d0 	mov.w	r2, #26624	; 0x6800
 800080a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
		ETH.gS1_RX_MASK = 0x07FF;
 800080e:	4b73      	ldr	r3, [pc, #460]	; (80009dc <main+0x348>)
 8000810:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000814:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000818:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
		ETH.gS2_RX_BASE = 0x7000;
 800081c:	4b6f      	ldr	r3, [pc, #444]	; (80009dc <main+0x348>)
 800081e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000822:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
 8000826:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
		ETH.gS2_RX_MASK = 0x07FF;
 800082a:	4b6c      	ldr	r3, [pc, #432]	; (80009dc <main+0x348>)
 800082c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000830:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000834:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
		ETH.gS3_RX_BASE = 0x7800;
 8000838:	4b68      	ldr	r3, [pc, #416]	; (80009dc <main+0x348>)
 800083a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800083e:	f44f 42f0 	mov.w	r2, #30720	; 0x7800
 8000842:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
		ETH.gS3_RX_MASK = 0x07FF;
 8000846:	4b65      	ldr	r3, [pc, #404]	; (80009dc <main+0x348>)
 8000848:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800084c:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000850:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
		ETH.gS0_TX_BASE = 0x4000;
 8000854:	4b61      	ldr	r3, [pc, #388]	; (80009dc <main+0x348>)
 8000856:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800085a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800085e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
		ETH.gS0_TX_MASK = 0x07FF;
 8000862:	4b5e      	ldr	r3, [pc, #376]	; (80009dc <main+0x348>)
 8000864:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000868:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800086c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
		ETH.gS1_TX_BASE = 0x4800;
 8000870:	4b5a      	ldr	r3, [pc, #360]	; (80009dc <main+0x348>)
 8000872:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000876:	f44f 4290 	mov.w	r2, #18432	; 0x4800
 800087a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
		ETH.gS1_TX_MASK = 0x07FF;
 800087e:	4b57      	ldr	r3, [pc, #348]	; (80009dc <main+0x348>)
 8000880:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000884:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000888:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
		ETH.gS2_TX_BASE = 0x5000;
 800088c:	4b53      	ldr	r3, [pc, #332]	; (80009dc <main+0x348>)
 800088e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000892:	f44f 42a0 	mov.w	r2, #20480	; 0x5000
 8000896:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
		ETH.gS2_TX_MASK = 0x07FF;
 800089a:	4b50      	ldr	r3, [pc, #320]	; (80009dc <main+0x348>)
 800089c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80008a0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80008a4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
		ETH.gS3_TX_BASE = 0x5800;
 80008a8:	4b4c      	ldr	r3, [pc, #304]	; (80009dc <main+0x348>)
 80008aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80008ae:	f44f 42b0 	mov.w	r2, #22528	; 0x5800
 80008b2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
		ETH.gS3_TX_MASK = 0x07FF;
 80008b6:	4b49      	ldr	r3, [pc, #292]	; (80009dc <main+0x348>)
 80008b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80008bc:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80008c0:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64

		ETH.S0_ENserver = 0;			//Actúa como servidor S0_ENserver=1 o cliente S0_ENserver=0
 80008c4:	4b45      	ldr	r3, [pc, #276]	; (80009dc <main+0x348>)
 80008c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80008ca:	2200      	movs	r2, #0
 80008cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	  //----------------------- LoRa ------------------------//

	  //----------------------- LoRa ------------------------//

	  //----------------------- WIFI ------------------------//
 	  	Inicializar(&wf); 									//Borra todos los registros de la estructura
 80008d0:	4843      	ldr	r0, [pc, #268]	; (80009e0 <main+0x34c>)
 80008d2:	f006 f833 	bl	800693c <Inicializar>
 	  	wf.RESET_PORT=GPIOA;
 80008d6:	4b42      	ldr	r3, [pc, #264]	; (80009e0 <main+0x34c>)
 80008d8:	4a42      	ldr	r2, [pc, #264]	; (80009e4 <main+0x350>)
 80008da:	601a      	str	r2, [r3, #0]
 	  	wf.RESET_PIN=GPIO_PIN_8;
 80008dc:	4b40      	ldr	r3, [pc, #256]	; (80009e0 <main+0x34c>)
 80008de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80008e2:	809a      	strh	r2, [r3, #4]
		strcpy(wf._WF_Net, WIFI_NET);						//Nombre de la red WIFI  a conectar Fibertel WiFi967 2.4GHz
 80008e4:	4940      	ldr	r1, [pc, #256]	; (80009e8 <main+0x354>)
 80008e6:	4841      	ldr	r0, [pc, #260]	; (80009ec <main+0x358>)
 80008e8:	f00e fb54 	bl	800ef94 <strcpy>
		strcpy(wf._WF_Pass, WIFI_PASS);						//Password de la red WIFI
 80008ec:	4940      	ldr	r1, [pc, #256]	; (80009f0 <main+0x35c>)
 80008ee:	4841      	ldr	r0, [pc, #260]	; (80009f4 <main+0x360>)
 80008f0:	f00e fb50 	bl	800ef94 <strcpy>
		strcpy(wf._TCP_Remote_Server_IP, TCP_SERVER);		//char _TCP_Remote_Server_IP[16];		//IP del Servidor TCP
 80008f4:	4940      	ldr	r1, [pc, #256]	; (80009f8 <main+0x364>)
 80008f6:	4841      	ldr	r0, [pc, #260]	; (80009fc <main+0x368>)
 80008f8:	f00e fb4c 	bl	800ef94 <strcpy>
		strcpy(wf._TCP_Remote_Server_Port, TCP_PORT);		//char _TCP_Remote_Server_Port[16];			//Puerto del Servidor TCP
 80008fc:	4940      	ldr	r1, [pc, #256]	; (8000a00 <main+0x36c>)
 80008fe:	4841      	ldr	r0, [pc, #260]	; (8000a04 <main+0x370>)
 8000900:	f00e fb48 	bl	800ef94 <strcpy>
		strcpy(wf._TCP_Local_Server_IP, TCP_SERVER_LOCAL);
 8000904:	4940      	ldr	r1, [pc, #256]	; (8000a08 <main+0x374>)
 8000906:	4841      	ldr	r0, [pc, #260]	; (8000a0c <main+0x378>)
 8000908:	f00e fb44 	bl	800ef94 <strcpy>
		strcpy(wf._TCP_Local_Server_GWY, TCP_SERVER_LOCAL_GWY);
 800090c:	4940      	ldr	r1, [pc, #256]	; (8000a10 <main+0x37c>)
 800090e:	4841      	ldr	r0, [pc, #260]	; (8000a14 <main+0x380>)
 8000910:	f00e fb40 	bl	800ef94 <strcpy>
		strcpy(wf._TCP_Local_Server_MSK, TCP_SERVER_LOCAL_MSK);
 8000914:	4940      	ldr	r1, [pc, #256]	; (8000a18 <main+0x384>)
 8000916:	4841      	ldr	r0, [pc, #260]	; (8000a1c <main+0x388>)
 8000918:	f00e fb3c 	bl	800ef94 <strcpy>
		strcpy(wf._TCP_Local_Server_Port, TCP_PORT_LOCAL);
 800091c:	4940      	ldr	r1, [pc, #256]	; (8000a20 <main+0x38c>)
 800091e:	4841      	ldr	r0, [pc, #260]	; (8000a24 <main+0x390>)
 8000920:	f00e fb38 	bl	800ef94 <strcpy>
		wf._TCP_Local_Server_EN=0;							//Habilito el Servidor Local
 8000924:	4b2e      	ldr	r3, [pc, #184]	; (80009e0 <main+0x34c>)
 8000926:	2200      	movs	r2, #0
 8000928:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
		wf._data2SND[0]=0x00;//strcpy(wf._data2SND,"01;03;00;00;00;0A;C5;CD");//strcpy(wf._data2SND,"20;352;52#");
 800092c:	4b2c      	ldr	r3, [pc, #176]	; (80009e0 <main+0x34c>)
 800092e:	2200      	movs	r2, #0
 8000930:	f883 2298 	strb.w	r2, [r3, #664]	; 0x298
		wf._data2SND[1]=0x00;
 8000934:	4b2a      	ldr	r3, [pc, #168]	; (80009e0 <main+0x34c>)
 8000936:	2200      	movs	r2, #0
 8000938:	f883 2299 	strb.w	r2, [r3, #665]	; 0x299
		wf._data2SND[2]=0x00;
 800093c:	4b28      	ldr	r3, [pc, #160]	; (80009e0 <main+0x34c>)
 800093e:	2200      	movs	r2, #0
 8000940:	f883 229a 	strb.w	r2, [r3, #666]	; 0x29a
		wf._data2SND[3]=0x00;
 8000944:	4b26      	ldr	r3, [pc, #152]	; (80009e0 <main+0x34c>)
 8000946:	2200      	movs	r2, #0
 8000948:	f883 229b 	strb.w	r2, [r3, #667]	; 0x29b
		wf._data2SND[4]=0x00;
 800094c:	4b24      	ldr	r3, [pc, #144]	; (80009e0 <main+0x34c>)
 800094e:	2200      	movs	r2, #0
 8000950:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
		wf._data2SND[5]=0x06;
 8000954:	4b22      	ldr	r3, [pc, #136]	; (80009e0 <main+0x34c>)
 8000956:	2206      	movs	r2, #6
 8000958:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
		wf._data2SND[6]=0x01;
 800095c:	4b20      	ldr	r3, [pc, #128]	; (80009e0 <main+0x34c>)
 800095e:	2201      	movs	r2, #1
 8000960:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
		wf._data2SND[7]=0x03;
 8000964:	4b1e      	ldr	r3, [pc, #120]	; (80009e0 <main+0x34c>)
 8000966:	2203      	movs	r2, #3
 8000968:	f883 229f 	strb.w	r2, [r3, #671]	; 0x29f
		wf._data2SND[8]=0x00;//strcpy(wf._data2SND,"01;03;00;00;00;0A;C5;CD");//strcpy(wf._data2SND,"20;352;52#");
 800096c:	4b1c      	ldr	r3, [pc, #112]	; (80009e0 <main+0x34c>)
 800096e:	2200      	movs	r2, #0
 8000970:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
		wf._data2SND[9]=0x00;
 8000974:	4b1a      	ldr	r3, [pc, #104]	; (80009e0 <main+0x34c>)
 8000976:	2200      	movs	r2, #0
 8000978:	f883 22a1 	strb.w	r2, [r3, #673]	; 0x2a1
		wf._data2SND[10]=0x00;
 800097c:	4b18      	ldr	r3, [pc, #96]	; (80009e0 <main+0x34c>)
 800097e:	2200      	movs	r2, #0
 8000980:	f883 22a2 	strb.w	r2, [r3, #674]	; 0x2a2
		wf._data2SND[11]=0x0A;
 8000984:	4b16      	ldr	r3, [pc, #88]	; (80009e0 <main+0x34c>)
 8000986:	220a      	movs	r2, #10
 8000988:	f883 22a3 	strb.w	r2, [r3, #675]	; 0x2a3
		wf._data2SND[12]=0x00;
 800098c:	4b14      	ldr	r3, [pc, #80]	; (80009e0 <main+0x34c>)
 800098e:	2200      	movs	r2, #0
 8000990:	f883 22a4 	strb.w	r2, [r3, #676]	; 0x2a4
		wf._data2SND[13]=0x33;
 8000994:	4b12      	ldr	r3, [pc, #72]	; (80009e0 <main+0x34c>)
 8000996:	2233      	movs	r2, #51	; 0x33
 8000998:	f883 22a5 	strb.w	r2, [r3, #677]	; 0x2a5
		wf._data2SND[14]=0x34;
 800099c:	4b10      	ldr	r3, [pc, #64]	; (80009e0 <main+0x34c>)
 800099e:	2234      	movs	r2, #52	; 0x34
 80009a0:	f883 22a6 	strb.w	r2, [r3, #678]	; 0x2a6
		wf._data2SND[15]=0x35;
 80009a4:	4b0e      	ldr	r3, [pc, #56]	; (80009e0 <main+0x34c>)
 80009a6:	2235      	movs	r2, #53	; 0x35
 80009a8:	f883 22a7 	strb.w	r2, [r3, #679]	; 0x2a7
		wf._n_D2SND=12;
 80009ac:	4b0c      	ldr	r3, [pc, #48]	; (80009e0 <main+0x34c>)
 80009ae:	220c      	movs	r2, #12
 80009b0:	f8c3 2cf0 	str.w	r2, [r3, #3312]	; 0xcf0
		wf._estado_conexion=100;//Si no se define no arranca	//wf._estado_conexion=1;					//Arranco en WiFi Desconectado
 80009b4:	4b0a      	ldr	r3, [pc, #40]	; (80009e0 <main+0x34c>)
 80009b6:	2264      	movs	r2, #100	; 0x64
 80009b8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
		wf._automatizacion=WF_CONNECT_TCP;//wf._automatizacion=WF_SEND;
 80009bc:	4b08      	ldr	r3, [pc, #32]	; (80009e0 <main+0x34c>)
 80009be:	2202      	movs	r2, #2
 80009c0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
		wf._NO_IP=1;
 80009c4:	4b06      	ldr	r3, [pc, #24]	; (80009e0 <main+0x34c>)
 80009c6:	2201      	movs	r2, #1
 80009c8:	f8c3 2d58 	str.w	r2, [r3, #3416]	; 0xd58
		wf._DBG_EN=1;
 80009cc:	4b04      	ldr	r3, [pc, #16]	; (80009e0 <main+0x34c>)
 80009ce:	2201      	movs	r2, #1
 80009d0:	f8c3 2d5c 	str.w	r2, [r3, #3420]	; 0xd5c
		//wf._send_data=1;
		// ----------- INICIO - Seteo de módulo Ethernet W5100 ----------- //
	    // Conectado a SPI2
		// PIN NSS - PortB 12
		spi_no_debug=1;
 80009d4:	4b14      	ldr	r3, [pc, #80]	; (8000a28 <main+0x394>)
 80009d6:	2201      	movs	r2, #1
 80009d8:	701a      	strb	r2, [r3, #0]
 80009da:	e027      	b.n	8000a2c <main+0x398>
 80009dc:	20002960 	.word	0x20002960
 80009e0:	20000b58 	.word	0x20000b58
 80009e4:	40020000 	.word	0x40020000
 80009e8:	20000024 	.word	0x20000024
 80009ec:	20000b5e 	.word	0x20000b5e
 80009f0:	2000002c 	.word	0x2000002c
 80009f4:	20000b7e 	.word	0x20000b7e
 80009f8:	20000038 	.word	0x20000038
 80009fc:	20000b8e 	.word	0x20000b8e
 8000a00:	20000048 	.word	0x20000048
 8000a04:	20000b9e 	.word	0x20000b9e
 8000a08:	20000050 	.word	0x20000050
 8000a0c:	20000ba4 	.word	0x20000ba4
 8000a10:	20000060 	.word	0x20000060
 8000a14:	20000bba 	.word	0x20000bba
 8000a18:	20000070 	.word	0x20000070
 8000a1c:	20000bca 	.word	0x20000bca
 8000a20:	20000080 	.word	0x20000080
 8000a24:	20000bb4 	.word	0x20000bb4
 8000a28:	20003a10 	.word	0x20003a10
		ETH.NSS_PORT=GPIOA;
 8000a2c:	4b4e      	ldr	r3, [pc, #312]	; (8000b68 <main+0x4d4>)
 8000a2e:	4a4f      	ldr	r2, [pc, #316]	; (8000b6c <main+0x4d8>)
 8000a30:	605a      	str	r2, [r3, #4]
		ETH.NSS_PIN=GPIO_PIN_4;
 8000a32:	4b4d      	ldr	r3, [pc, #308]	; (8000b68 <main+0x4d4>)
 8000a34:	2210      	movs	r2, #16
 8000a36:	811a      	strh	r2, [r3, #8]
		ETH.SPI= &hspi1;
 8000a38:	4b4b      	ldr	r3, [pc, #300]	; (8000b68 <main+0x4d4>)
 8000a3a:	4a4d      	ldr	r2, [pc, #308]	; (8000b70 <main+0x4dc>)
 8000a3c:	601a      	str	r2, [r3, #0]

	 //----------------------- WIFI ------------------------//

	 //---------------------- ModBUS -----------------------//

		ModBUS_Config(&mb_eth);		//ETHERNET como cliente TCP envía  ModBUS
 8000a3e:	484d      	ldr	r0, [pc, #308]	; (8000b74 <main+0x4e0>)
 8000a40:	f00b fc8c 	bl	800c35c <ModBUS_Config>
		mb_eth._mode = CLIENTE;
 8000a44:	4b4b      	ldr	r3, [pc, #300]	; (8000b74 <main+0x4e0>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	711a      	strb	r2, [r3, #4]
		ModBUS_Config(&mb_wf);	//WIFI como servidor TCP, recibe comadno ModBUS
 8000a4a:	484b      	ldr	r0, [pc, #300]	; (8000b78 <main+0x4e4>)
 8000a4c:	f00b fc86 	bl	800c35c <ModBUS_Config>
		mb_wf._mode = CLIENTE;
 8000a50:	4b49      	ldr	r3, [pc, #292]	; (8000b78 <main+0x4e4>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	711a      	strb	r2, [r3, #4]
		ModBUS_F03_Assign(&mb_wf,3,0xAA55);
 8000a56:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8000a5a:	2103      	movs	r1, #3
 8000a5c:	4846      	ldr	r0, [pc, #280]	; (8000b78 <main+0x4e4>)
 8000a5e:	f00b fd20 	bl	800c4a2 <ModBUS_F03_Assign>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a62:	f002 f8db 	bl	8002c1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a66:	f000 fb41 	bl	80010ec <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  SysTick_Config(SystemCoreClock/1000);
 8000a6a:	4b44      	ldr	r3, [pc, #272]	; (8000b7c <main+0x4e8>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	4a44      	ldr	r2, [pc, #272]	; (8000b80 <main+0x4ec>)
 8000a70:	fba2 2303 	umull	r2, r3, r2, r3
 8000a74:	099b      	lsrs	r3, r3, #6
 8000a76:	4618      	mov	r0, r3
 8000a78:	f7ff fdc2 	bl	8000600 <SysTick_Config>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a7c:	f000 fd4a 	bl	8001514 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000a80:	f000 fb9c 	bl	80011bc <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000a84:	f000 fcc8 	bl	8001418 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000a88:	f000 fcf0 	bl	800146c <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 8000a8c:	f000 fd18 	bl	80014c0 <MX_USART6_UART_Init>
  MX_TIM2_Init();
 8000a90:	f000 fbca 	bl	8001228 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000a94:	f000 fc44 	bl	8001320 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 0);
 8000a98:	2200      	movs	r2, #0
 8000a9a:	2102      	movs	r1, #2
 8000a9c:	4833      	ldr	r0, [pc, #204]	; (8000b6c <main+0x4d8>)
 8000a9e:	f002 fd91 	bl	80035c4 <HAL_GPIO_WritePin>
  ITM0_Write("\r\n INICIO OK\r\n",strlen("\r\n INICIO OK\r\n"));
 8000aa2:	210e      	movs	r1, #14
 8000aa4:	4837      	ldr	r0, [pc, #220]	; (8000b84 <main+0x4f0>)
 8000aa6:	f000 fdc7 	bl	8001638 <ITM0_Write>
   	   HW_RESET(&wf);
 8000aaa:	4837      	ldr	r0, [pc, #220]	; (8000b88 <main+0x4f4>)
 8000aac:	f005 fe42 	bl	8006734 <HW_RESET>
     //ESP8266_HW_Reset();	//WRNNG Hardcoded	  //Reseteo el modulo desde el pin de RESET
     if (wf._DBG_EN) ITM0_Write("\r\n RESET ESP8266 \r\n",strlen("\r\n RESET ESP8266 \r\n"));
 8000ab0:	4b35      	ldr	r3, [pc, #212]	; (8000b88 <main+0x4f4>)
 8000ab2:	f8d3 3d5c 	ldr.w	r3, [r3, #3420]	; 0xd5c
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d003      	beq.n	8000ac2 <main+0x42e>
 8000aba:	2113      	movs	r1, #19
 8000abc:	4833      	ldr	r0, [pc, #204]	; (8000b8c <main+0x4f8>)
 8000abe:	f000 fdbb 	bl	8001638 <ITM0_Write>
     HAL_UART_Receive_IT(&huart1,(uint8_t *)UART_RX_byte,1);
 8000ac2:	2201      	movs	r2, #1
 8000ac4:	4932      	ldr	r1, [pc, #200]	; (8000b90 <main+0x4fc>)
 8000ac6:	4833      	ldr	r0, [pc, #204]	; (8000b94 <main+0x500>)
 8000ac8:	f004 fea5 	bl	8005816 <HAL_UART_Receive_IT>
     HAL_UART_Receive_IT(&huart2,(uint8_t *)UART2_RX_byte,1);
 8000acc:	2201      	movs	r2, #1
 8000ace:	4932      	ldr	r1, [pc, #200]	; (8000b98 <main+0x504>)
 8000ad0:	4832      	ldr	r0, [pc, #200]	; (8000b9c <main+0x508>)
 8000ad2:	f004 fea0 	bl	8005816 <HAL_UART_Receive_IT>
     if (ETH_DBG_EN)ITM0_Write("\r\n SET-UP W5100 \r\n",strlen("\r\n SET-UP W5100 \r\n"));
 8000ad6:	4b32      	ldr	r3, [pc, #200]	; (8000ba0 <main+0x50c>)
 8000ad8:	781b      	ldrb	r3, [r3, #0]
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d003      	beq.n	8000ae6 <main+0x452>
 8000ade:	2112      	movs	r1, #18
 8000ae0:	4830      	ldr	r0, [pc, #192]	; (8000ba4 <main+0x510>)
 8000ae2:	f000 fda9 	bl	8001638 <ITM0_Write>

   	 ETH.operacion=SPI_WRITE;
 8000ae6:	4b20      	ldr	r3, [pc, #128]	; (8000b68 <main+0x4d4>)
 8000ae8:	22f0      	movs	r2, #240	; 0xf0
 8000aea:	729a      	strb	r2, [r3, #10]
   	 ETH.TX[1]= 0;
 8000aec:	4b1e      	ldr	r3, [pc, #120]	; (8000b68 <main+0x4d4>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	755a      	strb	r2, [r3, #21]
   	 ETH.TX[2]= 1;
 8000af2:	4b1d      	ldr	r3, [pc, #116]	; (8000b68 <main+0x4d4>)
 8000af4:	2201      	movs	r2, #1
 8000af6:	759a      	strb	r2, [r3, #22]
   	 ETH.TX[3]= 192;
 8000af8:	4b1b      	ldr	r3, [pc, #108]	; (8000b68 <main+0x4d4>)
 8000afa:	22c0      	movs	r2, #192	; 0xc0
 8000afc:	75da      	strb	r2, [r3, #23]
   ETH.operacion=SPI_READ;
 8000afe:	4b1a      	ldr	r3, [pc, #104]	; (8000b68 <main+0x4d4>)
 8000b00:	220f      	movs	r2, #15
 8000b02:	729a      	strb	r2, [r3, #10]
   ETH.TX[1]= 0;
 8000b04:	4b18      	ldr	r3, [pc, #96]	; (8000b68 <main+0x4d4>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	755a      	strb	r2, [r3, #21]
   ETH.TX[2]= 1;
 8000b0a:	4b17      	ldr	r3, [pc, #92]	; (8000b68 <main+0x4d4>)
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	759a      	strb	r2, [r3, #22]
   ETH.TX[3]= 0;
 8000b10:	4b15      	ldr	r3, [pc, #84]	; (8000b68 <main+0x4d4>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	75da      	strb	r2, [r3, #23]

     if(ESP8266_HW_Init(&huart1)==1)
 8000b16:	481f      	ldr	r0, [pc, #124]	; (8000b94 <main+0x500>)
 8000b18:	f001 fcbc 	bl	8002494 <ESP8266_HW_Init>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b01      	cmp	r3, #1
 8000b20:	d10c      	bne.n	8000b3c <main+0x4a8>
     {
   	  ESP_HW_Init=1;
 8000b22:	4b21      	ldr	r3, [pc, #132]	; (8000ba8 <main+0x514>)
 8000b24:	2201      	movs	r2, #1
 8000b26:	701a      	strb	r2, [r3, #0]
   	  if (wf._DBG_EN) ITM0_Write("\r\n ESP HW Init OK\r\n",strlen("\r\n ESP HW Init OK\r\n"));
 8000b28:	4b17      	ldr	r3, [pc, #92]	; (8000b88 <main+0x4f4>)
 8000b2a:	f8d3 3d5c 	ldr.w	r3, [r3, #3420]	; 0xd5c
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d04a      	beq.n	8000bc8 <main+0x534>
 8000b32:	2113      	movs	r1, #19
 8000b34:	481d      	ldr	r0, [pc, #116]	; (8000bac <main+0x518>)
 8000b36:	f000 fd7f 	bl	8001638 <ITM0_Write>
 8000b3a:	e045      	b.n	8000bc8 <main+0x534>
     }
     else
     {
	   HW_RESET(&wf);
 8000b3c:	4812      	ldr	r0, [pc, #72]	; (8000b88 <main+0x4f4>)
 8000b3e:	f005 fdf9 	bl	8006734 <HW_RESET>
   	 //ESP8266_HW_Reset(); //WRNNG Hardcoded
   	  if(ESP8266_HW_Init(&huart1)==1)
 8000b42:	4814      	ldr	r0, [pc, #80]	; (8000b94 <main+0x500>)
 8000b44:	f001 fca6 	bl	8002494 <ESP8266_HW_Init>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b01      	cmp	r3, #1
 8000b4c:	d130      	bne.n	8000bb0 <main+0x51c>
   	  {
   		  ESP_HW_Init=1;
 8000b4e:	4b16      	ldr	r3, [pc, #88]	; (8000ba8 <main+0x514>)
 8000b50:	2201      	movs	r2, #1
 8000b52:	701a      	strb	r2, [r3, #0]
   		  if (wf._DBG_EN) ITM0_Write("\r\n ESP HW Init OK\r\n",strlen("\r\n ESP HW Init OK\r\n"));
 8000b54:	4b0c      	ldr	r3, [pc, #48]	; (8000b88 <main+0x4f4>)
 8000b56:	f8d3 3d5c 	ldr.w	r3, [r3, #3420]	; 0xd5c
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d034      	beq.n	8000bc8 <main+0x534>
 8000b5e:	2113      	movs	r1, #19
 8000b60:	4812      	ldr	r0, [pc, #72]	; (8000bac <main+0x518>)
 8000b62:	f000 fd69 	bl	8001638 <ITM0_Write>
 8000b66:	e02f      	b.n	8000bc8 <main+0x534>
 8000b68:	20002960 	.word	0x20002960
 8000b6c:	40020000 	.word	0x40020000
 8000b70:	20000194 	.word	0x20000194
 8000b74:	200018b8 	.word	0x200018b8
 8000b78:	20001f08 	.word	0x20001f08
 8000b7c:	20000084 	.word	0x20000084
 8000b80:	10624dd3 	.word	0x10624dd3
 8000b84:	0800ff78 	.word	0x0800ff78
 8000b88:	20000b58 	.word	0x20000b58
 8000b8c:	0800ff88 	.word	0x0800ff88
 8000b90:	20004428 	.word	0x20004428
 8000b94:	2000027c 	.word	0x2000027c
 8000b98:	2000442c 	.word	0x2000442c
 8000b9c:	200002c0 	.word	0x200002c0
 8000ba0:	20002958 	.word	0x20002958
 8000ba4:	0800ff9c 	.word	0x0800ff9c
 8000ba8:	20003a13 	.word	0x20003a13
 8000bac:	0800ffb0 	.word	0x0800ffb0
   	  }
   	  else
   	  {
   		  ESP_HW_Init=0;
 8000bb0:	4bac      	ldr	r3, [pc, #688]	; (8000e64 <main+0x7d0>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	701a      	strb	r2, [r3, #0]
   		  if (wf._DBG_EN)  ITM0_Write("\r\n ESP HW Init Fail\r\n",strlen("\r\n ESP HW Init Fail\r\n"));
 8000bb6:	4bac      	ldr	r3, [pc, #688]	; (8000e68 <main+0x7d4>)
 8000bb8:	f8d3 3d5c 	ldr.w	r3, [r3, #3420]	; 0xd5c
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d003      	beq.n	8000bc8 <main+0x534>
 8000bc0:	2115      	movs	r1, #21
 8000bc2:	48aa      	ldr	r0, [pc, #680]	; (8000e6c <main+0x7d8>)
 8000bc4:	f000 fd38 	bl	8001638 <ITM0_Write>
   	  }
     }

     HAL_Delay(1000);
 8000bc8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000bcc:	f002 f898 	bl	8002d00 <HAL_Delay>





	  	  if (ESP_HW_Init==1)
 8000bd0:	4ba4      	ldr	r3, [pc, #656]	; (8000e64 <main+0x7d0>)
 8000bd2:	781b      	ldrb	r3, [r3, #0]
 8000bd4:	2b01      	cmp	r3, #1
 8000bd6:	f040 80cf 	bne.w	8000d78 <main+0x6e4>
	  	  {
	  			if((WF_SND_FLAG==1)&&(wf._TCP_Local_Server_EN==0)&&(wf._estado_conexion>=609)&&(lr._data_available))
 8000bda:	4ba5      	ldr	r3, [pc, #660]	; (8000e70 <main+0x7dc>)
 8000bdc:	781b      	ldrb	r3, [r3, #0]
 8000bde:	2b01      	cmp	r3, #1
 8000be0:	f040 80ca 	bne.w	8000d78 <main+0x6e4>
 8000be4:	4ba0      	ldr	r3, [pc, #640]	; (8000e68 <main+0x7d4>)
 8000be6:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	f040 80c4 	bne.w	8000d78 <main+0x6e4>
 8000bf0:	4b9d      	ldr	r3, [pc, #628]	; (8000e68 <main+0x7d4>)
 8000bf2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000bf6:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 8000bfa:	f340 80bd 	ble.w	8000d78 <main+0x6e4>
 8000bfe:	4b9d      	ldr	r3, [pc, #628]	; (8000e74 <main+0x7e0>)
 8000c00:	f893 3800 	ldrb.w	r3, [r3, #2048]	; 0x800
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	f000 80b7 	beq.w	8000d78 <main+0x6e4>
	  			{	lr._data_available=0;
 8000c0a:	4b9a      	ldr	r3, [pc, #616]	; (8000e74 <main+0x7e0>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	f883 2800 	strb.w	r2, [r3, #2048]	; 0x800
	  				wf_snd_flag_ticks=0;
 8000c12:	4b99      	ldr	r3, [pc, #612]	; (8000e78 <main+0x7e4>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	601a      	str	r2, [r3, #0]
	  				WF_SND_FLAG=0;
 8000c18:	4b95      	ldr	r3, [pc, #596]	; (8000e70 <main+0x7dc>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	701a      	strb	r2, [r3, #0]
	  				if( httpPOST(	ENDPOINT, SERVER_IP,PORT,
 8000c1e:	2100      	movs	r1, #0
 8000c20:	4896      	ldr	r0, [pc, #600]	; (8000e7c <main+0x7e8>)
 8000c22:	f00b fc6d 	bl	800c500 <ModBUS_F03_Read>
 8000c26:	4603      	mov	r3, r0
 8000c28:	4698      	mov	r8, r3
 8000c2a:	2101      	movs	r1, #1
 8000c2c:	4893      	ldr	r0, [pc, #588]	; (8000e7c <main+0x7e8>)
 8000c2e:	f00b fc67 	bl	800c500 <ModBUS_F03_Read>
 8000c32:	4603      	mov	r3, r0
 8000c34:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000c36:	2102      	movs	r1, #2
 8000c38:	4890      	ldr	r0, [pc, #576]	; (8000e7c <main+0x7e8>)
 8000c3a:	f00b fc61 	bl	800c500 <ModBUS_F03_Read>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	62bb      	str	r3, [r7, #40]	; 0x28
 8000c42:	2103      	movs	r1, #3
 8000c44:	488d      	ldr	r0, [pc, #564]	; (8000e7c <main+0x7e8>)
 8000c46:	f00b fc5b 	bl	800c500 <ModBUS_F03_Read>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	627b      	str	r3, [r7, #36]	; 0x24
 8000c4e:	2104      	movs	r1, #4
 8000c50:	488a      	ldr	r0, [pc, #552]	; (8000e7c <main+0x7e8>)
 8000c52:	f00b fc55 	bl	800c500 <ModBUS_F03_Read>
 8000c56:	4603      	mov	r3, r0
 8000c58:	623b      	str	r3, [r7, #32]
 8000c5a:	2105      	movs	r1, #5
 8000c5c:	4887      	ldr	r0, [pc, #540]	; (8000e7c <main+0x7e8>)
 8000c5e:	f00b fc4f 	bl	800c500 <ModBUS_F03_Read>
 8000c62:	4603      	mov	r3, r0
 8000c64:	61fb      	str	r3, [r7, #28]
 8000c66:	2106      	movs	r1, #6
 8000c68:	4884      	ldr	r0, [pc, #528]	; (8000e7c <main+0x7e8>)
 8000c6a:	f00b fc49 	bl	800c500 <ModBUS_F03_Read>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	61bb      	str	r3, [r7, #24]
 8000c72:	2107      	movs	r1, #7
 8000c74:	4881      	ldr	r0, [pc, #516]	; (8000e7c <main+0x7e8>)
 8000c76:	f00b fc43 	bl	800c500 <ModBUS_F03_Read>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	617b      	str	r3, [r7, #20]
 8000c7e:	2108      	movs	r1, #8
 8000c80:	487e      	ldr	r0, [pc, #504]	; (8000e7c <main+0x7e8>)
 8000c82:	f00b fc3d 	bl	800c500 <ModBUS_F03_Read>
 8000c86:	4603      	mov	r3, r0
 8000c88:	613b      	str	r3, [r7, #16]
 8000c8a:	2109      	movs	r1, #9
 8000c8c:	487b      	ldr	r0, [pc, #492]	; (8000e7c <main+0x7e8>)
 8000c8e:	f00b fc37 	bl	800c500 <ModBUS_F03_Read>
 8000c92:	4603      	mov	r3, r0
 8000c94:	60fb      	str	r3, [r7, #12]
 8000c96:	210a      	movs	r1, #10
 8000c98:	4878      	ldr	r0, [pc, #480]	; (8000e7c <main+0x7e8>)
 8000c9a:	f00b fc31 	bl	800c500 <ModBUS_F03_Read>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	60bb      	str	r3, [r7, #8]
 8000ca2:	210b      	movs	r1, #11
 8000ca4:	4875      	ldr	r0, [pc, #468]	; (8000e7c <main+0x7e8>)
 8000ca6:	f00b fc2b 	bl	800c500 <ModBUS_F03_Read>
 8000caa:	4603      	mov	r3, r0
 8000cac:	607b      	str	r3, [r7, #4]
 8000cae:	210c      	movs	r1, #12
 8000cb0:	4872      	ldr	r0, [pc, #456]	; (8000e7c <main+0x7e8>)
 8000cb2:	f00b fc25 	bl	800c500 <ModBUS_F03_Read>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	461e      	mov	r6, r3
 8000cba:	210d      	movs	r1, #13
 8000cbc:	486f      	ldr	r0, [pc, #444]	; (8000e7c <main+0x7e8>)
 8000cbe:	f00b fc1f 	bl	800c500 <ModBUS_F03_Read>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	461d      	mov	r5, r3
 8000cc6:	210e      	movs	r1, #14
 8000cc8:	486c      	ldr	r0, [pc, #432]	; (8000e7c <main+0x7e8>)
 8000cca:	f00b fc19 	bl	800c500 <ModBUS_F03_Read>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	461c      	mov	r4, r3
 8000cd2:	210f      	movs	r1, #15
 8000cd4:	4869      	ldr	r0, [pc, #420]	; (8000e7c <main+0x7e8>)
 8000cd6:	f00b fc13 	bl	800c500 <ModBUS_F03_Read>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	461a      	mov	r2, r3
 8000cde:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ce2:	9312      	str	r3, [sp, #72]	; 0x48
 8000ce4:	4b66      	ldr	r3, [pc, #408]	; (8000e80 <main+0x7ec>)
 8000ce6:	9311      	str	r3, [sp, #68]	; 0x44
 8000ce8:	4b66      	ldr	r3, [pc, #408]	; (8000e84 <main+0x7f0>)
 8000cea:	9310      	str	r3, [sp, #64]	; 0x40
 8000cec:	2301      	movs	r3, #1
 8000cee:	930f      	str	r3, [sp, #60]	; 0x3c
 8000cf0:	920e      	str	r2, [sp, #56]	; 0x38
 8000cf2:	940d      	str	r4, [sp, #52]	; 0x34
 8000cf4:	950c      	str	r5, [sp, #48]	; 0x30
 8000cf6:	960b      	str	r6, [sp, #44]	; 0x2c
 8000cf8:	687a      	ldr	r2, [r7, #4]
 8000cfa:	920a      	str	r2, [sp, #40]	; 0x28
 8000cfc:	68ba      	ldr	r2, [r7, #8]
 8000cfe:	9209      	str	r2, [sp, #36]	; 0x24
 8000d00:	68fa      	ldr	r2, [r7, #12]
 8000d02:	9208      	str	r2, [sp, #32]
 8000d04:	693a      	ldr	r2, [r7, #16]
 8000d06:	9207      	str	r2, [sp, #28]
 8000d08:	697a      	ldr	r2, [r7, #20]
 8000d0a:	9206      	str	r2, [sp, #24]
 8000d0c:	69ba      	ldr	r2, [r7, #24]
 8000d0e:	9205      	str	r2, [sp, #20]
 8000d10:	69fa      	ldr	r2, [r7, #28]
 8000d12:	9204      	str	r2, [sp, #16]
 8000d14:	6a3a      	ldr	r2, [r7, #32]
 8000d16:	9203      	str	r2, [sp, #12]
 8000d18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d1a:	9202      	str	r2, [sp, #8]
 8000d1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000d1e:	9201      	str	r2, [sp, #4]
 8000d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d22:	9300      	str	r3, [sp, #0]
 8000d24:	4643      	mov	r3, r8
 8000d26:	4a58      	ldr	r2, [pc, #352]	; (8000e88 <main+0x7f4>)
 8000d28:	4958      	ldr	r1, [pc, #352]	; (8000e8c <main+0x7f8>)
 8000d2a:	4859      	ldr	r0, [pc, #356]	; (8000e90 <main+0x7fc>)
 8000d2c:	f00a fa0a 	bl	800b144 <httpPOST>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d020      	beq.n	8000d78 <main+0x6e4>
									ModBUS_F03_Read(&mb_eth,14),
									ModBUS_F03_Read(&mb_eth,15),TEST_1,//ModBUS_F03_Read(&mb_eth,9),TEPELCO,
	  								post, body, 512))

	  				{
	  							CopiaVector(wf._data2SND,post,strlen(post),0,'A');
 8000d36:	4853      	ldr	r0, [pc, #332]	; (8000e84 <main+0x7f0>)
 8000d38:	f7ff fa5c 	bl	80001f4 <strlen>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	461a      	mov	r2, r3
 8000d40:	2341      	movs	r3, #65	; 0x41
 8000d42:	9300      	str	r3, [sp, #0]
 8000d44:	2300      	movs	r3, #0
 8000d46:	494f      	ldr	r1, [pc, #316]	; (8000e84 <main+0x7f0>)
 8000d48:	4852      	ldr	r0, [pc, #328]	; (8000e94 <main+0x800>)
 8000d4a:	f00d fdef 	bl	800e92c <CopiaVector>
	  							wf._n_D2SND=strlen(post);
 8000d4e:	484d      	ldr	r0, [pc, #308]	; (8000e84 <main+0x7f0>)
 8000d50:	f7ff fa50 	bl	80001f4 <strlen>
 8000d54:	4603      	mov	r3, r0
 8000d56:	461a      	mov	r2, r3
 8000d58:	4b43      	ldr	r3, [pc, #268]	; (8000e68 <main+0x7d4>)
 8000d5a:	f8c3 2cf0 	str.w	r2, [r3, #3312]	; 0xcf0
	  							if(wf._automatizacion < WF_SEND)		// Send only with automation sent diasabled
 8000d5e:	4b42      	ldr	r3, [pc, #264]	; (8000e68 <main+0x7d4>)
 8000d60:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8000d64:	2b02      	cmp	r3, #2
 8000d66:	d807      	bhi.n	8000d78 <main+0x6e4>
	  							{
	  								EnviarDatos(&wf);
 8000d68:	483f      	ldr	r0, [pc, #252]	; (8000e68 <main+0x7d4>)
 8000d6a:	f005 fdd1 	bl	8006910 <EnviarDatos>
	  								wf._estado_conexion=TCP_SND_EN_CURSO;
 8000d6e:	4b3e      	ldr	r3, [pc, #248]	; (8000e68 <main+0x7d4>)
 8000d70:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8000d74:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	  				}
	  			}
	  	  }
	  /**************[ FIN PIDO ENVIAR DATOS ]**************/

	  		if ((FLAG_UART1==1)||(FLAG_TIMEOUT==1))  //Si recibí datos o me fui por TimeOUT
 8000d78:	4b47      	ldr	r3, [pc, #284]	; (8000e98 <main+0x804>)
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	2b01      	cmp	r3, #1
 8000d7e:	d004      	beq.n	8000d8a <main+0x6f6>
 8000d80:	4b46      	ldr	r3, [pc, #280]	; (8000e9c <main+0x808>)
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	2b01      	cmp	r3, #1
 8000d86:	f040 80aa 	bne.w	8000ede <main+0x84a>
	  		{
	  			if(FLAG_UART1==1)
 8000d8a:	4b43      	ldr	r3, [pc, #268]	; (8000e98 <main+0x804>)
 8000d8c:	781b      	ldrb	r3, [r3, #0]
 8000d8e:	2b01      	cmp	r3, #1
 8000d90:	d11c      	bne.n	8000dcc <main+0x738>
	  				{
	  					CopiaVector(wf._uartRCVD,UART_RX_vect_hld,UART_RX_items,1,CMP_VECT);
 8000d92:	4b43      	ldr	r3, [pc, #268]	; (8000ea0 <main+0x80c>)
 8000d94:	681a      	ldr	r2, [r3, #0]
 8000d96:	4b43      	ldr	r3, [pc, #268]	; (8000ea4 <main+0x810>)
 8000d98:	9300      	str	r3, [sp, #0]
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	4942      	ldr	r1, [pc, #264]	; (8000ea8 <main+0x814>)
 8000d9e:	4843      	ldr	r0, [pc, #268]	; (8000eac <main+0x818>)
 8000da0:	f00d fdc4 	bl	800e92c <CopiaVector>
	  					FLAG_UART1=0;
 8000da4:	4b3c      	ldr	r3, [pc, #240]	; (8000e98 <main+0x804>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	701a      	strb	r2, [r3, #0]

	  						if (error_rxdata==3)
 8000daa:	4b41      	ldr	r3, [pc, #260]	; (8000eb0 <main+0x81c>)
 8000dac:	781b      	ldrb	r3, [r3, #0]
 8000dae:	2b03      	cmp	r3, #3
 8000db0:	d102      	bne.n	8000db8 <main+0x724>
	  						{
	  							error_rxdata=0;
 8000db2:	4b3f      	ldr	r3, [pc, #252]	; (8000eb0 <main+0x81c>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	701a      	strb	r2, [r3, #0]
	  						}
	  						if (error_rxdata==1)
 8000db8:	4b3d      	ldr	r3, [pc, #244]	; (8000eb0 <main+0x81c>)
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	2b01      	cmp	r3, #1
 8000dbe:	d105      	bne.n	8000dcc <main+0x738>
	  						{
	  							error_rxdata=5;
 8000dc0:	4b3b      	ldr	r3, [pc, #236]	; (8000eb0 <main+0x81c>)
 8000dc2:	2205      	movs	r2, #5
 8000dc4:	701a      	strb	r2, [r3, #0]
	  							error_rxdata=0;
 8000dc6:	4b3a      	ldr	r3, [pc, #232]	; (8000eb0 <main+0x81c>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	701a      	strb	r2, [r3, #0]
	  						}
	  				}
	  			if(FLAG_TIMEOUT==1)
 8000dcc:	4b33      	ldr	r3, [pc, #204]	; (8000e9c <main+0x808>)
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	2b01      	cmp	r3, #1
 8000dd2:	d102      	bne.n	8000dda <main+0x746>
	  					{
	  						FLAG_TIMEOUT=0;
 8000dd4:	4b31      	ldr	r3, [pc, #196]	; (8000e9c <main+0x808>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	701a      	strb	r2, [r3, #0]
	  					}

	  			if (ESP_HW_Init==1) //Si el módulo se inició correctamente
 8000dda:	4b22      	ldr	r3, [pc, #136]	; (8000e64 <main+0x7d0>)
 8000ddc:	781b      	ldrb	r3, [r3, #0]
 8000dde:	2b01      	cmp	r3, #1
 8000de0:	d17d      	bne.n	8000ede <main+0x84a>
	  				{
	  					/*************** Copio y proceso info recibida ***************/
	  					wf._n_orig=UART_RX_items;
 8000de2:	4b2f      	ldr	r3, [pc, #188]	; (8000ea0 <main+0x80c>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	4a20      	ldr	r2, [pc, #128]	; (8000e68 <main+0x7d4>)
 8000de8:	f8c2 3ce4 	str.w	r3, [r2, #3300]	; 0xce4
	  					CopiaVector(wf._uartRCVD,UART_RX_vect_hld,UART_RX_items,1,CMP_VECT);
 8000dec:	4b2c      	ldr	r3, [pc, #176]	; (8000ea0 <main+0x80c>)
 8000dee:	681a      	ldr	r2, [r3, #0]
 8000df0:	4b2c      	ldr	r3, [pc, #176]	; (8000ea4 <main+0x810>)
 8000df2:	9300      	str	r3, [sp, #0]
 8000df4:	2301      	movs	r3, #1
 8000df6:	492c      	ldr	r1, [pc, #176]	; (8000ea8 <main+0x814>)
 8000df8:	482c      	ldr	r0, [pc, #176]	; (8000eac <main+0x818>)
 8000dfa:	f00d fd97 	bl	800e92c <CopiaVector>
	  					resultado=AT_ESP8266_ND(&wf);
 8000dfe:	481a      	ldr	r0, [pc, #104]	; (8000e68 <main+0x7d4>)
 8000e00:	f005 fe6c 	bl	8006adc <AT_ESP8266_ND>
 8000e04:	4603      	mov	r3, r0
 8000e06:	b2da      	uxtb	r2, r3
 8000e08:	4b2a      	ldr	r3, [pc, #168]	; (8000eb4 <main+0x820>)
 8000e0a:	701a      	strb	r2, [r3, #0]

	  					/*************** Si recibo datos y estan correctos me fijo que son ***************/

	  					if ((wf._new_data_rcv==1)&&(wf._estado_rcv_data==99))
 8000e0c:	4b16      	ldr	r3, [pc, #88]	; (8000e68 <main+0x7d4>)
 8000e0e:	f8d3 3cdc 	ldr.w	r3, [r3, #3292]	; 0xcdc
 8000e12:	2b01      	cmp	r3, #1
 8000e14:	d163      	bne.n	8000ede <main+0x84a>
 8000e16:	4b14      	ldr	r3, [pc, #80]	; (8000e68 <main+0x7d4>)
 8000e18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000e1c:	2b63      	cmp	r3, #99	; 0x63
 8000e1e:	d15e      	bne.n	8000ede <main+0x84a>
	  					{

	  						CopiaVector(mb_wf._MBUS_RCVD,wf._dataRCV,wf._n_dataRCV,0,'A');
 8000e20:	4b11      	ldr	r3, [pc, #68]	; (8000e68 <main+0x7d4>)
 8000e22:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8000e26:	2341      	movs	r3, #65	; 0x41
 8000e28:	9300      	str	r3, [sp, #0]
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	4922      	ldr	r1, [pc, #136]	; (8000eb8 <main+0x824>)
 8000e2e:	4823      	ldr	r0, [pc, #140]	; (8000ebc <main+0x828>)
 8000e30:	f00d fd7c 	bl	800e92c <CopiaVector>
	  						mb_wf._n_MBUS_RCVD=wf._n_dataRCV;
 8000e34:	4b0c      	ldr	r3, [pc, #48]	; (8000e68 <main+0x7d4>)
 8000e36:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8000e3a:	4a21      	ldr	r2, [pc, #132]	; (8000ec0 <main+0x82c>)
 8000e3c:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214

	  						ModBUS(&mb_wf);
 8000e40:	481f      	ldr	r0, [pc, #124]	; (8000ec0 <main+0x82c>)
 8000e42:	f00b fbe3 	bl	800c60c <ModBUS>

	  						CopiaVector(wf._data2SND,mb_wf._MBUS_2SND,mb_wf._n_MBUS_2SND,0,'A');
 8000e46:	4b1e      	ldr	r3, [pc, #120]	; (8000ec0 <main+0x82c>)
 8000e48:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 8000e4c:	2341      	movs	r3, #65	; 0x41
 8000e4e:	9300      	str	r3, [sp, #0]
 8000e50:	2300      	movs	r3, #0
 8000e52:	491c      	ldr	r1, [pc, #112]	; (8000ec4 <main+0x830>)
 8000e54:	480f      	ldr	r0, [pc, #60]	; (8000e94 <main+0x800>)
 8000e56:	f00d fd69 	bl	800e92c <CopiaVector>
	  						wf._n_D2SND=mb_wf._n_MBUS_2SND;
 8000e5a:	4b19      	ldr	r3, [pc, #100]	; (8000ec0 <main+0x82c>)
 8000e5c:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 8000e60:	e032      	b.n	8000ec8 <main+0x834>
 8000e62:	bf00      	nop
 8000e64:	20003a13 	.word	0x20003a13
 8000e68:	20000b58 	.word	0x20000b58
 8000e6c:	0800ffc4 	.word	0x0800ffc4
 8000e70:	20002959 	.word	0x20002959
 8000e74:	20000350 	.word	0x20000350
 8000e78:	2000295c 	.word	0x2000295c
 8000e7c:	200018b8 	.word	0x200018b8
 8000e80:	20002758 	.word	0x20002758
 8000e84:	20002558 	.word	0x20002558
 8000e88:	2000001c 	.word	0x2000001c
 8000e8c:	2000000c 	.word	0x2000000c
 8000e90:	20000000 	.word	0x20000000
 8000e94:	20000df0 	.word	0x20000df0
 8000e98:	20003a18 	.word	0x20003a18
 8000e9c:	20003a17 	.word	0x20003a17
 8000ea0:	20004434 	.word	0x20004434
 8000ea4:	20004424 	.word	0x20004424
 8000ea8:	20004024 	.word	0x20004024
 8000eac:	200011f0 	.word	0x200011f0
 8000eb0:	20003a1b 	.word	0x20003a1b
 8000eb4:	20003a1a 	.word	0x20003a1a
 8000eb8:	20000bf0 	.word	0x20000bf0
 8000ebc:	20001f1a 	.word	0x20001f1a
 8000ec0:	20001f08 	.word	0x20001f08
 8000ec4:	20002120 	.word	0x20002120
 8000ec8:	4a77      	ldr	r2, [pc, #476]	; (80010a8 <main+0xa14>)
 8000eca:	f8c2 3cf0 	str.w	r3, [r2, #3312]	; 0xcf0
	  						wf._new_data_rcv=0;//
 8000ece:	4b76      	ldr	r3, [pc, #472]	; (80010a8 <main+0xa14>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	f8c3 2cdc 	str.w	r2, [r3, #3292]	; 0xcdc
	  						wf._send_data=1;
 8000ed6:	4b74      	ldr	r3, [pc, #464]	; (80010a8 <main+0xa14>)
 8000ed8:	2201      	movs	r2, #1
 8000eda:	f8c3 2a9c 	str.w	r2, [r3, #2716]	; 0xa9c
	  						}
	  					}

	  		}
// AGREGAR TIMER EN MS TICKS PARA HABILITAR ESTADO Y CUENTA TODOS EN EL STRUCT
	  		if((FLAG_UART2 == 1)||(lr.tmr_dly_ON==1))  //Evento de dato recibido LoRA debo verificar que es
 8000ede:	4b73      	ldr	r3, [pc, #460]	; (80010ac <main+0xa18>)
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	2b01      	cmp	r3, #1
 8000ee4:	d005      	beq.n	8000ef2 <main+0x85e>
 8000ee6:	4b72      	ldr	r3, [pc, #456]	; (80010b0 <main+0xa1c>)
 8000ee8:	f893 37ee 	ldrb.w	r3, [r3, #2030]	; 0x7ee
 8000eec:	2b01      	cmp	r3, #1
 8000eee:	f040 80b2 	bne.w	8001056 <main+0x9c2>
	  		{
	  			if(FLAG_UART2==1)
 8000ef2:	4b6e      	ldr	r3, [pc, #440]	; (80010ac <main+0xa18>)
 8000ef4:	781b      	ldrb	r3, [r3, #0]
 8000ef6:	2b01      	cmp	r3, #1
 8000ef8:	d160      	bne.n	8000fbc <main+0x928>
	  				{
	  				FLAG_UART2=0;
 8000efa:	4b6c      	ldr	r3, [pc, #432]	; (80010ac <main+0xa18>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	701a      	strb	r2, [r3, #0]
	  				LoRa_decode(&lr);
 8000f00:	486b      	ldr	r0, [pc, #428]	; (80010b0 <main+0xa1c>)
 8000f02:	f00a fd73 	bl	800b9ec <LoRa_decode>
	  				if(lr._data_available)
 8000f06:	4b6a      	ldr	r3, [pc, #424]	; (80010b0 <main+0xa1c>)
 8000f08:	f893 3800 	ldrb.w	r3, [r3, #2048]	; 0x800
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d055      	beq.n	8000fbc <main+0x928>
	  				{
	  					CopiaVector(lr.dataRCV_hld,lr.dataRCV,lr._n_dataRCV,1,"D");
 8000f10:	4b67      	ldr	r3, [pc, #412]	; (80010b0 <main+0xa1c>)
 8000f12:	f8d3 24d8 	ldr.w	r2, [r3, #1240]	; 0x4d8
 8000f16:	4b67      	ldr	r3, [pc, #412]	; (80010b4 <main+0xa20>)
 8000f18:	9300      	str	r3, [sp, #0]
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	4966      	ldr	r1, [pc, #408]	; (80010b8 <main+0xa24>)
 8000f1e:	4867      	ldr	r0, [pc, #412]	; (80010bc <main+0xa28>)
 8000f20:	f00d fd04 	bl	800e92c <CopiaVector>
	  					char num[6];
	  					int i=0;
 8000f24:	2300      	movs	r3, #0
 8000f26:	647b      	str	r3, [r7, #68]	; 0x44
	  					int n=0;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	643b      	str	r3, [r7, #64]	; 0x40
	  					int lnn=0;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	63bb      	str	r3, [r7, #56]	; 0x38
	  					lnn=strlen(lr.dataRCV_hld);
 8000f30:	4862      	ldr	r0, [pc, #392]	; (80010bc <main+0xa28>)
 8000f32:	f7ff f95f 	bl	80001f4 <strlen>
 8000f36:	4603      	mov	r3, r0
 8000f38:	63bb      	str	r3, [r7, #56]	; 0x38
	  					while(i < lnn-1)
 8000f3a:	e03a      	b.n	8000fb2 <main+0x91e>
	  					{
							if( i!=0) i++;
 8000f3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d002      	beq.n	8000f48 <main+0x8b4>
 8000f42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000f44:	3301      	adds	r3, #1
 8000f46:	647b      	str	r3, [r7, #68]	; 0x44
							int j=0;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	63fb      	str	r3, [r7, #60]	; 0x3c
								while(lr.dataRCV_hld[i] != ';')
 8000f4c:	e011      	b.n	8000f72 <main+0x8de>
								{
									num[j]=lr.dataRCV_hld[i];
 8000f4e:	4a58      	ldr	r2, [pc, #352]	; (80010b0 <main+0xa1c>)
 8000f50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000f52:	4413      	add	r3, r2
 8000f54:	f203 3356 	addw	r3, r3, #854	; 0x356
 8000f58:	7819      	ldrb	r1, [r3, #0]
 8000f5a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8000f5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f60:	4413      	add	r3, r2
 8000f62:	460a      	mov	r2, r1
 8000f64:	701a      	strb	r2, [r3, #0]
									j++;
 8000f66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f68:	3301      	adds	r3, #1
 8000f6a:	63fb      	str	r3, [r7, #60]	; 0x3c
									i++;
 8000f6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000f6e:	3301      	adds	r3, #1
 8000f70:	647b      	str	r3, [r7, #68]	; 0x44
								while(lr.dataRCV_hld[i] != ';')
 8000f72:	4a4f      	ldr	r2, [pc, #316]	; (80010b0 <main+0xa1c>)
 8000f74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000f76:	4413      	add	r3, r2
 8000f78:	f203 3356 	addw	r3, r3, #854	; 0x356
 8000f7c:	781b      	ldrb	r3, [r3, #0]
 8000f7e:	2b3b      	cmp	r3, #59	; 0x3b
 8000f80:	d1e5      	bne.n	8000f4e <main+0x8ba>
								}
							num[j]='\0';
 8000f82:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8000f86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f88:	4413      	add	r3, r2
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	701a      	strb	r2, [r3, #0]
							ModBUS_F03_Assign(&mb_eth,n,atoi(num,10));
 8000f8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000f90:	b2dc      	uxtb	r4, r3
 8000f92:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f96:	210a      	movs	r1, #10
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f00d fd12 	bl	800e9c2 <atoi>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	b29b      	uxth	r3, r3
 8000fa2:	461a      	mov	r2, r3
 8000fa4:	4621      	mov	r1, r4
 8000fa6:	4846      	ldr	r0, [pc, #280]	; (80010c0 <main+0xa2c>)
 8000fa8:	f00b fa7b 	bl	800c4a2 <ModBUS_F03_Assign>
							n++;//Incremento posición  a almacenar
 8000fac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000fae:	3301      	adds	r3, #1
 8000fb0:	643b      	str	r3, [r7, #64]	; 0x40
	  					while(i < lnn-1)
 8000fb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000fb4:	3b01      	subs	r3, #1
 8000fb6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000fb8:	429a      	cmp	r2, r3
 8000fba:	dbbf      	blt.n	8000f3c <main+0x8a8>
	  					}
	  				}
	  				}

	  			if(lr.tmr_dly_ON==1)
 8000fbc:	4b3c      	ldr	r3, [pc, #240]	; (80010b0 <main+0xa1c>)
 8000fbe:	f893 37ee 	ldrb.w	r3, [r3, #2030]	; 0x7ee
 8000fc2:	2b01      	cmp	r3, #1
 8000fc4:	d147      	bne.n	8001056 <main+0x9c2>
	  				{
	  					lr.tmr_dly_ON=0;
 8000fc6:	4b3a      	ldr	r3, [pc, #232]	; (80010b0 <main+0xa1c>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	f883 27ee 	strb.w	r2, [r3, #2030]	; 0x7ee
	  					LoRa_reset_sndTIMER(&lr,3000);
 8000fce:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8000fd2:	4837      	ldr	r0, [pc, #220]	; (80010b0 <main+0xa1c>)
 8000fd4:	f00a fcee 	bl	800b9b4 <LoRa_reset_sndTIMER>
						lr.dest_address[0]='\0';
 8000fd8:	4b35      	ldr	r3, [pc, #212]	; (80010b0 <main+0xa1c>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	759a      	strb	r2, [r3, #22]
						lr.txbuff[0]='\0';
 8000fde:	4b34      	ldr	r3, [pc, #208]	; (80010b0 <main+0xa1c>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	f883 24dc 	strb.w	r2, [r3, #1244]	; 0x4dc
			  			strncat(lr.dest_address,"1",1);
 8000fe6:	4837      	ldr	r0, [pc, #220]	; (80010c4 <main+0xa30>)
 8000fe8:	f7ff f904 	bl	80001f4 <strlen>
 8000fec:	4603      	mov	r3, r0
 8000fee:	461a      	mov	r2, r3
 8000ff0:	4b34      	ldr	r3, [pc, #208]	; (80010c4 <main+0xa30>)
 8000ff2:	4413      	add	r3, r2
 8000ff4:	4934      	ldr	r1, [pc, #208]	; (80010c8 <main+0xa34>)
 8000ff6:	461a      	mov	r2, r3
 8000ff8:	460b      	mov	r3, r1
 8000ffa:	881b      	ldrh	r3, [r3, #0]
 8000ffc:	8013      	strh	r3, [r2, #0]
			  			strncat(lr.txbuff,"prueba de envio de mensaje de texto",strlen("prueba de envio de mensaje de texto"));
 8000ffe:	4833      	ldr	r0, [pc, #204]	; (80010cc <main+0xa38>)
 8001000:	f7ff f8f8 	bl	80001f4 <strlen>
 8001004:	4603      	mov	r3, r0
 8001006:	461a      	mov	r2, r3
 8001008:	4b30      	ldr	r3, [pc, #192]	; (80010cc <main+0xa38>)
 800100a:	4413      	add	r3, r2
 800100c:	4a30      	ldr	r2, [pc, #192]	; (80010d0 <main+0xa3c>)
 800100e:	4614      	mov	r4, r2
 8001010:	469c      	mov	ip, r3
 8001012:	f104 0e20 	add.w	lr, r4, #32
 8001016:	4665      	mov	r5, ip
 8001018:	4626      	mov	r6, r4
 800101a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800101c:	6028      	str	r0, [r5, #0]
 800101e:	6069      	str	r1, [r5, #4]
 8001020:	60aa      	str	r2, [r5, #8]
 8001022:	60eb      	str	r3, [r5, #12]
 8001024:	3410      	adds	r4, #16
 8001026:	f10c 0c10 	add.w	ip, ip, #16
 800102a:	4574      	cmp	r4, lr
 800102c:	d1f3      	bne.n	8001016 <main+0x982>
 800102e:	4663      	mov	r3, ip
 8001030:	4622      	mov	r2, r4
 8001032:	6810      	ldr	r0, [r2, #0]
 8001034:	6018      	str	r0, [r3, #0]
			  			lr.txitems=strlen("prueba de envio de mensaje de texto");
 8001036:	4b1e      	ldr	r3, [pc, #120]	; (80010b0 <main+0xa1c>)
 8001038:	2223      	movs	r2, #35	; 0x23
 800103a:	f8c3 27e0 	str.w	r2, [r3, #2016]	; 0x7e0
		  				lr.estado=_SENT;										//
 800103e:	4b1c      	ldr	r3, [pc, #112]	; (80010b0 <main+0xa1c>)
 8001040:	2214      	movs	r2, #20
 8001042:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
			  			error=LoRa_Send(&lr,&huart2);
 8001046:	4923      	ldr	r1, [pc, #140]	; (80010d4 <main+0xa40>)
 8001048:	4819      	ldr	r0, [pc, #100]	; (80010b0 <main+0xa1c>)
 800104a:	f00a fc05 	bl	800b858 <LoRa_Send>
 800104e:	4603      	mov	r3, r0
 8001050:	b2da      	uxtb	r2, r3
 8001052:	4b21      	ldr	r3, [pc, #132]	; (80010d8 <main+0xa44>)
 8001054:	701a      	strb	r2, [r3, #0]
	  				}
	  		}

	  		if (ESP_HW_Init==1) //Si el módulo se inició correctamente
 8001056:	4b21      	ldr	r3, [pc, #132]	; (80010dc <main+0xa48>)
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	2b01      	cmp	r3, #1
 800105c:	d108      	bne.n	8001070 <main+0x9dc>
	  			{
	  				conexion=WiFi_Conn_ND(&wf,&huart1,1);	//Tiene que ir en el main el chequeo es constante
 800105e:	2201      	movs	r2, #1
 8001060:	491f      	ldr	r1, [pc, #124]	; (80010e0 <main+0xa4c>)
 8001062:	4811      	ldr	r0, [pc, #68]	; (80010a8 <main+0xa14>)
 8001064:	f008 fc02 	bl	800986c <WiFi_Conn_ND>
 8001068:	4603      	mov	r3, r0
 800106a:	b2da      	uxtb	r2, r3
 800106c:	4b1d      	ldr	r3, [pc, #116]	; (80010e4 <main+0xa50>)
 800106e:	701a      	strb	r2, [r3, #0]
	  		// 		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
	  		// 		ITM0_Write("\r\n ESP WAIT 5s AFT RST\r\n",strlen("\r\n ESP WAIT 5s AFT RST\r\n"));
	  		// 		HAL_Delay(5000);//210419
	  		// 		esp_restart=0;
	  		// 	}
	  		if (esp_restart==1) //WRNNG Hardcoded RESET WIFI
 8001070:	4b1d      	ldr	r3, [pc, #116]	; (80010e8 <main+0xa54>)
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	2b01      	cmp	r3, #1
 8001076:	f47f adab 	bne.w	8000bd0 <main+0x53c>
	  			{

	  				HW_RESET(&wf);
 800107a:	480b      	ldr	r0, [pc, #44]	; (80010a8 <main+0xa14>)
 800107c:	f005 fb5a 	bl	8006734 <HW_RESET>
	  				HAL_Delay(5000);//210419
 8001080:	f241 3088 	movw	r0, #5000	; 0x1388
 8001084:	f001 fe3c 	bl	8002d00 <HAL_Delay>
	  				esp_restart=0;
 8001088:	4b17      	ldr	r3, [pc, #92]	; (80010e8 <main+0xa54>)
 800108a:	2200      	movs	r2, #0
 800108c:	701a      	strb	r2, [r3, #0]
	  				wf._estado=0;
 800108e:	4b06      	ldr	r3, [pc, #24]	; (80010a8 <main+0xa14>)
 8001090:	2200      	movs	r2, #0
 8001092:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	  				wf._estado_conexion=100;
 8001096:	4b04      	ldr	r3, [pc, #16]	; (80010a8 <main+0xa14>)
 8001098:	2264      	movs	r2, #100	; 0x64
 800109a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	  				ConectarWIFI(&wf);
 800109e:	4802      	ldr	r0, [pc, #8]	; (80010a8 <main+0xa14>)
 80010a0:	f005 fb9c 	bl	80067dc <ConectarWIFI>
	  	  if (ESP_HW_Init==1)
 80010a4:	e594      	b.n	8000bd0 <main+0x53c>
 80010a6:	bf00      	nop
 80010a8:	20000b58 	.word	0x20000b58
 80010ac:	20003a19 	.word	0x20003a19
 80010b0:	20000350 	.word	0x20000350
 80010b4:	0800ffdc 	.word	0x0800ffdc
 80010b8:	20000526 	.word	0x20000526
 80010bc:	200006a6 	.word	0x200006a6
 80010c0:	200018b8 	.word	0x200018b8
 80010c4:	20000366 	.word	0x20000366
 80010c8:	0800ffe0 	.word	0x0800ffe0
 80010cc:	2000082c 	.word	0x2000082c
 80010d0:	0800ffe4 	.word	0x0800ffe4
 80010d4:	200002c0 	.word	0x200002c0
 80010d8:	20000b54 	.word	0x20000b54
 80010dc:	20003a13 	.word	0x20003a13
 80010e0:	2000027c 	.word	0x2000027c
 80010e4:	20003a1d 	.word	0x20003a1d
 80010e8:	20003a1c 	.word	0x20003a1c

080010ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b094      	sub	sp, #80	; 0x50
 80010f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010f2:	f107 0320 	add.w	r3, r7, #32
 80010f6:	2230      	movs	r2, #48	; 0x30
 80010f8:	2100      	movs	r1, #0
 80010fa:	4618      	mov	r0, r3
 80010fc:	f00d fe61 	bl	800edc2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001100:	f107 030c 	add.w	r3, r7, #12
 8001104:	2200      	movs	r2, #0
 8001106:	601a      	str	r2, [r3, #0]
 8001108:	605a      	str	r2, [r3, #4]
 800110a:	609a      	str	r2, [r3, #8]
 800110c:	60da      	str	r2, [r3, #12]
 800110e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001110:	2300      	movs	r3, #0
 8001112:	60bb      	str	r3, [r7, #8]
 8001114:	4b27      	ldr	r3, [pc, #156]	; (80011b4 <SystemClock_Config+0xc8>)
 8001116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001118:	4a26      	ldr	r2, [pc, #152]	; (80011b4 <SystemClock_Config+0xc8>)
 800111a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800111e:	6413      	str	r3, [r2, #64]	; 0x40
 8001120:	4b24      	ldr	r3, [pc, #144]	; (80011b4 <SystemClock_Config+0xc8>)
 8001122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001124:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001128:	60bb      	str	r3, [r7, #8]
 800112a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800112c:	2300      	movs	r3, #0
 800112e:	607b      	str	r3, [r7, #4]
 8001130:	4b21      	ldr	r3, [pc, #132]	; (80011b8 <SystemClock_Config+0xcc>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4a20      	ldr	r2, [pc, #128]	; (80011b8 <SystemClock_Config+0xcc>)
 8001136:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800113a:	6013      	str	r3, [r2, #0]
 800113c:	4b1e      	ldr	r3, [pc, #120]	; (80011b8 <SystemClock_Config+0xcc>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001144:	607b      	str	r3, [r7, #4]
 8001146:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001148:	2301      	movs	r3, #1
 800114a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800114c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001150:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001152:	2302      	movs	r3, #2
 8001154:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001156:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800115a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 800115c:	230c      	movs	r3, #12
 800115e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001160:	2360      	movs	r3, #96	; 0x60
 8001162:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001164:	2302      	movs	r3, #2
 8001166:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001168:	2304      	movs	r3, #4
 800116a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800116c:	f107 0320 	add.w	r3, r7, #32
 8001170:	4618      	mov	r0, r3
 8001172:	f002 fa5b 	bl	800362c <HAL_RCC_OscConfig>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800117c:	f001 fa3a 	bl	80025f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001180:	230f      	movs	r3, #15
 8001182:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001184:	2302      	movs	r3, #2
 8001186:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001188:	2300      	movs	r3, #0
 800118a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800118c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001190:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001192:	2300      	movs	r3, #0
 8001194:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001196:	f107 030c 	add.w	r3, r7, #12
 800119a:	2103      	movs	r1, #3
 800119c:	4618      	mov	r0, r3
 800119e:	f002 fcbd 	bl	8003b1c <HAL_RCC_ClockConfig>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d001      	beq.n	80011ac <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80011a8:	f001 fa24 	bl	80025f4 <Error_Handler>
  }
}
 80011ac:	bf00      	nop
 80011ae:	3750      	adds	r7, #80	; 0x50
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	40023800 	.word	0x40023800
 80011b8:	40007000 	.word	0x40007000

080011bc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80011c0:	4b17      	ldr	r3, [pc, #92]	; (8001220 <MX_SPI1_Init+0x64>)
 80011c2:	4a18      	ldr	r2, [pc, #96]	; (8001224 <MX_SPI1_Init+0x68>)
 80011c4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80011c6:	4b16      	ldr	r3, [pc, #88]	; (8001220 <MX_SPI1_Init+0x64>)
 80011c8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80011cc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80011ce:	4b14      	ldr	r3, [pc, #80]	; (8001220 <MX_SPI1_Init+0x64>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80011d4:	4b12      	ldr	r3, [pc, #72]	; (8001220 <MX_SPI1_Init+0x64>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011da:	4b11      	ldr	r3, [pc, #68]	; (8001220 <MX_SPI1_Init+0x64>)
 80011dc:	2200      	movs	r2, #0
 80011de:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011e0:	4b0f      	ldr	r3, [pc, #60]	; (8001220 <MX_SPI1_Init+0x64>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80011e6:	4b0e      	ldr	r3, [pc, #56]	; (8001220 <MX_SPI1_Init+0x64>)
 80011e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011ec:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80011ee:	4b0c      	ldr	r3, [pc, #48]	; (8001220 <MX_SPI1_Init+0x64>)
 80011f0:	2210      	movs	r2, #16
 80011f2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011f4:	4b0a      	ldr	r3, [pc, #40]	; (8001220 <MX_SPI1_Init+0x64>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80011fa:	4b09      	ldr	r3, [pc, #36]	; (8001220 <MX_SPI1_Init+0x64>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001200:	4b07      	ldr	r3, [pc, #28]	; (8001220 <MX_SPI1_Init+0x64>)
 8001202:	2200      	movs	r2, #0
 8001204:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001206:	4b06      	ldr	r3, [pc, #24]	; (8001220 <MX_SPI1_Init+0x64>)
 8001208:	220a      	movs	r2, #10
 800120a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800120c:	4804      	ldr	r0, [pc, #16]	; (8001220 <MX_SPI1_Init+0x64>)
 800120e:	f002 fe65 	bl	8003edc <HAL_SPI_Init>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d001      	beq.n	800121c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001218:	f001 f9ec 	bl	80025f4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800121c:	bf00      	nop
 800121e:	bd80      	pop	{r7, pc}
 8001220:	20000194 	.word	0x20000194
 8001224:	40013000 	.word	0x40013000

08001228 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b08e      	sub	sp, #56	; 0x38
 800122c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800122e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001232:	2200      	movs	r2, #0
 8001234:	601a      	str	r2, [r3, #0]
 8001236:	605a      	str	r2, [r3, #4]
 8001238:	609a      	str	r2, [r3, #8]
 800123a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800123c:	f107 0320 	add.w	r3, r7, #32
 8001240:	2200      	movs	r2, #0
 8001242:	601a      	str	r2, [r3, #0]
 8001244:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001246:	1d3b      	adds	r3, r7, #4
 8001248:	2200      	movs	r2, #0
 800124a:	601a      	str	r2, [r3, #0]
 800124c:	605a      	str	r2, [r3, #4]
 800124e:	609a      	str	r2, [r3, #8]
 8001250:	60da      	str	r2, [r3, #12]
 8001252:	611a      	str	r2, [r3, #16]
 8001254:	615a      	str	r2, [r3, #20]
 8001256:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001258:	4b30      	ldr	r3, [pc, #192]	; (800131c <MX_TIM2_Init+0xf4>)
 800125a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800125e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1000;
 8001260:	4b2e      	ldr	r3, [pc, #184]	; (800131c <MX_TIM2_Init+0xf4>)
 8001262:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001266:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001268:	4b2c      	ldr	r3, [pc, #176]	; (800131c <MX_TIM2_Init+0xf4>)
 800126a:	2200      	movs	r2, #0
 800126c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000;
 800126e:	4b2b      	ldr	r3, [pc, #172]	; (800131c <MX_TIM2_Init+0xf4>)
 8001270:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001274:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001276:	4b29      	ldr	r3, [pc, #164]	; (800131c <MX_TIM2_Init+0xf4>)
 8001278:	2200      	movs	r2, #0
 800127a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800127c:	4b27      	ldr	r3, [pc, #156]	; (800131c <MX_TIM2_Init+0xf4>)
 800127e:	2280      	movs	r2, #128	; 0x80
 8001280:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001282:	4826      	ldr	r0, [pc, #152]	; (800131c <MX_TIM2_Init+0xf4>)
 8001284:	f003 f920 	bl	80044c8 <HAL_TIM_Base_Init>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800128e:	f001 f9b1 	bl	80025f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001292:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001296:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001298:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800129c:	4619      	mov	r1, r3
 800129e:	481f      	ldr	r0, [pc, #124]	; (800131c <MX_TIM2_Init+0xf4>)
 80012a0:	f003 fd28 	bl	8004cf4 <HAL_TIM_ConfigClockSource>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80012aa:	f001 f9a3 	bl	80025f4 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 80012ae:	481b      	ldr	r0, [pc, #108]	; (800131c <MX_TIM2_Init+0xf4>)
 80012b0:	f003 f959 	bl	8004566 <HAL_TIM_OC_Init>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d001      	beq.n	80012be <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80012ba:	f001 f99b 	bl	80025f4 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim2, TIM_OPMODE_SINGLE) != HAL_OK)
 80012be:	2108      	movs	r1, #8
 80012c0:	4816      	ldr	r0, [pc, #88]	; (800131c <MX_TIM2_Init+0xf4>)
 80012c2:	f003 fb59 	bl	8004978 <HAL_TIM_OnePulse_Init>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d001      	beq.n	80012d0 <MX_TIM2_Init+0xa8>
  {
    Error_Handler();
 80012cc:	f001 f992 	bl	80025f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012d0:	2300      	movs	r3, #0
 80012d2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012d4:	2300      	movs	r3, #0
 80012d6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012d8:	f107 0320 	add.w	r3, r7, #32
 80012dc:	4619      	mov	r1, r3
 80012de:	480f      	ldr	r0, [pc, #60]	; (800131c <MX_TIM2_Init+0xf4>)
 80012e0:	f004 f8c4 	bl	800546c <HAL_TIMEx_MasterConfigSynchronization>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <MX_TIM2_Init+0xc6>
  {
    Error_Handler();
 80012ea:	f001 f983 	bl	80025f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_INACTIVE;
 80012ee:	2320      	movs	r3, #32
 80012f0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80012f2:	2300      	movs	r3, #0
 80012f4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012f6:	2300      	movs	r3, #0
 80012f8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012fa:	2300      	movs	r3, #0
 80012fc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012fe:	1d3b      	adds	r3, r7, #4
 8001300:	2200      	movs	r2, #0
 8001302:	4619      	mov	r1, r3
 8001304:	4805      	ldr	r0, [pc, #20]	; (800131c <MX_TIM2_Init+0xf4>)
 8001306:	f003 fc99 	bl	8004c3c <HAL_TIM_OC_ConfigChannel>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <MX_TIM2_Init+0xec>
  {
    Error_Handler();
 8001310:	f001 f970 	bl	80025f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001314:	bf00      	nop
 8001316:	3738      	adds	r7, #56	; 0x38
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}
 800131c:	200001ec 	.word	0x200001ec

08001320 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b08e      	sub	sp, #56	; 0x38
 8001324:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001326:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800132a:	2200      	movs	r2, #0
 800132c:	601a      	str	r2, [r3, #0]
 800132e:	605a      	str	r2, [r3, #4]
 8001330:	609a      	str	r2, [r3, #8]
 8001332:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001334:	f107 0320 	add.w	r3, r7, #32
 8001338:	2200      	movs	r2, #0
 800133a:	601a      	str	r2, [r3, #0]
 800133c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800133e:	1d3b      	adds	r3, r7, #4
 8001340:	2200      	movs	r2, #0
 8001342:	601a      	str	r2, [r3, #0]
 8001344:	605a      	str	r2, [r3, #4]
 8001346:	609a      	str	r2, [r3, #8]
 8001348:	60da      	str	r2, [r3, #12]
 800134a:	611a      	str	r2, [r3, #16]
 800134c:	615a      	str	r2, [r3, #20]
 800134e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001350:	4b2f      	ldr	r3, [pc, #188]	; (8001410 <MX_TIM3_Init+0xf0>)
 8001352:	4a30      	ldr	r2, [pc, #192]	; (8001414 <MX_TIM3_Init+0xf4>)
 8001354:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 100;
 8001356:	4b2e      	ldr	r3, [pc, #184]	; (8001410 <MX_TIM3_Init+0xf0>)
 8001358:	2264      	movs	r2, #100	; 0x64
 800135a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800135c:	4b2c      	ldr	r3, [pc, #176]	; (8001410 <MX_TIM3_Init+0xf0>)
 800135e:	2200      	movs	r2, #0
 8001360:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 150;
 8001362:	4b2b      	ldr	r3, [pc, #172]	; (8001410 <MX_TIM3_Init+0xf0>)
 8001364:	2296      	movs	r2, #150	; 0x96
 8001366:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001368:	4b29      	ldr	r3, [pc, #164]	; (8001410 <MX_TIM3_Init+0xf0>)
 800136a:	2200      	movs	r2, #0
 800136c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800136e:	4b28      	ldr	r3, [pc, #160]	; (8001410 <MX_TIM3_Init+0xf0>)
 8001370:	2280      	movs	r2, #128	; 0x80
 8001372:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001374:	4826      	ldr	r0, [pc, #152]	; (8001410 <MX_TIM3_Init+0xf0>)
 8001376:	f003 f8a7 	bl	80044c8 <HAL_TIM_Base_Init>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8001380:	f001 f938 	bl	80025f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001384:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001388:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800138a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800138e:	4619      	mov	r1, r3
 8001390:	481f      	ldr	r0, [pc, #124]	; (8001410 <MX_TIM3_Init+0xf0>)
 8001392:	f003 fcaf 	bl	8004cf4 <HAL_TIM_ConfigClockSource>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d001      	beq.n	80013a0 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 800139c:	f001 f92a 	bl	80025f4 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 80013a0:	481b      	ldr	r0, [pc, #108]	; (8001410 <MX_TIM3_Init+0xf0>)
 80013a2:	f003 f8e0 	bl	8004566 <HAL_TIM_OC_Init>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 80013ac:	f001 f922 	bl	80025f4 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim3, TIM_OPMODE_SINGLE) != HAL_OK)
 80013b0:	2108      	movs	r1, #8
 80013b2:	4817      	ldr	r0, [pc, #92]	; (8001410 <MX_TIM3_Init+0xf0>)
 80013b4:	f003 fae0 	bl	8004978 <HAL_TIM_OnePulse_Init>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <MX_TIM3_Init+0xa2>
  {
    Error_Handler();
 80013be:	f001 f919 	bl	80025f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013c2:	2300      	movs	r3, #0
 80013c4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013c6:	2300      	movs	r3, #0
 80013c8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80013ca:	f107 0320 	add.w	r3, r7, #32
 80013ce:	4619      	mov	r1, r3
 80013d0:	480f      	ldr	r0, [pc, #60]	; (8001410 <MX_TIM3_Init+0xf0>)
 80013d2:	f004 f84b 	bl	800546c <HAL_TIMEx_MasterConfigSynchronization>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d001      	beq.n	80013e0 <MX_TIM3_Init+0xc0>
  {
    Error_Handler();
 80013dc:	f001 f90a 	bl	80025f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_INACTIVE;
 80013e0:	2320      	movs	r3, #32
 80013e2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80013e4:	2300      	movs	r3, #0
 80013e6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013e8:	2300      	movs	r3, #0
 80013ea:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013ec:	2300      	movs	r3, #0
 80013ee:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013f0:	1d3b      	adds	r3, r7, #4
 80013f2:	2200      	movs	r2, #0
 80013f4:	4619      	mov	r1, r3
 80013f6:	4806      	ldr	r0, [pc, #24]	; (8001410 <MX_TIM3_Init+0xf0>)
 80013f8:	f003 fc20 	bl	8004c3c <HAL_TIM_OC_ConfigChannel>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <MX_TIM3_Init+0xe6>
  {
    Error_Handler();
 8001402:	f001 f8f7 	bl	80025f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001406:	bf00      	nop
 8001408:	3738      	adds	r7, #56	; 0x38
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	20000234 	.word	0x20000234
 8001414:	40000400 	.word	0x40000400

08001418 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800141c:	4b11      	ldr	r3, [pc, #68]	; (8001464 <MX_USART1_UART_Init+0x4c>)
 800141e:	4a12      	ldr	r2, [pc, #72]	; (8001468 <MX_USART1_UART_Init+0x50>)
 8001420:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001422:	4b10      	ldr	r3, [pc, #64]	; (8001464 <MX_USART1_UART_Init+0x4c>)
 8001424:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001428:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800142a:	4b0e      	ldr	r3, [pc, #56]	; (8001464 <MX_USART1_UART_Init+0x4c>)
 800142c:	2200      	movs	r2, #0
 800142e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001430:	4b0c      	ldr	r3, [pc, #48]	; (8001464 <MX_USART1_UART_Init+0x4c>)
 8001432:	2200      	movs	r2, #0
 8001434:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001436:	4b0b      	ldr	r3, [pc, #44]	; (8001464 <MX_USART1_UART_Init+0x4c>)
 8001438:	2200      	movs	r2, #0
 800143a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800143c:	4b09      	ldr	r3, [pc, #36]	; (8001464 <MX_USART1_UART_Init+0x4c>)
 800143e:	220c      	movs	r2, #12
 8001440:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001442:	4b08      	ldr	r3, [pc, #32]	; (8001464 <MX_USART1_UART_Init+0x4c>)
 8001444:	2200      	movs	r2, #0
 8001446:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001448:	4b06      	ldr	r3, [pc, #24]	; (8001464 <MX_USART1_UART_Init+0x4c>)
 800144a:	2200      	movs	r2, #0
 800144c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800144e:	4805      	ldr	r0, [pc, #20]	; (8001464 <MX_USART1_UART_Init+0x4c>)
 8001450:	f004 f88e 	bl	8005570 <HAL_UART_Init>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d001      	beq.n	800145e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800145a:	f001 f8cb 	bl	80025f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800145e:	bf00      	nop
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	2000027c 	.word	0x2000027c
 8001468:	40011000 	.word	0x40011000

0800146c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001470:	4b11      	ldr	r3, [pc, #68]	; (80014b8 <MX_USART2_UART_Init+0x4c>)
 8001472:	4a12      	ldr	r2, [pc, #72]	; (80014bc <MX_USART2_UART_Init+0x50>)
 8001474:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001476:	4b10      	ldr	r3, [pc, #64]	; (80014b8 <MX_USART2_UART_Init+0x4c>)
 8001478:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800147c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800147e:	4b0e      	ldr	r3, [pc, #56]	; (80014b8 <MX_USART2_UART_Init+0x4c>)
 8001480:	2200      	movs	r2, #0
 8001482:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001484:	4b0c      	ldr	r3, [pc, #48]	; (80014b8 <MX_USART2_UART_Init+0x4c>)
 8001486:	2200      	movs	r2, #0
 8001488:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800148a:	4b0b      	ldr	r3, [pc, #44]	; (80014b8 <MX_USART2_UART_Init+0x4c>)
 800148c:	2200      	movs	r2, #0
 800148e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001490:	4b09      	ldr	r3, [pc, #36]	; (80014b8 <MX_USART2_UART_Init+0x4c>)
 8001492:	220c      	movs	r2, #12
 8001494:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001496:	4b08      	ldr	r3, [pc, #32]	; (80014b8 <MX_USART2_UART_Init+0x4c>)
 8001498:	2200      	movs	r2, #0
 800149a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800149c:	4b06      	ldr	r3, [pc, #24]	; (80014b8 <MX_USART2_UART_Init+0x4c>)
 800149e:	2200      	movs	r2, #0
 80014a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80014a2:	4805      	ldr	r0, [pc, #20]	; (80014b8 <MX_USART2_UART_Init+0x4c>)
 80014a4:	f004 f864 	bl	8005570 <HAL_UART_Init>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80014ae:	f001 f8a1 	bl	80025f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80014b2:	bf00      	nop
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	200002c0 	.word	0x200002c0
 80014bc:	40004400 	.word	0x40004400

080014c0 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80014c4:	4b11      	ldr	r3, [pc, #68]	; (800150c <MX_USART6_UART_Init+0x4c>)
 80014c6:	4a12      	ldr	r2, [pc, #72]	; (8001510 <MX_USART6_UART_Init+0x50>)
 80014c8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80014ca:	4b10      	ldr	r3, [pc, #64]	; (800150c <MX_USART6_UART_Init+0x4c>)
 80014cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014d0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80014d2:	4b0e      	ldr	r3, [pc, #56]	; (800150c <MX_USART6_UART_Init+0x4c>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80014d8:	4b0c      	ldr	r3, [pc, #48]	; (800150c <MX_USART6_UART_Init+0x4c>)
 80014da:	2200      	movs	r2, #0
 80014dc:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80014de:	4b0b      	ldr	r3, [pc, #44]	; (800150c <MX_USART6_UART_Init+0x4c>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80014e4:	4b09      	ldr	r3, [pc, #36]	; (800150c <MX_USART6_UART_Init+0x4c>)
 80014e6:	220c      	movs	r2, #12
 80014e8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014ea:	4b08      	ldr	r3, [pc, #32]	; (800150c <MX_USART6_UART_Init+0x4c>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80014f0:	4b06      	ldr	r3, [pc, #24]	; (800150c <MX_USART6_UART_Init+0x4c>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80014f6:	4805      	ldr	r0, [pc, #20]	; (800150c <MX_USART6_UART_Init+0x4c>)
 80014f8:	f004 f83a 	bl	8005570 <HAL_UART_Init>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d001      	beq.n	8001506 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001502:	f001 f877 	bl	80025f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001506:	bf00      	nop
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	20000304 	.word	0x20000304
 8001510:	40011400 	.word	0x40011400

08001514 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b08a      	sub	sp, #40	; 0x28
 8001518:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800151a:	f107 0314 	add.w	r3, r7, #20
 800151e:	2200      	movs	r2, #0
 8001520:	601a      	str	r2, [r3, #0]
 8001522:	605a      	str	r2, [r3, #4]
 8001524:	609a      	str	r2, [r3, #8]
 8001526:	60da      	str	r2, [r3, #12]
 8001528:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800152a:	2300      	movs	r3, #0
 800152c:	613b      	str	r3, [r7, #16]
 800152e:	4b3f      	ldr	r3, [pc, #252]	; (800162c <MX_GPIO_Init+0x118>)
 8001530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001532:	4a3e      	ldr	r2, [pc, #248]	; (800162c <MX_GPIO_Init+0x118>)
 8001534:	f043 0304 	orr.w	r3, r3, #4
 8001538:	6313      	str	r3, [r2, #48]	; 0x30
 800153a:	4b3c      	ldr	r3, [pc, #240]	; (800162c <MX_GPIO_Init+0x118>)
 800153c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153e:	f003 0304 	and.w	r3, r3, #4
 8001542:	613b      	str	r3, [r7, #16]
 8001544:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001546:	2300      	movs	r3, #0
 8001548:	60fb      	str	r3, [r7, #12]
 800154a:	4b38      	ldr	r3, [pc, #224]	; (800162c <MX_GPIO_Init+0x118>)
 800154c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154e:	4a37      	ldr	r2, [pc, #220]	; (800162c <MX_GPIO_Init+0x118>)
 8001550:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001554:	6313      	str	r3, [r2, #48]	; 0x30
 8001556:	4b35      	ldr	r3, [pc, #212]	; (800162c <MX_GPIO_Init+0x118>)
 8001558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800155e:	60fb      	str	r3, [r7, #12]
 8001560:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001562:	2300      	movs	r3, #0
 8001564:	60bb      	str	r3, [r7, #8]
 8001566:	4b31      	ldr	r3, [pc, #196]	; (800162c <MX_GPIO_Init+0x118>)
 8001568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156a:	4a30      	ldr	r2, [pc, #192]	; (800162c <MX_GPIO_Init+0x118>)
 800156c:	f043 0301 	orr.w	r3, r3, #1
 8001570:	6313      	str	r3, [r2, #48]	; 0x30
 8001572:	4b2e      	ldr	r3, [pc, #184]	; (800162c <MX_GPIO_Init+0x118>)
 8001574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001576:	f003 0301 	and.w	r3, r3, #1
 800157a:	60bb      	str	r3, [r7, #8]
 800157c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800157e:	2300      	movs	r3, #0
 8001580:	607b      	str	r3, [r7, #4]
 8001582:	4b2a      	ldr	r3, [pc, #168]	; (800162c <MX_GPIO_Init+0x118>)
 8001584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001586:	4a29      	ldr	r2, [pc, #164]	; (800162c <MX_GPIO_Init+0x118>)
 8001588:	f043 0302 	orr.w	r3, r3, #2
 800158c:	6313      	str	r3, [r2, #48]	; 0x30
 800158e:	4b27      	ldr	r3, [pc, #156]	; (800162c <MX_GPIO_Init+0x118>)
 8001590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001592:	f003 0302 	and.w	r3, r3, #2
 8001596:	607b      	str	r3, [r7, #4]
 8001598:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PCB_LED_GPIO_Port, PCB_LED_Pin, GPIO_PIN_RESET);
 800159a:	2200      	movs	r2, #0
 800159c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015a0:	4823      	ldr	r0, [pc, #140]	; (8001630 <MX_GPIO_Init+0x11c>)
 80015a2:	f002 f80f 	bl	80035c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI1_NSS_Pin|WIFI_EN_Pin, GPIO_PIN_SET);
 80015a6:	2201      	movs	r2, #1
 80015a8:	f44f 7188 	mov.w	r1, #272	; 0x110
 80015ac:	4821      	ldr	r0, [pc, #132]	; (8001634 <MX_GPIO_Init+0x120>)
 80015ae:	f002 f809 	bl	80035c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PCB_LED_Pin */
  GPIO_InitStruct.Pin = PCB_LED_Pin;
 80015b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015b8:	2301      	movs	r3, #1
 80015ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015bc:	2300      	movs	r3, #0
 80015be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c0:	2300      	movs	r3, #0
 80015c2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PCB_LED_GPIO_Port, &GPIO_InitStruct);
 80015c4:	f107 0314 	add.w	r3, r7, #20
 80015c8:	4619      	mov	r1, r3
 80015ca:	4819      	ldr	r0, [pc, #100]	; (8001630 <MX_GPIO_Init+0x11c>)
 80015cc:	f001 fd92 	bl	80030f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : KEY_BTN_Pin */
  GPIO_InitStruct.Pin = KEY_BTN_Pin;
 80015d0:	2301      	movs	r3, #1
 80015d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015d4:	2300      	movs	r3, #0
 80015d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d8:	2300      	movs	r3, #0
 80015da:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(KEY_BTN_GPIO_Port, &GPIO_InitStruct);
 80015dc:	f107 0314 	add.w	r3, r7, #20
 80015e0:	4619      	mov	r1, r3
 80015e2:	4814      	ldr	r0, [pc, #80]	; (8001634 <MX_GPIO_Init+0x120>)
 80015e4:	f001 fd86 	bl	80030f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_NSS_Pin */
  GPIO_InitStruct.Pin = SPI1_NSS_Pin;
 80015e8:	2310      	movs	r3, #16
 80015ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ec:	2301      	movs	r3, #1
 80015ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f0:	2300      	movs	r3, #0
 80015f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015f4:	2303      	movs	r3, #3
 80015f6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_NSS_GPIO_Port, &GPIO_InitStruct);
 80015f8:	f107 0314 	add.w	r3, r7, #20
 80015fc:	4619      	mov	r1, r3
 80015fe:	480d      	ldr	r0, [pc, #52]	; (8001634 <MX_GPIO_Init+0x120>)
 8001600:	f001 fd78 	bl	80030f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : WIFI_EN_Pin */
  GPIO_InitStruct.Pin = WIFI_EN_Pin;
 8001604:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001608:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800160a:	2301      	movs	r3, #1
 800160c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160e:	2300      	movs	r3, #0
 8001610:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001612:	2300      	movs	r3, #0
 8001614:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(WIFI_EN_GPIO_Port, &GPIO_InitStruct);
 8001616:	f107 0314 	add.w	r3, r7, #20
 800161a:	4619      	mov	r1, r3
 800161c:	4805      	ldr	r0, [pc, #20]	; (8001634 <MX_GPIO_Init+0x120>)
 800161e:	f001 fd69 	bl	80030f4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001622:	bf00      	nop
 8001624:	3728      	adds	r7, #40	; 0x28
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	40023800 	.word	0x40023800
 8001630:	40020800 	.word	0x40020800
 8001634:	40020000 	.word	0x40020000

08001638 <ITM0_Write>:

/* USER CODE BEGIN 4 */


int ITM0_Write( char *ptr, int len)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b084      	sub	sp, #16
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
 8001640:	6039      	str	r1, [r7, #0]
 int DataIdx;

  for(DataIdx=0; DataIdx<len; DataIdx++)
 8001642:	2300      	movs	r3, #0
 8001644:	60fb      	str	r3, [r7, #12]
 8001646:	e009      	b.n	800165c <ITM0_Write+0x24>
  {
    ITM_SendChar(*ptr++);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	1c5a      	adds	r2, r3, #1
 800164c:	607a      	str	r2, [r7, #4]
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	4618      	mov	r0, r3
 8001652:	f7fe fff7 	bl	8000644 <ITM_SendChar>
  for(DataIdx=0; DataIdx<len; DataIdx++)
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	3301      	adds	r3, #1
 800165a:	60fb      	str	r3, [r7, #12]
 800165c:	68fa      	ldr	r2, [r7, #12]
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	429a      	cmp	r2, r3
 8001662:	dbf1      	blt.n	8001648 <ITM0_Write+0x10>
  }
  return len;
 8001664:	683b      	ldr	r3, [r7, #0]
}
 8001666:	4618      	mov	r0, r3
 8001668:	3710      	adds	r7, #16
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
	...

08001670 <SysTick_Handler>:

void SysTick_Handler(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b082      	sub	sp, #8
 8001674:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN SysTick_IRQn 0 */

	ms_ticks++;	//100 ms
 8001676:	4b68      	ldr	r3, [pc, #416]	; (8001818 <SysTick_Handler+0x1a8>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	3301      	adds	r3, #1
 800167c:	4a66      	ldr	r2, [pc, #408]	; (8001818 <SysTick_Handler+0x1a8>)
 800167e:	6013      	str	r3, [r2, #0]

	ESP_ticks++;
 8001680:	4b66      	ldr	r3, [pc, #408]	; (800181c <SysTick_Handler+0x1ac>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	3301      	adds	r3, #1
 8001686:	4a65      	ldr	r2, [pc, #404]	; (800181c <SysTick_Handler+0x1ac>)
 8001688:	6013      	str	r3, [r2, #0]
	if(mb_eth._w_answer) MB_TOUT_ticks++;
 800168a:	4b65      	ldr	r3, [pc, #404]	; (8001820 <SysTick_Handler+0x1b0>)
 800168c:	7a1b      	ldrb	r3, [r3, #8]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d004      	beq.n	800169c <SysTick_Handler+0x2c>
 8001692:	4b64      	ldr	r3, [pc, #400]	; (8001824 <SysTick_Handler+0x1b4>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	3301      	adds	r3, #1
 8001698:	4a62      	ldr	r2, [pc, #392]	; (8001824 <SysTick_Handler+0x1b4>)
 800169a:	6013      	str	r3, [r2, #0]
	if ( mb_eth._w_answer && (mb_eth._timeout < MB_TOUT_ticks))
 800169c:	4b60      	ldr	r3, [pc, #384]	; (8001820 <SysTick_Handler+0x1b0>)
 800169e:	7a1b      	ldrb	r3, [r3, #8]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d00c      	beq.n	80016be <SysTick_Handler+0x4e>
 80016a4:	4b5e      	ldr	r3, [pc, #376]	; (8001820 <SysTick_Handler+0x1b0>)
 80016a6:	88db      	ldrh	r3, [r3, #6]
 80016a8:	461a      	mov	r2, r3
 80016aa:	4b5e      	ldr	r3, [pc, #376]	; (8001824 <SysTick_Handler+0x1b4>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	429a      	cmp	r2, r3
 80016b0:	da05      	bge.n	80016be <SysTick_Handler+0x4e>
		{
			mb_eth._w_answer=0;
 80016b2:	4b5b      	ldr	r3, [pc, #364]	; (8001820 <SysTick_Handler+0x1b0>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	721a      	strb	r2, [r3, #8]
			MB_TOUT_ticks=0;
 80016b8:	4b5a      	ldr	r3, [pc, #360]	; (8001824 <SysTick_Handler+0x1b4>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	601a      	str	r2, [r3, #0]
		esp_restart=1;
	}*/

// ENVIO DATOS LoRa ---------------------------------------------------------------//

	if(lr.tmr_dly_en==1)
 80016be:	4b5a      	ldr	r3, [pc, #360]	; (8001828 <SysTick_Handler+0x1b8>)
 80016c0:	f893 37ed 	ldrb.w	r3, [r3, #2029]	; 0x7ed
 80016c4:	2b01      	cmp	r3, #1
 80016c6:	d116      	bne.n	80016f6 <SysTick_Handler+0x86>
	{
		lr.tmr_dlyCNT++;
 80016c8:	4b57      	ldr	r3, [pc, #348]	; (8001828 <SysTick_Handler+0x1b8>)
 80016ca:	f8d3 37f4 	ldr.w	r3, [r3, #2036]	; 0x7f4
 80016ce:	3301      	adds	r3, #1
 80016d0:	4a55      	ldr	r2, [pc, #340]	; (8001828 <SysTick_Handler+0x1b8>)
 80016d2:	f8c2 37f4 	str.w	r3, [r2, #2036]	; 0x7f4
		if(lr.tmr_dlyCNT > lr.tmr_dly)
 80016d6:	4b54      	ldr	r3, [pc, #336]	; (8001828 <SysTick_Handler+0x1b8>)
 80016d8:	f8d3 27f4 	ldr.w	r2, [r3, #2036]	; 0x7f4
 80016dc:	4b52      	ldr	r3, [pc, #328]	; (8001828 <SysTick_Handler+0x1b8>)
 80016de:	f8d3 37f0 	ldr.w	r3, [r3, #2032]	; 0x7f0
 80016e2:	429a      	cmp	r2, r3
 80016e4:	dd07      	ble.n	80016f6 <SysTick_Handler+0x86>
		{
			lr.tmr_dly_ON=1;
 80016e6:	4b50      	ldr	r3, [pc, #320]	; (8001828 <SysTick_Handler+0x1b8>)
 80016e8:	2201      	movs	r2, #1
 80016ea:	f883 27ee 	strb.w	r2, [r3, #2030]	; 0x7ee
			lr.tmr_dly_en=0;
 80016ee:	4b4e      	ldr	r3, [pc, #312]	; (8001828 <SysTick_Handler+0x1b8>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	f883 27ed 	strb.w	r2, [r3, #2029]	; 0x7ed
		}
	}
// ENVIO DATOS LoRa ---------------------------------------------------------------//
// ENVIO DATOS WF ---------------------------------------------------------------//

	if((wf._estado_conexion==609 || wf._estado_conexion==700)&&(wf._TCP_Local_Server_EN==0))  wf_snd_flag_ticks++;
 80016f6:	4b4d      	ldr	r3, [pc, #308]	; (800182c <SysTick_Handler+0x1bc>)
 80016f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80016fc:	f240 2261 	movw	r2, #609	; 0x261
 8001700:	4293      	cmp	r3, r2
 8001702:	d005      	beq.n	8001710 <SysTick_Handler+0xa0>
 8001704:	4b49      	ldr	r3, [pc, #292]	; (800182c <SysTick_Handler+0x1bc>)
 8001706:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800170a:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800170e:	d109      	bne.n	8001724 <SysTick_Handler+0xb4>
 8001710:	4b46      	ldr	r3, [pc, #280]	; (800182c <SysTick_Handler+0x1bc>)
 8001712:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8001716:	2b00      	cmp	r3, #0
 8001718:	d104      	bne.n	8001724 <SysTick_Handler+0xb4>
 800171a:	4b45      	ldr	r3, [pc, #276]	; (8001830 <SysTick_Handler+0x1c0>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	3301      	adds	r3, #1
 8001720:	4a43      	ldr	r2, [pc, #268]	; (8001830 <SysTick_Handler+0x1c0>)
 8001722:	6013      	str	r3, [r2, #0]

	if(wf_snd_flag_ticks>= 2000 && wf._ejecucion!=1 && wf._TCP_Local_Server_EN==0)		 	  WF_SND_FLAG=1;
 8001724:	4b42      	ldr	r3, [pc, #264]	; (8001830 <SysTick_Handler+0x1c0>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800172c:	db0c      	blt.n	8001748 <SysTick_Handler+0xd8>
 800172e:	4b3f      	ldr	r3, [pc, #252]	; (800182c <SysTick_Handler+0x1bc>)
 8001730:	f8d3 3ab4 	ldr.w	r3, [r3, #2740]	; 0xab4
 8001734:	2b01      	cmp	r3, #1
 8001736:	d007      	beq.n	8001748 <SysTick_Handler+0xd8>
 8001738:	4b3c      	ldr	r3, [pc, #240]	; (800182c <SysTick_Handler+0x1bc>)
 800173a:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800173e:	2b00      	cmp	r3, #0
 8001740:	d102      	bne.n	8001748 <SysTick_Handler+0xd8>
 8001742:	4b3c      	ldr	r3, [pc, #240]	; (8001834 <SysTick_Handler+0x1c4>)
 8001744:	2201      	movs	r2, #1
 8001746:	701a      	strb	r2, [r3, #0]

// ENVIO DATOS WF ----------------------------------- ---------------------------//

/**********************[ INICIO - EHTERNET WDG ] **********************/

	if(ETH.S0_status == 0)
 8001748:	4b3b      	ldr	r3, [pc, #236]	; (8001838 <SysTick_Handler+0x1c8>)
 800174a:	7b9b      	ldrb	r3, [r3, #14]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d10e      	bne.n	800176e <SysTick_Handler+0xfe>
	{
		ETH.ETH_WDG++;
 8001750:	4b39      	ldr	r3, [pc, #228]	; (8001838 <SysTick_Handler+0x1c8>)
 8001752:	899b      	ldrh	r3, [r3, #12]
 8001754:	3301      	adds	r3, #1
 8001756:	b29a      	uxth	r2, r3
 8001758:	4b37      	ldr	r3, [pc, #220]	; (8001838 <SysTick_Handler+0x1c8>)
 800175a:	819a      	strh	r2, [r3, #12]
		if (ETH.ETH_WDG>=64000)
 800175c:	4b36      	ldr	r3, [pc, #216]	; (8001838 <SysTick_Handler+0x1c8>)
 800175e:	899b      	ldrh	r3, [r3, #12]
 8001760:	f5b3 4f7a 	cmp.w	r3, #64000	; 0xfa00
 8001764:	d303      	bcc.n	800176e <SysTick_Handler+0xfe>
		{
			ETH.ETH_WDG=64000;
 8001766:	4b34      	ldr	r3, [pc, #208]	; (8001838 <SysTick_Handler+0x1c8>)
 8001768:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 800176c:	819a      	strh	r2, [r3, #12]
		}
	}

/**********************[ FIN 	- EHTERNET WDG ] **********************/

if (ms_ticks==100)//(ms_ticks==250)//(ms_ticks==50)
 800176e:	4b2a      	ldr	r3, [pc, #168]	; (8001818 <SysTick_Handler+0x1a8>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	2b64      	cmp	r3, #100	; 0x64
 8001774:	f040 8420 	bne.w	8001fb8 <SysTick_Handler+0x948>
  {
	  dbgn++;
 8001778:	4b30      	ldr	r3, [pc, #192]	; (800183c <SysTick_Handler+0x1cc>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	3301      	adds	r3, #1
 800177e:	4a2f      	ldr	r2, [pc, #188]	; (800183c <SysTick_Handler+0x1cc>)
 8001780:	6013      	str	r3, [r2, #0]
	  ms_ticks=0;
 8001782:	4b25      	ldr	r3, [pc, #148]	; (8001818 <SysTick_Handler+0x1a8>)
 8001784:	2200      	movs	r2, #0
 8001786:	601a      	str	r2, [r3, #0]
	  min_ticks++;
 8001788:	4b2d      	ldr	r3, [pc, #180]	; (8001840 <SysTick_Handler+0x1d0>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	3301      	adds	r3, #1
 800178e:	4a2c      	ldr	r2, [pc, #176]	; (8001840 <SysTick_Handler+0x1d0>)
 8001790:	6013      	str	r3, [r2, #0]


	  	if(MBUS_ticks==360) MBUS_ticks=0;
 8001792:	4b2c      	ldr	r3, [pc, #176]	; (8001844 <SysTick_Handler+0x1d4>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 800179a:	d102      	bne.n	80017a2 <SysTick_Handler+0x132>
 800179c:	4b29      	ldr	r3, [pc, #164]	; (8001844 <SysTick_Handler+0x1d4>)
 800179e:	2200      	movs	r2, #0
 80017a0:	601a      	str	r2, [r3, #0]

	  	if (asc==0)  MBUS_ticks++;
 80017a2:	4b29      	ldr	r3, [pc, #164]	; (8001848 <SysTick_Handler+0x1d8>)
 80017a4:	781b      	ldrb	r3, [r3, #0]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d104      	bne.n	80017b4 <SysTick_Handler+0x144>
 80017aa:	4b26      	ldr	r3, [pc, #152]	; (8001844 <SysTick_Handler+0x1d4>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	3301      	adds	r3, #1
 80017b0:	4a24      	ldr	r2, [pc, #144]	; (8001844 <SysTick_Handler+0x1d4>)
 80017b2:	6013      	str	r3, [r2, #0]
	  	if (MBUS_ticks==100) asc=1;
 80017b4:	4b23      	ldr	r3, [pc, #140]	; (8001844 <SysTick_Handler+0x1d4>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	2b64      	cmp	r3, #100	; 0x64
 80017ba:	d102      	bne.n	80017c2 <SysTick_Handler+0x152>
 80017bc:	4b22      	ldr	r3, [pc, #136]	; (8001848 <SysTick_Handler+0x1d8>)
 80017be:	2201      	movs	r2, #1
 80017c0:	701a      	strb	r2, [r3, #0]
	  	if (asc==1) MBUS_ticks--;
 80017c2:	4b21      	ldr	r3, [pc, #132]	; (8001848 <SysTick_Handler+0x1d8>)
 80017c4:	781b      	ldrb	r3, [r3, #0]
 80017c6:	2b01      	cmp	r3, #1
 80017c8:	d104      	bne.n	80017d4 <SysTick_Handler+0x164>
 80017ca:	4b1e      	ldr	r3, [pc, #120]	; (8001844 <SysTick_Handler+0x1d4>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	3b01      	subs	r3, #1
 80017d0:	4a1c      	ldr	r2, [pc, #112]	; (8001844 <SysTick_Handler+0x1d4>)
 80017d2:	6013      	str	r3, [r2, #0]
	  	if (MBUS_ticks==0) asc=0;
 80017d4:	4b1b      	ldr	r3, [pc, #108]	; (8001844 <SysTick_Handler+0x1d4>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d102      	bne.n	80017e2 <SysTick_Handler+0x172>
 80017dc:	4b1a      	ldr	r3, [pc, #104]	; (8001848 <SysTick_Handler+0x1d8>)
 80017de:	2200      	movs	r2, #0
 80017e0:	701a      	strb	r2, [r3, #0]


	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80017e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017e6:	4819      	ldr	r0, [pc, #100]	; (800184c <SysTick_Handler+0x1dc>)
 80017e8:	f001 ff05 	bl	80035f6 <HAL_GPIO_TogglePin>
	  if(spi_no_debug)
 80017ec:	4b18      	ldr	r3, [pc, #96]	; (8001850 <SysTick_Handler+0x1e0>)
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	f000 83d1 	beq.w	8001f98 <SysTick_Handler+0x928>
	  	  {
	  if(SPI_READ_EN)
 80017f6:	4b17      	ldr	r3, [pc, #92]	; (8001854 <SysTick_Handler+0x1e4>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	f000 83d0 	beq.w	8001fa0 <SysTick_Handler+0x930>
	  {
	     ETH.S0_status=eth_rd_SOCKET_STAT(&ETH,0);
 8001800:	2100      	movs	r1, #0
 8001802:	480d      	ldr	r0, [pc, #52]	; (8001838 <SysTick_Handler+0x1c8>)
 8001804:	f00c fb28 	bl	800de58 <eth_rd_SOCKET_STAT>
 8001808:	4603      	mov	r3, r0
 800180a:	461a      	mov	r2, r3
 800180c:	4b0a      	ldr	r3, [pc, #40]	; (8001838 <SysTick_Handler+0x1c8>)
 800180e:	739a      	strb	r2, [r3, #14]

		  switch(ETH.S0_status)	//Check Socket status
 8001810:	4b09      	ldr	r3, [pc, #36]	; (8001838 <SysTick_Handler+0x1c8>)
 8001812:	7b9b      	ldrb	r3, [r3, #14]
 8001814:	e020      	b.n	8001858 <SysTick_Handler+0x1e8>
 8001816:	bf00      	nop
 8001818:	20000348 	.word	0x20000348
 800181c:	2000443c 	.word	0x2000443c
 8001820:	200018b8 	.word	0x200018b8
 8001824:	20004444 	.word	0x20004444
 8001828:	20000350 	.word	0x20000350
 800182c:	20000b58 	.word	0x20000b58
 8001830:	2000295c 	.word	0x2000295c
 8001834:	20002959 	.word	0x20002959
 8001838:	20002960 	.word	0x20002960
 800183c:	20004468 	.word	0x20004468
 8001840:	2000034c 	.word	0x2000034c
 8001844:	20004440 	.word	0x20004440
 8001848:	20003a1e 	.word	0x20003a1e
 800184c:	40020800 	.word	0x40020800
 8001850:	20003a10 	.word	0x20003a10
 8001854:	20003a20 	.word	0x20003a20
 8001858:	2b5f      	cmp	r3, #95	; 0x5f
 800185a:	f200 83a6 	bhi.w	8001faa <SysTick_Handler+0x93a>
 800185e:	a201      	add	r2, pc, #4	; (adr r2, 8001864 <SysTick_Handler+0x1f4>)
 8001860:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001864:	080019e5 	.word	0x080019e5
 8001868:	08001fab 	.word	0x08001fab
 800186c:	08001fab 	.word	0x08001fab
 8001870:	08001fab 	.word	0x08001fab
 8001874:	08001fab 	.word	0x08001fab
 8001878:	08001fab 	.word	0x08001fab
 800187c:	08001fab 	.word	0x08001fab
 8001880:	08001fab 	.word	0x08001fab
 8001884:	08001fab 	.word	0x08001fab
 8001888:	08001fab 	.word	0x08001fab
 800188c:	08001fab 	.word	0x08001fab
 8001890:	08001fab 	.word	0x08001fab
 8001894:	08001fab 	.word	0x08001fab
 8001898:	08001fab 	.word	0x08001fab
 800189c:	08001fab 	.word	0x08001fab
 80018a0:	08001fab 	.word	0x08001fab
 80018a4:	08001fab 	.word	0x08001fab
 80018a8:	08001fab 	.word	0x08001fab
 80018ac:	08001fab 	.word	0x08001fab
 80018b0:	08001a1d 	.word	0x08001a1d
 80018b4:	08001a6f 	.word	0x08001a6f
 80018b8:	08001a87 	.word	0x08001a87
 80018bc:	08001a9f 	.word	0x08001a9f
 80018c0:	08001ab7 	.word	0x08001ab7
 80018c4:	08001e13 	.word	0x08001e13
 80018c8:	08001fab 	.word	0x08001fab
 80018cc:	08001e2b 	.word	0x08001e2b
 80018d0:	08001e43 	.word	0x08001e43
 80018d4:	08001e81 	.word	0x08001e81
 80018d8:	08001ebf 	.word	0x08001ebf
 80018dc:	08001fab 	.word	0x08001fab
 80018e0:	08001fab 	.word	0x08001fab
 80018e4:	08001fab 	.word	0x08001fab
 80018e8:	08001fab 	.word	0x08001fab
 80018ec:	08001ed7 	.word	0x08001ed7
 80018f0:	08001fab 	.word	0x08001fab
 80018f4:	08001fab 	.word	0x08001fab
 80018f8:	08001fab 	.word	0x08001fab
 80018fc:	08001fab 	.word	0x08001fab
 8001900:	08001fab 	.word	0x08001fab
 8001904:	08001fab 	.word	0x08001fab
 8001908:	08001fab 	.word	0x08001fab
 800190c:	08001fab 	.word	0x08001fab
 8001910:	08001fab 	.word	0x08001fab
 8001914:	08001fab 	.word	0x08001fab
 8001918:	08001fab 	.word	0x08001fab
 800191c:	08001fab 	.word	0x08001fab
 8001920:	08001fab 	.word	0x08001fab
 8001924:	08001fab 	.word	0x08001fab
 8001928:	08001fab 	.word	0x08001fab
 800192c:	08001f51 	.word	0x08001f51
 8001930:	08001fab 	.word	0x08001fab
 8001934:	08001fab 	.word	0x08001fab
 8001938:	08001fab 	.word	0x08001fab
 800193c:	08001fab 	.word	0x08001fab
 8001940:	08001fab 	.word	0x08001fab
 8001944:	08001fab 	.word	0x08001fab
 8001948:	08001fab 	.word	0x08001fab
 800194c:	08001fab 	.word	0x08001fab
 8001950:	08001fab 	.word	0x08001fab
 8001954:	08001fab 	.word	0x08001fab
 8001958:	08001fab 	.word	0x08001fab
 800195c:	08001fab 	.word	0x08001fab
 8001960:	08001fab 	.word	0x08001fab
 8001964:	08001fab 	.word	0x08001fab
 8001968:	08001fab 	.word	0x08001fab
 800196c:	08001f69 	.word	0x08001f69
 8001970:	08001fab 	.word	0x08001fab
 8001974:	08001fab 	.word	0x08001fab
 8001978:	08001fab 	.word	0x08001fab
 800197c:	08001fab 	.word	0x08001fab
 8001980:	08001fab 	.word	0x08001fab
 8001984:	08001fab 	.word	0x08001fab
 8001988:	08001fab 	.word	0x08001fab
 800198c:	08001fab 	.word	0x08001fab
 8001990:	08001fab 	.word	0x08001fab
 8001994:	08001fab 	.word	0x08001fab
 8001998:	08001fab 	.word	0x08001fab
 800199c:	08001fab 	.word	0x08001fab
 80019a0:	08001fab 	.word	0x08001fab
 80019a4:	08001fab 	.word	0x08001fab
 80019a8:	08001fab 	.word	0x08001fab
 80019ac:	08001fab 	.word	0x08001fab
 80019b0:	08001fab 	.word	0x08001fab
 80019b4:	08001fab 	.word	0x08001fab
 80019b8:	08001fab 	.word	0x08001fab
 80019bc:	08001fab 	.word	0x08001fab
 80019c0:	08001fab 	.word	0x08001fab
 80019c4:	08001fab 	.word	0x08001fab
 80019c8:	08001fab 	.word	0x08001fab
 80019cc:	08001fab 	.word	0x08001fab
 80019d0:	08001fab 	.word	0x08001fab
 80019d4:	08001fab 	.word	0x08001fab
 80019d8:	08001fab 	.word	0x08001fab
 80019dc:	08001fab 	.word	0x08001fab
 80019e0:	08001f81 	.word	0x08001f81
	     {
			 case SOCK_CLOSED :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_CLOSED \r\n",strlen("\r\nS0_SOCK_CLOSED \r\n"));
 80019e4:	4b82      	ldr	r3, [pc, #520]	; (8001bf0 <SysTick_Handler+0x580>)
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d003      	beq.n	80019f4 <SysTick_Handler+0x384>
 80019ec:	2113      	movs	r1, #19
 80019ee:	4881      	ldr	r0, [pc, #516]	; (8001bf4 <SysTick_Handler+0x584>)
 80019f0:	f7ff fe22 	bl	8001638 <ITM0_Write>
					eth_wr_SOCKET_CMD(&ETH, 0 ,OPEN );
 80019f4:	2201      	movs	r2, #1
 80019f6:	2100      	movs	r1, #0
 80019f8:	487f      	ldr	r0, [pc, #508]	; (8001bf8 <SysTick_Handler+0x588>)
 80019fa:	f00c f943 	bl	800dc84 <eth_wr_SOCKET_CMD>
					 // Si no tengo intento de ARP por 5 segundos vuelvo a inicializar
					 if(ETH.ETH_WDG>=5000)
 80019fe:	4b7e      	ldr	r3, [pc, #504]	; (8001bf8 <SysTick_Handler+0x588>)
 8001a00:	899b      	ldrh	r3, [r3, #12]
 8001a02:	f241 3287 	movw	r2, #4999	; 0x1387
 8001a06:	4293      	cmp	r3, r2
 8001a08:	f240 82cc 	bls.w	8001fa4 <SysTick_Handler+0x934>
					 {
						 eth_init(&ETH);
 8001a0c:	487a      	ldr	r0, [pc, #488]	; (8001bf8 <SysTick_Handler+0x588>)
 8001a0e:	f00c f975 	bl	800dcfc <eth_init>

						 eth_socket_init(&ETH,0);
 8001a12:	2100      	movs	r1, #0
 8001a14:	4878      	ldr	r0, [pc, #480]	; (8001bf8 <SysTick_Handler+0x588>)
 8001a16:	f00c f9c7 	bl	800dda8 <eth_socket_init>
					 }

				 }
			 break;
 8001a1a:	e2c3      	b.n	8001fa4 <SysTick_Handler+0x934>
			 case  SOCK_INIT :
				 {
					 if(ETH.S0_ENserver == 1)
 8001a1c:	4b76      	ldr	r3, [pc, #472]	; (8001bf8 <SysTick_Handler+0x588>)
 8001a1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a22:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001a26:	2b01      	cmp	r3, #1
 8001a28:	d110      	bne.n	8001a4c <SysTick_Handler+0x3dc>
					 {
						 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_INIT \r\n",strlen("\r\nS0_SOCK_INIT \r\n"));
 8001a2a:	4b71      	ldr	r3, [pc, #452]	; (8001bf0 <SysTick_Handler+0x580>)
 8001a2c:	781b      	ldrb	r3, [r3, #0]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d003      	beq.n	8001a3a <SysTick_Handler+0x3ca>
 8001a32:	2111      	movs	r1, #17
 8001a34:	4871      	ldr	r0, [pc, #452]	; (8001bfc <SysTick_Handler+0x58c>)
 8001a36:	f7ff fdff 	bl	8001638 <ITM0_Write>
							eth_wr_SOCKET_CMD(&ETH, 0, LISTEN );
 8001a3a:	2202      	movs	r2, #2
 8001a3c:	2100      	movs	r1, #0
 8001a3e:	486e      	ldr	r0, [pc, #440]	; (8001bf8 <SysTick_Handler+0x588>)
 8001a40:	f00c f920 	bl	800dc84 <eth_wr_SOCKET_CMD>
							ETH.ETH_WDG=0;
 8001a44:	4b6c      	ldr	r3, [pc, #432]	; (8001bf8 <SysTick_Handler+0x588>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	819a      	strh	r2, [r3, #12]
						 	if (ETH_DBG_EN)ITM0_Write("\r\nETH-W5100-CONNECT\r\n",strlen("\r\nETH-W5100-CONNECT\r\n"));
						 	ETH.ETH_WDG=0;
					 }

				 }
			 break;
 8001a4a:	e2ae      	b.n	8001faa <SysTick_Handler+0x93a>
						 	eth_wr_SOCKET_CMD(&ETH,0, CONNECT);																				//only for server
 8001a4c:	2204      	movs	r2, #4
 8001a4e:	2100      	movs	r1, #0
 8001a50:	4869      	ldr	r0, [pc, #420]	; (8001bf8 <SysTick_Handler+0x588>)
 8001a52:	f00c f917 	bl	800dc84 <eth_wr_SOCKET_CMD>
						 	if (ETH_DBG_EN)ITM0_Write("\r\nETH-W5100-CONNECT\r\n",strlen("\r\nETH-W5100-CONNECT\r\n"));
 8001a56:	4b66      	ldr	r3, [pc, #408]	; (8001bf0 <SysTick_Handler+0x580>)
 8001a58:	781b      	ldrb	r3, [r3, #0]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d003      	beq.n	8001a66 <SysTick_Handler+0x3f6>
 8001a5e:	2115      	movs	r1, #21
 8001a60:	4867      	ldr	r0, [pc, #412]	; (8001c00 <SysTick_Handler+0x590>)
 8001a62:	f7ff fde9 	bl	8001638 <ITM0_Write>
						 	ETH.ETH_WDG=0;
 8001a66:	4b64      	ldr	r3, [pc, #400]	; (8001bf8 <SysTick_Handler+0x588>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	819a      	strh	r2, [r3, #12]
			 break;
 8001a6c:	e29d      	b.n	8001faa <SysTick_Handler+0x93a>
			 case SOCK_LISTEN :
				 {
					 if (ETH_DBG_EN)ITM0_Write("\r\nS0_SOCK_LISTEN \r\n",strlen("\r\nS0_SOCK_LISTEN \r\n"));
 8001a6e:	4b60      	ldr	r3, [pc, #384]	; (8001bf0 <SysTick_Handler+0x580>)
 8001a70:	781b      	ldrb	r3, [r3, #0]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d003      	beq.n	8001a7e <SysTick_Handler+0x40e>
 8001a76:	2113      	movs	r1, #19
 8001a78:	4862      	ldr	r0, [pc, #392]	; (8001c04 <SysTick_Handler+0x594>)
 8001a7a:	f7ff fddd 	bl	8001638 <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001a7e:	4b5e      	ldr	r3, [pc, #376]	; (8001bf8 <SysTick_Handler+0x588>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001a84:	e291      	b.n	8001faa <SysTick_Handler+0x93a>
			 case SOCK_SYNSENT :
				 {
					 if (ETH_DBG_EN)ITM0_Write("\r\nS0_SOCK_SYNSENT \r\n",strlen("\r\nS0_SOCK_SYNSENT \r\n"));
 8001a86:	4b5a      	ldr	r3, [pc, #360]	; (8001bf0 <SysTick_Handler+0x580>)
 8001a88:	781b      	ldrb	r3, [r3, #0]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d003      	beq.n	8001a96 <SysTick_Handler+0x426>
 8001a8e:	2114      	movs	r1, #20
 8001a90:	485d      	ldr	r0, [pc, #372]	; (8001c08 <SysTick_Handler+0x598>)
 8001a92:	f7ff fdd1 	bl	8001638 <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001a96:	4b58      	ldr	r3, [pc, #352]	; (8001bf8 <SysTick_Handler+0x588>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001a9c:	e285      	b.n	8001faa <SysTick_Handler+0x93a>
			 case SOCK_SYNRECV :
				 {
					 if (ETH_DBG_EN)ITM0_Write("\r\nS0_SOCK_SYNRECV \r\n",strlen("\r\nS0_SOCK_SYNRECV \r\n"));
 8001a9e:	4b54      	ldr	r3, [pc, #336]	; (8001bf0 <SysTick_Handler+0x580>)
 8001aa0:	781b      	ldrb	r3, [r3, #0]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d003      	beq.n	8001aae <SysTick_Handler+0x43e>
 8001aa6:	2114      	movs	r1, #20
 8001aa8:	4858      	ldr	r0, [pc, #352]	; (8001c0c <SysTick_Handler+0x59c>)
 8001aaa:	f7ff fdc5 	bl	8001638 <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001aae:	4b52      	ldr	r3, [pc, #328]	; (8001bf8 <SysTick_Handler+0x588>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001ab4:	e279      	b.n	8001faa <SysTick_Handler+0x93a>
			 case SOCK_ESTABLISHED :
				 {
					 if (ETH_DBG_EN)ITM0_Write("\r\nS0_SOCK_ESTABLISHED \r\n",strlen("\r\nS0_SOCK_ESTABLISHED \r\n"));
 8001ab6:	4b4e      	ldr	r3, [pc, #312]	; (8001bf0 <SysTick_Handler+0x580>)
 8001ab8:	781b      	ldrb	r3, [r3, #0]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d003      	beq.n	8001ac6 <SysTick_Handler+0x456>
 8001abe:	2118      	movs	r1, #24
 8001ac0:	4853      	ldr	r0, [pc, #332]	; (8001c10 <SysTick_Handler+0x5a0>)
 8001ac2:	f7ff fdb9 	bl	8001638 <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001ac6:	4b4c      	ldr	r3, [pc, #304]	; (8001bf8 <SysTick_Handler+0x588>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	819a      	strh	r2, [r3, #12]

					if (ETH.S0_ENserver == 1)  // Si el puerto Ethernet actúa como server (Recibe datos conexión mas pedido mbus
 8001acc:	4b4a      	ldr	r3, [pc, #296]	; (8001bf8 <SysTick_Handler+0x588>)
 8001ace:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ad2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001ad6:	2b01      	cmp	r3, #1
 8001ad8:	f040 80b0 	bne.w	8001c3c <SysTick_Handler+0x5cc>
					{

							S0_get_size = SPI_ETH_REG(&ETH, S0_RX_SZ_ADDR_BASEHH,S0_RX_SZ_ADDR_BASEHL ,SPI_READ, spi_Data,2);
 8001adc:	2302      	movs	r3, #2
 8001ade:	9301      	str	r3, [sp, #4]
 8001ae0:	4b4c      	ldr	r3, [pc, #304]	; (8001c14 <SysTick_Handler+0x5a4>)
 8001ae2:	9300      	str	r3, [sp, #0]
 8001ae4:	230f      	movs	r3, #15
 8001ae6:	2226      	movs	r2, #38	; 0x26
 8001ae8:	2104      	movs	r1, #4
 8001aea:	4843      	ldr	r0, [pc, #268]	; (8001bf8 <SysTick_Handler+0x588>)
 8001aec:	f00b ff9f 	bl	800da2e <SPI_ETH_REG>
 8001af0:	4603      	mov	r3, r0
 8001af2:	461a      	mov	r2, r3
 8001af4:	4b48      	ldr	r3, [pc, #288]	; (8001c18 <SysTick_Handler+0x5a8>)
 8001af6:	801a      	strh	r2, [r3, #0]
							if(S0_get_size != 0x00)
 8001af8:	4b47      	ldr	r3, [pc, #284]	; (8001c18 <SysTick_Handler+0x5a8>)
 8001afa:	881b      	ldrh	r3, [r3, #0]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	f000 8253 	beq.w	8001fa8 <SysTick_Handler+0x938>
							{
								eth_rd_SOCKET_DATA(&ETH,0,&rx_mem_pointer,S0_get_size); // read socket data
 8001b02:	4b45      	ldr	r3, [pc, #276]	; (8001c18 <SysTick_Handler+0x5a8>)
 8001b04:	881b      	ldrh	r3, [r3, #0]
 8001b06:	4a45      	ldr	r2, [pc, #276]	; (8001c1c <SysTick_Handler+0x5ac>)
 8001b08:	2100      	movs	r1, #0
 8001b0a:	483b      	ldr	r0, [pc, #236]	; (8001bf8 <SysTick_Handler+0x588>)
 8001b0c:	f00c f9de 	bl	800decc <eth_rd_SOCKET_DATA>
								SPI_ETH_WR_REG_16(&ETH,S0_RX_RD0,rx_mem_pointer );		// write rx memory pointer
 8001b10:	4b42      	ldr	r3, [pc, #264]	; (8001c1c <SysTick_Handler+0x5ac>)
 8001b12:	881b      	ldrh	r3, [r3, #0]
 8001b14:	461a      	mov	r2, r3
 8001b16:	f44f 6185 	mov.w	r1, #1064	; 0x428
 8001b1a:	4837      	ldr	r0, [pc, #220]	; (8001bf8 <SysTick_Handler+0x588>)
 8001b1c:	f00b ffff 	bl	800db1e <SPI_ETH_WR_REG_16>
								eth_wr_SOCKET_CMD(&ETH,0,RECV);							// write command to execute
 8001b20:	2240      	movs	r2, #64	; 0x40
 8001b22:	2100      	movs	r1, #0
 8001b24:	4834      	ldr	r0, [pc, #208]	; (8001bf8 <SysTick_Handler+0x588>)
 8001b26:	f00c f8ad 	bl	800dc84 <eth_wr_SOCKET_CMD>
								while(eth_rd_SOCKET_CMD(&ETH,0))						// wait until end of command execution
 8001b2a:	bf00      	nop
 8001b2c:	2100      	movs	r1, #0
 8001b2e:	4832      	ldr	r0, [pc, #200]	; (8001bf8 <SysTick_Handler+0x588>)
 8001b30:	f00c f9af 	bl	800de92 <eth_rd_SOCKET_CMD>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d1f8      	bne.n	8001b2c <SysTick_Handler+0x4bc>
								{}

								CopiaVector(mb_eth._MBUS_RCVD, ETH.data, S0_get_size, 0, 0 );
 8001b3a:	4b37      	ldr	r3, [pc, #220]	; (8001c18 <SysTick_Handler+0x5a8>)
 8001b3c:	881b      	ldrh	r3, [r3, #0]
 8001b3e:	461a      	mov	r2, r3
 8001b40:	2300      	movs	r3, #0
 8001b42:	9300      	str	r3, [sp, #0]
 8001b44:	2300      	movs	r3, #0
 8001b46:	4936      	ldr	r1, [pc, #216]	; (8001c20 <SysTick_Handler+0x5b0>)
 8001b48:	4836      	ldr	r0, [pc, #216]	; (8001c24 <SysTick_Handler+0x5b4>)
 8001b4a:	f00c feef 	bl	800e92c <CopiaVector>
								mb_eth._n_MBUS_RCVD=S0_get_size;
 8001b4e:	4b32      	ldr	r3, [pc, #200]	; (8001c18 <SysTick_Handler+0x5a8>)
 8001b50:	881b      	ldrh	r3, [r3, #0]
 8001b52:	461a      	mov	r2, r3
 8001b54:	4b34      	ldr	r3, [pc, #208]	; (8001c28 <SysTick_Handler+0x5b8>)
 8001b56:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

								if(S0_get_size > 0)	{ ETH.S0_data_available=1;}					//Flag data received
 8001b5a:	4b2f      	ldr	r3, [pc, #188]	; (8001c18 <SysTick_Handler+0x5a8>)
 8001b5c:	881b      	ldrh	r3, [r3, #0]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d002      	beq.n	8001b68 <SysTick_Handler+0x4f8>
 8001b62:	4b25      	ldr	r3, [pc, #148]	; (8001bf8 <SysTick_Handler+0x588>)
 8001b64:	2201      	movs	r2, #1
 8001b66:	749a      	strb	r2, [r3, #18]

								if(ModBUS_Check(mb_eth._MBUS_RCVD, mb_eth._n_MBUS_RCVD))		//Ckecks ModBUS type data
 8001b68:	4b2f      	ldr	r3, [pc, #188]	; (8001c28 <SysTick_Handler+0x5b8>)
 8001b6a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8001b6e:	4619      	mov	r1, r3
 8001b70:	482c      	ldr	r0, [pc, #176]	; (8001c24 <SysTick_Handler+0x5b4>)
 8001b72:	f00a fc47 	bl	800c404 <ModBUS_Check>
 8001b76:	4603      	mov	r3, r0
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d00d      	beq.n	8001b98 <SysTick_Handler+0x528>
								{
									ModBUS(&mb_eth);										//ModBUS protocol execution
 8001b7c:	482a      	ldr	r0, [pc, #168]	; (8001c28 <SysTick_Handler+0x5b8>)
 8001b7e:	f00a fd45 	bl	800c60c <ModBUS>
									CopiaVector(ETH.data, mb_eth._MBUS_2SND, mb_eth._n_MBUS_2SND, 0, 0);
 8001b82:	4b29      	ldr	r3, [pc, #164]	; (8001c28 <SysTick_Handler+0x5b8>)
 8001b84:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 8001b88:	2300      	movs	r3, #0
 8001b8a:	9300      	str	r3, [sp, #0]
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	4927      	ldr	r1, [pc, #156]	; (8001c2c <SysTick_Handler+0x5bc>)
 8001b90:	4823      	ldr	r0, [pc, #140]	; (8001c20 <SysTick_Handler+0x5b0>)
 8001b92:	f00c fecb 	bl	800e92c <CopiaVector>
 8001b96:	e007      	b.n	8001ba8 <SysTick_Handler+0x538>
								}
								else
								{
									if (ETH_DBG_EN) ITM0_Write("\r\n NO MBUS \r\n",strlen("\r\n\r\n NO MBUS \r\n\r\n"));
 8001b98:	4b15      	ldr	r3, [pc, #84]	; (8001bf0 <SysTick_Handler+0x580>)
 8001b9a:	781b      	ldrb	r3, [r3, #0]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d003      	beq.n	8001ba8 <SysTick_Handler+0x538>
 8001ba0:	2111      	movs	r1, #17
 8001ba2:	4823      	ldr	r0, [pc, #140]	; (8001c30 <SysTick_Handler+0x5c0>)
 8001ba4:	f7ff fd48 	bl	8001638 <ITM0_Write>
								}

								send_size=mb_eth._n_MBUS_2SND;  //ModBUS data qty
 8001ba8:	4b1f      	ldr	r3, [pc, #124]	; (8001c28 <SysTick_Handler+0x5b8>)
 8001baa:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 8001bae:	b29a      	uxth	r2, r3
 8001bb0:	4b20      	ldr	r3, [pc, #128]	; (8001c34 <SysTick_Handler+0x5c4>)
 8001bb2:	801a      	strh	r2, [r3, #0]

								eth_wr_SOCKET_DATA(&ETH,0, &tx_mem_pointer, send_size);	// write socket data
 8001bb4:	4b1f      	ldr	r3, [pc, #124]	; (8001c34 <SysTick_Handler+0x5c4>)
 8001bb6:	881b      	ldrh	r3, [r3, #0]
 8001bb8:	4a1f      	ldr	r2, [pc, #124]	; (8001c38 <SysTick_Handler+0x5c8>)
 8001bba:	2100      	movs	r1, #0
 8001bbc:	480e      	ldr	r0, [pc, #56]	; (8001bf8 <SysTick_Handler+0x588>)
 8001bbe:	f00c fa55 	bl	800e06c <eth_wr_SOCKET_DATA>
								SPI_ETH_WR_REG_16(&ETH,0x424,tx_mem_pointer);			// write tx memory pointer
 8001bc2:	4b1d      	ldr	r3, [pc, #116]	; (8001c38 <SysTick_Handler+0x5c8>)
 8001bc4:	881b      	ldrh	r3, [r3, #0]
 8001bc6:	461a      	mov	r2, r3
 8001bc8:	f240 4124 	movw	r1, #1060	; 0x424
 8001bcc:	480a      	ldr	r0, [pc, #40]	; (8001bf8 <SysTick_Handler+0x588>)
 8001bce:	f00b ffa6 	bl	800db1e <SPI_ETH_WR_REG_16>
								eth_wr_SOCKET_CMD(&ETH,0,SEND);							// write command to execute
 8001bd2:	2220      	movs	r2, #32
 8001bd4:	2100      	movs	r1, #0
 8001bd6:	4808      	ldr	r0, [pc, #32]	; (8001bf8 <SysTick_Handler+0x588>)
 8001bd8:	f00c f854 	bl	800dc84 <eth_wr_SOCKET_CMD>
								while(eth_rd_SOCKET_CMD(&ETH,0))						// wait until end of command execution
 8001bdc:	bf00      	nop
 8001bde:	2100      	movs	r1, #0
 8001be0:	4805      	ldr	r0, [pc, #20]	; (8001bf8 <SysTick_Handler+0x588>)
 8001be2:	f00c f956 	bl	800de92 <eth_rd_SOCKET_CMD>
 8001be6:	4603      	mov	r3, r0
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d1f8      	bne.n	8001bde <SysTick_Handler+0x56e>

							}
						}
					}
				 }
			 break;
 8001bec:	e1dc      	b.n	8001fa8 <SysTick_Handler+0x938>
 8001bee:	bf00      	nop
 8001bf0:	20002958 	.word	0x20002958
 8001bf4:	08010008 	.word	0x08010008
 8001bf8:	20002960 	.word	0x20002960
 8001bfc:	0801001c 	.word	0x0801001c
 8001c00:	08010030 	.word	0x08010030
 8001c04:	08010048 	.word	0x08010048
 8001c08:	0801005c 	.word	0x0801005c
 8001c0c:	08010074 	.word	0x08010074
 8001c10:	0801008c 	.word	0x0801008c
 8001c14:	200039d0 	.word	0x200039d0
 8001c18:	200039c8 	.word	0x200039c8
 8001c1c:	200039cc 	.word	0x200039cc
 8001c20:	2000297c 	.word	0x2000297c
 8001c24:	200018ca 	.word	0x200018ca
 8001c28:	200018b8 	.word	0x200018b8
 8001c2c:	20001ad0 	.word	0x20001ad0
 8001c30:	080100a8 	.word	0x080100a8
 8001c34:	200039ce 	.word	0x200039ce
 8001c38:	200039ca 	.word	0x200039ca
						if (mb_eth._w_answer==0)
 8001c3c:	4bac      	ldr	r3, [pc, #688]	; (8001ef0 <SysTick_Handler+0x880>)
 8001c3e:	7a1b      	ldrb	r3, [r3, #8]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d167      	bne.n	8001d14 <SysTick_Handler+0x6a4>
							ETH.data[0]=0x00;
 8001c44:	4bab      	ldr	r3, [pc, #684]	; (8001ef4 <SysTick_Handler+0x884>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	771a      	strb	r2, [r3, #28]
							ETH.data[1]=0x00;
 8001c4a:	4baa      	ldr	r3, [pc, #680]	; (8001ef4 <SysTick_Handler+0x884>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	775a      	strb	r2, [r3, #29]
							ETH.data[2]=0x00;
 8001c50:	4ba8      	ldr	r3, [pc, #672]	; (8001ef4 <SysTick_Handler+0x884>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	779a      	strb	r2, [r3, #30]
							ETH.data[3]=0x00;
 8001c56:	4ba7      	ldr	r3, [pc, #668]	; (8001ef4 <SysTick_Handler+0x884>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	77da      	strb	r2, [r3, #31]
							ETH.data[4]=0x00;
 8001c5c:	4ba5      	ldr	r3, [pc, #660]	; (8001ef4 <SysTick_Handler+0x884>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	f883 2020 	strb.w	r2, [r3, #32]
							ETH.data[5]=0x06;
 8001c64:	4ba3      	ldr	r3, [pc, #652]	; (8001ef4 <SysTick_Handler+0x884>)
 8001c66:	2206      	movs	r2, #6
 8001c68:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
							ETH.data[6]=0x01;
 8001c6c:	4ba1      	ldr	r3, [pc, #644]	; (8001ef4 <SysTick_Handler+0x884>)
 8001c6e:	2201      	movs	r2, #1
 8001c70:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
							ETH.data[7]=0x03;
 8001c74:	4b9f      	ldr	r3, [pc, #636]	; (8001ef4 <SysTick_Handler+0x884>)
 8001c76:	2203      	movs	r2, #3
 8001c78:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
							ETH.data[8]=0x00;
 8001c7c:	4b9d      	ldr	r3, [pc, #628]	; (8001ef4 <SysTick_Handler+0x884>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
							ETH.data[9]=0x00;
 8001c84:	4b9b      	ldr	r3, [pc, #620]	; (8001ef4 <SysTick_Handler+0x884>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
							ETH.data[10]=0x00;
 8001c8c:	4b99      	ldr	r3, [pc, #612]	; (8001ef4 <SysTick_Handler+0x884>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
							ETH.data[11]=0x0A;
 8001c94:	4b97      	ldr	r3, [pc, #604]	; (8001ef4 <SysTick_Handler+0x884>)
 8001c96:	220a      	movs	r2, #10
 8001c98:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
							send_size=12;
 8001c9c:	4b96      	ldr	r3, [pc, #600]	; (8001ef8 <SysTick_Handler+0x888>)
 8001c9e:	220c      	movs	r2, #12
 8001ca0:	801a      	strh	r2, [r3, #0]
							ModBUS_F03_Request(&mb_eth,0,15);
 8001ca2:	220f      	movs	r2, #15
 8001ca4:	2100      	movs	r1, #0
 8001ca6:	4892      	ldr	r0, [pc, #584]	; (8001ef0 <SysTick_Handler+0x880>)
 8001ca8:	f00a fc59 	bl	800c55e <ModBUS_F03_Request>
							CopiaVector(ETH.data, mb_eth._MBUS_2SND, 12, 0, 0 );
 8001cac:	2300      	movs	r3, #0
 8001cae:	9300      	str	r3, [sp, #0]
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	220c      	movs	r2, #12
 8001cb4:	4991      	ldr	r1, [pc, #580]	; (8001efc <SysTick_Handler+0x88c>)
 8001cb6:	4892      	ldr	r0, [pc, #584]	; (8001f00 <SysTick_Handler+0x890>)
 8001cb8:	f00c fe38 	bl	800e92c <CopiaVector>
							eth_wr_SOCKET_DATA(&ETH,0, &tx_mem_pointer, send_size);	// write socket data
 8001cbc:	4b8e      	ldr	r3, [pc, #568]	; (8001ef8 <SysTick_Handler+0x888>)
 8001cbe:	881b      	ldrh	r3, [r3, #0]
 8001cc0:	4a90      	ldr	r2, [pc, #576]	; (8001f04 <SysTick_Handler+0x894>)
 8001cc2:	2100      	movs	r1, #0
 8001cc4:	488b      	ldr	r0, [pc, #556]	; (8001ef4 <SysTick_Handler+0x884>)
 8001cc6:	f00c f9d1 	bl	800e06c <eth_wr_SOCKET_DATA>
							SPI_ETH_WR_REG_16(&ETH,0x424,tx_mem_pointer);			// write tx memory pointer
 8001cca:	4b8e      	ldr	r3, [pc, #568]	; (8001f04 <SysTick_Handler+0x894>)
 8001ccc:	881b      	ldrh	r3, [r3, #0]
 8001cce:	461a      	mov	r2, r3
 8001cd0:	f240 4124 	movw	r1, #1060	; 0x424
 8001cd4:	4887      	ldr	r0, [pc, #540]	; (8001ef4 <SysTick_Handler+0x884>)
 8001cd6:	f00b ff22 	bl	800db1e <SPI_ETH_WR_REG_16>
							eth_wr_SOCKET_CMD(&ETH,0,SEND);							// write command to execute
 8001cda:	2220      	movs	r2, #32
 8001cdc:	2100      	movs	r1, #0
 8001cde:	4885      	ldr	r0, [pc, #532]	; (8001ef4 <SysTick_Handler+0x884>)
 8001ce0:	f00b ffd0 	bl	800dc84 <eth_wr_SOCKET_CMD>
							while(eth_rd_SOCKET_CMD(&ETH,0))						// wait until end of command execution
 8001ce4:	bf00      	nop
 8001ce6:	2100      	movs	r1, #0
 8001ce8:	4882      	ldr	r0, [pc, #520]	; (8001ef4 <SysTick_Handler+0x884>)
 8001cea:	f00c f8d2 	bl	800de92 <eth_rd_SOCKET_CMD>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d1f8      	bne.n	8001ce6 <SysTick_Handler+0x676>
							mb_eth._w_answer=1;	// Waiting answer flag
 8001cf4:	4b7e      	ldr	r3, [pc, #504]	; (8001ef0 <SysTick_Handler+0x880>)
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	721a      	strb	r2, [r3, #8]
							MB_TOUT_ticks=0;	// restart counting
 8001cfa:	4b83      	ldr	r3, [pc, #524]	; (8001f08 <SysTick_Handler+0x898>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	601a      	str	r2, [r3, #0]
							if (ETH_DBG_EN) ITM0_Write("\r\n SENT MBUS REQ \r\n",strlen("\r\n\r\n SENT MBUS REQ \r\n\r\n"));
 8001d00:	4b82      	ldr	r3, [pc, #520]	; (8001f0c <SysTick_Handler+0x89c>)
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	f000 814f 	beq.w	8001fa8 <SysTick_Handler+0x938>
 8001d0a:	2117      	movs	r1, #23
 8001d0c:	4880      	ldr	r0, [pc, #512]	; (8001f10 <SysTick_Handler+0x8a0>)
 8001d0e:	f7ff fc93 	bl	8001638 <ITM0_Write>
			 break;
 8001d12:	e149      	b.n	8001fa8 <SysTick_Handler+0x938>
						S0_get_size = SPI_ETH_REG(&ETH, S0_RX_SZ_ADDR_BASEHH,S0_RX_SZ_ADDR_BASEHL ,SPI_READ, spi_Data,2);
 8001d14:	2302      	movs	r3, #2
 8001d16:	9301      	str	r3, [sp, #4]
 8001d18:	4b7e      	ldr	r3, [pc, #504]	; (8001f14 <SysTick_Handler+0x8a4>)
 8001d1a:	9300      	str	r3, [sp, #0]
 8001d1c:	230f      	movs	r3, #15
 8001d1e:	2226      	movs	r2, #38	; 0x26
 8001d20:	2104      	movs	r1, #4
 8001d22:	4874      	ldr	r0, [pc, #464]	; (8001ef4 <SysTick_Handler+0x884>)
 8001d24:	f00b fe83 	bl	800da2e <SPI_ETH_REG>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	461a      	mov	r2, r3
 8001d2c:	4b7a      	ldr	r3, [pc, #488]	; (8001f18 <SysTick_Handler+0x8a8>)
 8001d2e:	801a      	strh	r2, [r3, #0]
							if(S0_get_size != 0x00)
 8001d30:	4b79      	ldr	r3, [pc, #484]	; (8001f18 <SysTick_Handler+0x8a8>)
 8001d32:	881b      	ldrh	r3, [r3, #0]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	f000 8137 	beq.w	8001fa8 <SysTick_Handler+0x938>
								eth_rd_SOCKET_DATA(&ETH,0,&rx_mem_pointer,S0_get_size); // read socket data
 8001d3a:	4b77      	ldr	r3, [pc, #476]	; (8001f18 <SysTick_Handler+0x8a8>)
 8001d3c:	881b      	ldrh	r3, [r3, #0]
 8001d3e:	4a77      	ldr	r2, [pc, #476]	; (8001f1c <SysTick_Handler+0x8ac>)
 8001d40:	2100      	movs	r1, #0
 8001d42:	486c      	ldr	r0, [pc, #432]	; (8001ef4 <SysTick_Handler+0x884>)
 8001d44:	f00c f8c2 	bl	800decc <eth_rd_SOCKET_DATA>
								SPI_ETH_WR_REG_16(&ETH,S0_RX_RD0,rx_mem_pointer );		// write rx memory pointer
 8001d48:	4b74      	ldr	r3, [pc, #464]	; (8001f1c <SysTick_Handler+0x8ac>)
 8001d4a:	881b      	ldrh	r3, [r3, #0]
 8001d4c:	461a      	mov	r2, r3
 8001d4e:	f44f 6185 	mov.w	r1, #1064	; 0x428
 8001d52:	4868      	ldr	r0, [pc, #416]	; (8001ef4 <SysTick_Handler+0x884>)
 8001d54:	f00b fee3 	bl	800db1e <SPI_ETH_WR_REG_16>
								eth_wr_SOCKET_CMD(&ETH,0,RECV);							// write command to execute
 8001d58:	2240      	movs	r2, #64	; 0x40
 8001d5a:	2100      	movs	r1, #0
 8001d5c:	4865      	ldr	r0, [pc, #404]	; (8001ef4 <SysTick_Handler+0x884>)
 8001d5e:	f00b ff91 	bl	800dc84 <eth_wr_SOCKET_CMD>
								while(eth_rd_SOCKET_CMD(&ETH,0))						// wait until end of command execution
 8001d62:	bf00      	nop
 8001d64:	2100      	movs	r1, #0
 8001d66:	4863      	ldr	r0, [pc, #396]	; (8001ef4 <SysTick_Handler+0x884>)
 8001d68:	f00c f893 	bl	800de92 <eth_rd_SOCKET_CMD>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d1f8      	bne.n	8001d64 <SysTick_Handler+0x6f4>
								CopiaVector(mb_eth._MBUS_RCVD, ETH.data, S0_get_size, 0, 0 );
 8001d72:	4b69      	ldr	r3, [pc, #420]	; (8001f18 <SysTick_Handler+0x8a8>)
 8001d74:	881b      	ldrh	r3, [r3, #0]
 8001d76:	461a      	mov	r2, r3
 8001d78:	2300      	movs	r3, #0
 8001d7a:	9300      	str	r3, [sp, #0]
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	4960      	ldr	r1, [pc, #384]	; (8001f00 <SysTick_Handler+0x890>)
 8001d80:	4867      	ldr	r0, [pc, #412]	; (8001f20 <SysTick_Handler+0x8b0>)
 8001d82:	f00c fdd3 	bl	800e92c <CopiaVector>
								mb_eth._n_MBUS_RCVD=S0_get_size;
 8001d86:	4b64      	ldr	r3, [pc, #400]	; (8001f18 <SysTick_Handler+0x8a8>)
 8001d88:	881b      	ldrh	r3, [r3, #0]
 8001d8a:	461a      	mov	r2, r3
 8001d8c:	4b58      	ldr	r3, [pc, #352]	; (8001ef0 <SysTick_Handler+0x880>)
 8001d8e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
								if(S0_get_size > 0)	{ ETH.S0_data_available=1;}
 8001d92:	4b61      	ldr	r3, [pc, #388]	; (8001f18 <SysTick_Handler+0x8a8>)
 8001d94:	881b      	ldrh	r3, [r3, #0]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d002      	beq.n	8001da0 <SysTick_Handler+0x730>
 8001d9a:	4b56      	ldr	r3, [pc, #344]	; (8001ef4 <SysTick_Handler+0x884>)
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	749a      	strb	r2, [r3, #18]
								if(ModBUS_Check(mb_eth._MBUS_RCVD, mb_eth._n_MBUS_RCVD))		//Ckecks ModBUS type data
 8001da0:	4b53      	ldr	r3, [pc, #332]	; (8001ef0 <SysTick_Handler+0x880>)
 8001da2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8001da6:	4619      	mov	r1, r3
 8001da8:	485d      	ldr	r0, [pc, #372]	; (8001f20 <SysTick_Handler+0x8b0>)
 8001daa:	f00a fb2b 	bl	800c404 <ModBUS_Check>
 8001dae:	4603      	mov	r3, r0
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d024      	beq.n	8001dfe <SysTick_Handler+0x78e>
										mb_eth._w_answer=0;  									//Si el mensaje recibido ya es modbus digo que ya recibi
 8001db4:	4b4e      	ldr	r3, [pc, #312]	; (8001ef0 <SysTick_Handler+0x880>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	721a      	strb	r2, [r3, #8]
										MB_TOUT_ticks=0;
 8001dba:	4b53      	ldr	r3, [pc, #332]	; (8001f08 <SysTick_Handler+0x898>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	601a      	str	r2, [r3, #0]
										ModBUS(&mb_eth);										//ModBUS protocol execution
 8001dc0:	484b      	ldr	r0, [pc, #300]	; (8001ef0 <SysTick_Handler+0x880>)
 8001dc2:	f00a fc23 	bl	800c60c <ModBUS>
										CopiaVector(ETH.swap, mb_eth._MBUS_RCVD, mb_eth._n_MBUS_RCVD, 0, 0);
 8001dc6:	4b4a      	ldr	r3, [pc, #296]	; (8001ef0 <SysTick_Handler+0x880>)
 8001dc8:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001dcc:	2300      	movs	r3, #0
 8001dce:	9300      	str	r3, [sp, #0]
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	4953      	ldr	r1, [pc, #332]	; (8001f20 <SysTick_Handler+0x8b0>)
 8001dd4:	4853      	ldr	r0, [pc, #332]	; (8001f24 <SysTick_Handler+0x8b4>)
 8001dd6:	f00c fda9 	bl	800e92c <CopiaVector>
										CopiaVector(mb_wf._Holding_Registers, mb_eth._Holding_Registers, 64, 0, 0);
 8001dda:	2300      	movs	r3, #0
 8001ddc:	9300      	str	r3, [sp, #0]
 8001dde:	2300      	movs	r3, #0
 8001de0:	2240      	movs	r2, #64	; 0x40
 8001de2:	4951      	ldr	r1, [pc, #324]	; (8001f28 <SysTick_Handler+0x8b8>)
 8001de4:	4851      	ldr	r0, [pc, #324]	; (8001f2c <SysTick_Handler+0x8bc>)
 8001de6:	f00c fda1 	bl	800e92c <CopiaVector>
										if (ETH_DBG_EN) ITM0_Write("\r\n RCVD MBUS REQ \r\n",strlen("\r\n\r\n RCVD MBUS REQ \r\n\r\n"));
 8001dea:	4b48      	ldr	r3, [pc, #288]	; (8001f0c <SysTick_Handler+0x89c>)
 8001dec:	781b      	ldrb	r3, [r3, #0]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	f000 80da 	beq.w	8001fa8 <SysTick_Handler+0x938>
 8001df4:	2117      	movs	r1, #23
 8001df6:	484e      	ldr	r0, [pc, #312]	; (8001f30 <SysTick_Handler+0x8c0>)
 8001df8:	f7ff fc1e 	bl	8001638 <ITM0_Write>
			 break;
 8001dfc:	e0d4      	b.n	8001fa8 <SysTick_Handler+0x938>
										if (ETH_DBG_EN) ITM0_Write("\r\n NO MBUS \r\n",strlen("\r\n\r\n NO MBUS \r\n\r\n"));
 8001dfe:	4b43      	ldr	r3, [pc, #268]	; (8001f0c <SysTick_Handler+0x89c>)
 8001e00:	781b      	ldrb	r3, [r3, #0]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	f000 80d0 	beq.w	8001fa8 <SysTick_Handler+0x938>
 8001e08:	2111      	movs	r1, #17
 8001e0a:	484a      	ldr	r0, [pc, #296]	; (8001f34 <SysTick_Handler+0x8c4>)
 8001e0c:	f7ff fc14 	bl	8001638 <ITM0_Write>
			 break;
 8001e10:	e0ca      	b.n	8001fa8 <SysTick_Handler+0x938>
			 case SOCK_FIN_WAIT :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_FIN_WAIT \r\n",strlen("\r\nS0_SOCK_FIN_WAIT \r\n"));
 8001e12:	4b3e      	ldr	r3, [pc, #248]	; (8001f0c <SysTick_Handler+0x89c>)
 8001e14:	781b      	ldrb	r3, [r3, #0]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d003      	beq.n	8001e22 <SysTick_Handler+0x7b2>
 8001e1a:	2115      	movs	r1, #21
 8001e1c:	4846      	ldr	r0, [pc, #280]	; (8001f38 <SysTick_Handler+0x8c8>)
 8001e1e:	f7ff fc0b 	bl	8001638 <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001e22:	4b34      	ldr	r3, [pc, #208]	; (8001ef4 <SysTick_Handler+0x884>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001e28:	e0bf      	b.n	8001faa <SysTick_Handler+0x93a>
			 case SOCK_CLOSING :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_CLOSING \r\n",strlen("\r\nS0_SOCK_CLOSING \r\n"));
 8001e2a:	4b38      	ldr	r3, [pc, #224]	; (8001f0c <SysTick_Handler+0x89c>)
 8001e2c:	781b      	ldrb	r3, [r3, #0]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d003      	beq.n	8001e3a <SysTick_Handler+0x7ca>
 8001e32:	2114      	movs	r1, #20
 8001e34:	4841      	ldr	r0, [pc, #260]	; (8001f3c <SysTick_Handler+0x8cc>)
 8001e36:	f7ff fbff 	bl	8001638 <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001e3a:	4b2e      	ldr	r3, [pc, #184]	; (8001ef4 <SysTick_Handler+0x884>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001e40:	e0b3      	b.n	8001faa <SysTick_Handler+0x93a>
			 case  SOCK_TIME_WAIT :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_TIME_WAIT \r\n",strlen("\r\nS0_SOCK_TIME_WAIT \r\n"));
 8001e42:	4b32      	ldr	r3, [pc, #200]	; (8001f0c <SysTick_Handler+0x89c>)
 8001e44:	781b      	ldrb	r3, [r3, #0]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d003      	beq.n	8001e52 <SysTick_Handler+0x7e2>
 8001e4a:	2116      	movs	r1, #22
 8001e4c:	483c      	ldr	r0, [pc, #240]	; (8001f40 <SysTick_Handler+0x8d0>)
 8001e4e:	f7ff fbf3 	bl	8001638 <ITM0_Write>
					eth_wr_SOCKET_CMD(&ETH,0, DISCON );
 8001e52:	2208      	movs	r2, #8
 8001e54:	2100      	movs	r1, #0
 8001e56:	4827      	ldr	r0, [pc, #156]	; (8001ef4 <SysTick_Handler+0x884>)
 8001e58:	f00b ff14 	bl	800dc84 <eth_wr_SOCKET_CMD>
					while( SPI_ETH_REG(&ETH, S0_CR_ADDR_BASEH,S0_CR_ADDR_BASEL ,SPI_READ, spi_Data,1))
 8001e5c:	bf00      	nop
 8001e5e:	2301      	movs	r3, #1
 8001e60:	9301      	str	r3, [sp, #4]
 8001e62:	4b2c      	ldr	r3, [pc, #176]	; (8001f14 <SysTick_Handler+0x8a4>)
 8001e64:	9300      	str	r3, [sp, #0]
 8001e66:	230f      	movs	r3, #15
 8001e68:	2201      	movs	r2, #1
 8001e6a:	2104      	movs	r1, #4
 8001e6c:	4821      	ldr	r0, [pc, #132]	; (8001ef4 <SysTick_Handler+0x884>)
 8001e6e:	f00b fdde 	bl	800da2e <SPI_ETH_REG>
 8001e72:	4603      	mov	r3, r0
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d1f2      	bne.n	8001e5e <SysTick_Handler+0x7ee>
					{}
					ETH.ETH_WDG=0;
 8001e78:	4b1e      	ldr	r3, [pc, #120]	; (8001ef4 <SysTick_Handler+0x884>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001e7e:	e094      	b.n	8001faa <SysTick_Handler+0x93a>
			 case SOCK_CLOSE_WAIT :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_CLOSE_WAIT \r\n",strlen("\r\nS0_SOCK_CLOSE_WAIT \r\n"));
 8001e80:	4b22      	ldr	r3, [pc, #136]	; (8001f0c <SysTick_Handler+0x89c>)
 8001e82:	781b      	ldrb	r3, [r3, #0]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d003      	beq.n	8001e90 <SysTick_Handler+0x820>
 8001e88:	2117      	movs	r1, #23
 8001e8a:	482e      	ldr	r0, [pc, #184]	; (8001f44 <SysTick_Handler+0x8d4>)
 8001e8c:	f7ff fbd4 	bl	8001638 <ITM0_Write>
					eth_wr_SOCKET_CMD(&ETH,0,DISCON );
 8001e90:	2208      	movs	r2, #8
 8001e92:	2100      	movs	r1, #0
 8001e94:	4817      	ldr	r0, [pc, #92]	; (8001ef4 <SysTick_Handler+0x884>)
 8001e96:	f00b fef5 	bl	800dc84 <eth_wr_SOCKET_CMD>
					while( SPI_ETH_REG(&ETH, S0_CR_ADDR_BASEH,S0_CR_ADDR_BASEL ,SPI_READ, spi_Data,1))
 8001e9a:	bf00      	nop
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	9301      	str	r3, [sp, #4]
 8001ea0:	4b1c      	ldr	r3, [pc, #112]	; (8001f14 <SysTick_Handler+0x8a4>)
 8001ea2:	9300      	str	r3, [sp, #0]
 8001ea4:	230f      	movs	r3, #15
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	2104      	movs	r1, #4
 8001eaa:	4812      	ldr	r0, [pc, #72]	; (8001ef4 <SysTick_Handler+0x884>)
 8001eac:	f00b fdbf 	bl	800da2e <SPI_ETH_REG>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d1f2      	bne.n	8001e9c <SysTick_Handler+0x82c>
					{}
					ETH.ETH_WDG=0;
 8001eb6:	4b0f      	ldr	r3, [pc, #60]	; (8001ef4 <SysTick_Handler+0x884>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001ebc:	e075      	b.n	8001faa <SysTick_Handler+0x93a>
			 case SOCK_LAST_ACK :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_LAST_ACK \r\n",strlen("\r\nS0_SOCK_LAST_ACK \r\n"));
 8001ebe:	4b13      	ldr	r3, [pc, #76]	; (8001f0c <SysTick_Handler+0x89c>)
 8001ec0:	781b      	ldrb	r3, [r3, #0]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d003      	beq.n	8001ece <SysTick_Handler+0x85e>
 8001ec6:	2115      	movs	r1, #21
 8001ec8:	481f      	ldr	r0, [pc, #124]	; (8001f48 <SysTick_Handler+0x8d8>)
 8001eca:	f7ff fbb5 	bl	8001638 <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001ece:	4b09      	ldr	r3, [pc, #36]	; (8001ef4 <SysTick_Handler+0x884>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001ed4:	e069      	b.n	8001faa <SysTick_Handler+0x93a>
			 case SOCK_UDP :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_UDP \r\n",strlen("\r\nS0_SOCK_UDP \r\n"));
 8001ed6:	4b0d      	ldr	r3, [pc, #52]	; (8001f0c <SysTick_Handler+0x89c>)
 8001ed8:	781b      	ldrb	r3, [r3, #0]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d003      	beq.n	8001ee6 <SysTick_Handler+0x876>
 8001ede:	2110      	movs	r1, #16
 8001ee0:	481a      	ldr	r0, [pc, #104]	; (8001f4c <SysTick_Handler+0x8dc>)
 8001ee2:	f7ff fba9 	bl	8001638 <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001ee6:	4b03      	ldr	r3, [pc, #12]	; (8001ef4 <SysTick_Handler+0x884>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001eec:	e05d      	b.n	8001faa <SysTick_Handler+0x93a>
 8001eee:	bf00      	nop
 8001ef0:	200018b8 	.word	0x200018b8
 8001ef4:	20002960 	.word	0x20002960
 8001ef8:	200039ce 	.word	0x200039ce
 8001efc:	20001ad0 	.word	0x20001ad0
 8001f00:	2000297c 	.word	0x2000297c
 8001f04:	200039ca 	.word	0x200039ca
 8001f08:	20004444 	.word	0x20004444
 8001f0c:	20002958 	.word	0x20002958
 8001f10:	080100b8 	.word	0x080100b8
 8001f14:	200039d0 	.word	0x200039d0
 8001f18:	200039c8 	.word	0x200039c8
 8001f1c:	200039cc 	.word	0x200039cc
 8001f20:	200018ca 	.word	0x200018ca
 8001f24:	2000317c 	.word	0x2000317c
 8001f28:	20001cdc 	.word	0x20001cdc
 8001f2c:	2000232c 	.word	0x2000232c
 8001f30:	080100cc 	.word	0x080100cc
 8001f34:	080100a8 	.word	0x080100a8
 8001f38:	080100e0 	.word	0x080100e0
 8001f3c:	080100f8 	.word	0x080100f8
 8001f40:	08010110 	.word	0x08010110
 8001f44:	08010128 	.word	0x08010128
 8001f48:	08010140 	.word	0x08010140
 8001f4c:	08010158 	.word	0x08010158
			 case  SOCK_IPRAW :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_IPRAW \r\n",strlen("\r\nS0_SOCK_IPRAW \r\n"));
 8001f50:	4b7e      	ldr	r3, [pc, #504]	; (800214c <SysTick_Handler+0xadc>)
 8001f52:	781b      	ldrb	r3, [r3, #0]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d003      	beq.n	8001f60 <SysTick_Handler+0x8f0>
 8001f58:	2112      	movs	r1, #18
 8001f5a:	487d      	ldr	r0, [pc, #500]	; (8002150 <SysTick_Handler+0xae0>)
 8001f5c:	f7ff fb6c 	bl	8001638 <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001f60:	4b7c      	ldr	r3, [pc, #496]	; (8002154 <SysTick_Handler+0xae4>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001f66:	e020      	b.n	8001faa <SysTick_Handler+0x93a>
			 case  SOCK_MACRAW :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_MACRAW \r\n",strlen("\r\nS0_SOCK_MACRAW \r\n"));
 8001f68:	4b78      	ldr	r3, [pc, #480]	; (800214c <SysTick_Handler+0xadc>)
 8001f6a:	781b      	ldrb	r3, [r3, #0]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d003      	beq.n	8001f78 <SysTick_Handler+0x908>
 8001f70:	2113      	movs	r1, #19
 8001f72:	4879      	ldr	r0, [pc, #484]	; (8002158 <SysTick_Handler+0xae8>)
 8001f74:	f7ff fb60 	bl	8001638 <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001f78:	4b76      	ldr	r3, [pc, #472]	; (8002154 <SysTick_Handler+0xae4>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001f7e:	e014      	b.n	8001faa <SysTick_Handler+0x93a>
			 case SOCK_PPOE :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_PPOE \r\n",strlen("\r\nS0_SOCK_PPOE \r\n"));
 8001f80:	4b72      	ldr	r3, [pc, #456]	; (800214c <SysTick_Handler+0xadc>)
 8001f82:	781b      	ldrb	r3, [r3, #0]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d003      	beq.n	8001f90 <SysTick_Handler+0x920>
 8001f88:	2111      	movs	r1, #17
 8001f8a:	4874      	ldr	r0, [pc, #464]	; (800215c <SysTick_Handler+0xaec>)
 8001f8c:	f7ff fb54 	bl	8001638 <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001f90:	4b70      	ldr	r3, [pc, #448]	; (8002154 <SysTick_Handler+0xae4>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001f96:	e008      	b.n	8001faa <SysTick_Handler+0x93a>
				 }
	     }
	  }
	  }else
	  	  {
		  SPI_ETH(&ETH);
 8001f98:	486e      	ldr	r0, [pc, #440]	; (8002154 <SysTick_Handler+0xae4>)
 8001f9a:	f00b fd21 	bl	800d9e0 <SPI_ETH>
 8001f9e:	e004      	b.n	8001faa <SysTick_Handler+0x93a>
			 default:
 8001fa0:	bf00      	nop
 8001fa2:	e002      	b.n	8001faa <SysTick_Handler+0x93a>
			 break;
 8001fa4:	bf00      	nop
 8001fa6:	e000      	b.n	8001faa <SysTick_Handler+0x93a>
			 break;
 8001fa8:	bf00      	nop
	  	  }
	  if(min_ticks==2)//if(min_ticks==10)
 8001faa:	4b6d      	ldr	r3, [pc, #436]	; (8002160 <SysTick_Handler+0xaf0>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	2b02      	cmp	r3, #2
 8001fb0:	d102      	bne.n	8001fb8 <SysTick_Handler+0x948>
		  {
		  	  min_ticks=0;  /* SETEO CADA 2 min*/
 8001fb2:	4b6b      	ldr	r3, [pc, #428]	; (8002160 <SysTick_Handler+0xaf0>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	601a      	str	r2, [r3, #0]
		  }
  }

	if(EN_USART1_TMR==1) USART1_ticks++;
 8001fb8:	4b6a      	ldr	r3, [pc, #424]	; (8002164 <SysTick_Handler+0xaf4>)
 8001fba:	781b      	ldrb	r3, [r3, #0]
 8001fbc:	2b01      	cmp	r3, #1
 8001fbe:	d104      	bne.n	8001fca <SysTick_Handler+0x95a>
 8001fc0:	4b69      	ldr	r3, [pc, #420]	; (8002168 <SysTick_Handler+0xaf8>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	3301      	adds	r3, #1
 8001fc6:	4a68      	ldr	r2, [pc, #416]	; (8002168 <SysTick_Handler+0xaf8>)
 8001fc8:	6013      	str	r3, [r2, #0]

	if(USART1_ticks>=2)//if(USART1_ticks>=10)
 8001fca:	4b67      	ldr	r3, [pc, #412]	; (8002168 <SysTick_Handler+0xaf8>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	2b01      	cmp	r3, #1
 8001fd0:	dd0f      	ble.n	8001ff2 <SysTick_Handler+0x982>
	{
		USART1_ticks=0;
 8001fd2:	4b65      	ldr	r3, [pc, #404]	; (8002168 <SysTick_Handler+0xaf8>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	601a      	str	r2, [r3, #0]
		FLAG_USART1=1;
 8001fd8:	4b64      	ldr	r3, [pc, #400]	; (800216c <SysTick_Handler+0xafc>)
 8001fda:	2201      	movs	r2, #1
 8001fdc:	601a      	str	r2, [r3, #0]
		EN_USART1_TMR=0;
 8001fde:	4b61      	ldr	r3, [pc, #388]	; (8002164 <SysTick_Handler+0xaf4>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	701a      	strb	r2, [r3, #0]
		items_rx=uart1pass;
 8001fe4:	4b62      	ldr	r3, [pc, #392]	; (8002170 <SysTick_Handler+0xb00>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a62      	ldr	r2, [pc, #392]	; (8002174 <SysTick_Handler+0xb04>)
 8001fea:	6013      	str	r3, [r2, #0]
		uart1pass=0;
 8001fec:	4b60      	ldr	r3, [pc, #384]	; (8002170 <SysTick_Handler+0xb00>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	601a      	str	r2, [r3, #0]
	}

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ff2:	f000 fe65 	bl	8002cc0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
	if(wf._estado_conexion==4)//if((wf._estado_conexion!=1)&&(wf._estado_conexion!=2)&&(resultado!=20)&&(resultado!=24)) //Solo cuento cuando no estahaciendo otra cosa
 8001ff6:	4b60      	ldr	r3, [pc, #384]	; (8002178 <SysTick_Handler+0xb08>)
 8001ff8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001ffc:	2b04      	cmp	r3, #4
 8001ffe:	d105      	bne.n	800200c <SysTick_Handler+0x99c>
	{
		ticks++;
 8002000:	4b5e      	ldr	r3, [pc, #376]	; (800217c <SysTick_Handler+0xb0c>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	3301      	adds	r3, #1
 8002006:	4a5d      	ldr	r2, [pc, #372]	; (800217c <SysTick_Handler+0xb0c>)
 8002008:	6013      	str	r3, [r2, #0]
 800200a:	e002      	b.n	8002012 <SysTick_Handler+0x9a2>
	}
	else
	{
		ticks=0;
 800200c:	4b5b      	ldr	r3, [pc, #364]	; (800217c <SysTick_Handler+0xb0c>)
 800200e:	2200      	movs	r2, #0
 8002010:	601a      	str	r2, [r3, #0]
	}

    if((wf._estado_conexion==TCP_CONN_EN_CURSO) || (wf._estado_conexion==CONEXION_EN_CURSO)) wf._ticks2++;	//Conteo
 8002012:	4b59      	ldr	r3, [pc, #356]	; (8002178 <SysTick_Handler+0xb08>)
 8002014:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002018:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 800201c:	d004      	beq.n	8002028 <SysTick_Handler+0x9b8>
 800201e:	4b56      	ldr	r3, [pc, #344]	; (8002178 <SysTick_Handler+0xb08>)
 8002020:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002024:	2bc8      	cmp	r3, #200	; 0xc8
 8002026:	d106      	bne.n	8002036 <SysTick_Handler+0x9c6>
 8002028:	4b53      	ldr	r3, [pc, #332]	; (8002178 <SysTick_Handler+0xb08>)
 800202a:	f8d3 3cbc 	ldr.w	r3, [r3, #3260]	; 0xcbc
 800202e:	3301      	adds	r3, #1
 8002030:	4a51      	ldr	r2, [pc, #324]	; (8002178 <SysTick_Handler+0xb08>)
 8002032:	f8c2 3cbc 	str.w	r3, [r2, #3260]	; 0xcbc

 	if((wf._estado_conexion==CONEXION_EN_CURSO) && (wf._ticks2 >10000))
 8002036:	4b50      	ldr	r3, [pc, #320]	; (8002178 <SysTick_Handler+0xb08>)
 8002038:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800203c:	2bc8      	cmp	r3, #200	; 0xc8
 800203e:	d10d      	bne.n	800205c <SysTick_Handler+0x9ec>
 8002040:	4b4d      	ldr	r3, [pc, #308]	; (8002178 <SysTick_Handler+0xb08>)
 8002042:	f8d3 3cbc 	ldr.w	r3, [r3, #3260]	; 0xcbc
 8002046:	f242 7210 	movw	r2, #10000	; 0x2710
 800204a:	4293      	cmp	r3, r2
 800204c:	dd06      	ble.n	800205c <SysTick_Handler+0x9ec>
 	{
 		wf._ticks2=0;
 800204e:	4b4a      	ldr	r3, [pc, #296]	; (8002178 <SysTick_Handler+0xb08>)
 8002050:	2200      	movs	r2, #0
 8002052:	f8c3 2cbc 	str.w	r2, [r3, #3260]	; 0xcbc
 		esp_restart=1;
 8002056:	4b4a      	ldr	r3, [pc, #296]	; (8002180 <SysTick_Handler+0xb10>)
 8002058:	2201      	movs	r2, #1
 800205a:	701a      	strb	r2, [r3, #0]
 		//HW_RESET(&wf);
 	}
 	if(wf._estado_conexion==TCP_CONN_ERROR || wf._estado_conexion==CONEXION_ERROR) wf._ticks2++;
 800205c:	4b46      	ldr	r3, [pc, #280]	; (8002178 <SysTick_Handler+0xb08>)
 800205e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002062:	f240 225d 	movw	r2, #605	; 0x25d
 8002066:	4293      	cmp	r3, r2
 8002068:	d004      	beq.n	8002074 <SysTick_Handler+0xa04>
 800206a:	4b43      	ldr	r3, [pc, #268]	; (8002178 <SysTick_Handler+0xb08>)
 800206c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002070:	2bcd      	cmp	r3, #205	; 0xcd
 8002072:	d106      	bne.n	8002082 <SysTick_Handler+0xa12>
 8002074:	4b40      	ldr	r3, [pc, #256]	; (8002178 <SysTick_Handler+0xb08>)
 8002076:	f8d3 3cbc 	ldr.w	r3, [r3, #3260]	; 0xcbc
 800207a:	3301      	adds	r3, #1
 800207c:	4a3e      	ldr	r2, [pc, #248]	; (8002178 <SysTick_Handler+0xb08>)
 800207e:	f8c2 3cbc 	str.w	r3, [r2, #3260]	; 0xcbc

if(wf._ejecucion==1)
 8002082:	4b3d      	ldr	r3, [pc, #244]	; (8002178 <SysTick_Handler+0xb08>)
 8002084:	f8d3 3ab4 	ldr.w	r3, [r3, #2740]	; 0xab4
 8002088:	2b01      	cmp	r3, #1
 800208a:	d158      	bne.n	800213e <SysTick_Handler+0xace>
	{
		if (FLAG_TIMEOUT!=1)
 800208c:	4b3d      	ldr	r3, [pc, #244]	; (8002184 <SysTick_Handler+0xb14>)
 800208e:	781b      	ldrb	r3, [r3, #0]
 8002090:	2b01      	cmp	r3, #1
 8002092:	d017      	beq.n	80020c4 <SysTick_Handler+0xa54>
		{
			if(wf._instruccion!=2) wf._ticks++;//-----------------------Solo cuento una vez reconcido el timeout, cuando entro al timeout no cuento
 8002094:	4b38      	ldr	r3, [pc, #224]	; (8002178 <SysTick_Handler+0xb08>)
 8002096:	f8d3 3ab0 	ldr.w	r3, [r3, #2736]	; 0xab0
 800209a:	2b02      	cmp	r3, #2
 800209c:	d006      	beq.n	80020ac <SysTick_Handler+0xa3c>
 800209e:	4b36      	ldr	r3, [pc, #216]	; (8002178 <SysTick_Handler+0xb08>)
 80020a0:	f8d3 3cb8 	ldr.w	r3, [r3, #3256]	; 0xcb8
 80020a4:	3301      	adds	r3, #1
 80020a6:	4a34      	ldr	r2, [pc, #208]	; (8002178 <SysTick_Handler+0xb08>)
 80020a8:	f8c2 3cb8 	str.w	r3, [r2, #3256]	; 0xcb8
			if(wf._instruccion==2) wf._ticks2++;
 80020ac:	4b32      	ldr	r3, [pc, #200]	; (8002178 <SysTick_Handler+0xb08>)
 80020ae:	f8d3 3ab0 	ldr.w	r3, [r3, #2736]	; 0xab0
 80020b2:	2b02      	cmp	r3, #2
 80020b4:	d106      	bne.n	80020c4 <SysTick_Handler+0xa54>
 80020b6:	4b30      	ldr	r3, [pc, #192]	; (8002178 <SysTick_Handler+0xb08>)
 80020b8:	f8d3 3cbc 	ldr.w	r3, [r3, #3260]	; 0xcbc
 80020bc:	3301      	adds	r3, #1
 80020be:	4a2e      	ldr	r2, [pc, #184]	; (8002178 <SysTick_Handler+0xb08>)
 80020c0:	f8c2 3cbc 	str.w	r3, [r2, #3260]	; 0xcbc
		}


		if ((wf._instruccion!=2)&&(wf._ticks > 5500)) //if (wf._ticks > 5000)
 80020c4:	4b2c      	ldr	r3, [pc, #176]	; (8002178 <SysTick_Handler+0xb08>)
 80020c6:	f8d3 3ab0 	ldr.w	r3, [r3, #2736]	; 0xab0
 80020ca:	2b02      	cmp	r3, #2
 80020cc:	d018      	beq.n	8002100 <SysTick_Handler+0xa90>
 80020ce:	4b2a      	ldr	r3, [pc, #168]	; (8002178 <SysTick_Handler+0xb08>)
 80020d0:	f8d3 3cb8 	ldr.w	r3, [r3, #3256]	; 0xcb8
 80020d4:	f241 527c 	movw	r2, #5500	; 0x157c
 80020d8:	4293      	cmp	r3, r2
 80020da:	dd11      	ble.n	8002100 <SysTick_Handler+0xa90>
		{
			FLAG_TIMEOUT=1;
 80020dc:	4b29      	ldr	r3, [pc, #164]	; (8002184 <SysTick_Handler+0xb14>)
 80020de:	2201      	movs	r2, #1
 80020e0:	701a      	strb	r2, [r3, #0]
			if(huart1.Instance->CR1 == 0x200C)  //--------------------Evito error UART colgado
 80020e2:	4b29      	ldr	r3, [pc, #164]	; (8002188 <SysTick_Handler+0xb18>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	68db      	ldr	r3, [r3, #12]
 80020e8:	f242 020c 	movw	r2, #8204	; 0x200c
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d107      	bne.n	8002100 <SysTick_Handler+0xa90>
			{
				HAL_UART_Receive_IT(&huart1,(uint8_t *)UART_RX_byte,1);
 80020f0:	2201      	movs	r2, #1
 80020f2:	4926      	ldr	r1, [pc, #152]	; (800218c <SysTick_Handler+0xb1c>)
 80020f4:	4824      	ldr	r0, [pc, #144]	; (8002188 <SysTick_Handler+0xb18>)
 80020f6:	f003 fb8e 	bl	8005816 <HAL_UART_Receive_IT>
				EN_UART1_TMR=0; //OBS-VER Para que me vuelva a habilitar el timer
 80020fa:	4b25      	ldr	r3, [pc, #148]	; (8002190 <SysTick_Handler+0xb20>)
 80020fc:	2200      	movs	r2, #0
 80020fe:	701a      	strb	r2, [r3, #0]
			}
			//wf._ticks=0;
		}
		if ((wf._instruccion==2)&&(wf._ticks2 > 20500)) //if (wf._ticks > 5000)
 8002100:	4b1d      	ldr	r3, [pc, #116]	; (8002178 <SysTick_Handler+0xb08>)
 8002102:	f8d3 3ab0 	ldr.w	r3, [r3, #2736]	; 0xab0
 8002106:	2b02      	cmp	r3, #2
 8002108:	d11d      	bne.n	8002146 <SysTick_Handler+0xad6>
 800210a:	4b1b      	ldr	r3, [pc, #108]	; (8002178 <SysTick_Handler+0xb08>)
 800210c:	f8d3 3cbc 	ldr.w	r3, [r3, #3260]	; 0xcbc
 8002110:	f245 0214 	movw	r2, #20500	; 0x5014
 8002114:	4293      	cmp	r3, r2
 8002116:	dd16      	ble.n	8002146 <SysTick_Handler+0xad6>
		{
			FLAG_TIMEOUT=1;
 8002118:	4b1a      	ldr	r3, [pc, #104]	; (8002184 <SysTick_Handler+0xb14>)
 800211a:	2201      	movs	r2, #1
 800211c:	701a      	strb	r2, [r3, #0]
			if(huart1.Instance->CR1 == 0x200C)  //--------------------Evito error UART colgado
 800211e:	4b1a      	ldr	r3, [pc, #104]	; (8002188 <SysTick_Handler+0xb18>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	68db      	ldr	r3, [r3, #12]
 8002124:	f242 020c 	movw	r2, #8204	; 0x200c
 8002128:	4293      	cmp	r3, r2
 800212a:	d10c      	bne.n	8002146 <SysTick_Handler+0xad6>
			{
				HAL_UART_Receive_IT(&huart1,(uint8_t *)UART_RX_byte,1);
 800212c:	2201      	movs	r2, #1
 800212e:	4917      	ldr	r1, [pc, #92]	; (800218c <SysTick_Handler+0xb1c>)
 8002130:	4815      	ldr	r0, [pc, #84]	; (8002188 <SysTick_Handler+0xb18>)
 8002132:	f003 fb70 	bl	8005816 <HAL_UART_Receive_IT>
				EN_UART1_TMR=0; //OBS-VER Para que me vuelva a habilitar el timer
 8002136:	4b16      	ldr	r3, [pc, #88]	; (8002190 <SysTick_Handler+0xb20>)
 8002138:	2200      	movs	r2, #0
 800213a:	701a      	strb	r2, [r3, #0]
	else
	{
		wf._ticks=0;
	}
  /* USER CODE END SysTick_IRQn 1 */
}
 800213c:	e003      	b.n	8002146 <SysTick_Handler+0xad6>
		wf._ticks=0;
 800213e:	4b0e      	ldr	r3, [pc, #56]	; (8002178 <SysTick_Handler+0xb08>)
 8002140:	2200      	movs	r2, #0
 8002142:	f8c3 2cb8 	str.w	r2, [r3, #3256]	; 0xcb8
}
 8002146:	bf00      	nop
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}
 800214c:	20002958 	.word	0x20002958
 8002150:	0801016c 	.word	0x0801016c
 8002154:	20002960 	.word	0x20002960
 8002158:	08010180 	.word	0x08010180
 800215c:	08010194 	.word	0x08010194
 8002160:	2000034c 	.word	0x2000034c
 8002164:	20003a16 	.word	0x20003a16
 8002168:	20004454 	.word	0x20004454
 800216c:	20004458 	.word	0x20004458
 8002170:	20004450 	.word	0x20004450
 8002174:	2000445c 	.word	0x2000445c
 8002178:	20000b58 	.word	0x20000b58
 800217c:	20004448 	.word	0x20004448
 8002180:	20003a1c 	.word	0x20003a1c
 8002184:	20003a17 	.word	0x20003a17
 8002188:	2000027c 	.word	0x2000027c
 800218c:	20004428 	.word	0x20004428
 8002190:	20003a14 	.word	0x20003a14

08002194 <HAL_UART_ErrorCallback>:
void HAL_UART_ErrorCallback(UART_HandleTypeDef *ERRUART)

{
 8002194:	b580      	push	{r7, lr}
 8002196:	b086      	sub	sp, #24
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
	if(ERRUART->Instance==USART1)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a22      	ldr	r2, [pc, #136]	; (800222c <HAL_UART_ErrorCallback+0x98>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d11c      	bne.n	80021e0 <HAL_UART_ErrorCallback+0x4c>
	{
		 volatile int aore=0;
 80021a6:	2300      	movs	r3, #0
 80021a8:	617b      	str	r3, [r7, #20]
		 volatile int bore=0;
 80021aa:	2300      	movs	r3, #0
 80021ac:	613b      	str	r3, [r7, #16]

		// if ( UART_FLAG_ORE == HAL_UART_GetError(huart1))
		//{
		//Al leer los registros de esta forma SR y luego DR se resetean los errores de Framing Noise y Overrun FE NE ORE
		//}
			 wf._debug_count9++;
 80021ae:	4b20      	ldr	r3, [pc, #128]	; (8002230 <HAL_UART_ErrorCallback+0x9c>)
 80021b0:	f8d3 3d28 	ldr.w	r3, [r3, #3368]	; 0xd28
 80021b4:	3301      	adds	r3, #1
 80021b6:	4a1e      	ldr	r2, [pc, #120]	; (8002230 <HAL_UART_ErrorCallback+0x9c>)
 80021b8:	f8c2 3d28 	str.w	r3, [r2, #3368]	; 0xd28
			aore=ERRUART->Instance->SR;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	617b      	str	r3, [r7, #20]
			bore=ERRUART->Instance->DR;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	613b      	str	r3, [r7, #16]


		//HAL_UART_Transmit_IT(&huart5,"U4",strlen("U4"));
		 HAL_UART_DeInit(ERRUART);
 80021cc:	6878      	ldr	r0, [r7, #4]
 80021ce:	f003 fa1c 	bl	800560a <HAL_UART_DeInit>
		 MX_USART1_UART_Init();
 80021d2:	f7ff f921 	bl	8001418 <MX_USART1_UART_Init>
		 HAL_UART_Receive_IT(ERRUART,(uint8_t *)UART_RX_byte,1);
 80021d6:	2201      	movs	r2, #1
 80021d8:	4916      	ldr	r1, [pc, #88]	; (8002234 <HAL_UART_ErrorCallback+0xa0>)
 80021da:	6878      	ldr	r0, [r7, #4]
 80021dc:	f003 fb1b 	bl	8005816 <HAL_UART_Receive_IT>
	}
	if(ERRUART->Instance==USART2)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a14      	ldr	r2, [pc, #80]	; (8002238 <HAL_UART_ErrorCallback+0xa4>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d11c      	bne.n	8002224 <HAL_UART_ErrorCallback+0x90>
	{
		 volatile int aore=0;
 80021ea:	2300      	movs	r3, #0
 80021ec:	60fb      	str	r3, [r7, #12]
		 volatile int bore=0;
 80021ee:	2300      	movs	r3, #0
 80021f0:	60bb      	str	r3, [r7, #8]

		// if ( UART_FLAG_ORE == HAL_UART_GetError(huart1))
		//{
		//Al leer los registros de esta forma SR y luego DR se resetean los errores de Framing Noise y Overrun FE NE ORE
		//}
			 wf._debug_count9++;
 80021f2:	4b0f      	ldr	r3, [pc, #60]	; (8002230 <HAL_UART_ErrorCallback+0x9c>)
 80021f4:	f8d3 3d28 	ldr.w	r3, [r3, #3368]	; 0xd28
 80021f8:	3301      	adds	r3, #1
 80021fa:	4a0d      	ldr	r2, [pc, #52]	; (8002230 <HAL_UART_ErrorCallback+0x9c>)
 80021fc:	f8c2 3d28 	str.w	r3, [r2, #3368]	; 0xd28
			aore=ERRUART->Instance->SR;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	60fb      	str	r3, [r7, #12]
			bore=ERRUART->Instance->DR;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	60bb      	str	r3, [r7, #8]


		//HAL_UART_Transmit_IT(&huart5,"U4",strlen("U4"));
		 HAL_UART_DeInit(ERRUART);
 8002210:	6878      	ldr	r0, [r7, #4]
 8002212:	f003 f9fa 	bl	800560a <HAL_UART_DeInit>
		 MX_USART2_UART_Init();
 8002216:	f7ff f929 	bl	800146c <MX_USART2_UART_Init>
		 HAL_UART_Receive_IT(ERRUART,(uint8_t *)UART2_RX_byte,1);
 800221a:	2201      	movs	r2, #1
 800221c:	4907      	ldr	r1, [pc, #28]	; (800223c <HAL_UART_ErrorCallback+0xa8>)
 800221e:	6878      	ldr	r0, [r7, #4]
 8002220:	f003 faf9 	bl	8005816 <HAL_UART_Receive_IT>
	}
}
 8002224:	bf00      	nop
 8002226:	3718      	adds	r7, #24
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}
 800222c:	40011000 	.word	0x40011000
 8002230:	20000b58 	.word	0x20000b58
 8002234:	20004428 	.word	0x20004428
 8002238:	40004400 	.word	0x40004400
 800223c:	2000442c 	.word	0x2000442c

08002240 <HAL_UART_RxCpltCallback>:
		wf._debug_count10++;

}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *INTSERIE)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b082      	sub	sp, #8
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]

// WiFi	USART 1 TIMER2
	if(INTSERIE->Instance==USART1)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a2c      	ldr	r2, [pc, #176]	; (8002300 <HAL_UART_RxCpltCallback+0xc0>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d124      	bne.n	800229c <HAL_UART_RxCpltCallback+0x5c>
		 {
			UART_RX_vect[UART_RX_pos]=UART_RX_byte[0];
 8002252:	4b2c      	ldr	r3, [pc, #176]	; (8002304 <HAL_UART_RxCpltCallback+0xc4>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a2c      	ldr	r2, [pc, #176]	; (8002308 <HAL_UART_RxCpltCallback+0xc8>)
 8002258:	7811      	ldrb	r1, [r2, #0]
 800225a:	4a2c      	ldr	r2, [pc, #176]	; (800230c <HAL_UART_RxCpltCallback+0xcc>)
 800225c:	54d1      	strb	r1, [r2, r3]
			UART_RX_pos++;
 800225e:	4b29      	ldr	r3, [pc, #164]	; (8002304 <HAL_UART_RxCpltCallback+0xc4>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	3301      	adds	r3, #1
 8002264:	4a27      	ldr	r2, [pc, #156]	; (8002304 <HAL_UART_RxCpltCallback+0xc4>)
 8002266:	6013      	str	r3, [r2, #0]
			if(UART_RX_pos>=1022) UART_RX_pos=1022;
 8002268:	4b26      	ldr	r3, [pc, #152]	; (8002304 <HAL_UART_RxCpltCallback+0xc4>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f240 32fd 	movw	r2, #1021	; 0x3fd
 8002270:	4293      	cmp	r3, r2
 8002272:	dd03      	ble.n	800227c <HAL_UART_RxCpltCallback+0x3c>
 8002274:	4b23      	ldr	r3, [pc, #140]	; (8002304 <HAL_UART_RxCpltCallback+0xc4>)
 8002276:	f240 32fe 	movw	r2, #1022	; 0x3fe
 800227a:	601a      	str	r2, [r3, #0]
			HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_1);//HAL_TIM_Base_Start_IT(&htim7);	//Habilito el timer
 800227c:	2100      	movs	r1, #0
 800227e:	4824      	ldr	r0, [pc, #144]	; (8002310 <HAL_UART_RxCpltCallback+0xd0>)
 8002280:	f002 f9ca 	bl	8004618 <HAL_TIM_OC_Start_IT>
			TIM2->CNT=1;
 8002284:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002288:	2201      	movs	r2, #1
 800228a:	625a      	str	r2, [r3, #36]	; 0x24
			EN_UART1_TMR=1;	//Habilito Timeout de software
 800228c:	4b21      	ldr	r3, [pc, #132]	; (8002314 <HAL_UART_RxCpltCallback+0xd4>)
 800228e:	2201      	movs	r2, #1
 8002290:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_IT(INTSERIE,(uint8_t *)UART_RX_byte,1);
 8002292:	2201      	movs	r2, #1
 8002294:	491c      	ldr	r1, [pc, #112]	; (8002308 <HAL_UART_RxCpltCallback+0xc8>)
 8002296:	6878      	ldr	r0, [r7, #4]
 8002298:	f003 fabd 	bl	8005816 <HAL_UART_Receive_IT>
		 }
// LoRa USART2 TIMER3
	if(INTSERIE->Instance==USART2)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a1d      	ldr	r2, [pc, #116]	; (8002318 <HAL_UART_RxCpltCallback+0xd8>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d128      	bne.n	80022f8 <HAL_UART_RxCpltCallback+0xb8>
		 {
			UART2_RX_vect[UART2_RX_pos]=UART2_RX_byte[0];
 80022a6:	4b1d      	ldr	r3, [pc, #116]	; (800231c <HAL_UART_RxCpltCallback+0xdc>)
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	4b1d      	ldr	r3, [pc, #116]	; (8002320 <HAL_UART_RxCpltCallback+0xe0>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	b2d1      	uxtb	r1, r2
 80022b0:	4a1c      	ldr	r2, [pc, #112]	; (8002324 <HAL_UART_RxCpltCallback+0xe4>)
 80022b2:	54d1      	strb	r1, [r2, r3]
			UART2_RX_pos++;
 80022b4:	4b1a      	ldr	r3, [pc, #104]	; (8002320 <HAL_UART_RxCpltCallback+0xe0>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	3301      	adds	r3, #1
 80022ba:	4a19      	ldr	r2, [pc, #100]	; (8002320 <HAL_UART_RxCpltCallback+0xe0>)
 80022bc:	6013      	str	r3, [r2, #0]
			if(UART2_RX_pos>=512) UART2_RX_pos=512;
 80022be:	4b18      	ldr	r3, [pc, #96]	; (8002320 <HAL_UART_RxCpltCallback+0xe0>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022c6:	db03      	blt.n	80022d0 <HAL_UART_RxCpltCallback+0x90>
 80022c8:	4b15      	ldr	r3, [pc, #84]	; (8002320 <HAL_UART_RxCpltCallback+0xe0>)
 80022ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80022ce:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 1);
 80022d0:	2201      	movs	r2, #1
 80022d2:	2102      	movs	r1, #2
 80022d4:	4814      	ldr	r0, [pc, #80]	; (8002328 <HAL_UART_RxCpltCallback+0xe8>)
 80022d6:	f001 f975 	bl	80035c4 <HAL_GPIO_WritePin>
			HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);//HAL_TIM_Base_Start_IT(&htim7);	//Habilito el timer
 80022da:	2100      	movs	r1, #0
 80022dc:	4813      	ldr	r0, [pc, #76]	; (800232c <HAL_UART_RxCpltCallback+0xec>)
 80022de:	f002 f99b 	bl	8004618 <HAL_TIM_OC_Start_IT>
			TIM3->CNT=1;
 80022e2:	4b13      	ldr	r3, [pc, #76]	; (8002330 <HAL_UART_RxCpltCallback+0xf0>)
 80022e4:	2201      	movs	r2, #1
 80022e6:	625a      	str	r2, [r3, #36]	; 0x24
			EN_UART2_TMR=1;	//Habilito Timeout de software
 80022e8:	4b12      	ldr	r3, [pc, #72]	; (8002334 <HAL_UART_RxCpltCallback+0xf4>)
 80022ea:	2201      	movs	r2, #1
 80022ec:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_IT(INTSERIE,(uint8_t *)UART2_RX_byte,1);
 80022ee:	2201      	movs	r2, #1
 80022f0:	490a      	ldr	r1, [pc, #40]	; (800231c <HAL_UART_RxCpltCallback+0xdc>)
 80022f2:	6878      	ldr	r0, [r7, #4]
 80022f4:	f003 fa8f 	bl	8005816 <HAL_UART_Receive_IT>
		 }
 }
 80022f8:	bf00      	nop
 80022fa:	3708      	adds	r7, #8
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}
 8002300:	40011000 	.word	0x40011000
 8002304:	20004460 	.word	0x20004460
 8002308:	20004428 	.word	0x20004428
 800230c:	20003a24 	.word	0x20003a24
 8002310:	200001ec 	.word	0x200001ec
 8002314:	20003a14 	.word	0x20003a14
 8002318:	40004400 	.word	0x40004400
 800231c:	2000442c 	.word	0x2000442c
 8002320:	20004464 	.word	0x20004464
 8002324:	20003e24 	.word	0x20003e24
 8002328:	40020000 	.word	0x40020000
 800232c:	20000234 	.word	0x20000234
 8002330:	40000400 	.word	0x40000400
 8002334:	20003a15 	.word	0x20003a15

08002338 <HAL_TIM_OC_DelayElapsedCallback>:

void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *TIMER)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b084      	sub	sp, #16
 800233c:	af02      	add	r7, sp, #8
 800233e:	6078      	str	r0, [r7, #4]
// WiFi	USART 1 TIMER2
		//void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim2)
		if(TIMER->Instance==TIM2)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002348:	d12d      	bne.n	80023a6 <HAL_TIM_OC_DelayElapsedCallback+0x6e>
			{
				 HAL_TIM_OC_Stop_IT(TIMER, TIM_CHANNEL_1); //Paro el timer
 800234a:	2100      	movs	r1, #0
 800234c:	6878      	ldr	r0, [r7, #4]
 800234e:	f002 fa61 	bl	8004814 <HAL_TIM_OC_Stop_IT>
				 FLAG_UART1=1;
 8002352:	4b39      	ldr	r3, [pc, #228]	; (8002438 <HAL_TIM_OC_DelayElapsedCallback+0x100>)
 8002354:	2201      	movs	r2, #1
 8002356:	701a      	strb	r2, [r3, #0]
				 EN_UART1_TMR=0;
 8002358:	4b38      	ldr	r3, [pc, #224]	; (800243c <HAL_TIM_OC_DelayElapsedCallback+0x104>)
 800235a:	2200      	movs	r2, #0
 800235c:	701a      	strb	r2, [r3, #0]
				 UART_RX_items=UART_RX_pos;
 800235e:	4b38      	ldr	r3, [pc, #224]	; (8002440 <HAL_TIM_OC_DelayElapsedCallback+0x108>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a38      	ldr	r2, [pc, #224]	; (8002444 <HAL_TIM_OC_DelayElapsedCallback+0x10c>)
 8002364:	6013      	str	r3, [r2, #0]
				 UART_RX_pos=0;
 8002366:	4b36      	ldr	r3, [pc, #216]	; (8002440 <HAL_TIM_OC_DelayElapsedCallback+0x108>)
 8002368:	2200      	movs	r2, #0
 800236a:	601a      	str	r2, [r3, #0]
				 UART_RX_vect[1022]='\0'; //Finalizo el vector a la fuerza ya que recibo hasta 124
 800236c:	4b36      	ldr	r3, [pc, #216]	; (8002448 <HAL_TIM_OC_DelayElapsedCallback+0x110>)
 800236e:	2200      	movs	r2, #0
 8002370:	f883 23fe 	strb.w	r2, [r3, #1022]	; 0x3fe
				 CopiaVector(UART_RX_vect_hld,UART_RX_vect,UART_RX_items,1,CMP_VECT);
 8002374:	4b33      	ldr	r3, [pc, #204]	; (8002444 <HAL_TIM_OC_DelayElapsedCallback+0x10c>)
 8002376:	681a      	ldr	r2, [r3, #0]
 8002378:	4b34      	ldr	r3, [pc, #208]	; (800244c <HAL_TIM_OC_DelayElapsedCallback+0x114>)
 800237a:	9300      	str	r3, [sp, #0]
 800237c:	2301      	movs	r3, #1
 800237e:	4932      	ldr	r1, [pc, #200]	; (8002448 <HAL_TIM_OC_DelayElapsedCallback+0x110>)
 8002380:	4833      	ldr	r0, [pc, #204]	; (8002450 <HAL_TIM_OC_DelayElapsedCallback+0x118>)
 8002382:	f00c fad3 	bl	800e92c <CopiaVector>
				 HAL_UART_Receive_IT(&huart1,(uint8_t *)UART_RX_byte,1); //Habilito le recepcón de puerto serie al terminar
 8002386:	2201      	movs	r2, #1
 8002388:	4932      	ldr	r1, [pc, #200]	; (8002454 <HAL_TIM_OC_DelayElapsedCallback+0x11c>)
 800238a:	4833      	ldr	r0, [pc, #204]	; (8002458 <HAL_TIM_OC_DelayElapsedCallback+0x120>)
 800238c:	f003 fa43 	bl	8005816 <HAL_UART_Receive_IT>
				 if (wf._DBG_EN==1)
 8002390:	4b32      	ldr	r3, [pc, #200]	; (800245c <HAL_TIM_OC_DelayElapsedCallback+0x124>)
 8002392:	f8d3 3d5c 	ldr.w	r3, [r3, #3420]	; 0xd5c
 8002396:	2b01      	cmp	r3, #1
 8002398:	d105      	bne.n	80023a6 <HAL_TIM_OC_DelayElapsedCallback+0x6e>
				 {
					 ITM0_Write((uint8_t *)UART_RX_vect_hld,UART_RX_items);
 800239a:	4b2a      	ldr	r3, [pc, #168]	; (8002444 <HAL_TIM_OC_DelayElapsedCallback+0x10c>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4619      	mov	r1, r3
 80023a0:	482b      	ldr	r0, [pc, #172]	; (8002450 <HAL_TIM_OC_DelayElapsedCallback+0x118>)
 80023a2:	f7ff f949 	bl	8001638 <ITM0_Write>
				 }
		}
		// LoRa USART2 TIMER3
		//void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim2)
		if(TIMER->Instance==TIM3)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a2d      	ldr	r2, [pc, #180]	; (8002460 <HAL_TIM_OC_DelayElapsedCallback+0x128>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d13f      	bne.n	8002430 <HAL_TIM_OC_DelayElapsedCallback+0xf8>
			{
				 HAL_TIM_OC_Stop_IT(TIMER, TIM_CHANNEL_1); //Paro el timer
 80023b0:	2100      	movs	r1, #0
 80023b2:	6878      	ldr	r0, [r7, #4]
 80023b4:	f002 fa2e 	bl	8004814 <HAL_TIM_OC_Stop_IT>
				 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 0);
 80023b8:	2200      	movs	r2, #0
 80023ba:	2102      	movs	r1, #2
 80023bc:	4829      	ldr	r0, [pc, #164]	; (8002464 <HAL_TIM_OC_DelayElapsedCallback+0x12c>)
 80023be:	f001 f901 	bl	80035c4 <HAL_GPIO_WritePin>
				 FLAG_UART2=1;
 80023c2:	4b29      	ldr	r3, [pc, #164]	; (8002468 <HAL_TIM_OC_DelayElapsedCallback+0x130>)
 80023c4:	2201      	movs	r2, #1
 80023c6:	701a      	strb	r2, [r3, #0]
				 EN_UART2_TMR=0;
 80023c8:	4b28      	ldr	r3, [pc, #160]	; (800246c <HAL_TIM_OC_DelayElapsedCallback+0x134>)
 80023ca:	2200      	movs	r2, #0
 80023cc:	701a      	strb	r2, [r3, #0]
				 UART2_RX_items=UART2_RX_pos;
 80023ce:	4b28      	ldr	r3, [pc, #160]	; (8002470 <HAL_TIM_OC_DelayElapsedCallback+0x138>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a28      	ldr	r2, [pc, #160]	; (8002474 <HAL_TIM_OC_DelayElapsedCallback+0x13c>)
 80023d4:	6013      	str	r3, [r2, #0]
				 UART2_RX_pos=0;
 80023d6:	4b26      	ldr	r3, [pc, #152]	; (8002470 <HAL_TIM_OC_DelayElapsedCallback+0x138>)
 80023d8:	2200      	movs	r2, #0
 80023da:	601a      	str	r2, [r3, #0]
				 //UART2_RX_vect[UART2_RX_items]='\0'; //Finalizo el vector a la fuerza ya que recibo hasta 124
				 UART2_RX_vect[512]='\0'; //Finalizo el vector a la fuerza ya que recibo hasta 124
 80023dc:	4b26      	ldr	r3, [pc, #152]	; (8002478 <HAL_TIM_OC_DelayElapsedCallback+0x140>)
 80023de:	2200      	movs	r2, #0
 80023e0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
				 CopiaVector(lr.rxbuff,UART2_RX_vect,UART2_RX_items,1,CMP_VECT);
 80023e4:	4b23      	ldr	r3, [pc, #140]	; (8002474 <HAL_TIM_OC_DelayElapsedCallback+0x13c>)
 80023e6:	681a      	ldr	r2, [r3, #0]
 80023e8:	4b18      	ldr	r3, [pc, #96]	; (800244c <HAL_TIM_OC_DelayElapsedCallback+0x114>)
 80023ea:	9300      	str	r3, [sp, #0]
 80023ec:	2301      	movs	r3, #1
 80023ee:	4922      	ldr	r1, [pc, #136]	; (8002478 <HAL_TIM_OC_DelayElapsedCallback+0x140>)
 80023f0:	4822      	ldr	r0, [pc, #136]	; (800247c <HAL_TIM_OC_DelayElapsedCallback+0x144>)
 80023f2:	f00c fa9b 	bl	800e92c <CopiaVector>
				 lr.rxitems=UART2_RX_items;
 80023f6:	4b1f      	ldr	r3, [pc, #124]	; (8002474 <HAL_TIM_OC_DelayElapsedCallback+0x13c>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a21      	ldr	r2, [pc, #132]	; (8002480 <HAL_TIM_OC_DelayElapsedCallback+0x148>)
 80023fc:	f8c2 37dc 	str.w	r3, [r2, #2012]	; 0x7dc
				 HAL_UART_Receive_IT(&huart2,(uint8_t *)UART2_RX_byte,1); //Habilito le recepcón de puerto serie al terminar
 8002400:	2201      	movs	r2, #1
 8002402:	4920      	ldr	r1, [pc, #128]	; (8002484 <HAL_TIM_OC_DelayElapsedCallback+0x14c>)
 8002404:	4820      	ldr	r0, [pc, #128]	; (8002488 <HAL_TIM_OC_DelayElapsedCallback+0x150>)
 8002406:	f003 fa06 	bl	8005816 <HAL_UART_Receive_IT>
				// ITM0_Write("\r\nRecepcion LoRa \r\n",strlen("Recepcion LoRa \r\n"));
				 if (wf._DBG_EN==1)
 800240a:	4b14      	ldr	r3, [pc, #80]	; (800245c <HAL_TIM_OC_DelayElapsedCallback+0x124>)
 800240c:	f8d3 3d5c 	ldr.w	r3, [r3, #3420]	; 0xd5c
 8002410:	2b01      	cmp	r3, #1
 8002412:	d10d      	bne.n	8002430 <HAL_TIM_OC_DelayElapsedCallback+0xf8>
				 {
					 ITM0_Write("\r\nData LoRa recibida = ",strlen("\r\nData LoRa recibida = "));
 8002414:	2117      	movs	r1, #23
 8002416:	481d      	ldr	r0, [pc, #116]	; (800248c <HAL_TIM_OC_DelayElapsedCallback+0x154>)
 8002418:	f7ff f90e 	bl	8001638 <ITM0_Write>
					 ITM0_Write((uint8_t *)UART2_RX_vect,UART2_RX_items);
 800241c:	4b15      	ldr	r3, [pc, #84]	; (8002474 <HAL_TIM_OC_DelayElapsedCallback+0x13c>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4619      	mov	r1, r3
 8002422:	4815      	ldr	r0, [pc, #84]	; (8002478 <HAL_TIM_OC_DelayElapsedCallback+0x140>)
 8002424:	f7ff f908 	bl	8001638 <ITM0_Write>
					 ITM0_Write("\r\n",strlen("\r\n"));
 8002428:	2102      	movs	r1, #2
 800242a:	4819      	ldr	r0, [pc, #100]	; (8002490 <HAL_TIM_OC_DelayElapsedCallback+0x158>)
 800242c:	f7ff f904 	bl	8001638 <ITM0_Write>
				 }
		}
}
 8002430:	bf00      	nop
 8002432:	3708      	adds	r7, #8
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}
 8002438:	20003a18 	.word	0x20003a18
 800243c:	20003a14 	.word	0x20003a14
 8002440:	20004460 	.word	0x20004460
 8002444:	20004434 	.word	0x20004434
 8002448:	20003a24 	.word	0x20003a24
 800244c:	20004424 	.word	0x20004424
 8002450:	20004024 	.word	0x20004024
 8002454:	20004428 	.word	0x20004428
 8002458:	2000027c 	.word	0x2000027c
 800245c:	20000b58 	.word	0x20000b58
 8002460:	40000400 	.word	0x40000400
 8002464:	40020000 	.word	0x40020000
 8002468:	20003a19 	.word	0x20003a19
 800246c:	20003a15 	.word	0x20003a15
 8002470:	20004464 	.word	0x20004464
 8002474:	20004438 	.word	0x20004438
 8002478:	20003e24 	.word	0x20003e24
 800247c:	200003a6 	.word	0x200003a6
 8002480:	20000350 	.word	0x20000350
 8002484:	2000442c 	.word	0x2000442c
 8002488:	200002c0 	.word	0x200002c0
 800248c:	080101a8 	.word	0x080101a8
 8002490:	080101c0 	.word	0x080101c0

08002494 <ESP8266_HW_Init>:
// 	  HAL_Delay(2000);											//Tiempo de reset del módulo
// 	  ITM0_Write("\r\n ESP ResetT\r\n",strlen("\r\n ESP ResetT\r\n"));
// 	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);		//Habilito módulo
// }
uint8_t ESP8266_HW_Init(UART_HandleTypeDef *SerialPort) //Devuelve 1 si reinició OK, y 0 si no
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b088      	sub	sp, #32
 8002498:	af06      	add	r7, sp, #24
 800249a:	6078      	str	r0, [r7, #4]
	  do{
		  HAL_UART_Transmit(SerialPort, "AT+RESTORE\r\n",strlen("AT+RESTORE\r\n"),100);
 800249c:	2364      	movs	r3, #100	; 0x64
 800249e:	220c      	movs	r2, #12
 80024a0:	4945      	ldr	r1, [pc, #276]	; (80025b8 <ESP8266_HW_Init+0x124>)
 80024a2:	6878      	ldr	r0, [r7, #4]
 80024a4:	f003 f8e0 	bl	8005668 <HAL_UART_Transmit>
		  HAL_Delay(500);
 80024a8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80024ac:	f000 fc28 	bl	8002d00 <HAL_Delay>

		  wf._n_fcomp=strlen("ready");
 80024b0:	4b42      	ldr	r3, [pc, #264]	; (80025bc <ESP8266_HW_Init+0x128>)
 80024b2:	2205      	movs	r2, #5
 80024b4:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
		  wf._n_orig=UART_RX_items;
 80024b8:	4b41      	ldr	r3, [pc, #260]	; (80025c0 <ESP8266_HW_Init+0x12c>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a3f      	ldr	r2, [pc, #252]	; (80025bc <ESP8266_HW_Init+0x128>)
 80024be:	f8c2 3ce4 	str.w	r3, [r2, #3300]	; 0xce4

		  while(FT_String_ND(UART_RX_vect_hld,&wf._n_orig,"ready",&wf._n_fcomp,wf._uartRCVD_tok,&wf._n_tok,&ntestc,&wf._id_conn,&wf._overflowVector,FIND)!=1)
 80024c2:	e00e      	b.n	80024e2 <ESP8266_HW_Init+0x4e>
		  {
			  	  wf._n_orig=UART_RX_items;
 80024c4:	4b3e      	ldr	r3, [pc, #248]	; (80025c0 <ESP8266_HW_Init+0x12c>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a3c      	ldr	r2, [pc, #240]	; (80025bc <ESP8266_HW_Init+0x128>)
 80024ca:	f8c2 3ce4 	str.w	r3, [r2, #3300]	; 0xce4
			  	  if (ESP_ticks>=5000)
 80024ce:	4b3d      	ldr	r3, [pc, #244]	; (80025c4 <ESP8266_HW_Init+0x130>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f241 3287 	movw	r2, #4999	; 0x1387
 80024d6:	4293      	cmp	r3, r2
 80024d8:	dd03      	ble.n	80024e2 <ESP8266_HW_Init+0x4e>
			  		 {
			  		 ESP_InitF=1;
 80024da:	4b3b      	ldr	r3, [pc, #236]	; (80025c8 <ESP8266_HW_Init+0x134>)
 80024dc:	2201      	movs	r2, #1
 80024de:	701a      	strb	r2, [r3, #0]
			  		 break;
 80024e0:	e014      	b.n	800250c <ESP8266_HW_Init+0x78>
		  while(FT_String_ND(UART_RX_vect_hld,&wf._n_orig,"ready",&wf._n_fcomp,wf._uartRCVD_tok,&wf._n_tok,&ntestc,&wf._id_conn,&wf._overflowVector,FIND)!=1)
 80024e2:	4b3a      	ldr	r3, [pc, #232]	; (80025cc <ESP8266_HW_Init+0x138>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	9205      	str	r2, [sp, #20]
 80024e8:	9304      	str	r3, [sp, #16]
 80024ea:	4b39      	ldr	r3, [pc, #228]	; (80025d0 <ESP8266_HW_Init+0x13c>)
 80024ec:	9303      	str	r3, [sp, #12]
 80024ee:	4b39      	ldr	r3, [pc, #228]	; (80025d4 <ESP8266_HW_Init+0x140>)
 80024f0:	9302      	str	r3, [sp, #8]
 80024f2:	4b39      	ldr	r3, [pc, #228]	; (80025d8 <ESP8266_HW_Init+0x144>)
 80024f4:	9301      	str	r3, [sp, #4]
 80024f6:	4b39      	ldr	r3, [pc, #228]	; (80025dc <ESP8266_HW_Init+0x148>)
 80024f8:	9300      	str	r3, [sp, #0]
 80024fa:	4b39      	ldr	r3, [pc, #228]	; (80025e0 <ESP8266_HW_Init+0x14c>)
 80024fc:	4a39      	ldr	r2, [pc, #228]	; (80025e4 <ESP8266_HW_Init+0x150>)
 80024fe:	493a      	ldr	r1, [pc, #232]	; (80025e8 <ESP8266_HW_Init+0x154>)
 8002500:	483a      	ldr	r0, [pc, #232]	; (80025ec <ESP8266_HW_Init+0x158>)
 8002502:	f00b fe97 	bl	800e234 <FT_String_ND>
 8002506:	4603      	mov	r3, r0
 8002508:	2b01      	cmp	r3, #1
 800250a:	d1db      	bne.n	80024c4 <ESP8266_HW_Init+0x30>
			  		 }
		  }

		  if(ESP_InitF==0)	//Si encontró la sentencia anterior analizo la siguiente
 800250c:	4b2e      	ldr	r3, [pc, #184]	; (80025c8 <ESP8266_HW_Init+0x134>)
 800250e:	781b      	ldrb	r3, [r3, #0]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d12b      	bne.n	800256c <ESP8266_HW_Init+0xd8>
		  {
			  wf._n_fcomp=strlen("ready");
 8002514:	4b29      	ldr	r3, [pc, #164]	; (80025bc <ESP8266_HW_Init+0x128>)
 8002516:	2205      	movs	r2, #5
 8002518:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
			  wf._n_orig=UART_RX_items;
 800251c:	4b28      	ldr	r3, [pc, #160]	; (80025c0 <ESP8266_HW_Init+0x12c>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a26      	ldr	r2, [pc, #152]	; (80025bc <ESP8266_HW_Init+0x128>)
 8002522:	f8c2 3ce4 	str.w	r3, [r2, #3300]	; 0xce4
			  while(FT_String_ND(UART_RX_vect_hld,&wf._n_orig,"ready",&wf._n_fcomp,wf._uartRCVD_tok,&wf._n_tok,&ntestc,&wf._id_conn,&wf._overflowVector,FIND)!=1)
 8002526:	e00a      	b.n	800253e <ESP8266_HW_Init+0xaa>
			  {
				  wf._n_orig=UART_RX_items;
 8002528:	4b25      	ldr	r3, [pc, #148]	; (80025c0 <ESP8266_HW_Init+0x12c>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a23      	ldr	r2, [pc, #140]	; (80025bc <ESP8266_HW_Init+0x128>)
 800252e:	f8c2 3ce4 	str.w	r3, [r2, #3300]	; 0xce4
				  if (ESP_ticks>=5000)
 8002532:	4b24      	ldr	r3, [pc, #144]	; (80025c4 <ESP8266_HW_Init+0x130>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f241 3287 	movw	r2, #4999	; 0x1387
 800253a:	4293      	cmp	r3, r2
 800253c:	dc15      	bgt.n	800256a <ESP8266_HW_Init+0xd6>
			  while(FT_String_ND(UART_RX_vect_hld,&wf._n_orig,"ready",&wf._n_fcomp,wf._uartRCVD_tok,&wf._n_tok,&ntestc,&wf._id_conn,&wf._overflowVector,FIND)!=1)
 800253e:	4b23      	ldr	r3, [pc, #140]	; (80025cc <ESP8266_HW_Init+0x138>)
 8002540:	2200      	movs	r2, #0
 8002542:	9205      	str	r2, [sp, #20]
 8002544:	9304      	str	r3, [sp, #16]
 8002546:	4b22      	ldr	r3, [pc, #136]	; (80025d0 <ESP8266_HW_Init+0x13c>)
 8002548:	9303      	str	r3, [sp, #12]
 800254a:	4b22      	ldr	r3, [pc, #136]	; (80025d4 <ESP8266_HW_Init+0x140>)
 800254c:	9302      	str	r3, [sp, #8]
 800254e:	4b22      	ldr	r3, [pc, #136]	; (80025d8 <ESP8266_HW_Init+0x144>)
 8002550:	9301      	str	r3, [sp, #4]
 8002552:	4b22      	ldr	r3, [pc, #136]	; (80025dc <ESP8266_HW_Init+0x148>)
 8002554:	9300      	str	r3, [sp, #0]
 8002556:	4b22      	ldr	r3, [pc, #136]	; (80025e0 <ESP8266_HW_Init+0x14c>)
 8002558:	4a22      	ldr	r2, [pc, #136]	; (80025e4 <ESP8266_HW_Init+0x150>)
 800255a:	4923      	ldr	r1, [pc, #140]	; (80025e8 <ESP8266_HW_Init+0x154>)
 800255c:	4823      	ldr	r0, [pc, #140]	; (80025ec <ESP8266_HW_Init+0x158>)
 800255e:	f00b fe69 	bl	800e234 <FT_String_ND>
 8002562:	4603      	mov	r3, r0
 8002564:	2b01      	cmp	r3, #1
 8002566:	d1df      	bne.n	8002528 <ESP8266_HW_Init+0x94>
 8002568:	e000      	b.n	800256c <ESP8266_HW_Init+0xd8>
					 {
					 break;
 800256a:	bf00      	nop
					 }
			  }
		  }

		  if (ESP_ticks<5000)
 800256c:	4b15      	ldr	r3, [pc, #84]	; (80025c4 <ESP8266_HW_Init+0x130>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f241 3287 	movw	r2, #4999	; 0x1387
 8002574:	4293      	cmp	r3, r2
 8002576:	dc06      	bgt.n	8002586 <ESP8266_HW_Init+0xf2>
		  {
			  ESP_REinit=10;
 8002578:	4b1d      	ldr	r3, [pc, #116]	; (80025f0 <ESP8266_HW_Init+0x15c>)
 800257a:	220a      	movs	r2, #10
 800257c:	701a      	strb	r2, [r3, #0]
			  ESP_ticks=0;
 800257e:	4b11      	ldr	r3, [pc, #68]	; (80025c4 <ESP8266_HW_Init+0x130>)
 8002580:	2200      	movs	r2, #0
 8002582:	601a      	str	r2, [r3, #0]
 8002584:	e008      	b.n	8002598 <ESP8266_HW_Init+0x104>
		  }
		  else
		  {
			  ESP_REinit++;
 8002586:	4b1a      	ldr	r3, [pc, #104]	; (80025f0 <ESP8266_HW_Init+0x15c>)
 8002588:	781b      	ldrb	r3, [r3, #0]
 800258a:	3301      	adds	r3, #1
 800258c:	b2da      	uxtb	r2, r3
 800258e:	4b18      	ldr	r3, [pc, #96]	; (80025f0 <ESP8266_HW_Init+0x15c>)
 8002590:	701a      	strb	r2, [r3, #0]
			  ESP_ticks=0;
 8002592:	4b0c      	ldr	r3, [pc, #48]	; (80025c4 <ESP8266_HW_Init+0x130>)
 8002594:	2200      	movs	r2, #0
 8002596:	601a      	str	r2, [r3, #0]
		  }

	  } while (ESP_REinit<=5);
 8002598:	4b15      	ldr	r3, [pc, #84]	; (80025f0 <ESP8266_HW_Init+0x15c>)
 800259a:	781b      	ldrb	r3, [r3, #0]
 800259c:	2b05      	cmp	r3, #5
 800259e:	f67f af7d 	bls.w	800249c <ESP8266_HW_Init+0x8>

	  if(ESP_REinit==10)
 80025a2:	4b13      	ldr	r3, [pc, #76]	; (80025f0 <ESP8266_HW_Init+0x15c>)
 80025a4:	781b      	ldrb	r3, [r3, #0]
 80025a6:	2b0a      	cmp	r3, #10
 80025a8:	d101      	bne.n	80025ae <ESP8266_HW_Init+0x11a>
	  {
		  return(1);
 80025aa:	2301      	movs	r3, #1
 80025ac:	e000      	b.n	80025b0 <ESP8266_HW_Init+0x11c>
	  }
	  else
	  {
		  return(0);
 80025ae:	2300      	movs	r3, #0
	  }
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	3708      	adds	r7, #8
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}
 80025b8:	080101c4 	.word	0x080101c4
 80025bc:	20000b58 	.word	0x20000b58
 80025c0:	20004434 	.word	0x20004434
 80025c4:	2000443c 	.word	0x2000443c
 80025c8:	20003a12 	.word	0x20003a12
 80025cc:	200018ac 	.word	0x200018ac
 80025d0:	200015f0 	.word	0x200015f0
 80025d4:	2000444c 	.word	0x2000444c
 80025d8:	20001844 	.word	0x20001844
 80025dc:	200013f0 	.word	0x200013f0
 80025e0:	20001850 	.word	0x20001850
 80025e4:	080101d4 	.word	0x080101d4
 80025e8:	2000183c 	.word	0x2000183c
 80025ec:	20004024 	.word	0x20004024
 80025f0:	20003a11 	.word	0x20003a11

080025f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80025f4:	b480      	push	{r7}
 80025f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80025f8:	b672      	cpsid	i
}
 80025fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80025fc:	e7fe      	b.n	80025fc <Error_Handler+0x8>
	...

08002600 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002600:	b480      	push	{r7}
 8002602:	b083      	sub	sp, #12
 8002604:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002606:	2300      	movs	r3, #0
 8002608:	607b      	str	r3, [r7, #4]
 800260a:	4b10      	ldr	r3, [pc, #64]	; (800264c <HAL_MspInit+0x4c>)
 800260c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800260e:	4a0f      	ldr	r2, [pc, #60]	; (800264c <HAL_MspInit+0x4c>)
 8002610:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002614:	6453      	str	r3, [r2, #68]	; 0x44
 8002616:	4b0d      	ldr	r3, [pc, #52]	; (800264c <HAL_MspInit+0x4c>)
 8002618:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800261a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800261e:	607b      	str	r3, [r7, #4]
 8002620:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002622:	2300      	movs	r3, #0
 8002624:	603b      	str	r3, [r7, #0]
 8002626:	4b09      	ldr	r3, [pc, #36]	; (800264c <HAL_MspInit+0x4c>)
 8002628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800262a:	4a08      	ldr	r2, [pc, #32]	; (800264c <HAL_MspInit+0x4c>)
 800262c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002630:	6413      	str	r3, [r2, #64]	; 0x40
 8002632:	4b06      	ldr	r3, [pc, #24]	; (800264c <HAL_MspInit+0x4c>)
 8002634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002636:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800263a:	603b      	str	r3, [r7, #0]
 800263c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800263e:	bf00      	nop
 8002640:	370c      	adds	r7, #12
 8002642:	46bd      	mov	sp, r7
 8002644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002648:	4770      	bx	lr
 800264a:	bf00      	nop
 800264c:	40023800 	.word	0x40023800

08002650 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b08a      	sub	sp, #40	; 0x28
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002658:	f107 0314 	add.w	r3, r7, #20
 800265c:	2200      	movs	r2, #0
 800265e:	601a      	str	r2, [r3, #0]
 8002660:	605a      	str	r2, [r3, #4]
 8002662:	609a      	str	r2, [r3, #8]
 8002664:	60da      	str	r2, [r3, #12]
 8002666:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a19      	ldr	r2, [pc, #100]	; (80026d4 <HAL_SPI_MspInit+0x84>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d12b      	bne.n	80026ca <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002672:	2300      	movs	r3, #0
 8002674:	613b      	str	r3, [r7, #16]
 8002676:	4b18      	ldr	r3, [pc, #96]	; (80026d8 <HAL_SPI_MspInit+0x88>)
 8002678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800267a:	4a17      	ldr	r2, [pc, #92]	; (80026d8 <HAL_SPI_MspInit+0x88>)
 800267c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002680:	6453      	str	r3, [r2, #68]	; 0x44
 8002682:	4b15      	ldr	r3, [pc, #84]	; (80026d8 <HAL_SPI_MspInit+0x88>)
 8002684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002686:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800268a:	613b      	str	r3, [r7, #16]
 800268c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800268e:	2300      	movs	r3, #0
 8002690:	60fb      	str	r3, [r7, #12]
 8002692:	4b11      	ldr	r3, [pc, #68]	; (80026d8 <HAL_SPI_MspInit+0x88>)
 8002694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002696:	4a10      	ldr	r2, [pc, #64]	; (80026d8 <HAL_SPI_MspInit+0x88>)
 8002698:	f043 0301 	orr.w	r3, r3, #1
 800269c:	6313      	str	r3, [r2, #48]	; 0x30
 800269e:	4b0e      	ldr	r3, [pc, #56]	; (80026d8 <HAL_SPI_MspInit+0x88>)
 80026a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026a2:	f003 0301 	and.w	r3, r3, #1
 80026a6:	60fb      	str	r3, [r7, #12]
 80026a8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80026aa:	23e0      	movs	r3, #224	; 0xe0
 80026ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026ae:	2302      	movs	r3, #2
 80026b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026b2:	2300      	movs	r3, #0
 80026b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026b6:	2303      	movs	r3, #3
 80026b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80026ba:	2305      	movs	r3, #5
 80026bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026be:	f107 0314 	add.w	r3, r7, #20
 80026c2:	4619      	mov	r1, r3
 80026c4:	4805      	ldr	r0, [pc, #20]	; (80026dc <HAL_SPI_MspInit+0x8c>)
 80026c6:	f000 fd15 	bl	80030f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80026ca:	bf00      	nop
 80026cc:	3728      	adds	r7, #40	; 0x28
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	bf00      	nop
 80026d4:	40013000 	.word	0x40013000
 80026d8:	40023800 	.word	0x40023800
 80026dc:	40020000 	.word	0x40020000

080026e0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b084      	sub	sp, #16
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026f0:	d116      	bne.n	8002720 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80026f2:	2300      	movs	r3, #0
 80026f4:	60fb      	str	r3, [r7, #12]
 80026f6:	4b1a      	ldr	r3, [pc, #104]	; (8002760 <HAL_TIM_Base_MspInit+0x80>)
 80026f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fa:	4a19      	ldr	r2, [pc, #100]	; (8002760 <HAL_TIM_Base_MspInit+0x80>)
 80026fc:	f043 0301 	orr.w	r3, r3, #1
 8002700:	6413      	str	r3, [r2, #64]	; 0x40
 8002702:	4b17      	ldr	r3, [pc, #92]	; (8002760 <HAL_TIM_Base_MspInit+0x80>)
 8002704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002706:	f003 0301 	and.w	r3, r3, #1
 800270a:	60fb      	str	r3, [r7, #12]
 800270c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800270e:	2200      	movs	r2, #0
 8002710:	2100      	movs	r1, #0
 8002712:	201c      	movs	r0, #28
 8002714:	f000 fc17 	bl	8002f46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002718:	201c      	movs	r0, #28
 800271a:	f000 fc30 	bl	8002f7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800271e:	e01a      	b.n	8002756 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM3)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a0f      	ldr	r2, [pc, #60]	; (8002764 <HAL_TIM_Base_MspInit+0x84>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d115      	bne.n	8002756 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800272a:	2300      	movs	r3, #0
 800272c:	60bb      	str	r3, [r7, #8]
 800272e:	4b0c      	ldr	r3, [pc, #48]	; (8002760 <HAL_TIM_Base_MspInit+0x80>)
 8002730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002732:	4a0b      	ldr	r2, [pc, #44]	; (8002760 <HAL_TIM_Base_MspInit+0x80>)
 8002734:	f043 0302 	orr.w	r3, r3, #2
 8002738:	6413      	str	r3, [r2, #64]	; 0x40
 800273a:	4b09      	ldr	r3, [pc, #36]	; (8002760 <HAL_TIM_Base_MspInit+0x80>)
 800273c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800273e:	f003 0302 	and.w	r3, r3, #2
 8002742:	60bb      	str	r3, [r7, #8]
 8002744:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002746:	2200      	movs	r2, #0
 8002748:	2100      	movs	r1, #0
 800274a:	201d      	movs	r0, #29
 800274c:	f000 fbfb 	bl	8002f46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002750:	201d      	movs	r0, #29
 8002752:	f000 fc14 	bl	8002f7e <HAL_NVIC_EnableIRQ>
}
 8002756:	bf00      	nop
 8002758:	3710      	adds	r7, #16
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	40023800 	.word	0x40023800
 8002764:	40000400 	.word	0x40000400

08002768 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b08e      	sub	sp, #56	; 0x38
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002770:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002774:	2200      	movs	r2, #0
 8002776:	601a      	str	r2, [r3, #0]
 8002778:	605a      	str	r2, [r3, #4]
 800277a:	609a      	str	r2, [r3, #8]
 800277c:	60da      	str	r2, [r3, #12]
 800277e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a54      	ldr	r2, [pc, #336]	; (80028d8 <HAL_UART_MspInit+0x170>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d135      	bne.n	80027f6 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800278a:	2300      	movs	r3, #0
 800278c:	623b      	str	r3, [r7, #32]
 800278e:	4b53      	ldr	r3, [pc, #332]	; (80028dc <HAL_UART_MspInit+0x174>)
 8002790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002792:	4a52      	ldr	r2, [pc, #328]	; (80028dc <HAL_UART_MspInit+0x174>)
 8002794:	f043 0310 	orr.w	r3, r3, #16
 8002798:	6453      	str	r3, [r2, #68]	; 0x44
 800279a:	4b50      	ldr	r3, [pc, #320]	; (80028dc <HAL_UART_MspInit+0x174>)
 800279c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800279e:	f003 0310 	and.w	r3, r3, #16
 80027a2:	623b      	str	r3, [r7, #32]
 80027a4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027a6:	2300      	movs	r3, #0
 80027a8:	61fb      	str	r3, [r7, #28]
 80027aa:	4b4c      	ldr	r3, [pc, #304]	; (80028dc <HAL_UART_MspInit+0x174>)
 80027ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ae:	4a4b      	ldr	r2, [pc, #300]	; (80028dc <HAL_UART_MspInit+0x174>)
 80027b0:	f043 0301 	orr.w	r3, r3, #1
 80027b4:	6313      	str	r3, [r2, #48]	; 0x30
 80027b6:	4b49      	ldr	r3, [pc, #292]	; (80028dc <HAL_UART_MspInit+0x174>)
 80027b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ba:	f003 0301 	and.w	r3, r3, #1
 80027be:	61fb      	str	r3, [r7, #28]
 80027c0:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USART1_TX_WF_Pin|USART1_RX_WF_Pin;
 80027c2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80027c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027c8:	2302      	movs	r3, #2
 80027ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027cc:	2300      	movs	r3, #0
 80027ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027d0:	2303      	movs	r3, #3
 80027d2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80027d4:	2307      	movs	r3, #7
 80027d6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027dc:	4619      	mov	r1, r3
 80027de:	4840      	ldr	r0, [pc, #256]	; (80028e0 <HAL_UART_MspInit+0x178>)
 80027e0:	f000 fc88 	bl	80030f4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80027e4:	2200      	movs	r2, #0
 80027e6:	2100      	movs	r1, #0
 80027e8:	2025      	movs	r0, #37	; 0x25
 80027ea:	f000 fbac 	bl	8002f46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80027ee:	2025      	movs	r0, #37	; 0x25
 80027f0:	f000 fbc5 	bl	8002f7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80027f4:	e06b      	b.n	80028ce <HAL_UART_MspInit+0x166>
  else if(huart->Instance==USART2)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a3a      	ldr	r2, [pc, #232]	; (80028e4 <HAL_UART_MspInit+0x17c>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d134      	bne.n	800286a <HAL_UART_MspInit+0x102>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002800:	2300      	movs	r3, #0
 8002802:	61bb      	str	r3, [r7, #24]
 8002804:	4b35      	ldr	r3, [pc, #212]	; (80028dc <HAL_UART_MspInit+0x174>)
 8002806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002808:	4a34      	ldr	r2, [pc, #208]	; (80028dc <HAL_UART_MspInit+0x174>)
 800280a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800280e:	6413      	str	r3, [r2, #64]	; 0x40
 8002810:	4b32      	ldr	r3, [pc, #200]	; (80028dc <HAL_UART_MspInit+0x174>)
 8002812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002814:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002818:	61bb      	str	r3, [r7, #24]
 800281a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800281c:	2300      	movs	r3, #0
 800281e:	617b      	str	r3, [r7, #20]
 8002820:	4b2e      	ldr	r3, [pc, #184]	; (80028dc <HAL_UART_MspInit+0x174>)
 8002822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002824:	4a2d      	ldr	r2, [pc, #180]	; (80028dc <HAL_UART_MspInit+0x174>)
 8002826:	f043 0301 	orr.w	r3, r3, #1
 800282a:	6313      	str	r3, [r2, #48]	; 0x30
 800282c:	4b2b      	ldr	r3, [pc, #172]	; (80028dc <HAL_UART_MspInit+0x174>)
 800282e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002830:	f003 0301 	and.w	r3, r3, #1
 8002834:	617b      	str	r3, [r7, #20]
 8002836:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART2_TX_LR_Pin|USART2_RX_LR_Pin;
 8002838:	230c      	movs	r3, #12
 800283a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800283c:	2302      	movs	r3, #2
 800283e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002840:	2300      	movs	r3, #0
 8002842:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002844:	2303      	movs	r3, #3
 8002846:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002848:	2307      	movs	r3, #7
 800284a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800284c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002850:	4619      	mov	r1, r3
 8002852:	4823      	ldr	r0, [pc, #140]	; (80028e0 <HAL_UART_MspInit+0x178>)
 8002854:	f000 fc4e 	bl	80030f4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002858:	2200      	movs	r2, #0
 800285a:	2100      	movs	r1, #0
 800285c:	2026      	movs	r0, #38	; 0x26
 800285e:	f000 fb72 	bl	8002f46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002862:	2026      	movs	r0, #38	; 0x26
 8002864:	f000 fb8b 	bl	8002f7e <HAL_NVIC_EnableIRQ>
}
 8002868:	e031      	b.n	80028ce <HAL_UART_MspInit+0x166>
  else if(huart->Instance==USART6)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a1e      	ldr	r2, [pc, #120]	; (80028e8 <HAL_UART_MspInit+0x180>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d12c      	bne.n	80028ce <HAL_UART_MspInit+0x166>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002874:	2300      	movs	r3, #0
 8002876:	613b      	str	r3, [r7, #16]
 8002878:	4b18      	ldr	r3, [pc, #96]	; (80028dc <HAL_UART_MspInit+0x174>)
 800287a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800287c:	4a17      	ldr	r2, [pc, #92]	; (80028dc <HAL_UART_MspInit+0x174>)
 800287e:	f043 0320 	orr.w	r3, r3, #32
 8002882:	6453      	str	r3, [r2, #68]	; 0x44
 8002884:	4b15      	ldr	r3, [pc, #84]	; (80028dc <HAL_UART_MspInit+0x174>)
 8002886:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002888:	f003 0320 	and.w	r3, r3, #32
 800288c:	613b      	str	r3, [r7, #16]
 800288e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002890:	2300      	movs	r3, #0
 8002892:	60fb      	str	r3, [r7, #12]
 8002894:	4b11      	ldr	r3, [pc, #68]	; (80028dc <HAL_UART_MspInit+0x174>)
 8002896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002898:	4a10      	ldr	r2, [pc, #64]	; (80028dc <HAL_UART_MspInit+0x174>)
 800289a:	f043 0301 	orr.w	r3, r3, #1
 800289e:	6313      	str	r3, [r2, #48]	; 0x30
 80028a0:	4b0e      	ldr	r3, [pc, #56]	; (80028dc <HAL_UART_MspInit+0x174>)
 80028a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a4:	f003 0301 	and.w	r3, r3, #1
 80028a8:	60fb      	str	r3, [r7, #12]
 80028aa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80028ac:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80028b0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028b2:	2302      	movs	r3, #2
 80028b4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028b6:	2300      	movs	r3, #0
 80028b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028ba:	2303      	movs	r3, #3
 80028bc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80028be:	2308      	movs	r3, #8
 80028c0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028c6:	4619      	mov	r1, r3
 80028c8:	4805      	ldr	r0, [pc, #20]	; (80028e0 <HAL_UART_MspInit+0x178>)
 80028ca:	f000 fc13 	bl	80030f4 <HAL_GPIO_Init>
}
 80028ce:	bf00      	nop
 80028d0:	3738      	adds	r7, #56	; 0x38
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}
 80028d6:	bf00      	nop
 80028d8:	40011000 	.word	0x40011000
 80028dc:	40023800 	.word	0x40023800
 80028e0:	40020000 	.word	0x40020000
 80028e4:	40004400 	.word	0x40004400
 80028e8:	40011400 	.word	0x40011400

080028ec <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b082      	sub	sp, #8
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a1c      	ldr	r2, [pc, #112]	; (800296c <HAL_UART_MspDeInit+0x80>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d10e      	bne.n	800291c <HAL_UART_MspDeInit+0x30>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 80028fe:	4b1c      	ldr	r3, [pc, #112]	; (8002970 <HAL_UART_MspDeInit+0x84>)
 8002900:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002902:	4a1b      	ldr	r2, [pc, #108]	; (8002970 <HAL_UART_MspDeInit+0x84>)
 8002904:	f023 0310 	bic.w	r3, r3, #16
 8002908:	6453      	str	r3, [r2, #68]	; 0x44

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, USART1_TX_WF_Pin|USART1_RX_WF_Pin);
 800290a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800290e:	4819      	ldr	r0, [pc, #100]	; (8002974 <HAL_UART_MspDeInit+0x88>)
 8002910:	f000 fd74 	bl	80033fc <HAL_GPIO_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8002914:	2025      	movs	r0, #37	; 0x25
 8002916:	f000 fb40 	bl	8002f9a <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART6_MspDeInit 1 */

  /* USER CODE END USART6_MspDeInit 1 */
  }

}
 800291a:	e022      	b.n	8002962 <HAL_UART_MspDeInit+0x76>
  else if(huart->Instance==USART2)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a15      	ldr	r2, [pc, #84]	; (8002978 <HAL_UART_MspDeInit+0x8c>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d10d      	bne.n	8002942 <HAL_UART_MspDeInit+0x56>
    __HAL_RCC_USART2_CLK_DISABLE();
 8002926:	4b12      	ldr	r3, [pc, #72]	; (8002970 <HAL_UART_MspDeInit+0x84>)
 8002928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800292a:	4a11      	ldr	r2, [pc, #68]	; (8002970 <HAL_UART_MspDeInit+0x84>)
 800292c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002930:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOA, USART2_TX_LR_Pin|USART2_RX_LR_Pin);
 8002932:	210c      	movs	r1, #12
 8002934:	480f      	ldr	r0, [pc, #60]	; (8002974 <HAL_UART_MspDeInit+0x88>)
 8002936:	f000 fd61 	bl	80033fc <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 800293a:	2026      	movs	r0, #38	; 0x26
 800293c:	f000 fb2d 	bl	8002f9a <HAL_NVIC_DisableIRQ>
}
 8002940:	e00f      	b.n	8002962 <HAL_UART_MspDeInit+0x76>
  else if(huart->Instance==USART6)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a0d      	ldr	r2, [pc, #52]	; (800297c <HAL_UART_MspDeInit+0x90>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d10a      	bne.n	8002962 <HAL_UART_MspDeInit+0x76>
    __HAL_RCC_USART6_CLK_DISABLE();
 800294c:	4b08      	ldr	r3, [pc, #32]	; (8002970 <HAL_UART_MspDeInit+0x84>)
 800294e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002950:	4a07      	ldr	r2, [pc, #28]	; (8002970 <HAL_UART_MspDeInit+0x84>)
 8002952:	f023 0320 	bic.w	r3, r3, #32
 8002956:	6453      	str	r3, [r2, #68]	; 0x44
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_11|GPIO_PIN_12);
 8002958:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800295c:	4805      	ldr	r0, [pc, #20]	; (8002974 <HAL_UART_MspDeInit+0x88>)
 800295e:	f000 fd4d 	bl	80033fc <HAL_GPIO_DeInit>
}
 8002962:	bf00      	nop
 8002964:	3708      	adds	r7, #8
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}
 800296a:	bf00      	nop
 800296c:	40011000 	.word	0x40011000
 8002970:	40023800 	.word	0x40023800
 8002974:	40020000 	.word	0x40020000
 8002978:	40004400 	.word	0x40004400
 800297c:	40011400 	.word	0x40011400

08002980 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002980:	b480      	push	{r7}
 8002982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002984:	e7fe      	b.n	8002984 <NMI_Handler+0x4>

08002986 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002986:	b480      	push	{r7}
 8002988:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800298a:	e7fe      	b.n	800298a <HardFault_Handler+0x4>

0800298c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800298c:	b480      	push	{r7}
 800298e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002990:	e7fe      	b.n	8002990 <MemManage_Handler+0x4>

08002992 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002992:	b480      	push	{r7}
 8002994:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002996:	e7fe      	b.n	8002996 <BusFault_Handler+0x4>

08002998 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002998:	b480      	push	{r7}
 800299a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800299c:	e7fe      	b.n	800299c <UsageFault_Handler+0x4>

0800299e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800299e:	b480      	push	{r7}
 80029a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80029a2:	bf00      	nop
 80029a4:	46bd      	mov	sp, r7
 80029a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029aa:	4770      	bx	lr

080029ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80029ac:	b480      	push	{r7}
 80029ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80029b0:	bf00      	nop
 80029b2:	46bd      	mov	sp, r7
 80029b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b8:	4770      	bx	lr

080029ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80029ba:	b480      	push	{r7}
 80029bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80029be:	bf00      	nop
 80029c0:	46bd      	mov	sp, r7
 80029c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c6:	4770      	bx	lr

080029c8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80029cc:	4802      	ldr	r0, [pc, #8]	; (80029d8 <TIM2_IRQHandler+0x10>)
 80029ce:	f002 f82d 	bl	8004a2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80029d2:	bf00      	nop
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	200001ec 	.word	0x200001ec

080029dc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80029e0:	4802      	ldr	r0, [pc, #8]	; (80029ec <TIM3_IRQHandler+0x10>)
 80029e2:	f002 f823 	bl	8004a2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80029e6:	bf00      	nop
 80029e8:	bd80      	pop	{r7, pc}
 80029ea:	bf00      	nop
 80029ec:	20000234 	.word	0x20000234

080029f0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80029f4:	4802      	ldr	r0, [pc, #8]	; (8002a00 <USART1_IRQHandler+0x10>)
 80029f6:	f002 ff3f 	bl	8005878 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80029fa:	bf00      	nop
 80029fc:	bd80      	pop	{r7, pc}
 80029fe:	bf00      	nop
 8002a00:	2000027c 	.word	0x2000027c

08002a04 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002a08:	4802      	ldr	r0, [pc, #8]	; (8002a14 <USART2_IRQHandler+0x10>)
 8002a0a:	f002 ff35 	bl	8005878 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002a0e:	bf00      	nop
 8002a10:	bd80      	pop	{r7, pc}
 8002a12:	bf00      	nop
 8002a14:	200002c0 	.word	0x200002c0

08002a18 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	af00      	add	r7, sp, #0
	return 1;
 8002a1c:	2301      	movs	r3, #1
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	46bd      	mov	sp, r7
 8002a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a26:	4770      	bx	lr

08002a28 <_kill>:

int _kill(int pid, int sig)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b082      	sub	sp, #8
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
 8002a30:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002a32:	f00c fa83 	bl	800ef3c <__errno>
 8002a36:	4603      	mov	r3, r0
 8002a38:	2216      	movs	r2, #22
 8002a3a:	601a      	str	r2, [r3, #0]
	return -1;
 8002a3c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	3708      	adds	r7, #8
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}

08002a48 <_exit>:

void _exit (int status)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b082      	sub	sp, #8
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002a50:	f04f 31ff 	mov.w	r1, #4294967295
 8002a54:	6878      	ldr	r0, [r7, #4]
 8002a56:	f7ff ffe7 	bl	8002a28 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002a5a:	e7fe      	b.n	8002a5a <_exit+0x12>

08002a5c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b086      	sub	sp, #24
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	60f8      	str	r0, [r7, #12]
 8002a64:	60b9      	str	r1, [r7, #8]
 8002a66:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a68:	2300      	movs	r3, #0
 8002a6a:	617b      	str	r3, [r7, #20]
 8002a6c:	e00a      	b.n	8002a84 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002a6e:	f3af 8000 	nop.w
 8002a72:	4601      	mov	r1, r0
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	1c5a      	adds	r2, r3, #1
 8002a78:	60ba      	str	r2, [r7, #8]
 8002a7a:	b2ca      	uxtb	r2, r1
 8002a7c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	3301      	adds	r3, #1
 8002a82:	617b      	str	r3, [r7, #20]
 8002a84:	697a      	ldr	r2, [r7, #20]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	429a      	cmp	r2, r3
 8002a8a:	dbf0      	blt.n	8002a6e <_read+0x12>
	}

return len;
 8002a8c:	687b      	ldr	r3, [r7, #4]
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	3718      	adds	r7, #24
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}

08002a96 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002a96:	b580      	push	{r7, lr}
 8002a98:	b086      	sub	sp, #24
 8002a9a:	af00      	add	r7, sp, #0
 8002a9c:	60f8      	str	r0, [r7, #12]
 8002a9e:	60b9      	str	r1, [r7, #8]
 8002aa0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	617b      	str	r3, [r7, #20]
 8002aa6:	e009      	b.n	8002abc <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	1c5a      	adds	r2, r3, #1
 8002aac:	60ba      	str	r2, [r7, #8]
 8002aae:	781b      	ldrb	r3, [r3, #0]
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	3301      	adds	r3, #1
 8002aba:	617b      	str	r3, [r7, #20]
 8002abc:	697a      	ldr	r2, [r7, #20]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	dbf1      	blt.n	8002aa8 <_write+0x12>
	}
	return len;
 8002ac4:	687b      	ldr	r3, [r7, #4]
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	3718      	adds	r7, #24
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}

08002ace <_close>:

int _close(int file)
{
 8002ace:	b480      	push	{r7}
 8002ad0:	b083      	sub	sp, #12
 8002ad2:	af00      	add	r7, sp, #0
 8002ad4:	6078      	str	r0, [r7, #4]
	return -1;
 8002ad6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	370c      	adds	r7, #12
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae4:	4770      	bx	lr

08002ae6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002ae6:	b480      	push	{r7}
 8002ae8:	b083      	sub	sp, #12
 8002aea:	af00      	add	r7, sp, #0
 8002aec:	6078      	str	r0, [r7, #4]
 8002aee:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002af6:	605a      	str	r2, [r3, #4]
	return 0;
 8002af8:	2300      	movs	r3, #0
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	370c      	adds	r7, #12
 8002afe:	46bd      	mov	sp, r7
 8002b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b04:	4770      	bx	lr

08002b06 <_isatty>:

int _isatty(int file)
{
 8002b06:	b480      	push	{r7}
 8002b08:	b083      	sub	sp, #12
 8002b0a:	af00      	add	r7, sp, #0
 8002b0c:	6078      	str	r0, [r7, #4]
	return 1;
 8002b0e:	2301      	movs	r3, #1
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	370c      	adds	r7, #12
 8002b14:	46bd      	mov	sp, r7
 8002b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1a:	4770      	bx	lr

08002b1c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b085      	sub	sp, #20
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	60f8      	str	r0, [r7, #12]
 8002b24:	60b9      	str	r1, [r7, #8]
 8002b26:	607a      	str	r2, [r7, #4]
	return 0;
 8002b28:	2300      	movs	r3, #0
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	3714      	adds	r7, #20
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b34:	4770      	bx	lr
	...

08002b38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b086      	sub	sp, #24
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b40:	4a14      	ldr	r2, [pc, #80]	; (8002b94 <_sbrk+0x5c>)
 8002b42:	4b15      	ldr	r3, [pc, #84]	; (8002b98 <_sbrk+0x60>)
 8002b44:	1ad3      	subs	r3, r2, r3
 8002b46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b4c:	4b13      	ldr	r3, [pc, #76]	; (8002b9c <_sbrk+0x64>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d102      	bne.n	8002b5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002b54:	4b11      	ldr	r3, [pc, #68]	; (8002b9c <_sbrk+0x64>)
 8002b56:	4a12      	ldr	r2, [pc, #72]	; (8002ba0 <_sbrk+0x68>)
 8002b58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002b5a:	4b10      	ldr	r3, [pc, #64]	; (8002b9c <_sbrk+0x64>)
 8002b5c:	681a      	ldr	r2, [r3, #0]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	4413      	add	r3, r2
 8002b62:	693a      	ldr	r2, [r7, #16]
 8002b64:	429a      	cmp	r2, r3
 8002b66:	d207      	bcs.n	8002b78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002b68:	f00c f9e8 	bl	800ef3c <__errno>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	220c      	movs	r2, #12
 8002b70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002b72:	f04f 33ff 	mov.w	r3, #4294967295
 8002b76:	e009      	b.n	8002b8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002b78:	4b08      	ldr	r3, [pc, #32]	; (8002b9c <_sbrk+0x64>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002b7e:	4b07      	ldr	r3, [pc, #28]	; (8002b9c <_sbrk+0x64>)
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	4413      	add	r3, r2
 8002b86:	4a05      	ldr	r2, [pc, #20]	; (8002b9c <_sbrk+0x64>)
 8002b88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	3718      	adds	r7, #24
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}
 8002b94:	20020000 	.word	0x20020000
 8002b98:	00000400 	.word	0x00000400
 8002b9c:	2000446c 	.word	0x2000446c
 8002ba0:	200045c0 	.word	0x200045c0

08002ba4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002ba8:	4b06      	ldr	r3, [pc, #24]	; (8002bc4 <SystemInit+0x20>)
 8002baa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bae:	4a05      	ldr	r2, [pc, #20]	; (8002bc4 <SystemInit+0x20>)
 8002bb0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002bb4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002bb8:	bf00      	nop
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc0:	4770      	bx	lr
 8002bc2:	bf00      	nop
 8002bc4:	e000ed00 	.word	0xe000ed00

08002bc8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002bc8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002c00 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002bcc:	480d      	ldr	r0, [pc, #52]	; (8002c04 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002bce:	490e      	ldr	r1, [pc, #56]	; (8002c08 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002bd0:	4a0e      	ldr	r2, [pc, #56]	; (8002c0c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002bd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002bd4:	e002      	b.n	8002bdc <LoopCopyDataInit>

08002bd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002bd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002bd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002bda:	3304      	adds	r3, #4

08002bdc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002bdc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002bde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002be0:	d3f9      	bcc.n	8002bd6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002be2:	4a0b      	ldr	r2, [pc, #44]	; (8002c10 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002be4:	4c0b      	ldr	r4, [pc, #44]	; (8002c14 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002be6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002be8:	e001      	b.n	8002bee <LoopFillZerobss>

08002bea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002bea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002bec:	3204      	adds	r2, #4

08002bee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002bee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002bf0:	d3fb      	bcc.n	8002bea <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002bf2:	f7ff ffd7 	bl	8002ba4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002bf6:	f00c f9a7 	bl	800ef48 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002bfa:	f7fd fd4b 	bl	8000694 <main>
  bx  lr    
 8002bfe:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002c00:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002c04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c08:	20000178 	.word	0x20000178
  ldr r2, =_sidata
 8002c0c:	0801093c 	.word	0x0801093c
  ldr r2, =_sbss
 8002c10:	20000178 	.word	0x20000178
  ldr r4, =_ebss
 8002c14:	200045c0 	.word	0x200045c0

08002c18 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002c18:	e7fe      	b.n	8002c18 <ADC_IRQHandler>
	...

08002c1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002c20:	4b0e      	ldr	r3, [pc, #56]	; (8002c5c <HAL_Init+0x40>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a0d      	ldr	r2, [pc, #52]	; (8002c5c <HAL_Init+0x40>)
 8002c26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c2a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002c2c:	4b0b      	ldr	r3, [pc, #44]	; (8002c5c <HAL_Init+0x40>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a0a      	ldr	r2, [pc, #40]	; (8002c5c <HAL_Init+0x40>)
 8002c32:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c36:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c38:	4b08      	ldr	r3, [pc, #32]	; (8002c5c <HAL_Init+0x40>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a07      	ldr	r2, [pc, #28]	; (8002c5c <HAL_Init+0x40>)
 8002c3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c42:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c44:	2003      	movs	r0, #3
 8002c46:	f000 f973 	bl	8002f30 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002c4a:	200f      	movs	r0, #15
 8002c4c:	f000 f808 	bl	8002c60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002c50:	f7ff fcd6 	bl	8002600 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c54:	2300      	movs	r3, #0
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	bf00      	nop
 8002c5c:	40023c00 	.word	0x40023c00

08002c60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b082      	sub	sp, #8
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002c68:	4b12      	ldr	r3, [pc, #72]	; (8002cb4 <HAL_InitTick+0x54>)
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	4b12      	ldr	r3, [pc, #72]	; (8002cb8 <HAL_InitTick+0x58>)
 8002c6e:	781b      	ldrb	r3, [r3, #0]
 8002c70:	4619      	mov	r1, r3
 8002c72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c76:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f000 f999 	bl	8002fb6 <HAL_SYSTICK_Config>
 8002c84:	4603      	mov	r3, r0
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d001      	beq.n	8002c8e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e00e      	b.n	8002cac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2b0f      	cmp	r3, #15
 8002c92:	d80a      	bhi.n	8002caa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c94:	2200      	movs	r2, #0
 8002c96:	6879      	ldr	r1, [r7, #4]
 8002c98:	f04f 30ff 	mov.w	r0, #4294967295
 8002c9c:	f000 f953 	bl	8002f46 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ca0:	4a06      	ldr	r2, [pc, #24]	; (8002cbc <HAL_InitTick+0x5c>)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	e000      	b.n	8002cac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	3708      	adds	r7, #8
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}
 8002cb4:	20000084 	.word	0x20000084
 8002cb8:	2000008c 	.word	0x2000008c
 8002cbc:	20000088 	.word	0x20000088

08002cc0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002cc4:	4b06      	ldr	r3, [pc, #24]	; (8002ce0 <HAL_IncTick+0x20>)
 8002cc6:	781b      	ldrb	r3, [r3, #0]
 8002cc8:	461a      	mov	r2, r3
 8002cca:	4b06      	ldr	r3, [pc, #24]	; (8002ce4 <HAL_IncTick+0x24>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4413      	add	r3, r2
 8002cd0:	4a04      	ldr	r2, [pc, #16]	; (8002ce4 <HAL_IncTick+0x24>)
 8002cd2:	6013      	str	r3, [r2, #0]
}
 8002cd4:	bf00      	nop
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cdc:	4770      	bx	lr
 8002cde:	bf00      	nop
 8002ce0:	2000008c 	.word	0x2000008c
 8002ce4:	20004470 	.word	0x20004470

08002ce8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	af00      	add	r7, sp, #0
  return uwTick;
 8002cec:	4b03      	ldr	r3, [pc, #12]	; (8002cfc <HAL_GetTick+0x14>)
 8002cee:	681b      	ldr	r3, [r3, #0]
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf8:	4770      	bx	lr
 8002cfa:	bf00      	nop
 8002cfc:	20004470 	.word	0x20004470

08002d00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b084      	sub	sp, #16
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d08:	f7ff ffee 	bl	8002ce8 <HAL_GetTick>
 8002d0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d18:	d005      	beq.n	8002d26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d1a:	4b0a      	ldr	r3, [pc, #40]	; (8002d44 <HAL_Delay+0x44>)
 8002d1c:	781b      	ldrb	r3, [r3, #0]
 8002d1e:	461a      	mov	r2, r3
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	4413      	add	r3, r2
 8002d24:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002d26:	bf00      	nop
 8002d28:	f7ff ffde 	bl	8002ce8 <HAL_GetTick>
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	68bb      	ldr	r3, [r7, #8]
 8002d30:	1ad3      	subs	r3, r2, r3
 8002d32:	68fa      	ldr	r2, [r7, #12]
 8002d34:	429a      	cmp	r2, r3
 8002d36:	d8f7      	bhi.n	8002d28 <HAL_Delay+0x28>
  {
  }
}
 8002d38:	bf00      	nop
 8002d3a:	bf00      	nop
 8002d3c:	3710      	adds	r7, #16
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}
 8002d42:	bf00      	nop
 8002d44:	2000008c 	.word	0x2000008c

08002d48 <__NVIC_SetPriorityGrouping>:
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b085      	sub	sp, #20
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	f003 0307 	and.w	r3, r3, #7
 8002d56:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d58:	4b0c      	ldr	r3, [pc, #48]	; (8002d8c <__NVIC_SetPriorityGrouping+0x44>)
 8002d5a:	68db      	ldr	r3, [r3, #12]
 8002d5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d5e:	68ba      	ldr	r2, [r7, #8]
 8002d60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d64:	4013      	ands	r3, r2
 8002d66:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d7a:	4a04      	ldr	r2, [pc, #16]	; (8002d8c <__NVIC_SetPriorityGrouping+0x44>)
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	60d3      	str	r3, [r2, #12]
}
 8002d80:	bf00      	nop
 8002d82:	3714      	adds	r7, #20
 8002d84:	46bd      	mov	sp, r7
 8002d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8a:	4770      	bx	lr
 8002d8c:	e000ed00 	.word	0xe000ed00

08002d90 <__NVIC_GetPriorityGrouping>:
{
 8002d90:	b480      	push	{r7}
 8002d92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d94:	4b04      	ldr	r3, [pc, #16]	; (8002da8 <__NVIC_GetPriorityGrouping+0x18>)
 8002d96:	68db      	ldr	r3, [r3, #12]
 8002d98:	0a1b      	lsrs	r3, r3, #8
 8002d9a:	f003 0307 	and.w	r3, r3, #7
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	46bd      	mov	sp, r7
 8002da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da6:	4770      	bx	lr
 8002da8:	e000ed00 	.word	0xe000ed00

08002dac <__NVIC_EnableIRQ>:
{
 8002dac:	b480      	push	{r7}
 8002dae:	b083      	sub	sp, #12
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	4603      	mov	r3, r0
 8002db4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002db6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	db0b      	blt.n	8002dd6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002dbe:	79fb      	ldrb	r3, [r7, #7]
 8002dc0:	f003 021f 	and.w	r2, r3, #31
 8002dc4:	4907      	ldr	r1, [pc, #28]	; (8002de4 <__NVIC_EnableIRQ+0x38>)
 8002dc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dca:	095b      	lsrs	r3, r3, #5
 8002dcc:	2001      	movs	r0, #1
 8002dce:	fa00 f202 	lsl.w	r2, r0, r2
 8002dd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002dd6:	bf00      	nop
 8002dd8:	370c      	adds	r7, #12
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de0:	4770      	bx	lr
 8002de2:	bf00      	nop
 8002de4:	e000e100 	.word	0xe000e100

08002de8 <__NVIC_DisableIRQ>:
{
 8002de8:	b480      	push	{r7}
 8002dea:	b083      	sub	sp, #12
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	4603      	mov	r3, r0
 8002df0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002df2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	db12      	blt.n	8002e20 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002dfa:	79fb      	ldrb	r3, [r7, #7]
 8002dfc:	f003 021f 	and.w	r2, r3, #31
 8002e00:	490a      	ldr	r1, [pc, #40]	; (8002e2c <__NVIC_DisableIRQ+0x44>)
 8002e02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e06:	095b      	lsrs	r3, r3, #5
 8002e08:	2001      	movs	r0, #1
 8002e0a:	fa00 f202 	lsl.w	r2, r0, r2
 8002e0e:	3320      	adds	r3, #32
 8002e10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002e14:	f3bf 8f4f 	dsb	sy
}
 8002e18:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002e1a:	f3bf 8f6f 	isb	sy
}
 8002e1e:	bf00      	nop
}
 8002e20:	bf00      	nop
 8002e22:	370c      	adds	r7, #12
 8002e24:	46bd      	mov	sp, r7
 8002e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2a:	4770      	bx	lr
 8002e2c:	e000e100 	.word	0xe000e100

08002e30 <__NVIC_SetPriority>:
{
 8002e30:	b480      	push	{r7}
 8002e32:	b083      	sub	sp, #12
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	4603      	mov	r3, r0
 8002e38:	6039      	str	r1, [r7, #0]
 8002e3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	db0a      	blt.n	8002e5a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	b2da      	uxtb	r2, r3
 8002e48:	490c      	ldr	r1, [pc, #48]	; (8002e7c <__NVIC_SetPriority+0x4c>)
 8002e4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e4e:	0112      	lsls	r2, r2, #4
 8002e50:	b2d2      	uxtb	r2, r2
 8002e52:	440b      	add	r3, r1
 8002e54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002e58:	e00a      	b.n	8002e70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	b2da      	uxtb	r2, r3
 8002e5e:	4908      	ldr	r1, [pc, #32]	; (8002e80 <__NVIC_SetPriority+0x50>)
 8002e60:	79fb      	ldrb	r3, [r7, #7]
 8002e62:	f003 030f 	and.w	r3, r3, #15
 8002e66:	3b04      	subs	r3, #4
 8002e68:	0112      	lsls	r2, r2, #4
 8002e6a:	b2d2      	uxtb	r2, r2
 8002e6c:	440b      	add	r3, r1
 8002e6e:	761a      	strb	r2, [r3, #24]
}
 8002e70:	bf00      	nop
 8002e72:	370c      	adds	r7, #12
 8002e74:	46bd      	mov	sp, r7
 8002e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7a:	4770      	bx	lr
 8002e7c:	e000e100 	.word	0xe000e100
 8002e80:	e000ed00 	.word	0xe000ed00

08002e84 <NVIC_EncodePriority>:
{
 8002e84:	b480      	push	{r7}
 8002e86:	b089      	sub	sp, #36	; 0x24
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	60f8      	str	r0, [r7, #12]
 8002e8c:	60b9      	str	r1, [r7, #8]
 8002e8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	f003 0307 	and.w	r3, r3, #7
 8002e96:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e98:	69fb      	ldr	r3, [r7, #28]
 8002e9a:	f1c3 0307 	rsb	r3, r3, #7
 8002e9e:	2b04      	cmp	r3, #4
 8002ea0:	bf28      	it	cs
 8002ea2:	2304      	movcs	r3, #4
 8002ea4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ea6:	69fb      	ldr	r3, [r7, #28]
 8002ea8:	3304      	adds	r3, #4
 8002eaa:	2b06      	cmp	r3, #6
 8002eac:	d902      	bls.n	8002eb4 <NVIC_EncodePriority+0x30>
 8002eae:	69fb      	ldr	r3, [r7, #28]
 8002eb0:	3b03      	subs	r3, #3
 8002eb2:	e000      	b.n	8002eb6 <NVIC_EncodePriority+0x32>
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002eb8:	f04f 32ff 	mov.w	r2, #4294967295
 8002ebc:	69bb      	ldr	r3, [r7, #24]
 8002ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec2:	43da      	mvns	r2, r3
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	401a      	ands	r2, r3
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ecc:	f04f 31ff 	mov.w	r1, #4294967295
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ed6:	43d9      	mvns	r1, r3
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002edc:	4313      	orrs	r3, r2
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	3724      	adds	r7, #36	; 0x24
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee8:	4770      	bx	lr
	...

08002eec <SysTick_Config>:
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b082      	sub	sp, #8
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	3b01      	subs	r3, #1
 8002ef8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002efc:	d301      	bcc.n	8002f02 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8002efe:	2301      	movs	r3, #1
 8002f00:	e00f      	b.n	8002f22 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f02:	4a0a      	ldr	r2, [pc, #40]	; (8002f2c <SysTick_Config+0x40>)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	3b01      	subs	r3, #1
 8002f08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f0a:	210f      	movs	r1, #15
 8002f0c:	f04f 30ff 	mov.w	r0, #4294967295
 8002f10:	f7ff ff8e 	bl	8002e30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f14:	4b05      	ldr	r3, [pc, #20]	; (8002f2c <SysTick_Config+0x40>)
 8002f16:	2200      	movs	r2, #0
 8002f18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f1a:	4b04      	ldr	r3, [pc, #16]	; (8002f2c <SysTick_Config+0x40>)
 8002f1c:	2207      	movs	r2, #7
 8002f1e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002f20:	2300      	movs	r3, #0
}
 8002f22:	4618      	mov	r0, r3
 8002f24:	3708      	adds	r7, #8
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}
 8002f2a:	bf00      	nop
 8002f2c:	e000e010 	.word	0xe000e010

08002f30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b082      	sub	sp, #8
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f38:	6878      	ldr	r0, [r7, #4]
 8002f3a:	f7ff ff05 	bl	8002d48 <__NVIC_SetPriorityGrouping>
}
 8002f3e:	bf00      	nop
 8002f40:	3708      	adds	r7, #8
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}

08002f46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f46:	b580      	push	{r7, lr}
 8002f48:	b086      	sub	sp, #24
 8002f4a:	af00      	add	r7, sp, #0
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	60b9      	str	r1, [r7, #8]
 8002f50:	607a      	str	r2, [r7, #4]
 8002f52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f54:	2300      	movs	r3, #0
 8002f56:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f58:	f7ff ff1a 	bl	8002d90 <__NVIC_GetPriorityGrouping>
 8002f5c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f5e:	687a      	ldr	r2, [r7, #4]
 8002f60:	68b9      	ldr	r1, [r7, #8]
 8002f62:	6978      	ldr	r0, [r7, #20]
 8002f64:	f7ff ff8e 	bl	8002e84 <NVIC_EncodePriority>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f6e:	4611      	mov	r1, r2
 8002f70:	4618      	mov	r0, r3
 8002f72:	f7ff ff5d 	bl	8002e30 <__NVIC_SetPriority>
}
 8002f76:	bf00      	nop
 8002f78:	3718      	adds	r7, #24
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}

08002f7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f7e:	b580      	push	{r7, lr}
 8002f80:	b082      	sub	sp, #8
 8002f82:	af00      	add	r7, sp, #0
 8002f84:	4603      	mov	r3, r0
 8002f86:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f7ff ff0d 	bl	8002dac <__NVIC_EnableIRQ>
}
 8002f92:	bf00      	nop
 8002f94:	3708      	adds	r7, #8
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}

08002f9a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002f9a:	b580      	push	{r7, lr}
 8002f9c:	b082      	sub	sp, #8
 8002f9e:	af00      	add	r7, sp, #0
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002fa4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f7ff ff1d 	bl	8002de8 <__NVIC_DisableIRQ>
}
 8002fae:	bf00      	nop
 8002fb0:	3708      	adds	r7, #8
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}

08002fb6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002fb6:	b580      	push	{r7, lr}
 8002fb8:	b082      	sub	sp, #8
 8002fba:	af00      	add	r7, sp, #0
 8002fbc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002fbe:	6878      	ldr	r0, [r7, #4]
 8002fc0:	f7ff ff94 	bl	8002eec <SysTick_Config>
 8002fc4:	4603      	mov	r3, r0
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	3708      	adds	r7, #8
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}

08002fce <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002fce:	b580      	push	{r7, lr}
 8002fd0:	b084      	sub	sp, #16
 8002fd2:	af00      	add	r7, sp, #0
 8002fd4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fda:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002fdc:	f7ff fe84 	bl	8002ce8 <HAL_GetTick>
 8002fe0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002fe8:	b2db      	uxtb	r3, r3
 8002fea:	2b02      	cmp	r3, #2
 8002fec:	d008      	beq.n	8003000 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2280      	movs	r2, #128	; 0x80
 8002ff2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	e052      	b.n	80030a6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	681a      	ldr	r2, [r3, #0]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f022 0216 	bic.w	r2, r2, #22
 800300e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	695a      	ldr	r2, [r3, #20]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800301e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003024:	2b00      	cmp	r3, #0
 8003026:	d103      	bne.n	8003030 <HAL_DMA_Abort+0x62>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800302c:	2b00      	cmp	r3, #0
 800302e:	d007      	beq.n	8003040 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	681a      	ldr	r2, [r3, #0]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f022 0208 	bic.w	r2, r2, #8
 800303e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f022 0201 	bic.w	r2, r2, #1
 800304e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003050:	e013      	b.n	800307a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003052:	f7ff fe49 	bl	8002ce8 <HAL_GetTick>
 8003056:	4602      	mov	r2, r0
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	1ad3      	subs	r3, r2, r3
 800305c:	2b05      	cmp	r3, #5
 800305e:	d90c      	bls.n	800307a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2220      	movs	r2, #32
 8003064:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2203      	movs	r2, #3
 800306a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2200      	movs	r2, #0
 8003072:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003076:	2303      	movs	r3, #3
 8003078:	e015      	b.n	80030a6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f003 0301 	and.w	r3, r3, #1
 8003084:	2b00      	cmp	r3, #0
 8003086:	d1e4      	bne.n	8003052 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800308c:	223f      	movs	r2, #63	; 0x3f
 800308e:	409a      	lsls	r2, r3
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2201      	movs	r2, #1
 8003098:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2200      	movs	r2, #0
 80030a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80030a4:	2300      	movs	r3, #0
}
 80030a6:	4618      	mov	r0, r3
 80030a8:	3710      	adds	r7, #16
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}

080030ae <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80030ae:	b480      	push	{r7}
 80030b0:	b083      	sub	sp, #12
 80030b2:	af00      	add	r7, sp, #0
 80030b4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80030bc:	b2db      	uxtb	r3, r3
 80030be:	2b02      	cmp	r3, #2
 80030c0:	d004      	beq.n	80030cc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2280      	movs	r2, #128	; 0x80
 80030c6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	e00c      	b.n	80030e6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2205      	movs	r2, #5
 80030d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	681a      	ldr	r2, [r3, #0]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f022 0201 	bic.w	r2, r2, #1
 80030e2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80030e4:	2300      	movs	r3, #0
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	370c      	adds	r7, #12
 80030ea:	46bd      	mov	sp, r7
 80030ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f0:	4770      	bx	lr
	...

080030f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030f4:	b480      	push	{r7}
 80030f6:	b089      	sub	sp, #36	; 0x24
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
 80030fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80030fe:	2300      	movs	r3, #0
 8003100:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003102:	2300      	movs	r3, #0
 8003104:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003106:	2300      	movs	r3, #0
 8003108:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800310a:	2300      	movs	r3, #0
 800310c:	61fb      	str	r3, [r7, #28]
 800310e:	e159      	b.n	80033c4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003110:	2201      	movs	r2, #1
 8003112:	69fb      	ldr	r3, [r7, #28]
 8003114:	fa02 f303 	lsl.w	r3, r2, r3
 8003118:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	697a      	ldr	r2, [r7, #20]
 8003120:	4013      	ands	r3, r2
 8003122:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003124:	693a      	ldr	r2, [r7, #16]
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	429a      	cmp	r2, r3
 800312a:	f040 8148 	bne.w	80033be <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	f003 0303 	and.w	r3, r3, #3
 8003136:	2b01      	cmp	r3, #1
 8003138:	d005      	beq.n	8003146 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003142:	2b02      	cmp	r3, #2
 8003144:	d130      	bne.n	80031a8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800314c:	69fb      	ldr	r3, [r7, #28]
 800314e:	005b      	lsls	r3, r3, #1
 8003150:	2203      	movs	r2, #3
 8003152:	fa02 f303 	lsl.w	r3, r2, r3
 8003156:	43db      	mvns	r3, r3
 8003158:	69ba      	ldr	r2, [r7, #24]
 800315a:	4013      	ands	r3, r2
 800315c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	68da      	ldr	r2, [r3, #12]
 8003162:	69fb      	ldr	r3, [r7, #28]
 8003164:	005b      	lsls	r3, r3, #1
 8003166:	fa02 f303 	lsl.w	r3, r2, r3
 800316a:	69ba      	ldr	r2, [r7, #24]
 800316c:	4313      	orrs	r3, r2
 800316e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	69ba      	ldr	r2, [r7, #24]
 8003174:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800317c:	2201      	movs	r2, #1
 800317e:	69fb      	ldr	r3, [r7, #28]
 8003180:	fa02 f303 	lsl.w	r3, r2, r3
 8003184:	43db      	mvns	r3, r3
 8003186:	69ba      	ldr	r2, [r7, #24]
 8003188:	4013      	ands	r3, r2
 800318a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	091b      	lsrs	r3, r3, #4
 8003192:	f003 0201 	and.w	r2, r3, #1
 8003196:	69fb      	ldr	r3, [r7, #28]
 8003198:	fa02 f303 	lsl.w	r3, r2, r3
 800319c:	69ba      	ldr	r2, [r7, #24]
 800319e:	4313      	orrs	r3, r2
 80031a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	69ba      	ldr	r2, [r7, #24]
 80031a6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	f003 0303 	and.w	r3, r3, #3
 80031b0:	2b03      	cmp	r3, #3
 80031b2:	d017      	beq.n	80031e4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	68db      	ldr	r3, [r3, #12]
 80031b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80031ba:	69fb      	ldr	r3, [r7, #28]
 80031bc:	005b      	lsls	r3, r3, #1
 80031be:	2203      	movs	r2, #3
 80031c0:	fa02 f303 	lsl.w	r3, r2, r3
 80031c4:	43db      	mvns	r3, r3
 80031c6:	69ba      	ldr	r2, [r7, #24]
 80031c8:	4013      	ands	r3, r2
 80031ca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	689a      	ldr	r2, [r3, #8]
 80031d0:	69fb      	ldr	r3, [r7, #28]
 80031d2:	005b      	lsls	r3, r3, #1
 80031d4:	fa02 f303 	lsl.w	r3, r2, r3
 80031d8:	69ba      	ldr	r2, [r7, #24]
 80031da:	4313      	orrs	r3, r2
 80031dc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	69ba      	ldr	r2, [r7, #24]
 80031e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	f003 0303 	and.w	r3, r3, #3
 80031ec:	2b02      	cmp	r3, #2
 80031ee:	d123      	bne.n	8003238 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80031f0:	69fb      	ldr	r3, [r7, #28]
 80031f2:	08da      	lsrs	r2, r3, #3
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	3208      	adds	r2, #8
 80031f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80031fe:	69fb      	ldr	r3, [r7, #28]
 8003200:	f003 0307 	and.w	r3, r3, #7
 8003204:	009b      	lsls	r3, r3, #2
 8003206:	220f      	movs	r2, #15
 8003208:	fa02 f303 	lsl.w	r3, r2, r3
 800320c:	43db      	mvns	r3, r3
 800320e:	69ba      	ldr	r2, [r7, #24]
 8003210:	4013      	ands	r3, r2
 8003212:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	691a      	ldr	r2, [r3, #16]
 8003218:	69fb      	ldr	r3, [r7, #28]
 800321a:	f003 0307 	and.w	r3, r3, #7
 800321e:	009b      	lsls	r3, r3, #2
 8003220:	fa02 f303 	lsl.w	r3, r2, r3
 8003224:	69ba      	ldr	r2, [r7, #24]
 8003226:	4313      	orrs	r3, r2
 8003228:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800322a:	69fb      	ldr	r3, [r7, #28]
 800322c:	08da      	lsrs	r2, r3, #3
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	3208      	adds	r2, #8
 8003232:	69b9      	ldr	r1, [r7, #24]
 8003234:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800323e:	69fb      	ldr	r3, [r7, #28]
 8003240:	005b      	lsls	r3, r3, #1
 8003242:	2203      	movs	r2, #3
 8003244:	fa02 f303 	lsl.w	r3, r2, r3
 8003248:	43db      	mvns	r3, r3
 800324a:	69ba      	ldr	r2, [r7, #24]
 800324c:	4013      	ands	r3, r2
 800324e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	f003 0203 	and.w	r2, r3, #3
 8003258:	69fb      	ldr	r3, [r7, #28]
 800325a:	005b      	lsls	r3, r3, #1
 800325c:	fa02 f303 	lsl.w	r3, r2, r3
 8003260:	69ba      	ldr	r2, [r7, #24]
 8003262:	4313      	orrs	r3, r2
 8003264:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	69ba      	ldr	r2, [r7, #24]
 800326a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003274:	2b00      	cmp	r3, #0
 8003276:	f000 80a2 	beq.w	80033be <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800327a:	2300      	movs	r3, #0
 800327c:	60fb      	str	r3, [r7, #12]
 800327e:	4b57      	ldr	r3, [pc, #348]	; (80033dc <HAL_GPIO_Init+0x2e8>)
 8003280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003282:	4a56      	ldr	r2, [pc, #344]	; (80033dc <HAL_GPIO_Init+0x2e8>)
 8003284:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003288:	6453      	str	r3, [r2, #68]	; 0x44
 800328a:	4b54      	ldr	r3, [pc, #336]	; (80033dc <HAL_GPIO_Init+0x2e8>)
 800328c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800328e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003292:	60fb      	str	r3, [r7, #12]
 8003294:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003296:	4a52      	ldr	r2, [pc, #328]	; (80033e0 <HAL_GPIO_Init+0x2ec>)
 8003298:	69fb      	ldr	r3, [r7, #28]
 800329a:	089b      	lsrs	r3, r3, #2
 800329c:	3302      	adds	r3, #2
 800329e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80032a4:	69fb      	ldr	r3, [r7, #28]
 80032a6:	f003 0303 	and.w	r3, r3, #3
 80032aa:	009b      	lsls	r3, r3, #2
 80032ac:	220f      	movs	r2, #15
 80032ae:	fa02 f303 	lsl.w	r3, r2, r3
 80032b2:	43db      	mvns	r3, r3
 80032b4:	69ba      	ldr	r2, [r7, #24]
 80032b6:	4013      	ands	r3, r2
 80032b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	4a49      	ldr	r2, [pc, #292]	; (80033e4 <HAL_GPIO_Init+0x2f0>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d019      	beq.n	80032f6 <HAL_GPIO_Init+0x202>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	4a48      	ldr	r2, [pc, #288]	; (80033e8 <HAL_GPIO_Init+0x2f4>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d013      	beq.n	80032f2 <HAL_GPIO_Init+0x1fe>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	4a47      	ldr	r2, [pc, #284]	; (80033ec <HAL_GPIO_Init+0x2f8>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d00d      	beq.n	80032ee <HAL_GPIO_Init+0x1fa>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	4a46      	ldr	r2, [pc, #280]	; (80033f0 <HAL_GPIO_Init+0x2fc>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d007      	beq.n	80032ea <HAL_GPIO_Init+0x1f6>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	4a45      	ldr	r2, [pc, #276]	; (80033f4 <HAL_GPIO_Init+0x300>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d101      	bne.n	80032e6 <HAL_GPIO_Init+0x1f2>
 80032e2:	2304      	movs	r3, #4
 80032e4:	e008      	b.n	80032f8 <HAL_GPIO_Init+0x204>
 80032e6:	2307      	movs	r3, #7
 80032e8:	e006      	b.n	80032f8 <HAL_GPIO_Init+0x204>
 80032ea:	2303      	movs	r3, #3
 80032ec:	e004      	b.n	80032f8 <HAL_GPIO_Init+0x204>
 80032ee:	2302      	movs	r3, #2
 80032f0:	e002      	b.n	80032f8 <HAL_GPIO_Init+0x204>
 80032f2:	2301      	movs	r3, #1
 80032f4:	e000      	b.n	80032f8 <HAL_GPIO_Init+0x204>
 80032f6:	2300      	movs	r3, #0
 80032f8:	69fa      	ldr	r2, [r7, #28]
 80032fa:	f002 0203 	and.w	r2, r2, #3
 80032fe:	0092      	lsls	r2, r2, #2
 8003300:	4093      	lsls	r3, r2
 8003302:	69ba      	ldr	r2, [r7, #24]
 8003304:	4313      	orrs	r3, r2
 8003306:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003308:	4935      	ldr	r1, [pc, #212]	; (80033e0 <HAL_GPIO_Init+0x2ec>)
 800330a:	69fb      	ldr	r3, [r7, #28]
 800330c:	089b      	lsrs	r3, r3, #2
 800330e:	3302      	adds	r3, #2
 8003310:	69ba      	ldr	r2, [r7, #24]
 8003312:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003316:	4b38      	ldr	r3, [pc, #224]	; (80033f8 <HAL_GPIO_Init+0x304>)
 8003318:	689b      	ldr	r3, [r3, #8]
 800331a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	43db      	mvns	r3, r3
 8003320:	69ba      	ldr	r2, [r7, #24]
 8003322:	4013      	ands	r3, r2
 8003324:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800332e:	2b00      	cmp	r3, #0
 8003330:	d003      	beq.n	800333a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003332:	69ba      	ldr	r2, [r7, #24]
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	4313      	orrs	r3, r2
 8003338:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800333a:	4a2f      	ldr	r2, [pc, #188]	; (80033f8 <HAL_GPIO_Init+0x304>)
 800333c:	69bb      	ldr	r3, [r7, #24]
 800333e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003340:	4b2d      	ldr	r3, [pc, #180]	; (80033f8 <HAL_GPIO_Init+0x304>)
 8003342:	68db      	ldr	r3, [r3, #12]
 8003344:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	43db      	mvns	r3, r3
 800334a:	69ba      	ldr	r2, [r7, #24]
 800334c:	4013      	ands	r3, r2
 800334e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003358:	2b00      	cmp	r3, #0
 800335a:	d003      	beq.n	8003364 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800335c:	69ba      	ldr	r2, [r7, #24]
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	4313      	orrs	r3, r2
 8003362:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003364:	4a24      	ldr	r2, [pc, #144]	; (80033f8 <HAL_GPIO_Init+0x304>)
 8003366:	69bb      	ldr	r3, [r7, #24]
 8003368:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800336a:	4b23      	ldr	r3, [pc, #140]	; (80033f8 <HAL_GPIO_Init+0x304>)
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	43db      	mvns	r3, r3
 8003374:	69ba      	ldr	r2, [r7, #24]
 8003376:	4013      	ands	r3, r2
 8003378:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003382:	2b00      	cmp	r3, #0
 8003384:	d003      	beq.n	800338e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003386:	69ba      	ldr	r2, [r7, #24]
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	4313      	orrs	r3, r2
 800338c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800338e:	4a1a      	ldr	r2, [pc, #104]	; (80033f8 <HAL_GPIO_Init+0x304>)
 8003390:	69bb      	ldr	r3, [r7, #24]
 8003392:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003394:	4b18      	ldr	r3, [pc, #96]	; (80033f8 <HAL_GPIO_Init+0x304>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	43db      	mvns	r3, r3
 800339e:	69ba      	ldr	r2, [r7, #24]
 80033a0:	4013      	ands	r3, r2
 80033a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d003      	beq.n	80033b8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80033b0:	69ba      	ldr	r2, [r7, #24]
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	4313      	orrs	r3, r2
 80033b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80033b8:	4a0f      	ldr	r2, [pc, #60]	; (80033f8 <HAL_GPIO_Init+0x304>)
 80033ba:	69bb      	ldr	r3, [r7, #24]
 80033bc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80033be:	69fb      	ldr	r3, [r7, #28]
 80033c0:	3301      	adds	r3, #1
 80033c2:	61fb      	str	r3, [r7, #28]
 80033c4:	69fb      	ldr	r3, [r7, #28]
 80033c6:	2b0f      	cmp	r3, #15
 80033c8:	f67f aea2 	bls.w	8003110 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80033cc:	bf00      	nop
 80033ce:	bf00      	nop
 80033d0:	3724      	adds	r7, #36	; 0x24
 80033d2:	46bd      	mov	sp, r7
 80033d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d8:	4770      	bx	lr
 80033da:	bf00      	nop
 80033dc:	40023800 	.word	0x40023800
 80033e0:	40013800 	.word	0x40013800
 80033e4:	40020000 	.word	0x40020000
 80033e8:	40020400 	.word	0x40020400
 80033ec:	40020800 	.word	0x40020800
 80033f0:	40020c00 	.word	0x40020c00
 80033f4:	40021000 	.word	0x40021000
 80033f8:	40013c00 	.word	0x40013c00

080033fc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80033fc:	b480      	push	{r7}
 80033fe:	b087      	sub	sp, #28
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
 8003404:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003406:	2300      	movs	r3, #0
 8003408:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800340a:	2300      	movs	r3, #0
 800340c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800340e:	2300      	movs	r3, #0
 8003410:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003412:	2300      	movs	r3, #0
 8003414:	617b      	str	r3, [r7, #20]
 8003416:	e0bb      	b.n	8003590 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003418:	2201      	movs	r2, #1
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	fa02 f303 	lsl.w	r3, r2, r3
 8003420:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8003422:	683a      	ldr	r2, [r7, #0]
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	4013      	ands	r3, r2
 8003428:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800342a:	68fa      	ldr	r2, [r7, #12]
 800342c:	693b      	ldr	r3, [r7, #16]
 800342e:	429a      	cmp	r2, r3
 8003430:	f040 80ab 	bne.w	800358a <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8003434:	4a5c      	ldr	r2, [pc, #368]	; (80035a8 <HAL_GPIO_DeInit+0x1ac>)
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	089b      	lsrs	r3, r3, #2
 800343a:	3302      	adds	r3, #2
 800343c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003440:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	f003 0303 	and.w	r3, r3, #3
 8003448:	009b      	lsls	r3, r3, #2
 800344a:	220f      	movs	r2, #15
 800344c:	fa02 f303 	lsl.w	r3, r2, r3
 8003450:	68ba      	ldr	r2, [r7, #8]
 8003452:	4013      	ands	r3, r2
 8003454:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	4a54      	ldr	r2, [pc, #336]	; (80035ac <HAL_GPIO_DeInit+0x1b0>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d019      	beq.n	8003492 <HAL_GPIO_DeInit+0x96>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	4a53      	ldr	r2, [pc, #332]	; (80035b0 <HAL_GPIO_DeInit+0x1b4>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d013      	beq.n	800348e <HAL_GPIO_DeInit+0x92>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	4a52      	ldr	r2, [pc, #328]	; (80035b4 <HAL_GPIO_DeInit+0x1b8>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d00d      	beq.n	800348a <HAL_GPIO_DeInit+0x8e>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	4a51      	ldr	r2, [pc, #324]	; (80035b8 <HAL_GPIO_DeInit+0x1bc>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d007      	beq.n	8003486 <HAL_GPIO_DeInit+0x8a>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	4a50      	ldr	r2, [pc, #320]	; (80035bc <HAL_GPIO_DeInit+0x1c0>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d101      	bne.n	8003482 <HAL_GPIO_DeInit+0x86>
 800347e:	2304      	movs	r3, #4
 8003480:	e008      	b.n	8003494 <HAL_GPIO_DeInit+0x98>
 8003482:	2307      	movs	r3, #7
 8003484:	e006      	b.n	8003494 <HAL_GPIO_DeInit+0x98>
 8003486:	2303      	movs	r3, #3
 8003488:	e004      	b.n	8003494 <HAL_GPIO_DeInit+0x98>
 800348a:	2302      	movs	r3, #2
 800348c:	e002      	b.n	8003494 <HAL_GPIO_DeInit+0x98>
 800348e:	2301      	movs	r3, #1
 8003490:	e000      	b.n	8003494 <HAL_GPIO_DeInit+0x98>
 8003492:	2300      	movs	r3, #0
 8003494:	697a      	ldr	r2, [r7, #20]
 8003496:	f002 0203 	and.w	r2, r2, #3
 800349a:	0092      	lsls	r2, r2, #2
 800349c:	4093      	lsls	r3, r2
 800349e:	68ba      	ldr	r2, [r7, #8]
 80034a0:	429a      	cmp	r2, r3
 80034a2:	d132      	bne.n	800350a <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80034a4:	4b46      	ldr	r3, [pc, #280]	; (80035c0 <HAL_GPIO_DeInit+0x1c4>)
 80034a6:	681a      	ldr	r2, [r3, #0]
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	43db      	mvns	r3, r3
 80034ac:	4944      	ldr	r1, [pc, #272]	; (80035c0 <HAL_GPIO_DeInit+0x1c4>)
 80034ae:	4013      	ands	r3, r2
 80034b0:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80034b2:	4b43      	ldr	r3, [pc, #268]	; (80035c0 <HAL_GPIO_DeInit+0x1c4>)
 80034b4:	685a      	ldr	r2, [r3, #4]
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	43db      	mvns	r3, r3
 80034ba:	4941      	ldr	r1, [pc, #260]	; (80035c0 <HAL_GPIO_DeInit+0x1c4>)
 80034bc:	4013      	ands	r3, r2
 80034be:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80034c0:	4b3f      	ldr	r3, [pc, #252]	; (80035c0 <HAL_GPIO_DeInit+0x1c4>)
 80034c2:	68da      	ldr	r2, [r3, #12]
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	43db      	mvns	r3, r3
 80034c8:	493d      	ldr	r1, [pc, #244]	; (80035c0 <HAL_GPIO_DeInit+0x1c4>)
 80034ca:	4013      	ands	r3, r2
 80034cc:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80034ce:	4b3c      	ldr	r3, [pc, #240]	; (80035c0 <HAL_GPIO_DeInit+0x1c4>)
 80034d0:	689a      	ldr	r2, [r3, #8]
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	43db      	mvns	r3, r3
 80034d6:	493a      	ldr	r1, [pc, #232]	; (80035c0 <HAL_GPIO_DeInit+0x1c4>)
 80034d8:	4013      	ands	r3, r2
 80034da:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	f003 0303 	and.w	r3, r3, #3
 80034e2:	009b      	lsls	r3, r3, #2
 80034e4:	220f      	movs	r2, #15
 80034e6:	fa02 f303 	lsl.w	r3, r2, r3
 80034ea:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80034ec:	4a2e      	ldr	r2, [pc, #184]	; (80035a8 <HAL_GPIO_DeInit+0x1ac>)
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	089b      	lsrs	r3, r3, #2
 80034f2:	3302      	adds	r3, #2
 80034f4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	43da      	mvns	r2, r3
 80034fc:	482a      	ldr	r0, [pc, #168]	; (80035a8 <HAL_GPIO_DeInit+0x1ac>)
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	089b      	lsrs	r3, r3, #2
 8003502:	400a      	ands	r2, r1
 8003504:	3302      	adds	r3, #2
 8003506:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	005b      	lsls	r3, r3, #1
 8003512:	2103      	movs	r1, #3
 8003514:	fa01 f303 	lsl.w	r3, r1, r3
 8003518:	43db      	mvns	r3, r3
 800351a:	401a      	ands	r2, r3
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	08da      	lsrs	r2, r3, #3
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	3208      	adds	r2, #8
 8003528:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	f003 0307 	and.w	r3, r3, #7
 8003532:	009b      	lsls	r3, r3, #2
 8003534:	220f      	movs	r2, #15
 8003536:	fa02 f303 	lsl.w	r3, r2, r3
 800353a:	43db      	mvns	r3, r3
 800353c:	697a      	ldr	r2, [r7, #20]
 800353e:	08d2      	lsrs	r2, r2, #3
 8003540:	4019      	ands	r1, r3
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	3208      	adds	r2, #8
 8003546:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	68da      	ldr	r2, [r3, #12]
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	005b      	lsls	r3, r3, #1
 8003552:	2103      	movs	r1, #3
 8003554:	fa01 f303 	lsl.w	r3, r1, r3
 8003558:	43db      	mvns	r3, r3
 800355a:	401a      	ands	r2, r3
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	685a      	ldr	r2, [r3, #4]
 8003564:	2101      	movs	r1, #1
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	fa01 f303 	lsl.w	r3, r1, r3
 800356c:	43db      	mvns	r3, r3
 800356e:	401a      	ands	r2, r3
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	689a      	ldr	r2, [r3, #8]
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	005b      	lsls	r3, r3, #1
 800357c:	2103      	movs	r1, #3
 800357e:	fa01 f303 	lsl.w	r3, r1, r3
 8003582:	43db      	mvns	r3, r3
 8003584:	401a      	ands	r2, r3
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	3301      	adds	r3, #1
 800358e:	617b      	str	r3, [r7, #20]
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	2b0f      	cmp	r3, #15
 8003594:	f67f af40 	bls.w	8003418 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8003598:	bf00      	nop
 800359a:	bf00      	nop
 800359c:	371c      	adds	r7, #28
 800359e:	46bd      	mov	sp, r7
 80035a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a4:	4770      	bx	lr
 80035a6:	bf00      	nop
 80035a8:	40013800 	.word	0x40013800
 80035ac:	40020000 	.word	0x40020000
 80035b0:	40020400 	.word	0x40020400
 80035b4:	40020800 	.word	0x40020800
 80035b8:	40020c00 	.word	0x40020c00
 80035bc:	40021000 	.word	0x40021000
 80035c0:	40013c00 	.word	0x40013c00

080035c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035c4:	b480      	push	{r7}
 80035c6:	b083      	sub	sp, #12
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
 80035cc:	460b      	mov	r3, r1
 80035ce:	807b      	strh	r3, [r7, #2]
 80035d0:	4613      	mov	r3, r2
 80035d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80035d4:	787b      	ldrb	r3, [r7, #1]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d003      	beq.n	80035e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80035da:	887a      	ldrh	r2, [r7, #2]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80035e0:	e003      	b.n	80035ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80035e2:	887b      	ldrh	r3, [r7, #2]
 80035e4:	041a      	lsls	r2, r3, #16
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	619a      	str	r2, [r3, #24]
}
 80035ea:	bf00      	nop
 80035ec:	370c      	adds	r7, #12
 80035ee:	46bd      	mov	sp, r7
 80035f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f4:	4770      	bx	lr

080035f6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80035f6:	b480      	push	{r7}
 80035f8:	b085      	sub	sp, #20
 80035fa:	af00      	add	r7, sp, #0
 80035fc:	6078      	str	r0, [r7, #4]
 80035fe:	460b      	mov	r3, r1
 8003600:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	695b      	ldr	r3, [r3, #20]
 8003606:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003608:	887a      	ldrh	r2, [r7, #2]
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	4013      	ands	r3, r2
 800360e:	041a      	lsls	r2, r3, #16
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	43d9      	mvns	r1, r3
 8003614:	887b      	ldrh	r3, [r7, #2]
 8003616:	400b      	ands	r3, r1
 8003618:	431a      	orrs	r2, r3
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	619a      	str	r2, [r3, #24]
}
 800361e:	bf00      	nop
 8003620:	3714      	adds	r7, #20
 8003622:	46bd      	mov	sp, r7
 8003624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003628:	4770      	bx	lr
	...

0800362c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b086      	sub	sp, #24
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d101      	bne.n	800363e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	e267      	b.n	8003b0e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f003 0301 	and.w	r3, r3, #1
 8003646:	2b00      	cmp	r3, #0
 8003648:	d075      	beq.n	8003736 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800364a:	4b88      	ldr	r3, [pc, #544]	; (800386c <HAL_RCC_OscConfig+0x240>)
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	f003 030c 	and.w	r3, r3, #12
 8003652:	2b04      	cmp	r3, #4
 8003654:	d00c      	beq.n	8003670 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003656:	4b85      	ldr	r3, [pc, #532]	; (800386c <HAL_RCC_OscConfig+0x240>)
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800365e:	2b08      	cmp	r3, #8
 8003660:	d112      	bne.n	8003688 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003662:	4b82      	ldr	r3, [pc, #520]	; (800386c <HAL_RCC_OscConfig+0x240>)
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800366a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800366e:	d10b      	bne.n	8003688 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003670:	4b7e      	ldr	r3, [pc, #504]	; (800386c <HAL_RCC_OscConfig+0x240>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003678:	2b00      	cmp	r3, #0
 800367a:	d05b      	beq.n	8003734 <HAL_RCC_OscConfig+0x108>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d157      	bne.n	8003734 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003684:	2301      	movs	r3, #1
 8003686:	e242      	b.n	8003b0e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003690:	d106      	bne.n	80036a0 <HAL_RCC_OscConfig+0x74>
 8003692:	4b76      	ldr	r3, [pc, #472]	; (800386c <HAL_RCC_OscConfig+0x240>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a75      	ldr	r2, [pc, #468]	; (800386c <HAL_RCC_OscConfig+0x240>)
 8003698:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800369c:	6013      	str	r3, [r2, #0]
 800369e:	e01d      	b.n	80036dc <HAL_RCC_OscConfig+0xb0>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80036a8:	d10c      	bne.n	80036c4 <HAL_RCC_OscConfig+0x98>
 80036aa:	4b70      	ldr	r3, [pc, #448]	; (800386c <HAL_RCC_OscConfig+0x240>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a6f      	ldr	r2, [pc, #444]	; (800386c <HAL_RCC_OscConfig+0x240>)
 80036b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80036b4:	6013      	str	r3, [r2, #0]
 80036b6:	4b6d      	ldr	r3, [pc, #436]	; (800386c <HAL_RCC_OscConfig+0x240>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a6c      	ldr	r2, [pc, #432]	; (800386c <HAL_RCC_OscConfig+0x240>)
 80036bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036c0:	6013      	str	r3, [r2, #0]
 80036c2:	e00b      	b.n	80036dc <HAL_RCC_OscConfig+0xb0>
 80036c4:	4b69      	ldr	r3, [pc, #420]	; (800386c <HAL_RCC_OscConfig+0x240>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a68      	ldr	r2, [pc, #416]	; (800386c <HAL_RCC_OscConfig+0x240>)
 80036ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036ce:	6013      	str	r3, [r2, #0]
 80036d0:	4b66      	ldr	r3, [pc, #408]	; (800386c <HAL_RCC_OscConfig+0x240>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a65      	ldr	r2, [pc, #404]	; (800386c <HAL_RCC_OscConfig+0x240>)
 80036d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d013      	beq.n	800370c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036e4:	f7ff fb00 	bl	8002ce8 <HAL_GetTick>
 80036e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036ea:	e008      	b.n	80036fe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80036ec:	f7ff fafc 	bl	8002ce8 <HAL_GetTick>
 80036f0:	4602      	mov	r2, r0
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	1ad3      	subs	r3, r2, r3
 80036f6:	2b64      	cmp	r3, #100	; 0x64
 80036f8:	d901      	bls.n	80036fe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80036fa:	2303      	movs	r3, #3
 80036fc:	e207      	b.n	8003b0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036fe:	4b5b      	ldr	r3, [pc, #364]	; (800386c <HAL_RCC_OscConfig+0x240>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003706:	2b00      	cmp	r3, #0
 8003708:	d0f0      	beq.n	80036ec <HAL_RCC_OscConfig+0xc0>
 800370a:	e014      	b.n	8003736 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800370c:	f7ff faec 	bl	8002ce8 <HAL_GetTick>
 8003710:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003712:	e008      	b.n	8003726 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003714:	f7ff fae8 	bl	8002ce8 <HAL_GetTick>
 8003718:	4602      	mov	r2, r0
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	1ad3      	subs	r3, r2, r3
 800371e:	2b64      	cmp	r3, #100	; 0x64
 8003720:	d901      	bls.n	8003726 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003722:	2303      	movs	r3, #3
 8003724:	e1f3      	b.n	8003b0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003726:	4b51      	ldr	r3, [pc, #324]	; (800386c <HAL_RCC_OscConfig+0x240>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800372e:	2b00      	cmp	r3, #0
 8003730:	d1f0      	bne.n	8003714 <HAL_RCC_OscConfig+0xe8>
 8003732:	e000      	b.n	8003736 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003734:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f003 0302 	and.w	r3, r3, #2
 800373e:	2b00      	cmp	r3, #0
 8003740:	d063      	beq.n	800380a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003742:	4b4a      	ldr	r3, [pc, #296]	; (800386c <HAL_RCC_OscConfig+0x240>)
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	f003 030c 	and.w	r3, r3, #12
 800374a:	2b00      	cmp	r3, #0
 800374c:	d00b      	beq.n	8003766 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800374e:	4b47      	ldr	r3, [pc, #284]	; (800386c <HAL_RCC_OscConfig+0x240>)
 8003750:	689b      	ldr	r3, [r3, #8]
 8003752:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003756:	2b08      	cmp	r3, #8
 8003758:	d11c      	bne.n	8003794 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800375a:	4b44      	ldr	r3, [pc, #272]	; (800386c <HAL_RCC_OscConfig+0x240>)
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003762:	2b00      	cmp	r3, #0
 8003764:	d116      	bne.n	8003794 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003766:	4b41      	ldr	r3, [pc, #260]	; (800386c <HAL_RCC_OscConfig+0x240>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f003 0302 	and.w	r3, r3, #2
 800376e:	2b00      	cmp	r3, #0
 8003770:	d005      	beq.n	800377e <HAL_RCC_OscConfig+0x152>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	68db      	ldr	r3, [r3, #12]
 8003776:	2b01      	cmp	r3, #1
 8003778:	d001      	beq.n	800377e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	e1c7      	b.n	8003b0e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800377e:	4b3b      	ldr	r3, [pc, #236]	; (800386c <HAL_RCC_OscConfig+0x240>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	691b      	ldr	r3, [r3, #16]
 800378a:	00db      	lsls	r3, r3, #3
 800378c:	4937      	ldr	r1, [pc, #220]	; (800386c <HAL_RCC_OscConfig+0x240>)
 800378e:	4313      	orrs	r3, r2
 8003790:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003792:	e03a      	b.n	800380a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	68db      	ldr	r3, [r3, #12]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d020      	beq.n	80037de <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800379c:	4b34      	ldr	r3, [pc, #208]	; (8003870 <HAL_RCC_OscConfig+0x244>)
 800379e:	2201      	movs	r2, #1
 80037a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037a2:	f7ff faa1 	bl	8002ce8 <HAL_GetTick>
 80037a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037a8:	e008      	b.n	80037bc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80037aa:	f7ff fa9d 	bl	8002ce8 <HAL_GetTick>
 80037ae:	4602      	mov	r2, r0
 80037b0:	693b      	ldr	r3, [r7, #16]
 80037b2:	1ad3      	subs	r3, r2, r3
 80037b4:	2b02      	cmp	r3, #2
 80037b6:	d901      	bls.n	80037bc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80037b8:	2303      	movs	r3, #3
 80037ba:	e1a8      	b.n	8003b0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037bc:	4b2b      	ldr	r3, [pc, #172]	; (800386c <HAL_RCC_OscConfig+0x240>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f003 0302 	and.w	r3, r3, #2
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d0f0      	beq.n	80037aa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037c8:	4b28      	ldr	r3, [pc, #160]	; (800386c <HAL_RCC_OscConfig+0x240>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	691b      	ldr	r3, [r3, #16]
 80037d4:	00db      	lsls	r3, r3, #3
 80037d6:	4925      	ldr	r1, [pc, #148]	; (800386c <HAL_RCC_OscConfig+0x240>)
 80037d8:	4313      	orrs	r3, r2
 80037da:	600b      	str	r3, [r1, #0]
 80037dc:	e015      	b.n	800380a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037de:	4b24      	ldr	r3, [pc, #144]	; (8003870 <HAL_RCC_OscConfig+0x244>)
 80037e0:	2200      	movs	r2, #0
 80037e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037e4:	f7ff fa80 	bl	8002ce8 <HAL_GetTick>
 80037e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037ea:	e008      	b.n	80037fe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80037ec:	f7ff fa7c 	bl	8002ce8 <HAL_GetTick>
 80037f0:	4602      	mov	r2, r0
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	1ad3      	subs	r3, r2, r3
 80037f6:	2b02      	cmp	r3, #2
 80037f8:	d901      	bls.n	80037fe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80037fa:	2303      	movs	r3, #3
 80037fc:	e187      	b.n	8003b0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037fe:	4b1b      	ldr	r3, [pc, #108]	; (800386c <HAL_RCC_OscConfig+0x240>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f003 0302 	and.w	r3, r3, #2
 8003806:	2b00      	cmp	r3, #0
 8003808:	d1f0      	bne.n	80037ec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f003 0308 	and.w	r3, r3, #8
 8003812:	2b00      	cmp	r3, #0
 8003814:	d036      	beq.n	8003884 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	695b      	ldr	r3, [r3, #20]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d016      	beq.n	800384c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800381e:	4b15      	ldr	r3, [pc, #84]	; (8003874 <HAL_RCC_OscConfig+0x248>)
 8003820:	2201      	movs	r2, #1
 8003822:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003824:	f7ff fa60 	bl	8002ce8 <HAL_GetTick>
 8003828:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800382a:	e008      	b.n	800383e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800382c:	f7ff fa5c 	bl	8002ce8 <HAL_GetTick>
 8003830:	4602      	mov	r2, r0
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	1ad3      	subs	r3, r2, r3
 8003836:	2b02      	cmp	r3, #2
 8003838:	d901      	bls.n	800383e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800383a:	2303      	movs	r3, #3
 800383c:	e167      	b.n	8003b0e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800383e:	4b0b      	ldr	r3, [pc, #44]	; (800386c <HAL_RCC_OscConfig+0x240>)
 8003840:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003842:	f003 0302 	and.w	r3, r3, #2
 8003846:	2b00      	cmp	r3, #0
 8003848:	d0f0      	beq.n	800382c <HAL_RCC_OscConfig+0x200>
 800384a:	e01b      	b.n	8003884 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800384c:	4b09      	ldr	r3, [pc, #36]	; (8003874 <HAL_RCC_OscConfig+0x248>)
 800384e:	2200      	movs	r2, #0
 8003850:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003852:	f7ff fa49 	bl	8002ce8 <HAL_GetTick>
 8003856:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003858:	e00e      	b.n	8003878 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800385a:	f7ff fa45 	bl	8002ce8 <HAL_GetTick>
 800385e:	4602      	mov	r2, r0
 8003860:	693b      	ldr	r3, [r7, #16]
 8003862:	1ad3      	subs	r3, r2, r3
 8003864:	2b02      	cmp	r3, #2
 8003866:	d907      	bls.n	8003878 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003868:	2303      	movs	r3, #3
 800386a:	e150      	b.n	8003b0e <HAL_RCC_OscConfig+0x4e2>
 800386c:	40023800 	.word	0x40023800
 8003870:	42470000 	.word	0x42470000
 8003874:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003878:	4b88      	ldr	r3, [pc, #544]	; (8003a9c <HAL_RCC_OscConfig+0x470>)
 800387a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800387c:	f003 0302 	and.w	r3, r3, #2
 8003880:	2b00      	cmp	r3, #0
 8003882:	d1ea      	bne.n	800385a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f003 0304 	and.w	r3, r3, #4
 800388c:	2b00      	cmp	r3, #0
 800388e:	f000 8097 	beq.w	80039c0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003892:	2300      	movs	r3, #0
 8003894:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003896:	4b81      	ldr	r3, [pc, #516]	; (8003a9c <HAL_RCC_OscConfig+0x470>)
 8003898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800389a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d10f      	bne.n	80038c2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038a2:	2300      	movs	r3, #0
 80038a4:	60bb      	str	r3, [r7, #8]
 80038a6:	4b7d      	ldr	r3, [pc, #500]	; (8003a9c <HAL_RCC_OscConfig+0x470>)
 80038a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038aa:	4a7c      	ldr	r2, [pc, #496]	; (8003a9c <HAL_RCC_OscConfig+0x470>)
 80038ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038b0:	6413      	str	r3, [r2, #64]	; 0x40
 80038b2:	4b7a      	ldr	r3, [pc, #488]	; (8003a9c <HAL_RCC_OscConfig+0x470>)
 80038b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038ba:	60bb      	str	r3, [r7, #8]
 80038bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038be:	2301      	movs	r3, #1
 80038c0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038c2:	4b77      	ldr	r3, [pc, #476]	; (8003aa0 <HAL_RCC_OscConfig+0x474>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d118      	bne.n	8003900 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80038ce:	4b74      	ldr	r3, [pc, #464]	; (8003aa0 <HAL_RCC_OscConfig+0x474>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a73      	ldr	r2, [pc, #460]	; (8003aa0 <HAL_RCC_OscConfig+0x474>)
 80038d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038da:	f7ff fa05 	bl	8002ce8 <HAL_GetTick>
 80038de:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038e0:	e008      	b.n	80038f4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038e2:	f7ff fa01 	bl	8002ce8 <HAL_GetTick>
 80038e6:	4602      	mov	r2, r0
 80038e8:	693b      	ldr	r3, [r7, #16]
 80038ea:	1ad3      	subs	r3, r2, r3
 80038ec:	2b02      	cmp	r3, #2
 80038ee:	d901      	bls.n	80038f4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80038f0:	2303      	movs	r3, #3
 80038f2:	e10c      	b.n	8003b0e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038f4:	4b6a      	ldr	r3, [pc, #424]	; (8003aa0 <HAL_RCC_OscConfig+0x474>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d0f0      	beq.n	80038e2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	2b01      	cmp	r3, #1
 8003906:	d106      	bne.n	8003916 <HAL_RCC_OscConfig+0x2ea>
 8003908:	4b64      	ldr	r3, [pc, #400]	; (8003a9c <HAL_RCC_OscConfig+0x470>)
 800390a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800390c:	4a63      	ldr	r2, [pc, #396]	; (8003a9c <HAL_RCC_OscConfig+0x470>)
 800390e:	f043 0301 	orr.w	r3, r3, #1
 8003912:	6713      	str	r3, [r2, #112]	; 0x70
 8003914:	e01c      	b.n	8003950 <HAL_RCC_OscConfig+0x324>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	2b05      	cmp	r3, #5
 800391c:	d10c      	bne.n	8003938 <HAL_RCC_OscConfig+0x30c>
 800391e:	4b5f      	ldr	r3, [pc, #380]	; (8003a9c <HAL_RCC_OscConfig+0x470>)
 8003920:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003922:	4a5e      	ldr	r2, [pc, #376]	; (8003a9c <HAL_RCC_OscConfig+0x470>)
 8003924:	f043 0304 	orr.w	r3, r3, #4
 8003928:	6713      	str	r3, [r2, #112]	; 0x70
 800392a:	4b5c      	ldr	r3, [pc, #368]	; (8003a9c <HAL_RCC_OscConfig+0x470>)
 800392c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800392e:	4a5b      	ldr	r2, [pc, #364]	; (8003a9c <HAL_RCC_OscConfig+0x470>)
 8003930:	f043 0301 	orr.w	r3, r3, #1
 8003934:	6713      	str	r3, [r2, #112]	; 0x70
 8003936:	e00b      	b.n	8003950 <HAL_RCC_OscConfig+0x324>
 8003938:	4b58      	ldr	r3, [pc, #352]	; (8003a9c <HAL_RCC_OscConfig+0x470>)
 800393a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800393c:	4a57      	ldr	r2, [pc, #348]	; (8003a9c <HAL_RCC_OscConfig+0x470>)
 800393e:	f023 0301 	bic.w	r3, r3, #1
 8003942:	6713      	str	r3, [r2, #112]	; 0x70
 8003944:	4b55      	ldr	r3, [pc, #340]	; (8003a9c <HAL_RCC_OscConfig+0x470>)
 8003946:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003948:	4a54      	ldr	r2, [pc, #336]	; (8003a9c <HAL_RCC_OscConfig+0x470>)
 800394a:	f023 0304 	bic.w	r3, r3, #4
 800394e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	689b      	ldr	r3, [r3, #8]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d015      	beq.n	8003984 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003958:	f7ff f9c6 	bl	8002ce8 <HAL_GetTick>
 800395c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800395e:	e00a      	b.n	8003976 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003960:	f7ff f9c2 	bl	8002ce8 <HAL_GetTick>
 8003964:	4602      	mov	r2, r0
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	1ad3      	subs	r3, r2, r3
 800396a:	f241 3288 	movw	r2, #5000	; 0x1388
 800396e:	4293      	cmp	r3, r2
 8003970:	d901      	bls.n	8003976 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003972:	2303      	movs	r3, #3
 8003974:	e0cb      	b.n	8003b0e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003976:	4b49      	ldr	r3, [pc, #292]	; (8003a9c <HAL_RCC_OscConfig+0x470>)
 8003978:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800397a:	f003 0302 	and.w	r3, r3, #2
 800397e:	2b00      	cmp	r3, #0
 8003980:	d0ee      	beq.n	8003960 <HAL_RCC_OscConfig+0x334>
 8003982:	e014      	b.n	80039ae <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003984:	f7ff f9b0 	bl	8002ce8 <HAL_GetTick>
 8003988:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800398a:	e00a      	b.n	80039a2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800398c:	f7ff f9ac 	bl	8002ce8 <HAL_GetTick>
 8003990:	4602      	mov	r2, r0
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	1ad3      	subs	r3, r2, r3
 8003996:	f241 3288 	movw	r2, #5000	; 0x1388
 800399a:	4293      	cmp	r3, r2
 800399c:	d901      	bls.n	80039a2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800399e:	2303      	movs	r3, #3
 80039a0:	e0b5      	b.n	8003b0e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039a2:	4b3e      	ldr	r3, [pc, #248]	; (8003a9c <HAL_RCC_OscConfig+0x470>)
 80039a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039a6:	f003 0302 	and.w	r3, r3, #2
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d1ee      	bne.n	800398c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80039ae:	7dfb      	ldrb	r3, [r7, #23]
 80039b0:	2b01      	cmp	r3, #1
 80039b2:	d105      	bne.n	80039c0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039b4:	4b39      	ldr	r3, [pc, #228]	; (8003a9c <HAL_RCC_OscConfig+0x470>)
 80039b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b8:	4a38      	ldr	r2, [pc, #224]	; (8003a9c <HAL_RCC_OscConfig+0x470>)
 80039ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039be:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	699b      	ldr	r3, [r3, #24]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	f000 80a1 	beq.w	8003b0c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80039ca:	4b34      	ldr	r3, [pc, #208]	; (8003a9c <HAL_RCC_OscConfig+0x470>)
 80039cc:	689b      	ldr	r3, [r3, #8]
 80039ce:	f003 030c 	and.w	r3, r3, #12
 80039d2:	2b08      	cmp	r3, #8
 80039d4:	d05c      	beq.n	8003a90 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	699b      	ldr	r3, [r3, #24]
 80039da:	2b02      	cmp	r3, #2
 80039dc:	d141      	bne.n	8003a62 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039de:	4b31      	ldr	r3, [pc, #196]	; (8003aa4 <HAL_RCC_OscConfig+0x478>)
 80039e0:	2200      	movs	r2, #0
 80039e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039e4:	f7ff f980 	bl	8002ce8 <HAL_GetTick>
 80039e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039ea:	e008      	b.n	80039fe <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039ec:	f7ff f97c 	bl	8002ce8 <HAL_GetTick>
 80039f0:	4602      	mov	r2, r0
 80039f2:	693b      	ldr	r3, [r7, #16]
 80039f4:	1ad3      	subs	r3, r2, r3
 80039f6:	2b02      	cmp	r3, #2
 80039f8:	d901      	bls.n	80039fe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80039fa:	2303      	movs	r3, #3
 80039fc:	e087      	b.n	8003b0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039fe:	4b27      	ldr	r3, [pc, #156]	; (8003a9c <HAL_RCC_OscConfig+0x470>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d1f0      	bne.n	80039ec <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	69da      	ldr	r2, [r3, #28]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6a1b      	ldr	r3, [r3, #32]
 8003a12:	431a      	orrs	r2, r3
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a18:	019b      	lsls	r3, r3, #6
 8003a1a:	431a      	orrs	r2, r3
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a20:	085b      	lsrs	r3, r3, #1
 8003a22:	3b01      	subs	r3, #1
 8003a24:	041b      	lsls	r3, r3, #16
 8003a26:	431a      	orrs	r2, r3
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a2c:	061b      	lsls	r3, r3, #24
 8003a2e:	491b      	ldr	r1, [pc, #108]	; (8003a9c <HAL_RCC_OscConfig+0x470>)
 8003a30:	4313      	orrs	r3, r2
 8003a32:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a34:	4b1b      	ldr	r3, [pc, #108]	; (8003aa4 <HAL_RCC_OscConfig+0x478>)
 8003a36:	2201      	movs	r2, #1
 8003a38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a3a:	f7ff f955 	bl	8002ce8 <HAL_GetTick>
 8003a3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a40:	e008      	b.n	8003a54 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a42:	f7ff f951 	bl	8002ce8 <HAL_GetTick>
 8003a46:	4602      	mov	r2, r0
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	1ad3      	subs	r3, r2, r3
 8003a4c:	2b02      	cmp	r3, #2
 8003a4e:	d901      	bls.n	8003a54 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003a50:	2303      	movs	r3, #3
 8003a52:	e05c      	b.n	8003b0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a54:	4b11      	ldr	r3, [pc, #68]	; (8003a9c <HAL_RCC_OscConfig+0x470>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d0f0      	beq.n	8003a42 <HAL_RCC_OscConfig+0x416>
 8003a60:	e054      	b.n	8003b0c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a62:	4b10      	ldr	r3, [pc, #64]	; (8003aa4 <HAL_RCC_OscConfig+0x478>)
 8003a64:	2200      	movs	r2, #0
 8003a66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a68:	f7ff f93e 	bl	8002ce8 <HAL_GetTick>
 8003a6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a6e:	e008      	b.n	8003a82 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a70:	f7ff f93a 	bl	8002ce8 <HAL_GetTick>
 8003a74:	4602      	mov	r2, r0
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	1ad3      	subs	r3, r2, r3
 8003a7a:	2b02      	cmp	r3, #2
 8003a7c:	d901      	bls.n	8003a82 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003a7e:	2303      	movs	r3, #3
 8003a80:	e045      	b.n	8003b0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a82:	4b06      	ldr	r3, [pc, #24]	; (8003a9c <HAL_RCC_OscConfig+0x470>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d1f0      	bne.n	8003a70 <HAL_RCC_OscConfig+0x444>
 8003a8e:	e03d      	b.n	8003b0c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	699b      	ldr	r3, [r3, #24]
 8003a94:	2b01      	cmp	r3, #1
 8003a96:	d107      	bne.n	8003aa8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	e038      	b.n	8003b0e <HAL_RCC_OscConfig+0x4e2>
 8003a9c:	40023800 	.word	0x40023800
 8003aa0:	40007000 	.word	0x40007000
 8003aa4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003aa8:	4b1b      	ldr	r3, [pc, #108]	; (8003b18 <HAL_RCC_OscConfig+0x4ec>)
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	699b      	ldr	r3, [r3, #24]
 8003ab2:	2b01      	cmp	r3, #1
 8003ab4:	d028      	beq.n	8003b08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ac0:	429a      	cmp	r2, r3
 8003ac2:	d121      	bne.n	8003b08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ace:	429a      	cmp	r2, r3
 8003ad0:	d11a      	bne.n	8003b08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ad2:	68fa      	ldr	r2, [r7, #12]
 8003ad4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003ad8:	4013      	ands	r3, r2
 8003ada:	687a      	ldr	r2, [r7, #4]
 8003adc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003ade:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d111      	bne.n	8003b08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aee:	085b      	lsrs	r3, r3, #1
 8003af0:	3b01      	subs	r3, #1
 8003af2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003af4:	429a      	cmp	r2, r3
 8003af6:	d107      	bne.n	8003b08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b02:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b04:	429a      	cmp	r2, r3
 8003b06:	d001      	beq.n	8003b0c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	e000      	b.n	8003b0e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003b0c:	2300      	movs	r3, #0
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	3718      	adds	r7, #24
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}
 8003b16:	bf00      	nop
 8003b18:	40023800 	.word	0x40023800

08003b1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b084      	sub	sp, #16
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
 8003b24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d101      	bne.n	8003b30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	e0cc      	b.n	8003cca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b30:	4b68      	ldr	r3, [pc, #416]	; (8003cd4 <HAL_RCC_ClockConfig+0x1b8>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f003 0307 	and.w	r3, r3, #7
 8003b38:	683a      	ldr	r2, [r7, #0]
 8003b3a:	429a      	cmp	r2, r3
 8003b3c:	d90c      	bls.n	8003b58 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b3e:	4b65      	ldr	r3, [pc, #404]	; (8003cd4 <HAL_RCC_ClockConfig+0x1b8>)
 8003b40:	683a      	ldr	r2, [r7, #0]
 8003b42:	b2d2      	uxtb	r2, r2
 8003b44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b46:	4b63      	ldr	r3, [pc, #396]	; (8003cd4 <HAL_RCC_ClockConfig+0x1b8>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f003 0307 	and.w	r3, r3, #7
 8003b4e:	683a      	ldr	r2, [r7, #0]
 8003b50:	429a      	cmp	r2, r3
 8003b52:	d001      	beq.n	8003b58 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003b54:	2301      	movs	r3, #1
 8003b56:	e0b8      	b.n	8003cca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f003 0302 	and.w	r3, r3, #2
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d020      	beq.n	8003ba6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f003 0304 	and.w	r3, r3, #4
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d005      	beq.n	8003b7c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b70:	4b59      	ldr	r3, [pc, #356]	; (8003cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b72:	689b      	ldr	r3, [r3, #8]
 8003b74:	4a58      	ldr	r2, [pc, #352]	; (8003cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b76:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003b7a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f003 0308 	and.w	r3, r3, #8
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d005      	beq.n	8003b94 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b88:	4b53      	ldr	r3, [pc, #332]	; (8003cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b8a:	689b      	ldr	r3, [r3, #8]
 8003b8c:	4a52      	ldr	r2, [pc, #328]	; (8003cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b8e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003b92:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b94:	4b50      	ldr	r3, [pc, #320]	; (8003cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	689b      	ldr	r3, [r3, #8]
 8003ba0:	494d      	ldr	r1, [pc, #308]	; (8003cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f003 0301 	and.w	r3, r3, #1
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d044      	beq.n	8003c3c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	2b01      	cmp	r3, #1
 8003bb8:	d107      	bne.n	8003bca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bba:	4b47      	ldr	r3, [pc, #284]	; (8003cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d119      	bne.n	8003bfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	e07f      	b.n	8003cca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	2b02      	cmp	r3, #2
 8003bd0:	d003      	beq.n	8003bda <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003bd6:	2b03      	cmp	r3, #3
 8003bd8:	d107      	bne.n	8003bea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bda:	4b3f      	ldr	r3, [pc, #252]	; (8003cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d109      	bne.n	8003bfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	e06f      	b.n	8003cca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bea:	4b3b      	ldr	r3, [pc, #236]	; (8003cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f003 0302 	and.w	r3, r3, #2
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d101      	bne.n	8003bfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	e067      	b.n	8003cca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003bfa:	4b37      	ldr	r3, [pc, #220]	; (8003cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003bfc:	689b      	ldr	r3, [r3, #8]
 8003bfe:	f023 0203 	bic.w	r2, r3, #3
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	4934      	ldr	r1, [pc, #208]	; (8003cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c0c:	f7ff f86c 	bl	8002ce8 <HAL_GetTick>
 8003c10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c12:	e00a      	b.n	8003c2a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c14:	f7ff f868 	bl	8002ce8 <HAL_GetTick>
 8003c18:	4602      	mov	r2, r0
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	1ad3      	subs	r3, r2, r3
 8003c1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d901      	bls.n	8003c2a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003c26:	2303      	movs	r3, #3
 8003c28:	e04f      	b.n	8003cca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c2a:	4b2b      	ldr	r3, [pc, #172]	; (8003cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c2c:	689b      	ldr	r3, [r3, #8]
 8003c2e:	f003 020c 	and.w	r2, r3, #12
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	009b      	lsls	r3, r3, #2
 8003c38:	429a      	cmp	r2, r3
 8003c3a:	d1eb      	bne.n	8003c14 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c3c:	4b25      	ldr	r3, [pc, #148]	; (8003cd4 <HAL_RCC_ClockConfig+0x1b8>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f003 0307 	and.w	r3, r3, #7
 8003c44:	683a      	ldr	r2, [r7, #0]
 8003c46:	429a      	cmp	r2, r3
 8003c48:	d20c      	bcs.n	8003c64 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c4a:	4b22      	ldr	r3, [pc, #136]	; (8003cd4 <HAL_RCC_ClockConfig+0x1b8>)
 8003c4c:	683a      	ldr	r2, [r7, #0]
 8003c4e:	b2d2      	uxtb	r2, r2
 8003c50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c52:	4b20      	ldr	r3, [pc, #128]	; (8003cd4 <HAL_RCC_ClockConfig+0x1b8>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f003 0307 	and.w	r3, r3, #7
 8003c5a:	683a      	ldr	r2, [r7, #0]
 8003c5c:	429a      	cmp	r2, r3
 8003c5e:	d001      	beq.n	8003c64 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003c60:	2301      	movs	r3, #1
 8003c62:	e032      	b.n	8003cca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f003 0304 	and.w	r3, r3, #4
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d008      	beq.n	8003c82 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c70:	4b19      	ldr	r3, [pc, #100]	; (8003cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c72:	689b      	ldr	r3, [r3, #8]
 8003c74:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	68db      	ldr	r3, [r3, #12]
 8003c7c:	4916      	ldr	r1, [pc, #88]	; (8003cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f003 0308 	and.w	r3, r3, #8
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d009      	beq.n	8003ca2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c8e:	4b12      	ldr	r3, [pc, #72]	; (8003cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c90:	689b      	ldr	r3, [r3, #8]
 8003c92:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	691b      	ldr	r3, [r3, #16]
 8003c9a:	00db      	lsls	r3, r3, #3
 8003c9c:	490e      	ldr	r1, [pc, #56]	; (8003cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003ca2:	f000 f821 	bl	8003ce8 <HAL_RCC_GetSysClockFreq>
 8003ca6:	4602      	mov	r2, r0
 8003ca8:	4b0b      	ldr	r3, [pc, #44]	; (8003cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	091b      	lsrs	r3, r3, #4
 8003cae:	f003 030f 	and.w	r3, r3, #15
 8003cb2:	490a      	ldr	r1, [pc, #40]	; (8003cdc <HAL_RCC_ClockConfig+0x1c0>)
 8003cb4:	5ccb      	ldrb	r3, [r1, r3]
 8003cb6:	fa22 f303 	lsr.w	r3, r2, r3
 8003cba:	4a09      	ldr	r2, [pc, #36]	; (8003ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8003cbc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003cbe:	4b09      	ldr	r3, [pc, #36]	; (8003ce4 <HAL_RCC_ClockConfig+0x1c8>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	f7fe ffcc 	bl	8002c60 <HAL_InitTick>

  return HAL_OK;
 8003cc8:	2300      	movs	r3, #0
}
 8003cca:	4618      	mov	r0, r3
 8003ccc:	3710      	adds	r7, #16
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bd80      	pop	{r7, pc}
 8003cd2:	bf00      	nop
 8003cd4:	40023c00 	.word	0x40023c00
 8003cd8:	40023800 	.word	0x40023800
 8003cdc:	0801070c 	.word	0x0801070c
 8003ce0:	20000084 	.word	0x20000084
 8003ce4:	20000088 	.word	0x20000088

08003ce8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ce8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003cec:	b090      	sub	sp, #64	; 0x40
 8003cee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	637b      	str	r3, [r7, #52]	; 0x34
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d00:	4b59      	ldr	r3, [pc, #356]	; (8003e68 <HAL_RCC_GetSysClockFreq+0x180>)
 8003d02:	689b      	ldr	r3, [r3, #8]
 8003d04:	f003 030c 	and.w	r3, r3, #12
 8003d08:	2b08      	cmp	r3, #8
 8003d0a:	d00d      	beq.n	8003d28 <HAL_RCC_GetSysClockFreq+0x40>
 8003d0c:	2b08      	cmp	r3, #8
 8003d0e:	f200 80a1 	bhi.w	8003e54 <HAL_RCC_GetSysClockFreq+0x16c>
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d002      	beq.n	8003d1c <HAL_RCC_GetSysClockFreq+0x34>
 8003d16:	2b04      	cmp	r3, #4
 8003d18:	d003      	beq.n	8003d22 <HAL_RCC_GetSysClockFreq+0x3a>
 8003d1a:	e09b      	b.n	8003e54 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003d1c:	4b53      	ldr	r3, [pc, #332]	; (8003e6c <HAL_RCC_GetSysClockFreq+0x184>)
 8003d1e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003d20:	e09b      	b.n	8003e5a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003d22:	4b53      	ldr	r3, [pc, #332]	; (8003e70 <HAL_RCC_GetSysClockFreq+0x188>)
 8003d24:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003d26:	e098      	b.n	8003e5a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d28:	4b4f      	ldr	r3, [pc, #316]	; (8003e68 <HAL_RCC_GetSysClockFreq+0x180>)
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d30:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003d32:	4b4d      	ldr	r3, [pc, #308]	; (8003e68 <HAL_RCC_GetSysClockFreq+0x180>)
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d028      	beq.n	8003d90 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d3e:	4b4a      	ldr	r3, [pc, #296]	; (8003e68 <HAL_RCC_GetSysClockFreq+0x180>)
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	099b      	lsrs	r3, r3, #6
 8003d44:	2200      	movs	r2, #0
 8003d46:	623b      	str	r3, [r7, #32]
 8003d48:	627a      	str	r2, [r7, #36]	; 0x24
 8003d4a:	6a3b      	ldr	r3, [r7, #32]
 8003d4c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003d50:	2100      	movs	r1, #0
 8003d52:	4b47      	ldr	r3, [pc, #284]	; (8003e70 <HAL_RCC_GetSysClockFreq+0x188>)
 8003d54:	fb03 f201 	mul.w	r2, r3, r1
 8003d58:	2300      	movs	r3, #0
 8003d5a:	fb00 f303 	mul.w	r3, r0, r3
 8003d5e:	4413      	add	r3, r2
 8003d60:	4a43      	ldr	r2, [pc, #268]	; (8003e70 <HAL_RCC_GetSysClockFreq+0x188>)
 8003d62:	fba0 1202 	umull	r1, r2, r0, r2
 8003d66:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003d68:	460a      	mov	r2, r1
 8003d6a:	62ba      	str	r2, [r7, #40]	; 0x28
 8003d6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d6e:	4413      	add	r3, r2
 8003d70:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d74:	2200      	movs	r2, #0
 8003d76:	61bb      	str	r3, [r7, #24]
 8003d78:	61fa      	str	r2, [r7, #28]
 8003d7a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d7e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003d82:	f7fc fa95 	bl	80002b0 <__aeabi_uldivmod>
 8003d86:	4602      	mov	r2, r0
 8003d88:	460b      	mov	r3, r1
 8003d8a:	4613      	mov	r3, r2
 8003d8c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d8e:	e053      	b.n	8003e38 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d90:	4b35      	ldr	r3, [pc, #212]	; (8003e68 <HAL_RCC_GetSysClockFreq+0x180>)
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	099b      	lsrs	r3, r3, #6
 8003d96:	2200      	movs	r2, #0
 8003d98:	613b      	str	r3, [r7, #16]
 8003d9a:	617a      	str	r2, [r7, #20]
 8003d9c:	693b      	ldr	r3, [r7, #16]
 8003d9e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003da2:	f04f 0b00 	mov.w	fp, #0
 8003da6:	4652      	mov	r2, sl
 8003da8:	465b      	mov	r3, fp
 8003daa:	f04f 0000 	mov.w	r0, #0
 8003dae:	f04f 0100 	mov.w	r1, #0
 8003db2:	0159      	lsls	r1, r3, #5
 8003db4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003db8:	0150      	lsls	r0, r2, #5
 8003dba:	4602      	mov	r2, r0
 8003dbc:	460b      	mov	r3, r1
 8003dbe:	ebb2 080a 	subs.w	r8, r2, sl
 8003dc2:	eb63 090b 	sbc.w	r9, r3, fp
 8003dc6:	f04f 0200 	mov.w	r2, #0
 8003dca:	f04f 0300 	mov.w	r3, #0
 8003dce:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003dd2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003dd6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003dda:	ebb2 0408 	subs.w	r4, r2, r8
 8003dde:	eb63 0509 	sbc.w	r5, r3, r9
 8003de2:	f04f 0200 	mov.w	r2, #0
 8003de6:	f04f 0300 	mov.w	r3, #0
 8003dea:	00eb      	lsls	r3, r5, #3
 8003dec:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003df0:	00e2      	lsls	r2, r4, #3
 8003df2:	4614      	mov	r4, r2
 8003df4:	461d      	mov	r5, r3
 8003df6:	eb14 030a 	adds.w	r3, r4, sl
 8003dfa:	603b      	str	r3, [r7, #0]
 8003dfc:	eb45 030b 	adc.w	r3, r5, fp
 8003e00:	607b      	str	r3, [r7, #4]
 8003e02:	f04f 0200 	mov.w	r2, #0
 8003e06:	f04f 0300 	mov.w	r3, #0
 8003e0a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003e0e:	4629      	mov	r1, r5
 8003e10:	028b      	lsls	r3, r1, #10
 8003e12:	4621      	mov	r1, r4
 8003e14:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003e18:	4621      	mov	r1, r4
 8003e1a:	028a      	lsls	r2, r1, #10
 8003e1c:	4610      	mov	r0, r2
 8003e1e:	4619      	mov	r1, r3
 8003e20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e22:	2200      	movs	r2, #0
 8003e24:	60bb      	str	r3, [r7, #8]
 8003e26:	60fa      	str	r2, [r7, #12]
 8003e28:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003e2c:	f7fc fa40 	bl	80002b0 <__aeabi_uldivmod>
 8003e30:	4602      	mov	r2, r0
 8003e32:	460b      	mov	r3, r1
 8003e34:	4613      	mov	r3, r2
 8003e36:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003e38:	4b0b      	ldr	r3, [pc, #44]	; (8003e68 <HAL_RCC_GetSysClockFreq+0x180>)
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	0c1b      	lsrs	r3, r3, #16
 8003e3e:	f003 0303 	and.w	r3, r3, #3
 8003e42:	3301      	adds	r3, #1
 8003e44:	005b      	lsls	r3, r3, #1
 8003e46:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003e48:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e50:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003e52:	e002      	b.n	8003e5a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003e54:	4b05      	ldr	r3, [pc, #20]	; (8003e6c <HAL_RCC_GetSysClockFreq+0x184>)
 8003e56:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003e58:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	3740      	adds	r7, #64	; 0x40
 8003e60:	46bd      	mov	sp, r7
 8003e62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e66:	bf00      	nop
 8003e68:	40023800 	.word	0x40023800
 8003e6c:	00f42400 	.word	0x00f42400
 8003e70:	017d7840 	.word	0x017d7840

08003e74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e74:	b480      	push	{r7}
 8003e76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e78:	4b03      	ldr	r3, [pc, #12]	; (8003e88 <HAL_RCC_GetHCLKFreq+0x14>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
}
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e84:	4770      	bx	lr
 8003e86:	bf00      	nop
 8003e88:	20000084 	.word	0x20000084

08003e8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003e90:	f7ff fff0 	bl	8003e74 <HAL_RCC_GetHCLKFreq>
 8003e94:	4602      	mov	r2, r0
 8003e96:	4b05      	ldr	r3, [pc, #20]	; (8003eac <HAL_RCC_GetPCLK1Freq+0x20>)
 8003e98:	689b      	ldr	r3, [r3, #8]
 8003e9a:	0a9b      	lsrs	r3, r3, #10
 8003e9c:	f003 0307 	and.w	r3, r3, #7
 8003ea0:	4903      	ldr	r1, [pc, #12]	; (8003eb0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ea2:	5ccb      	ldrb	r3, [r1, r3]
 8003ea4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	bd80      	pop	{r7, pc}
 8003eac:	40023800 	.word	0x40023800
 8003eb0:	0801071c 	.word	0x0801071c

08003eb4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003eb8:	f7ff ffdc 	bl	8003e74 <HAL_RCC_GetHCLKFreq>
 8003ebc:	4602      	mov	r2, r0
 8003ebe:	4b05      	ldr	r3, [pc, #20]	; (8003ed4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003ec0:	689b      	ldr	r3, [r3, #8]
 8003ec2:	0b5b      	lsrs	r3, r3, #13
 8003ec4:	f003 0307 	and.w	r3, r3, #7
 8003ec8:	4903      	ldr	r1, [pc, #12]	; (8003ed8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003eca:	5ccb      	ldrb	r3, [r1, r3]
 8003ecc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	bd80      	pop	{r7, pc}
 8003ed4:	40023800 	.word	0x40023800
 8003ed8:	0801071c 	.word	0x0801071c

08003edc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b082      	sub	sp, #8
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d101      	bne.n	8003eee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003eea:	2301      	movs	r3, #1
 8003eec:	e07b      	b.n	8003fe6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d108      	bne.n	8003f08 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003efe:	d009      	beq.n	8003f14 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2200      	movs	r2, #0
 8003f04:	61da      	str	r2, [r3, #28]
 8003f06:	e005      	b.n	8003f14 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2200      	movs	r2, #0
 8003f12:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2200      	movs	r2, #0
 8003f18:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003f20:	b2db      	uxtb	r3, r3
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d106      	bne.n	8003f34 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003f2e:	6878      	ldr	r0, [r7, #4]
 8003f30:	f7fe fb8e 	bl	8002650 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2202      	movs	r2, #2
 8003f38:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	681a      	ldr	r2, [r3, #0]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f4a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	689b      	ldr	r3, [r3, #8]
 8003f58:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003f5c:	431a      	orrs	r2, r3
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	68db      	ldr	r3, [r3, #12]
 8003f62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f66:	431a      	orrs	r2, r3
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	691b      	ldr	r3, [r3, #16]
 8003f6c:	f003 0302 	and.w	r3, r3, #2
 8003f70:	431a      	orrs	r2, r3
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	695b      	ldr	r3, [r3, #20]
 8003f76:	f003 0301 	and.w	r3, r3, #1
 8003f7a:	431a      	orrs	r2, r3
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	699b      	ldr	r3, [r3, #24]
 8003f80:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f84:	431a      	orrs	r2, r3
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	69db      	ldr	r3, [r3, #28]
 8003f8a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003f8e:	431a      	orrs	r2, r3
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6a1b      	ldr	r3, [r3, #32]
 8003f94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f98:	ea42 0103 	orr.w	r1, r2, r3
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fa0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	430a      	orrs	r2, r1
 8003faa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	699b      	ldr	r3, [r3, #24]
 8003fb0:	0c1b      	lsrs	r3, r3, #16
 8003fb2:	f003 0104 	and.w	r1, r3, #4
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fba:	f003 0210 	and.w	r2, r3, #16
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	430a      	orrs	r2, r1
 8003fc4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	69da      	ldr	r2, [r3, #28]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003fd4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2201      	movs	r2, #1
 8003fe0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003fe4:	2300      	movs	r3, #0
}
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	3708      	adds	r7, #8
 8003fea:	46bd      	mov	sp, r7
 8003fec:	bd80      	pop	{r7, pc}

08003fee <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003fee:	b580      	push	{r7, lr}
 8003ff0:	b08c      	sub	sp, #48	; 0x30
 8003ff2:	af00      	add	r7, sp, #0
 8003ff4:	60f8      	str	r0, [r7, #12]
 8003ff6:	60b9      	str	r1, [r7, #8]
 8003ff8:	607a      	str	r2, [r7, #4]
 8003ffa:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004000:	2300      	movs	r3, #0
 8004002:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800400c:	2b01      	cmp	r3, #1
 800400e:	d101      	bne.n	8004014 <HAL_SPI_TransmitReceive+0x26>
 8004010:	2302      	movs	r3, #2
 8004012:	e18a      	b.n	800432a <HAL_SPI_TransmitReceive+0x33c>
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	2201      	movs	r2, #1
 8004018:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800401c:	f7fe fe64 	bl	8002ce8 <HAL_GetTick>
 8004020:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004028:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004032:	887b      	ldrh	r3, [r7, #2]
 8004034:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004036:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800403a:	2b01      	cmp	r3, #1
 800403c:	d00f      	beq.n	800405e <HAL_SPI_TransmitReceive+0x70>
 800403e:	69fb      	ldr	r3, [r7, #28]
 8004040:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004044:	d107      	bne.n	8004056 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	689b      	ldr	r3, [r3, #8]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d103      	bne.n	8004056 <HAL_SPI_TransmitReceive+0x68>
 800404e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004052:	2b04      	cmp	r3, #4
 8004054:	d003      	beq.n	800405e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004056:	2302      	movs	r3, #2
 8004058:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800405c:	e15b      	b.n	8004316 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d005      	beq.n	8004070 <HAL_SPI_TransmitReceive+0x82>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d002      	beq.n	8004070 <HAL_SPI_TransmitReceive+0x82>
 800406a:	887b      	ldrh	r3, [r7, #2]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d103      	bne.n	8004078 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004070:	2301      	movs	r3, #1
 8004072:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004076:	e14e      	b.n	8004316 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800407e:	b2db      	uxtb	r3, r3
 8004080:	2b04      	cmp	r3, #4
 8004082:	d003      	beq.n	800408c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	2205      	movs	r2, #5
 8004088:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	2200      	movs	r2, #0
 8004090:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	687a      	ldr	r2, [r7, #4]
 8004096:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	887a      	ldrh	r2, [r7, #2]
 800409c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	887a      	ldrh	r2, [r7, #2]
 80040a2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	68ba      	ldr	r2, [r7, #8]
 80040a8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	887a      	ldrh	r2, [r7, #2]
 80040ae:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	887a      	ldrh	r2, [r7, #2]
 80040b4:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	2200      	movs	r2, #0
 80040ba:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	2200      	movs	r2, #0
 80040c0:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040cc:	2b40      	cmp	r3, #64	; 0x40
 80040ce:	d007      	beq.n	80040e0 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	681a      	ldr	r2, [r3, #0]
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80040de:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	68db      	ldr	r3, [r3, #12]
 80040e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040e8:	d178      	bne.n	80041dc <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d002      	beq.n	80040f8 <HAL_SPI_TransmitReceive+0x10a>
 80040f2:	8b7b      	ldrh	r3, [r7, #26]
 80040f4:	2b01      	cmp	r3, #1
 80040f6:	d166      	bne.n	80041c6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040fc:	881a      	ldrh	r2, [r3, #0]
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004108:	1c9a      	adds	r2, r3, #2
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004112:	b29b      	uxth	r3, r3
 8004114:	3b01      	subs	r3, #1
 8004116:	b29a      	uxth	r2, r3
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800411c:	e053      	b.n	80041c6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	f003 0302 	and.w	r3, r3, #2
 8004128:	2b02      	cmp	r3, #2
 800412a:	d11b      	bne.n	8004164 <HAL_SPI_TransmitReceive+0x176>
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004130:	b29b      	uxth	r3, r3
 8004132:	2b00      	cmp	r3, #0
 8004134:	d016      	beq.n	8004164 <HAL_SPI_TransmitReceive+0x176>
 8004136:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004138:	2b01      	cmp	r3, #1
 800413a:	d113      	bne.n	8004164 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004140:	881a      	ldrh	r2, [r3, #0]
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800414c:	1c9a      	adds	r2, r3, #2
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004156:	b29b      	uxth	r3, r3
 8004158:	3b01      	subs	r3, #1
 800415a:	b29a      	uxth	r2, r3
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004160:	2300      	movs	r3, #0
 8004162:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	689b      	ldr	r3, [r3, #8]
 800416a:	f003 0301 	and.w	r3, r3, #1
 800416e:	2b01      	cmp	r3, #1
 8004170:	d119      	bne.n	80041a6 <HAL_SPI_TransmitReceive+0x1b8>
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004176:	b29b      	uxth	r3, r3
 8004178:	2b00      	cmp	r3, #0
 800417a:	d014      	beq.n	80041a6 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	68da      	ldr	r2, [r3, #12]
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004186:	b292      	uxth	r2, r2
 8004188:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800418e:	1c9a      	adds	r2, r3, #2
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004198:	b29b      	uxth	r3, r3
 800419a:	3b01      	subs	r3, #1
 800419c:	b29a      	uxth	r2, r3
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80041a2:	2301      	movs	r3, #1
 80041a4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80041a6:	f7fe fd9f 	bl	8002ce8 <HAL_GetTick>
 80041aa:	4602      	mov	r2, r0
 80041ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ae:	1ad3      	subs	r3, r2, r3
 80041b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80041b2:	429a      	cmp	r2, r3
 80041b4:	d807      	bhi.n	80041c6 <HAL_SPI_TransmitReceive+0x1d8>
 80041b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041bc:	d003      	beq.n	80041c6 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80041be:	2303      	movs	r3, #3
 80041c0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80041c4:	e0a7      	b.n	8004316 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041ca:	b29b      	uxth	r3, r3
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d1a6      	bne.n	800411e <HAL_SPI_TransmitReceive+0x130>
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041d4:	b29b      	uxth	r3, r3
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d1a1      	bne.n	800411e <HAL_SPI_TransmitReceive+0x130>
 80041da:	e07c      	b.n	80042d6 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d002      	beq.n	80041ea <HAL_SPI_TransmitReceive+0x1fc>
 80041e4:	8b7b      	ldrh	r3, [r7, #26]
 80041e6:	2b01      	cmp	r3, #1
 80041e8:	d16b      	bne.n	80042c2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	330c      	adds	r3, #12
 80041f4:	7812      	ldrb	r2, [r2, #0]
 80041f6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041fc:	1c5a      	adds	r2, r3, #1
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004206:	b29b      	uxth	r3, r3
 8004208:	3b01      	subs	r3, #1
 800420a:	b29a      	uxth	r2, r3
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004210:	e057      	b.n	80042c2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	689b      	ldr	r3, [r3, #8]
 8004218:	f003 0302 	and.w	r3, r3, #2
 800421c:	2b02      	cmp	r3, #2
 800421e:	d11c      	bne.n	800425a <HAL_SPI_TransmitReceive+0x26c>
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004224:	b29b      	uxth	r3, r3
 8004226:	2b00      	cmp	r3, #0
 8004228:	d017      	beq.n	800425a <HAL_SPI_TransmitReceive+0x26c>
 800422a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800422c:	2b01      	cmp	r3, #1
 800422e:	d114      	bne.n	800425a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	330c      	adds	r3, #12
 800423a:	7812      	ldrb	r2, [r2, #0]
 800423c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004242:	1c5a      	adds	r2, r3, #1
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800424c:	b29b      	uxth	r3, r3
 800424e:	3b01      	subs	r3, #1
 8004250:	b29a      	uxth	r2, r3
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004256:	2300      	movs	r3, #0
 8004258:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	689b      	ldr	r3, [r3, #8]
 8004260:	f003 0301 	and.w	r3, r3, #1
 8004264:	2b01      	cmp	r3, #1
 8004266:	d119      	bne.n	800429c <HAL_SPI_TransmitReceive+0x2ae>
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800426c:	b29b      	uxth	r3, r3
 800426e:	2b00      	cmp	r3, #0
 8004270:	d014      	beq.n	800429c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	68da      	ldr	r2, [r3, #12]
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800427c:	b2d2      	uxtb	r2, r2
 800427e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004284:	1c5a      	adds	r2, r3, #1
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800428e:	b29b      	uxth	r3, r3
 8004290:	3b01      	subs	r3, #1
 8004292:	b29a      	uxth	r2, r3
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004298:	2301      	movs	r3, #1
 800429a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800429c:	f7fe fd24 	bl	8002ce8 <HAL_GetTick>
 80042a0:	4602      	mov	r2, r0
 80042a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a4:	1ad3      	subs	r3, r2, r3
 80042a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80042a8:	429a      	cmp	r2, r3
 80042aa:	d803      	bhi.n	80042b4 <HAL_SPI_TransmitReceive+0x2c6>
 80042ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042b2:	d102      	bne.n	80042ba <HAL_SPI_TransmitReceive+0x2cc>
 80042b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d103      	bne.n	80042c2 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80042ba:	2303      	movs	r3, #3
 80042bc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80042c0:	e029      	b.n	8004316 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042c6:	b29b      	uxth	r3, r3
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d1a2      	bne.n	8004212 <HAL_SPI_TransmitReceive+0x224>
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042d0:	b29b      	uxth	r3, r3
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d19d      	bne.n	8004212 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80042d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042d8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80042da:	68f8      	ldr	r0, [r7, #12]
 80042dc:	f000 f8b2 	bl	8004444 <SPI_EndRxTxTransaction>
 80042e0:	4603      	mov	r3, r0
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d006      	beq.n	80042f4 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80042e6:	2301      	movs	r3, #1
 80042e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	2220      	movs	r2, #32
 80042f0:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80042f2:	e010      	b.n	8004316 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	689b      	ldr	r3, [r3, #8]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d10b      	bne.n	8004314 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80042fc:	2300      	movs	r3, #0
 80042fe:	617b      	str	r3, [r7, #20]
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	68db      	ldr	r3, [r3, #12]
 8004306:	617b      	str	r3, [r7, #20]
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	689b      	ldr	r3, [r3, #8]
 800430e:	617b      	str	r3, [r7, #20]
 8004310:	697b      	ldr	r3, [r7, #20]
 8004312:	e000      	b.n	8004316 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004314:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	2201      	movs	r2, #1
 800431a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	2200      	movs	r2, #0
 8004322:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004326:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800432a:	4618      	mov	r0, r3
 800432c:	3730      	adds	r7, #48	; 0x30
 800432e:	46bd      	mov	sp, r7
 8004330:	bd80      	pop	{r7, pc}
	...

08004334 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b088      	sub	sp, #32
 8004338:	af00      	add	r7, sp, #0
 800433a:	60f8      	str	r0, [r7, #12]
 800433c:	60b9      	str	r1, [r7, #8]
 800433e:	603b      	str	r3, [r7, #0]
 8004340:	4613      	mov	r3, r2
 8004342:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004344:	f7fe fcd0 	bl	8002ce8 <HAL_GetTick>
 8004348:	4602      	mov	r2, r0
 800434a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800434c:	1a9b      	subs	r3, r3, r2
 800434e:	683a      	ldr	r2, [r7, #0]
 8004350:	4413      	add	r3, r2
 8004352:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004354:	f7fe fcc8 	bl	8002ce8 <HAL_GetTick>
 8004358:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800435a:	4b39      	ldr	r3, [pc, #228]	; (8004440 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	015b      	lsls	r3, r3, #5
 8004360:	0d1b      	lsrs	r3, r3, #20
 8004362:	69fa      	ldr	r2, [r7, #28]
 8004364:	fb02 f303 	mul.w	r3, r2, r3
 8004368:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800436a:	e054      	b.n	8004416 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004372:	d050      	beq.n	8004416 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004374:	f7fe fcb8 	bl	8002ce8 <HAL_GetTick>
 8004378:	4602      	mov	r2, r0
 800437a:	69bb      	ldr	r3, [r7, #24]
 800437c:	1ad3      	subs	r3, r2, r3
 800437e:	69fa      	ldr	r2, [r7, #28]
 8004380:	429a      	cmp	r2, r3
 8004382:	d902      	bls.n	800438a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004384:	69fb      	ldr	r3, [r7, #28]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d13d      	bne.n	8004406 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	685a      	ldr	r2, [r3, #4]
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004398:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80043a2:	d111      	bne.n	80043c8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	689b      	ldr	r3, [r3, #8]
 80043a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043ac:	d004      	beq.n	80043b8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	689b      	ldr	r3, [r3, #8]
 80043b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043b6:	d107      	bne.n	80043c8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	681a      	ldr	r2, [r3, #0]
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80043c6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043d0:	d10f      	bne.n	80043f2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	681a      	ldr	r2, [r3, #0]
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80043e0:	601a      	str	r2, [r3, #0]
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	681a      	ldr	r2, [r3, #0]
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80043f0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	2201      	movs	r2, #1
 80043f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	2200      	movs	r2, #0
 80043fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004402:	2303      	movs	r3, #3
 8004404:	e017      	b.n	8004436 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d101      	bne.n	8004410 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800440c:	2300      	movs	r3, #0
 800440e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004410:	697b      	ldr	r3, [r7, #20]
 8004412:	3b01      	subs	r3, #1
 8004414:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	689a      	ldr	r2, [r3, #8]
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	4013      	ands	r3, r2
 8004420:	68ba      	ldr	r2, [r7, #8]
 8004422:	429a      	cmp	r2, r3
 8004424:	bf0c      	ite	eq
 8004426:	2301      	moveq	r3, #1
 8004428:	2300      	movne	r3, #0
 800442a:	b2db      	uxtb	r3, r3
 800442c:	461a      	mov	r2, r3
 800442e:	79fb      	ldrb	r3, [r7, #7]
 8004430:	429a      	cmp	r2, r3
 8004432:	d19b      	bne.n	800436c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004434:	2300      	movs	r3, #0
}
 8004436:	4618      	mov	r0, r3
 8004438:	3720      	adds	r7, #32
 800443a:	46bd      	mov	sp, r7
 800443c:	bd80      	pop	{r7, pc}
 800443e:	bf00      	nop
 8004440:	20000084 	.word	0x20000084

08004444 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b088      	sub	sp, #32
 8004448:	af02      	add	r7, sp, #8
 800444a:	60f8      	str	r0, [r7, #12]
 800444c:	60b9      	str	r1, [r7, #8]
 800444e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004450:	4b1b      	ldr	r3, [pc, #108]	; (80044c0 <SPI_EndRxTxTransaction+0x7c>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a1b      	ldr	r2, [pc, #108]	; (80044c4 <SPI_EndRxTxTransaction+0x80>)
 8004456:	fba2 2303 	umull	r2, r3, r2, r3
 800445a:	0d5b      	lsrs	r3, r3, #21
 800445c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004460:	fb02 f303 	mul.w	r3, r2, r3
 8004464:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800446e:	d112      	bne.n	8004496 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	9300      	str	r3, [sp, #0]
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	2200      	movs	r2, #0
 8004478:	2180      	movs	r1, #128	; 0x80
 800447a:	68f8      	ldr	r0, [r7, #12]
 800447c:	f7ff ff5a 	bl	8004334 <SPI_WaitFlagStateUntilTimeout>
 8004480:	4603      	mov	r3, r0
 8004482:	2b00      	cmp	r3, #0
 8004484:	d016      	beq.n	80044b4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800448a:	f043 0220 	orr.w	r2, r3, #32
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004492:	2303      	movs	r3, #3
 8004494:	e00f      	b.n	80044b6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d00a      	beq.n	80044b2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800449c:	697b      	ldr	r3, [r7, #20]
 800449e:	3b01      	subs	r3, #1
 80044a0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	689b      	ldr	r3, [r3, #8]
 80044a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044ac:	2b80      	cmp	r3, #128	; 0x80
 80044ae:	d0f2      	beq.n	8004496 <SPI_EndRxTxTransaction+0x52>
 80044b0:	e000      	b.n	80044b4 <SPI_EndRxTxTransaction+0x70>
        break;
 80044b2:	bf00      	nop
  }

  return HAL_OK;
 80044b4:	2300      	movs	r3, #0
}
 80044b6:	4618      	mov	r0, r3
 80044b8:	3718      	adds	r7, #24
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd80      	pop	{r7, pc}
 80044be:	bf00      	nop
 80044c0:	20000084 	.word	0x20000084
 80044c4:	165e9f81 	.word	0x165e9f81

080044c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b082      	sub	sp, #8
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d101      	bne.n	80044da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80044d6:	2301      	movs	r3, #1
 80044d8:	e041      	b.n	800455e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044e0:	b2db      	uxtb	r3, r3
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d106      	bne.n	80044f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2200      	movs	r2, #0
 80044ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	f7fe f8f6 	bl	80026e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2202      	movs	r2, #2
 80044f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681a      	ldr	r2, [r3, #0]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	3304      	adds	r3, #4
 8004504:	4619      	mov	r1, r3
 8004506:	4610      	mov	r0, r2
 8004508:	f000 fce4 	bl	8004ed4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2201      	movs	r2, #1
 8004510:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2201      	movs	r2, #1
 8004518:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2201      	movs	r2, #1
 8004520:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2201      	movs	r2, #1
 8004528:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2201      	movs	r2, #1
 8004530:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2201      	movs	r2, #1
 8004538:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2201      	movs	r2, #1
 8004540:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2201      	movs	r2, #1
 8004548:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2201      	movs	r2, #1
 8004550:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2201      	movs	r2, #1
 8004558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800455c:	2300      	movs	r3, #0
}
 800455e:	4618      	mov	r0, r3
 8004560:	3708      	adds	r7, #8
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}

08004566 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8004566:	b580      	push	{r7, lr}
 8004568:	b082      	sub	sp, #8
 800456a:	af00      	add	r7, sp, #0
 800456c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d101      	bne.n	8004578 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8004574:	2301      	movs	r3, #1
 8004576:	e041      	b.n	80045fc <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800457e:	b2db      	uxtb	r3, r3
 8004580:	2b00      	cmp	r3, #0
 8004582:	d106      	bne.n	8004592 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2200      	movs	r2, #0
 8004588:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800458c:	6878      	ldr	r0, [r7, #4]
 800458e:	f000 f839 	bl	8004604 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2202      	movs	r2, #2
 8004596:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681a      	ldr	r2, [r3, #0]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	3304      	adds	r3, #4
 80045a2:	4619      	mov	r1, r3
 80045a4:	4610      	mov	r0, r2
 80045a6:	f000 fc95 	bl	8004ed4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2201      	movs	r2, #1
 80045ae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2201      	movs	r2, #1
 80045b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2201      	movs	r2, #1
 80045be:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2201      	movs	r2, #1
 80045c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2201      	movs	r2, #1
 80045ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2201      	movs	r2, #1
 80045d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2201      	movs	r2, #1
 80045de:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2201      	movs	r2, #1
 80045e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2201      	movs	r2, #1
 80045ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2201      	movs	r2, #1
 80045f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80045fa:	2300      	movs	r3, #0
}
 80045fc:	4618      	mov	r0, r3
 80045fe:	3708      	adds	r7, #8
 8004600:	46bd      	mov	sp, r7
 8004602:	bd80      	pop	{r7, pc}

08004604 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8004604:	b480      	push	{r7}
 8004606:	b083      	sub	sp, #12
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800460c:	bf00      	nop
 800460e:	370c      	adds	r7, #12
 8004610:	46bd      	mov	sp, r7
 8004612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004616:	4770      	bx	lr

08004618 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b084      	sub	sp, #16
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
 8004620:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004622:	2300      	movs	r3, #0
 8004624:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d109      	bne.n	8004640 <HAL_TIM_OC_Start_IT+0x28>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004632:	b2db      	uxtb	r3, r3
 8004634:	2b01      	cmp	r3, #1
 8004636:	bf14      	ite	ne
 8004638:	2301      	movne	r3, #1
 800463a:	2300      	moveq	r3, #0
 800463c:	b2db      	uxtb	r3, r3
 800463e:	e022      	b.n	8004686 <HAL_TIM_OC_Start_IT+0x6e>
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	2b04      	cmp	r3, #4
 8004644:	d109      	bne.n	800465a <HAL_TIM_OC_Start_IT+0x42>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800464c:	b2db      	uxtb	r3, r3
 800464e:	2b01      	cmp	r3, #1
 8004650:	bf14      	ite	ne
 8004652:	2301      	movne	r3, #1
 8004654:	2300      	moveq	r3, #0
 8004656:	b2db      	uxtb	r3, r3
 8004658:	e015      	b.n	8004686 <HAL_TIM_OC_Start_IT+0x6e>
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	2b08      	cmp	r3, #8
 800465e:	d109      	bne.n	8004674 <HAL_TIM_OC_Start_IT+0x5c>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004666:	b2db      	uxtb	r3, r3
 8004668:	2b01      	cmp	r3, #1
 800466a:	bf14      	ite	ne
 800466c:	2301      	movne	r3, #1
 800466e:	2300      	moveq	r3, #0
 8004670:	b2db      	uxtb	r3, r3
 8004672:	e008      	b.n	8004686 <HAL_TIM_OC_Start_IT+0x6e>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800467a:	b2db      	uxtb	r3, r3
 800467c:	2b01      	cmp	r3, #1
 800467e:	bf14      	ite	ne
 8004680:	2301      	movne	r3, #1
 8004682:	2300      	moveq	r3, #0
 8004684:	b2db      	uxtb	r3, r3
 8004686:	2b00      	cmp	r3, #0
 8004688:	d001      	beq.n	800468e <HAL_TIM_OC_Start_IT+0x76>
  {
    return HAL_ERROR;
 800468a:	2301      	movs	r3, #1
 800468c:	e0b3      	b.n	80047f6 <HAL_TIM_OC_Start_IT+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d104      	bne.n	800469e <HAL_TIM_OC_Start_IT+0x86>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2202      	movs	r2, #2
 8004698:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800469c:	e013      	b.n	80046c6 <HAL_TIM_OC_Start_IT+0xae>
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	2b04      	cmp	r3, #4
 80046a2:	d104      	bne.n	80046ae <HAL_TIM_OC_Start_IT+0x96>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2202      	movs	r2, #2
 80046a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80046ac:	e00b      	b.n	80046c6 <HAL_TIM_OC_Start_IT+0xae>
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	2b08      	cmp	r3, #8
 80046b2:	d104      	bne.n	80046be <HAL_TIM_OC_Start_IT+0xa6>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2202      	movs	r2, #2
 80046b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80046bc:	e003      	b.n	80046c6 <HAL_TIM_OC_Start_IT+0xae>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2202      	movs	r2, #2
 80046c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	2b0c      	cmp	r3, #12
 80046ca:	d841      	bhi.n	8004750 <HAL_TIM_OC_Start_IT+0x138>
 80046cc:	a201      	add	r2, pc, #4	; (adr r2, 80046d4 <HAL_TIM_OC_Start_IT+0xbc>)
 80046ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046d2:	bf00      	nop
 80046d4:	08004709 	.word	0x08004709
 80046d8:	08004751 	.word	0x08004751
 80046dc:	08004751 	.word	0x08004751
 80046e0:	08004751 	.word	0x08004751
 80046e4:	0800471b 	.word	0x0800471b
 80046e8:	08004751 	.word	0x08004751
 80046ec:	08004751 	.word	0x08004751
 80046f0:	08004751 	.word	0x08004751
 80046f4:	0800472d 	.word	0x0800472d
 80046f8:	08004751 	.word	0x08004751
 80046fc:	08004751 	.word	0x08004751
 8004700:	08004751 	.word	0x08004751
 8004704:	0800473f 	.word	0x0800473f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	68da      	ldr	r2, [r3, #12]
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f042 0202 	orr.w	r2, r2, #2
 8004716:	60da      	str	r2, [r3, #12]
      break;
 8004718:	e01d      	b.n	8004756 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	68da      	ldr	r2, [r3, #12]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f042 0204 	orr.w	r2, r2, #4
 8004728:	60da      	str	r2, [r3, #12]
      break;
 800472a:	e014      	b.n	8004756 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	68da      	ldr	r2, [r3, #12]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f042 0208 	orr.w	r2, r2, #8
 800473a:	60da      	str	r2, [r3, #12]
      break;
 800473c:	e00b      	b.n	8004756 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	68da      	ldr	r2, [r3, #12]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f042 0210 	orr.w	r2, r2, #16
 800474c:	60da      	str	r2, [r3, #12]
      break;
 800474e:	e002      	b.n	8004756 <HAL_TIM_OC_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8004750:	2301      	movs	r3, #1
 8004752:	73fb      	strb	r3, [r7, #15]
      break;
 8004754:	bf00      	nop
  }

  if (status == HAL_OK)
 8004756:	7bfb      	ldrb	r3, [r7, #15]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d14b      	bne.n	80047f4 <HAL_TIM_OC_Start_IT+0x1dc>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	2201      	movs	r2, #1
 8004762:	6839      	ldr	r1, [r7, #0]
 8004764:	4618      	mov	r0, r3
 8004766:	f000 fe5b 	bl	8005420 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a24      	ldr	r2, [pc, #144]	; (8004800 <HAL_TIM_OC_Start_IT+0x1e8>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d107      	bne.n	8004784 <HAL_TIM_OC_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004782:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a1d      	ldr	r2, [pc, #116]	; (8004800 <HAL_TIM_OC_Start_IT+0x1e8>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d018      	beq.n	80047c0 <HAL_TIM_OC_Start_IT+0x1a8>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004796:	d013      	beq.n	80047c0 <HAL_TIM_OC_Start_IT+0x1a8>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a19      	ldr	r2, [pc, #100]	; (8004804 <HAL_TIM_OC_Start_IT+0x1ec>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d00e      	beq.n	80047c0 <HAL_TIM_OC_Start_IT+0x1a8>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4a18      	ldr	r2, [pc, #96]	; (8004808 <HAL_TIM_OC_Start_IT+0x1f0>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d009      	beq.n	80047c0 <HAL_TIM_OC_Start_IT+0x1a8>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a16      	ldr	r2, [pc, #88]	; (800480c <HAL_TIM_OC_Start_IT+0x1f4>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d004      	beq.n	80047c0 <HAL_TIM_OC_Start_IT+0x1a8>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a15      	ldr	r2, [pc, #84]	; (8004810 <HAL_TIM_OC_Start_IT+0x1f8>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d111      	bne.n	80047e4 <HAL_TIM_OC_Start_IT+0x1cc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	689b      	ldr	r3, [r3, #8]
 80047c6:	f003 0307 	and.w	r3, r3, #7
 80047ca:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	2b06      	cmp	r3, #6
 80047d0:	d010      	beq.n	80047f4 <HAL_TIM_OC_Start_IT+0x1dc>
      {
        __HAL_TIM_ENABLE(htim);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	681a      	ldr	r2, [r3, #0]
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f042 0201 	orr.w	r2, r2, #1
 80047e0:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047e2:	e007      	b.n	80047f4 <HAL_TIM_OC_Start_IT+0x1dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	681a      	ldr	r2, [r3, #0]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f042 0201 	orr.w	r2, r2, #1
 80047f2:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80047f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80047f6:	4618      	mov	r0, r3
 80047f8:	3710      	adds	r7, #16
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd80      	pop	{r7, pc}
 80047fe:	bf00      	nop
 8004800:	40010000 	.word	0x40010000
 8004804:	40000400 	.word	0x40000400
 8004808:	40000800 	.word	0x40000800
 800480c:	40000c00 	.word	0x40000c00
 8004810:	40014000 	.word	0x40014000

08004814 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b084      	sub	sp, #16
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
 800481c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800481e:	2300      	movs	r3, #0
 8004820:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	2b0c      	cmp	r3, #12
 8004826:	d841      	bhi.n	80048ac <HAL_TIM_OC_Stop_IT+0x98>
 8004828:	a201      	add	r2, pc, #4	; (adr r2, 8004830 <HAL_TIM_OC_Stop_IT+0x1c>)
 800482a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800482e:	bf00      	nop
 8004830:	08004865 	.word	0x08004865
 8004834:	080048ad 	.word	0x080048ad
 8004838:	080048ad 	.word	0x080048ad
 800483c:	080048ad 	.word	0x080048ad
 8004840:	08004877 	.word	0x08004877
 8004844:	080048ad 	.word	0x080048ad
 8004848:	080048ad 	.word	0x080048ad
 800484c:	080048ad 	.word	0x080048ad
 8004850:	08004889 	.word	0x08004889
 8004854:	080048ad 	.word	0x080048ad
 8004858:	080048ad 	.word	0x080048ad
 800485c:	080048ad 	.word	0x080048ad
 8004860:	0800489b 	.word	0x0800489b
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	68da      	ldr	r2, [r3, #12]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f022 0202 	bic.w	r2, r2, #2
 8004872:	60da      	str	r2, [r3, #12]
      break;
 8004874:	e01d      	b.n	80048b2 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	68da      	ldr	r2, [r3, #12]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f022 0204 	bic.w	r2, r2, #4
 8004884:	60da      	str	r2, [r3, #12]
      break;
 8004886:	e014      	b.n	80048b2 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	68da      	ldr	r2, [r3, #12]
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f022 0208 	bic.w	r2, r2, #8
 8004896:	60da      	str	r2, [r3, #12]
      break;
 8004898:	e00b      	b.n	80048b2 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	68da      	ldr	r2, [r3, #12]
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f022 0210 	bic.w	r2, r2, #16
 80048a8:	60da      	str	r2, [r3, #12]
      break;
 80048aa:	e002      	b.n	80048b2 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 80048ac:	2301      	movs	r3, #1
 80048ae:	73fb      	strb	r3, [r7, #15]
      break;
 80048b0:	bf00      	nop
  }

  if (status == HAL_OK)
 80048b2:	7bfb      	ldrb	r3, [r7, #15]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d157      	bne.n	8004968 <HAL_TIM_OC_Stop_IT+0x154>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	2200      	movs	r2, #0
 80048be:	6839      	ldr	r1, [r7, #0]
 80048c0:	4618      	mov	r0, r3
 80048c2:	f000 fdad 	bl	8005420 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4a2a      	ldr	r2, [pc, #168]	; (8004974 <HAL_TIM_OC_Stop_IT+0x160>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d117      	bne.n	8004900 <HAL_TIM_OC_Stop_IT+0xec>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	6a1a      	ldr	r2, [r3, #32]
 80048d6:	f241 1311 	movw	r3, #4369	; 0x1111
 80048da:	4013      	ands	r3, r2
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d10f      	bne.n	8004900 <HAL_TIM_OC_Stop_IT+0xec>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	6a1a      	ldr	r2, [r3, #32]
 80048e6:	f240 4344 	movw	r3, #1092	; 0x444
 80048ea:	4013      	ands	r3, r2
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d107      	bne.n	8004900 <HAL_TIM_OC_Stop_IT+0xec>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80048fe:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	6a1a      	ldr	r2, [r3, #32]
 8004906:	f241 1311 	movw	r3, #4369	; 0x1111
 800490a:	4013      	ands	r3, r2
 800490c:	2b00      	cmp	r3, #0
 800490e:	d10f      	bne.n	8004930 <HAL_TIM_OC_Stop_IT+0x11c>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	6a1a      	ldr	r2, [r3, #32]
 8004916:	f240 4344 	movw	r3, #1092	; 0x444
 800491a:	4013      	ands	r3, r2
 800491c:	2b00      	cmp	r3, #0
 800491e:	d107      	bne.n	8004930 <HAL_TIM_OC_Stop_IT+0x11c>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	681a      	ldr	r2, [r3, #0]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f022 0201 	bic.w	r2, r2, #1
 800492e:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d104      	bne.n	8004940 <HAL_TIM_OC_Stop_IT+0x12c>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2201      	movs	r2, #1
 800493a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800493e:	e013      	b.n	8004968 <HAL_TIM_OC_Stop_IT+0x154>
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	2b04      	cmp	r3, #4
 8004944:	d104      	bne.n	8004950 <HAL_TIM_OC_Stop_IT+0x13c>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2201      	movs	r2, #1
 800494a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800494e:	e00b      	b.n	8004968 <HAL_TIM_OC_Stop_IT+0x154>
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	2b08      	cmp	r3, #8
 8004954:	d104      	bne.n	8004960 <HAL_TIM_OC_Stop_IT+0x14c>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2201      	movs	r2, #1
 800495a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800495e:	e003      	b.n	8004968 <HAL_TIM_OC_Stop_IT+0x154>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2201      	movs	r2, #1
 8004964:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8004968:	7bfb      	ldrb	r3, [r7, #15]
}
 800496a:	4618      	mov	r0, r3
 800496c:	3710      	adds	r7, #16
 800496e:	46bd      	mov	sp, r7
 8004970:	bd80      	pop	{r7, pc}
 8004972:	bf00      	nop
 8004974:	40010000 	.word	0x40010000

08004978 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b082      	sub	sp, #8
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
 8004980:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d101      	bne.n	800498c <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8004988:	2301      	movs	r3, #1
 800498a:	e041      	b.n	8004a10 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004992:	b2db      	uxtb	r3, r3
 8004994:	2b00      	cmp	r3, #0
 8004996:	d106      	bne.n	80049a6 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2200      	movs	r2, #0
 800499c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 80049a0:	6878      	ldr	r0, [r7, #4]
 80049a2:	f000 f839 	bl	8004a18 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2202      	movs	r2, #2
 80049aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681a      	ldr	r2, [r3, #0]
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	3304      	adds	r3, #4
 80049b6:	4619      	mov	r1, r3
 80049b8:	4610      	mov	r0, r2
 80049ba:	f000 fa8b 	bl	8004ed4 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	681a      	ldr	r2, [r3, #0]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f022 0208 	bic.w	r2, r2, #8
 80049cc:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	6819      	ldr	r1, [r3, #0]
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	683a      	ldr	r2, [r7, #0]
 80049da:	430a      	orrs	r2, r1
 80049dc:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2201      	movs	r2, #1
 80049e2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2201      	movs	r2, #1
 80049ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2201      	movs	r2, #1
 80049f2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2201      	movs	r2, #1
 80049fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2201      	movs	r2, #1
 8004a02:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2201      	movs	r2, #1
 8004a0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a0e:	2300      	movs	r3, #0
}
 8004a10:	4618      	mov	r0, r3
 8004a12:	3708      	adds	r7, #8
 8004a14:	46bd      	mov	sp, r7
 8004a16:	bd80      	pop	{r7, pc}

08004a18 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8004a18:	b480      	push	{r7}
 8004a1a:	b083      	sub	sp, #12
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8004a20:	bf00      	nop
 8004a22:	370c      	adds	r7, #12
 8004a24:	46bd      	mov	sp, r7
 8004a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2a:	4770      	bx	lr

08004a2c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b082      	sub	sp, #8
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	691b      	ldr	r3, [r3, #16]
 8004a3a:	f003 0302 	and.w	r3, r3, #2
 8004a3e:	2b02      	cmp	r3, #2
 8004a40:	d122      	bne.n	8004a88 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	68db      	ldr	r3, [r3, #12]
 8004a48:	f003 0302 	and.w	r3, r3, #2
 8004a4c:	2b02      	cmp	r3, #2
 8004a4e:	d11b      	bne.n	8004a88 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f06f 0202 	mvn.w	r2, #2
 8004a58:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2201      	movs	r2, #1
 8004a5e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	699b      	ldr	r3, [r3, #24]
 8004a66:	f003 0303 	and.w	r3, r3, #3
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d003      	beq.n	8004a76 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	f000 fa11 	bl	8004e96 <HAL_TIM_IC_CaptureCallback>
 8004a74:	e005      	b.n	8004a82 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a76:	6878      	ldr	r0, [r7, #4]
 8004a78:	f7fd fc5e 	bl	8002338 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a7c:	6878      	ldr	r0, [r7, #4]
 8004a7e:	f000 fa14 	bl	8004eaa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2200      	movs	r2, #0
 8004a86:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	691b      	ldr	r3, [r3, #16]
 8004a8e:	f003 0304 	and.w	r3, r3, #4
 8004a92:	2b04      	cmp	r3, #4
 8004a94:	d122      	bne.n	8004adc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	68db      	ldr	r3, [r3, #12]
 8004a9c:	f003 0304 	and.w	r3, r3, #4
 8004aa0:	2b04      	cmp	r3, #4
 8004aa2:	d11b      	bne.n	8004adc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f06f 0204 	mvn.w	r2, #4
 8004aac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2202      	movs	r2, #2
 8004ab2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	699b      	ldr	r3, [r3, #24]
 8004aba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d003      	beq.n	8004aca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	f000 f9e7 	bl	8004e96 <HAL_TIM_IC_CaptureCallback>
 8004ac8:	e005      	b.n	8004ad6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004aca:	6878      	ldr	r0, [r7, #4]
 8004acc:	f7fd fc34 	bl	8002338 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ad0:	6878      	ldr	r0, [r7, #4]
 8004ad2:	f000 f9ea 	bl	8004eaa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	691b      	ldr	r3, [r3, #16]
 8004ae2:	f003 0308 	and.w	r3, r3, #8
 8004ae6:	2b08      	cmp	r3, #8
 8004ae8:	d122      	bne.n	8004b30 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	68db      	ldr	r3, [r3, #12]
 8004af0:	f003 0308 	and.w	r3, r3, #8
 8004af4:	2b08      	cmp	r3, #8
 8004af6:	d11b      	bne.n	8004b30 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f06f 0208 	mvn.w	r2, #8
 8004b00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2204      	movs	r2, #4
 8004b06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	69db      	ldr	r3, [r3, #28]
 8004b0e:	f003 0303 	and.w	r3, r3, #3
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d003      	beq.n	8004b1e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b16:	6878      	ldr	r0, [r7, #4]
 8004b18:	f000 f9bd 	bl	8004e96 <HAL_TIM_IC_CaptureCallback>
 8004b1c:	e005      	b.n	8004b2a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b1e:	6878      	ldr	r0, [r7, #4]
 8004b20:	f7fd fc0a 	bl	8002338 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b24:	6878      	ldr	r0, [r7, #4]
 8004b26:	f000 f9c0 	bl	8004eaa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	691b      	ldr	r3, [r3, #16]
 8004b36:	f003 0310 	and.w	r3, r3, #16
 8004b3a:	2b10      	cmp	r3, #16
 8004b3c:	d122      	bne.n	8004b84 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	68db      	ldr	r3, [r3, #12]
 8004b44:	f003 0310 	and.w	r3, r3, #16
 8004b48:	2b10      	cmp	r3, #16
 8004b4a:	d11b      	bne.n	8004b84 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f06f 0210 	mvn.w	r2, #16
 8004b54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2208      	movs	r2, #8
 8004b5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	69db      	ldr	r3, [r3, #28]
 8004b62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d003      	beq.n	8004b72 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b6a:	6878      	ldr	r0, [r7, #4]
 8004b6c:	f000 f993 	bl	8004e96 <HAL_TIM_IC_CaptureCallback>
 8004b70:	e005      	b.n	8004b7e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b72:	6878      	ldr	r0, [r7, #4]
 8004b74:	f7fd fbe0 	bl	8002338 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b78:	6878      	ldr	r0, [r7, #4]
 8004b7a:	f000 f996 	bl	8004eaa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2200      	movs	r2, #0
 8004b82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	691b      	ldr	r3, [r3, #16]
 8004b8a:	f003 0301 	and.w	r3, r3, #1
 8004b8e:	2b01      	cmp	r3, #1
 8004b90:	d10e      	bne.n	8004bb0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	68db      	ldr	r3, [r3, #12]
 8004b98:	f003 0301 	and.w	r3, r3, #1
 8004b9c:	2b01      	cmp	r3, #1
 8004b9e:	d107      	bne.n	8004bb0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f06f 0201 	mvn.w	r2, #1
 8004ba8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004baa:	6878      	ldr	r0, [r7, #4]
 8004bac:	f000 f969 	bl	8004e82 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	691b      	ldr	r3, [r3, #16]
 8004bb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bba:	2b80      	cmp	r3, #128	; 0x80
 8004bbc:	d10e      	bne.n	8004bdc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	68db      	ldr	r3, [r3, #12]
 8004bc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bc8:	2b80      	cmp	r3, #128	; 0x80
 8004bca:	d107      	bne.n	8004bdc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004bd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004bd6:	6878      	ldr	r0, [r7, #4]
 8004bd8:	f000 fcc0 	bl	800555c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	691b      	ldr	r3, [r3, #16]
 8004be2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004be6:	2b40      	cmp	r3, #64	; 0x40
 8004be8:	d10e      	bne.n	8004c08 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	68db      	ldr	r3, [r3, #12]
 8004bf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bf4:	2b40      	cmp	r3, #64	; 0x40
 8004bf6:	d107      	bne.n	8004c08 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004c00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004c02:	6878      	ldr	r0, [r7, #4]
 8004c04:	f000 f95b 	bl	8004ebe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	691b      	ldr	r3, [r3, #16]
 8004c0e:	f003 0320 	and.w	r3, r3, #32
 8004c12:	2b20      	cmp	r3, #32
 8004c14:	d10e      	bne.n	8004c34 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	68db      	ldr	r3, [r3, #12]
 8004c1c:	f003 0320 	and.w	r3, r3, #32
 8004c20:	2b20      	cmp	r3, #32
 8004c22:	d107      	bne.n	8004c34 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f06f 0220 	mvn.w	r2, #32
 8004c2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004c2e:	6878      	ldr	r0, [r7, #4]
 8004c30:	f000 fc8a 	bl	8005548 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004c34:	bf00      	nop
 8004c36:	3708      	adds	r7, #8
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	bd80      	pop	{r7, pc}

08004c3c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b086      	sub	sp, #24
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	60f8      	str	r0, [r7, #12]
 8004c44:	60b9      	str	r1, [r7, #8]
 8004c46:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c48:	2300      	movs	r3, #0
 8004c4a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c52:	2b01      	cmp	r3, #1
 8004c54:	d101      	bne.n	8004c5a <HAL_TIM_OC_ConfigChannel+0x1e>
 8004c56:	2302      	movs	r3, #2
 8004c58:	e048      	b.n	8004cec <HAL_TIM_OC_ConfigChannel+0xb0>
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	2201      	movs	r2, #1
 8004c5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2b0c      	cmp	r3, #12
 8004c66:	d839      	bhi.n	8004cdc <HAL_TIM_OC_ConfigChannel+0xa0>
 8004c68:	a201      	add	r2, pc, #4	; (adr r2, 8004c70 <HAL_TIM_OC_ConfigChannel+0x34>)
 8004c6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c6e:	bf00      	nop
 8004c70:	08004ca5 	.word	0x08004ca5
 8004c74:	08004cdd 	.word	0x08004cdd
 8004c78:	08004cdd 	.word	0x08004cdd
 8004c7c:	08004cdd 	.word	0x08004cdd
 8004c80:	08004cb3 	.word	0x08004cb3
 8004c84:	08004cdd 	.word	0x08004cdd
 8004c88:	08004cdd 	.word	0x08004cdd
 8004c8c:	08004cdd 	.word	0x08004cdd
 8004c90:	08004cc1 	.word	0x08004cc1
 8004c94:	08004cdd 	.word	0x08004cdd
 8004c98:	08004cdd 	.word	0x08004cdd
 8004c9c:	08004cdd 	.word	0x08004cdd
 8004ca0:	08004ccf 	.word	0x08004ccf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	68b9      	ldr	r1, [r7, #8]
 8004caa:	4618      	mov	r0, r3
 8004cac:	f000 f992 	bl	8004fd4 <TIM_OC1_SetConfig>
      break;
 8004cb0:	e017      	b.n	8004ce2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	68b9      	ldr	r1, [r7, #8]
 8004cb8:	4618      	mov	r0, r3
 8004cba:	f000 f9f1 	bl	80050a0 <TIM_OC2_SetConfig>
      break;
 8004cbe:	e010      	b.n	8004ce2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	68b9      	ldr	r1, [r7, #8]
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	f000 fa56 	bl	8005178 <TIM_OC3_SetConfig>
      break;
 8004ccc:	e009      	b.n	8004ce2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	68b9      	ldr	r1, [r7, #8]
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	f000 fab9 	bl	800524c <TIM_OC4_SetConfig>
      break;
 8004cda:	e002      	b.n	8004ce2 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8004cdc:	2301      	movs	r3, #1
 8004cde:	75fb      	strb	r3, [r7, #23]
      break;
 8004ce0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004cea:	7dfb      	ldrb	r3, [r7, #23]
}
 8004cec:	4618      	mov	r0, r3
 8004cee:	3718      	adds	r7, #24
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	bd80      	pop	{r7, pc}

08004cf4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b084      	sub	sp, #16
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
 8004cfc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004cfe:	2300      	movs	r3, #0
 8004d00:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d08:	2b01      	cmp	r3, #1
 8004d0a:	d101      	bne.n	8004d10 <HAL_TIM_ConfigClockSource+0x1c>
 8004d0c:	2302      	movs	r3, #2
 8004d0e:	e0b4      	b.n	8004e7a <HAL_TIM_ConfigClockSource+0x186>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2201      	movs	r2, #1
 8004d14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2202      	movs	r2, #2
 8004d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	689b      	ldr	r3, [r3, #8]
 8004d26:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004d2e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004d36:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	68ba      	ldr	r2, [r7, #8]
 8004d3e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d48:	d03e      	beq.n	8004dc8 <HAL_TIM_ConfigClockSource+0xd4>
 8004d4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d4e:	f200 8087 	bhi.w	8004e60 <HAL_TIM_ConfigClockSource+0x16c>
 8004d52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d56:	f000 8086 	beq.w	8004e66 <HAL_TIM_ConfigClockSource+0x172>
 8004d5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d5e:	d87f      	bhi.n	8004e60 <HAL_TIM_ConfigClockSource+0x16c>
 8004d60:	2b70      	cmp	r3, #112	; 0x70
 8004d62:	d01a      	beq.n	8004d9a <HAL_TIM_ConfigClockSource+0xa6>
 8004d64:	2b70      	cmp	r3, #112	; 0x70
 8004d66:	d87b      	bhi.n	8004e60 <HAL_TIM_ConfigClockSource+0x16c>
 8004d68:	2b60      	cmp	r3, #96	; 0x60
 8004d6a:	d050      	beq.n	8004e0e <HAL_TIM_ConfigClockSource+0x11a>
 8004d6c:	2b60      	cmp	r3, #96	; 0x60
 8004d6e:	d877      	bhi.n	8004e60 <HAL_TIM_ConfigClockSource+0x16c>
 8004d70:	2b50      	cmp	r3, #80	; 0x50
 8004d72:	d03c      	beq.n	8004dee <HAL_TIM_ConfigClockSource+0xfa>
 8004d74:	2b50      	cmp	r3, #80	; 0x50
 8004d76:	d873      	bhi.n	8004e60 <HAL_TIM_ConfigClockSource+0x16c>
 8004d78:	2b40      	cmp	r3, #64	; 0x40
 8004d7a:	d058      	beq.n	8004e2e <HAL_TIM_ConfigClockSource+0x13a>
 8004d7c:	2b40      	cmp	r3, #64	; 0x40
 8004d7e:	d86f      	bhi.n	8004e60 <HAL_TIM_ConfigClockSource+0x16c>
 8004d80:	2b30      	cmp	r3, #48	; 0x30
 8004d82:	d064      	beq.n	8004e4e <HAL_TIM_ConfigClockSource+0x15a>
 8004d84:	2b30      	cmp	r3, #48	; 0x30
 8004d86:	d86b      	bhi.n	8004e60 <HAL_TIM_ConfigClockSource+0x16c>
 8004d88:	2b20      	cmp	r3, #32
 8004d8a:	d060      	beq.n	8004e4e <HAL_TIM_ConfigClockSource+0x15a>
 8004d8c:	2b20      	cmp	r3, #32
 8004d8e:	d867      	bhi.n	8004e60 <HAL_TIM_ConfigClockSource+0x16c>
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d05c      	beq.n	8004e4e <HAL_TIM_ConfigClockSource+0x15a>
 8004d94:	2b10      	cmp	r3, #16
 8004d96:	d05a      	beq.n	8004e4e <HAL_TIM_ConfigClockSource+0x15a>
 8004d98:	e062      	b.n	8004e60 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6818      	ldr	r0, [r3, #0]
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	6899      	ldr	r1, [r3, #8]
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	685a      	ldr	r2, [r3, #4]
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	68db      	ldr	r3, [r3, #12]
 8004daa:	f000 fb19 	bl	80053e0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	689b      	ldr	r3, [r3, #8]
 8004db4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004dbc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	68ba      	ldr	r2, [r7, #8]
 8004dc4:	609a      	str	r2, [r3, #8]
      break;
 8004dc6:	e04f      	b.n	8004e68 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6818      	ldr	r0, [r3, #0]
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	6899      	ldr	r1, [r3, #8]
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	685a      	ldr	r2, [r3, #4]
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	68db      	ldr	r3, [r3, #12]
 8004dd8:	f000 fb02 	bl	80053e0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	689a      	ldr	r2, [r3, #8]
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004dea:	609a      	str	r2, [r3, #8]
      break;
 8004dec:	e03c      	b.n	8004e68 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6818      	ldr	r0, [r3, #0]
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	6859      	ldr	r1, [r3, #4]
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	68db      	ldr	r3, [r3, #12]
 8004dfa:	461a      	mov	r2, r3
 8004dfc:	f000 fa76 	bl	80052ec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	2150      	movs	r1, #80	; 0x50
 8004e06:	4618      	mov	r0, r3
 8004e08:	f000 facf 	bl	80053aa <TIM_ITRx_SetConfig>
      break;
 8004e0c:	e02c      	b.n	8004e68 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6818      	ldr	r0, [r3, #0]
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	6859      	ldr	r1, [r3, #4]
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	68db      	ldr	r3, [r3, #12]
 8004e1a:	461a      	mov	r2, r3
 8004e1c:	f000 fa95 	bl	800534a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	2160      	movs	r1, #96	; 0x60
 8004e26:	4618      	mov	r0, r3
 8004e28:	f000 fabf 	bl	80053aa <TIM_ITRx_SetConfig>
      break;
 8004e2c:	e01c      	b.n	8004e68 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6818      	ldr	r0, [r3, #0]
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	6859      	ldr	r1, [r3, #4]
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	68db      	ldr	r3, [r3, #12]
 8004e3a:	461a      	mov	r2, r3
 8004e3c:	f000 fa56 	bl	80052ec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	2140      	movs	r1, #64	; 0x40
 8004e46:	4618      	mov	r0, r3
 8004e48:	f000 faaf 	bl	80053aa <TIM_ITRx_SetConfig>
      break;
 8004e4c:	e00c      	b.n	8004e68 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681a      	ldr	r2, [r3, #0]
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4619      	mov	r1, r3
 8004e58:	4610      	mov	r0, r2
 8004e5a:	f000 faa6 	bl	80053aa <TIM_ITRx_SetConfig>
      break;
 8004e5e:	e003      	b.n	8004e68 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004e60:	2301      	movs	r3, #1
 8004e62:	73fb      	strb	r3, [r7, #15]
      break;
 8004e64:	e000      	b.n	8004e68 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004e66:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2201      	movs	r2, #1
 8004e6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2200      	movs	r2, #0
 8004e74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004e78:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	3710      	adds	r7, #16
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bd80      	pop	{r7, pc}

08004e82 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e82:	b480      	push	{r7}
 8004e84:	b083      	sub	sp, #12
 8004e86:	af00      	add	r7, sp, #0
 8004e88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004e8a:	bf00      	nop
 8004e8c:	370c      	adds	r7, #12
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e94:	4770      	bx	lr

08004e96 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004e96:	b480      	push	{r7}
 8004e98:	b083      	sub	sp, #12
 8004e9a:	af00      	add	r7, sp, #0
 8004e9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004e9e:	bf00      	nop
 8004ea0:	370c      	adds	r7, #12
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea8:	4770      	bx	lr

08004eaa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004eaa:	b480      	push	{r7}
 8004eac:	b083      	sub	sp, #12
 8004eae:	af00      	add	r7, sp, #0
 8004eb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004eb2:	bf00      	nop
 8004eb4:	370c      	adds	r7, #12
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebc:	4770      	bx	lr

08004ebe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004ebe:	b480      	push	{r7}
 8004ec0:	b083      	sub	sp, #12
 8004ec2:	af00      	add	r7, sp, #0
 8004ec4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004ec6:	bf00      	nop
 8004ec8:	370c      	adds	r7, #12
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed0:	4770      	bx	lr
	...

08004ed4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	b085      	sub	sp, #20
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
 8004edc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	4a34      	ldr	r2, [pc, #208]	; (8004fb8 <TIM_Base_SetConfig+0xe4>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d00f      	beq.n	8004f0c <TIM_Base_SetConfig+0x38>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ef2:	d00b      	beq.n	8004f0c <TIM_Base_SetConfig+0x38>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	4a31      	ldr	r2, [pc, #196]	; (8004fbc <TIM_Base_SetConfig+0xe8>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d007      	beq.n	8004f0c <TIM_Base_SetConfig+0x38>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	4a30      	ldr	r2, [pc, #192]	; (8004fc0 <TIM_Base_SetConfig+0xec>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d003      	beq.n	8004f0c <TIM_Base_SetConfig+0x38>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	4a2f      	ldr	r2, [pc, #188]	; (8004fc4 <TIM_Base_SetConfig+0xf0>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d108      	bne.n	8004f1e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	685b      	ldr	r3, [r3, #4]
 8004f18:	68fa      	ldr	r2, [r7, #12]
 8004f1a:	4313      	orrs	r3, r2
 8004f1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	4a25      	ldr	r2, [pc, #148]	; (8004fb8 <TIM_Base_SetConfig+0xe4>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d01b      	beq.n	8004f5e <TIM_Base_SetConfig+0x8a>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f2c:	d017      	beq.n	8004f5e <TIM_Base_SetConfig+0x8a>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	4a22      	ldr	r2, [pc, #136]	; (8004fbc <TIM_Base_SetConfig+0xe8>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d013      	beq.n	8004f5e <TIM_Base_SetConfig+0x8a>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	4a21      	ldr	r2, [pc, #132]	; (8004fc0 <TIM_Base_SetConfig+0xec>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d00f      	beq.n	8004f5e <TIM_Base_SetConfig+0x8a>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	4a20      	ldr	r2, [pc, #128]	; (8004fc4 <TIM_Base_SetConfig+0xf0>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d00b      	beq.n	8004f5e <TIM_Base_SetConfig+0x8a>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	4a1f      	ldr	r2, [pc, #124]	; (8004fc8 <TIM_Base_SetConfig+0xf4>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d007      	beq.n	8004f5e <TIM_Base_SetConfig+0x8a>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	4a1e      	ldr	r2, [pc, #120]	; (8004fcc <TIM_Base_SetConfig+0xf8>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d003      	beq.n	8004f5e <TIM_Base_SetConfig+0x8a>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	4a1d      	ldr	r2, [pc, #116]	; (8004fd0 <TIM_Base_SetConfig+0xfc>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d108      	bne.n	8004f70 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	68db      	ldr	r3, [r3, #12]
 8004f6a:	68fa      	ldr	r2, [r7, #12]
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	695b      	ldr	r3, [r3, #20]
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	68fa      	ldr	r2, [r7, #12]
 8004f82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	689a      	ldr	r2, [r3, #8]
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	681a      	ldr	r2, [r3, #0]
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	4a08      	ldr	r2, [pc, #32]	; (8004fb8 <TIM_Base_SetConfig+0xe4>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d103      	bne.n	8004fa4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	691a      	ldr	r2, [r3, #16]
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2201      	movs	r2, #1
 8004fa8:	615a      	str	r2, [r3, #20]
}
 8004faa:	bf00      	nop
 8004fac:	3714      	adds	r7, #20
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb4:	4770      	bx	lr
 8004fb6:	bf00      	nop
 8004fb8:	40010000 	.word	0x40010000
 8004fbc:	40000400 	.word	0x40000400
 8004fc0:	40000800 	.word	0x40000800
 8004fc4:	40000c00 	.word	0x40000c00
 8004fc8:	40014000 	.word	0x40014000
 8004fcc:	40014400 	.word	0x40014400
 8004fd0:	40014800 	.word	0x40014800

08004fd4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	b087      	sub	sp, #28
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
 8004fdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6a1b      	ldr	r3, [r3, #32]
 8004fe2:	f023 0201 	bic.w	r2, r3, #1
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6a1b      	ldr	r3, [r3, #32]
 8004fee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	699b      	ldr	r3, [r3, #24]
 8004ffa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005002:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	f023 0303 	bic.w	r3, r3, #3
 800500a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	68fa      	ldr	r2, [r7, #12]
 8005012:	4313      	orrs	r3, r2
 8005014:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005016:	697b      	ldr	r3, [r7, #20]
 8005018:	f023 0302 	bic.w	r3, r3, #2
 800501c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	689b      	ldr	r3, [r3, #8]
 8005022:	697a      	ldr	r2, [r7, #20]
 8005024:	4313      	orrs	r3, r2
 8005026:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	4a1c      	ldr	r2, [pc, #112]	; (800509c <TIM_OC1_SetConfig+0xc8>)
 800502c:	4293      	cmp	r3, r2
 800502e:	d10c      	bne.n	800504a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005030:	697b      	ldr	r3, [r7, #20]
 8005032:	f023 0308 	bic.w	r3, r3, #8
 8005036:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	68db      	ldr	r3, [r3, #12]
 800503c:	697a      	ldr	r2, [r7, #20]
 800503e:	4313      	orrs	r3, r2
 8005040:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005042:	697b      	ldr	r3, [r7, #20]
 8005044:	f023 0304 	bic.w	r3, r3, #4
 8005048:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	4a13      	ldr	r2, [pc, #76]	; (800509c <TIM_OC1_SetConfig+0xc8>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d111      	bne.n	8005076 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005052:	693b      	ldr	r3, [r7, #16]
 8005054:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005058:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800505a:	693b      	ldr	r3, [r7, #16]
 800505c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005060:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	695b      	ldr	r3, [r3, #20]
 8005066:	693a      	ldr	r2, [r7, #16]
 8005068:	4313      	orrs	r3, r2
 800506a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	699b      	ldr	r3, [r3, #24]
 8005070:	693a      	ldr	r2, [r7, #16]
 8005072:	4313      	orrs	r3, r2
 8005074:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	693a      	ldr	r2, [r7, #16]
 800507a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	68fa      	ldr	r2, [r7, #12]
 8005080:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	685a      	ldr	r2, [r3, #4]
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	697a      	ldr	r2, [r7, #20]
 800508e:	621a      	str	r2, [r3, #32]
}
 8005090:	bf00      	nop
 8005092:	371c      	adds	r7, #28
 8005094:	46bd      	mov	sp, r7
 8005096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509a:	4770      	bx	lr
 800509c:	40010000 	.word	0x40010000

080050a0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80050a0:	b480      	push	{r7}
 80050a2:	b087      	sub	sp, #28
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
 80050a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6a1b      	ldr	r3, [r3, #32]
 80050ae:	f023 0210 	bic.w	r2, r3, #16
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6a1b      	ldr	r3, [r3, #32]
 80050ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	699b      	ldr	r3, [r3, #24]
 80050c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	021b      	lsls	r3, r3, #8
 80050de:	68fa      	ldr	r2, [r7, #12]
 80050e0:	4313      	orrs	r3, r2
 80050e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80050e4:	697b      	ldr	r3, [r7, #20]
 80050e6:	f023 0320 	bic.w	r3, r3, #32
 80050ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	689b      	ldr	r3, [r3, #8]
 80050f0:	011b      	lsls	r3, r3, #4
 80050f2:	697a      	ldr	r2, [r7, #20]
 80050f4:	4313      	orrs	r3, r2
 80050f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	4a1e      	ldr	r2, [pc, #120]	; (8005174 <TIM_OC2_SetConfig+0xd4>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d10d      	bne.n	800511c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005100:	697b      	ldr	r3, [r7, #20]
 8005102:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005106:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	68db      	ldr	r3, [r3, #12]
 800510c:	011b      	lsls	r3, r3, #4
 800510e:	697a      	ldr	r2, [r7, #20]
 8005110:	4313      	orrs	r3, r2
 8005112:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005114:	697b      	ldr	r3, [r7, #20]
 8005116:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800511a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	4a15      	ldr	r2, [pc, #84]	; (8005174 <TIM_OC2_SetConfig+0xd4>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d113      	bne.n	800514c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005124:	693b      	ldr	r3, [r7, #16]
 8005126:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800512a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800512c:	693b      	ldr	r3, [r7, #16]
 800512e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005132:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	695b      	ldr	r3, [r3, #20]
 8005138:	009b      	lsls	r3, r3, #2
 800513a:	693a      	ldr	r2, [r7, #16]
 800513c:	4313      	orrs	r3, r2
 800513e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	699b      	ldr	r3, [r3, #24]
 8005144:	009b      	lsls	r3, r3, #2
 8005146:	693a      	ldr	r2, [r7, #16]
 8005148:	4313      	orrs	r3, r2
 800514a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	693a      	ldr	r2, [r7, #16]
 8005150:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	68fa      	ldr	r2, [r7, #12]
 8005156:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	685a      	ldr	r2, [r3, #4]
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	697a      	ldr	r2, [r7, #20]
 8005164:	621a      	str	r2, [r3, #32]
}
 8005166:	bf00      	nop
 8005168:	371c      	adds	r7, #28
 800516a:	46bd      	mov	sp, r7
 800516c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005170:	4770      	bx	lr
 8005172:	bf00      	nop
 8005174:	40010000 	.word	0x40010000

08005178 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005178:	b480      	push	{r7}
 800517a:	b087      	sub	sp, #28
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
 8005180:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6a1b      	ldr	r3, [r3, #32]
 8005186:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6a1b      	ldr	r3, [r3, #32]
 8005192:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	685b      	ldr	r3, [r3, #4]
 8005198:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	69db      	ldr	r3, [r3, #28]
 800519e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	f023 0303 	bic.w	r3, r3, #3
 80051ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	68fa      	ldr	r2, [r7, #12]
 80051b6:	4313      	orrs	r3, r2
 80051b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80051ba:	697b      	ldr	r3, [r7, #20]
 80051bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80051c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	689b      	ldr	r3, [r3, #8]
 80051c6:	021b      	lsls	r3, r3, #8
 80051c8:	697a      	ldr	r2, [r7, #20]
 80051ca:	4313      	orrs	r3, r2
 80051cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	4a1d      	ldr	r2, [pc, #116]	; (8005248 <TIM_OC3_SetConfig+0xd0>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d10d      	bne.n	80051f2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80051d6:	697b      	ldr	r3, [r7, #20]
 80051d8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80051dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	68db      	ldr	r3, [r3, #12]
 80051e2:	021b      	lsls	r3, r3, #8
 80051e4:	697a      	ldr	r2, [r7, #20]
 80051e6:	4313      	orrs	r3, r2
 80051e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80051ea:	697b      	ldr	r3, [r7, #20]
 80051ec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80051f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	4a14      	ldr	r2, [pc, #80]	; (8005248 <TIM_OC3_SetConfig+0xd0>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d113      	bne.n	8005222 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80051fa:	693b      	ldr	r3, [r7, #16]
 80051fc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005200:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005202:	693b      	ldr	r3, [r7, #16]
 8005204:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005208:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	695b      	ldr	r3, [r3, #20]
 800520e:	011b      	lsls	r3, r3, #4
 8005210:	693a      	ldr	r2, [r7, #16]
 8005212:	4313      	orrs	r3, r2
 8005214:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	699b      	ldr	r3, [r3, #24]
 800521a:	011b      	lsls	r3, r3, #4
 800521c:	693a      	ldr	r2, [r7, #16]
 800521e:	4313      	orrs	r3, r2
 8005220:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	693a      	ldr	r2, [r7, #16]
 8005226:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	68fa      	ldr	r2, [r7, #12]
 800522c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	685a      	ldr	r2, [r3, #4]
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	697a      	ldr	r2, [r7, #20]
 800523a:	621a      	str	r2, [r3, #32]
}
 800523c:	bf00      	nop
 800523e:	371c      	adds	r7, #28
 8005240:	46bd      	mov	sp, r7
 8005242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005246:	4770      	bx	lr
 8005248:	40010000 	.word	0x40010000

0800524c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800524c:	b480      	push	{r7}
 800524e:	b087      	sub	sp, #28
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
 8005254:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6a1b      	ldr	r3, [r3, #32]
 800525a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6a1b      	ldr	r3, [r3, #32]
 8005266:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	685b      	ldr	r3, [r3, #4]
 800526c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	69db      	ldr	r3, [r3, #28]
 8005272:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800527a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005282:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	021b      	lsls	r3, r3, #8
 800528a:	68fa      	ldr	r2, [r7, #12]
 800528c:	4313      	orrs	r3, r2
 800528e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005290:	693b      	ldr	r3, [r7, #16]
 8005292:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005296:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	689b      	ldr	r3, [r3, #8]
 800529c:	031b      	lsls	r3, r3, #12
 800529e:	693a      	ldr	r2, [r7, #16]
 80052a0:	4313      	orrs	r3, r2
 80052a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	4a10      	ldr	r2, [pc, #64]	; (80052e8 <TIM_OC4_SetConfig+0x9c>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d109      	bne.n	80052c0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80052ac:	697b      	ldr	r3, [r7, #20]
 80052ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80052b2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	695b      	ldr	r3, [r3, #20]
 80052b8:	019b      	lsls	r3, r3, #6
 80052ba:	697a      	ldr	r2, [r7, #20]
 80052bc:	4313      	orrs	r3, r2
 80052be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	697a      	ldr	r2, [r7, #20]
 80052c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	68fa      	ldr	r2, [r7, #12]
 80052ca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	685a      	ldr	r2, [r3, #4]
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	693a      	ldr	r2, [r7, #16]
 80052d8:	621a      	str	r2, [r3, #32]
}
 80052da:	bf00      	nop
 80052dc:	371c      	adds	r7, #28
 80052de:	46bd      	mov	sp, r7
 80052e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e4:	4770      	bx	lr
 80052e6:	bf00      	nop
 80052e8:	40010000 	.word	0x40010000

080052ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80052ec:	b480      	push	{r7}
 80052ee:	b087      	sub	sp, #28
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	60f8      	str	r0, [r7, #12]
 80052f4:	60b9      	str	r1, [r7, #8]
 80052f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	6a1b      	ldr	r3, [r3, #32]
 80052fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	6a1b      	ldr	r3, [r3, #32]
 8005302:	f023 0201 	bic.w	r2, r3, #1
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	699b      	ldr	r3, [r3, #24]
 800530e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005310:	693b      	ldr	r3, [r7, #16]
 8005312:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005316:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	011b      	lsls	r3, r3, #4
 800531c:	693a      	ldr	r2, [r7, #16]
 800531e:	4313      	orrs	r3, r2
 8005320:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005322:	697b      	ldr	r3, [r7, #20]
 8005324:	f023 030a 	bic.w	r3, r3, #10
 8005328:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800532a:	697a      	ldr	r2, [r7, #20]
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	4313      	orrs	r3, r2
 8005330:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	693a      	ldr	r2, [r7, #16]
 8005336:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	697a      	ldr	r2, [r7, #20]
 800533c:	621a      	str	r2, [r3, #32]
}
 800533e:	bf00      	nop
 8005340:	371c      	adds	r7, #28
 8005342:	46bd      	mov	sp, r7
 8005344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005348:	4770      	bx	lr

0800534a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800534a:	b480      	push	{r7}
 800534c:	b087      	sub	sp, #28
 800534e:	af00      	add	r7, sp, #0
 8005350:	60f8      	str	r0, [r7, #12]
 8005352:	60b9      	str	r1, [r7, #8]
 8005354:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	6a1b      	ldr	r3, [r3, #32]
 800535a:	f023 0210 	bic.w	r2, r3, #16
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	699b      	ldr	r3, [r3, #24]
 8005366:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	6a1b      	ldr	r3, [r3, #32]
 800536c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800536e:	697b      	ldr	r3, [r7, #20]
 8005370:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005374:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	031b      	lsls	r3, r3, #12
 800537a:	697a      	ldr	r2, [r7, #20]
 800537c:	4313      	orrs	r3, r2
 800537e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005380:	693b      	ldr	r3, [r7, #16]
 8005382:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005386:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005388:	68bb      	ldr	r3, [r7, #8]
 800538a:	011b      	lsls	r3, r3, #4
 800538c:	693a      	ldr	r2, [r7, #16]
 800538e:	4313      	orrs	r3, r2
 8005390:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	697a      	ldr	r2, [r7, #20]
 8005396:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	693a      	ldr	r2, [r7, #16]
 800539c:	621a      	str	r2, [r3, #32]
}
 800539e:	bf00      	nop
 80053a0:	371c      	adds	r7, #28
 80053a2:	46bd      	mov	sp, r7
 80053a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a8:	4770      	bx	lr

080053aa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80053aa:	b480      	push	{r7}
 80053ac:	b085      	sub	sp, #20
 80053ae:	af00      	add	r7, sp, #0
 80053b0:	6078      	str	r0, [r7, #4]
 80053b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	689b      	ldr	r3, [r3, #8]
 80053b8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053c0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80053c2:	683a      	ldr	r2, [r7, #0]
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	4313      	orrs	r3, r2
 80053c8:	f043 0307 	orr.w	r3, r3, #7
 80053cc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	68fa      	ldr	r2, [r7, #12]
 80053d2:	609a      	str	r2, [r3, #8]
}
 80053d4:	bf00      	nop
 80053d6:	3714      	adds	r7, #20
 80053d8:	46bd      	mov	sp, r7
 80053da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053de:	4770      	bx	lr

080053e0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80053e0:	b480      	push	{r7}
 80053e2:	b087      	sub	sp, #28
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	60f8      	str	r0, [r7, #12]
 80053e8:	60b9      	str	r1, [r7, #8]
 80053ea:	607a      	str	r2, [r7, #4]
 80053ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	689b      	ldr	r3, [r3, #8]
 80053f2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80053f4:	697b      	ldr	r3, [r7, #20]
 80053f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80053fa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	021a      	lsls	r2, r3, #8
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	431a      	orrs	r2, r3
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	4313      	orrs	r3, r2
 8005408:	697a      	ldr	r2, [r7, #20]
 800540a:	4313      	orrs	r3, r2
 800540c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	697a      	ldr	r2, [r7, #20]
 8005412:	609a      	str	r2, [r3, #8]
}
 8005414:	bf00      	nop
 8005416:	371c      	adds	r7, #28
 8005418:	46bd      	mov	sp, r7
 800541a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541e:	4770      	bx	lr

08005420 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005420:	b480      	push	{r7}
 8005422:	b087      	sub	sp, #28
 8005424:	af00      	add	r7, sp, #0
 8005426:	60f8      	str	r0, [r7, #12]
 8005428:	60b9      	str	r1, [r7, #8]
 800542a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	f003 031f 	and.w	r3, r3, #31
 8005432:	2201      	movs	r2, #1
 8005434:	fa02 f303 	lsl.w	r3, r2, r3
 8005438:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	6a1a      	ldr	r2, [r3, #32]
 800543e:	697b      	ldr	r3, [r7, #20]
 8005440:	43db      	mvns	r3, r3
 8005442:	401a      	ands	r2, r3
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	6a1a      	ldr	r2, [r3, #32]
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	f003 031f 	and.w	r3, r3, #31
 8005452:	6879      	ldr	r1, [r7, #4]
 8005454:	fa01 f303 	lsl.w	r3, r1, r3
 8005458:	431a      	orrs	r2, r3
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	621a      	str	r2, [r3, #32]
}
 800545e:	bf00      	nop
 8005460:	371c      	adds	r7, #28
 8005462:	46bd      	mov	sp, r7
 8005464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005468:	4770      	bx	lr
	...

0800546c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800546c:	b480      	push	{r7}
 800546e:	b085      	sub	sp, #20
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
 8005474:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800547c:	2b01      	cmp	r3, #1
 800547e:	d101      	bne.n	8005484 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005480:	2302      	movs	r3, #2
 8005482:	e050      	b.n	8005526 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2201      	movs	r2, #1
 8005488:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2202      	movs	r2, #2
 8005490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	685b      	ldr	r3, [r3, #4]
 800549a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	689b      	ldr	r3, [r3, #8]
 80054a2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	68fa      	ldr	r2, [r7, #12]
 80054b2:	4313      	orrs	r3, r2
 80054b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	68fa      	ldr	r2, [r7, #12]
 80054bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4a1c      	ldr	r2, [pc, #112]	; (8005534 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d018      	beq.n	80054fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054d0:	d013      	beq.n	80054fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4a18      	ldr	r2, [pc, #96]	; (8005538 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d00e      	beq.n	80054fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4a16      	ldr	r2, [pc, #88]	; (800553c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d009      	beq.n	80054fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4a15      	ldr	r2, [pc, #84]	; (8005540 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d004      	beq.n	80054fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4a13      	ldr	r2, [pc, #76]	; (8005544 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d10c      	bne.n	8005514 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80054fa:	68bb      	ldr	r3, [r7, #8]
 80054fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005500:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	685b      	ldr	r3, [r3, #4]
 8005506:	68ba      	ldr	r2, [r7, #8]
 8005508:	4313      	orrs	r3, r2
 800550a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	68ba      	ldr	r2, [r7, #8]
 8005512:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2201      	movs	r2, #1
 8005518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2200      	movs	r2, #0
 8005520:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005524:	2300      	movs	r3, #0
}
 8005526:	4618      	mov	r0, r3
 8005528:	3714      	adds	r7, #20
 800552a:	46bd      	mov	sp, r7
 800552c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005530:	4770      	bx	lr
 8005532:	bf00      	nop
 8005534:	40010000 	.word	0x40010000
 8005538:	40000400 	.word	0x40000400
 800553c:	40000800 	.word	0x40000800
 8005540:	40000c00 	.word	0x40000c00
 8005544:	40014000 	.word	0x40014000

08005548 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005548:	b480      	push	{r7}
 800554a:	b083      	sub	sp, #12
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005550:	bf00      	nop
 8005552:	370c      	adds	r7, #12
 8005554:	46bd      	mov	sp, r7
 8005556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555a:	4770      	bx	lr

0800555c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800555c:	b480      	push	{r7}
 800555e:	b083      	sub	sp, #12
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005564:	bf00      	nop
 8005566:	370c      	adds	r7, #12
 8005568:	46bd      	mov	sp, r7
 800556a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556e:	4770      	bx	lr

08005570 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b082      	sub	sp, #8
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d101      	bne.n	8005582 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800557e:	2301      	movs	r3, #1
 8005580:	e03f      	b.n	8005602 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005588:	b2db      	uxtb	r3, r3
 800558a:	2b00      	cmp	r3, #0
 800558c:	d106      	bne.n	800559c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2200      	movs	r2, #0
 8005592:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005596:	6878      	ldr	r0, [r7, #4]
 8005598:	f7fd f8e6 	bl	8002768 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2224      	movs	r2, #36	; 0x24
 80055a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	68da      	ldr	r2, [r3, #12]
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80055b2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80055b4:	6878      	ldr	r0, [r7, #4]
 80055b6:	f000 fe49 	bl	800624c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	691a      	ldr	r2, [r3, #16]
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80055c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	695a      	ldr	r2, [r3, #20]
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80055d8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	68da      	ldr	r2, [r3, #12]
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80055e8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2200      	movs	r2, #0
 80055ee:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2220      	movs	r2, #32
 80055f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2220      	movs	r2, #32
 80055fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005600:	2300      	movs	r3, #0
}
 8005602:	4618      	mov	r0, r3
 8005604:	3708      	adds	r7, #8
 8005606:	46bd      	mov	sp, r7
 8005608:	bd80      	pop	{r7, pc}

0800560a <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800560a:	b580      	push	{r7, lr}
 800560c:	b082      	sub	sp, #8
 800560e:	af00      	add	r7, sp, #0
 8005610:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d101      	bne.n	800561c <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8005618:	2301      	movs	r3, #1
 800561a:	e021      	b.n	8005660 <HAL_UART_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2224      	movs	r2, #36	; 0x24
 8005620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	68da      	ldr	r2, [r3, #12]
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005632:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8005634:	6878      	ldr	r0, [r7, #4]
 8005636:	f7fd f959 	bl	80028ec <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2200      	movs	r2, #0
 800563e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_RESET;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2200      	movs	r2, #0
 8005644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_RESET;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2200      	movs	r2, #0
 800564c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2200      	movs	r2, #0
 8005654:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2200      	movs	r2, #0
 800565a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800565e:	2300      	movs	r3, #0
}
 8005660:	4618      	mov	r0, r3
 8005662:	3708      	adds	r7, #8
 8005664:	46bd      	mov	sp, r7
 8005666:	bd80      	pop	{r7, pc}

08005668 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b08a      	sub	sp, #40	; 0x28
 800566c:	af02      	add	r7, sp, #8
 800566e:	60f8      	str	r0, [r7, #12]
 8005670:	60b9      	str	r1, [r7, #8]
 8005672:	603b      	str	r3, [r7, #0]
 8005674:	4613      	mov	r3, r2
 8005676:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005678:	2300      	movs	r3, #0
 800567a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005682:	b2db      	uxtb	r3, r3
 8005684:	2b20      	cmp	r3, #32
 8005686:	d17c      	bne.n	8005782 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005688:	68bb      	ldr	r3, [r7, #8]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d002      	beq.n	8005694 <HAL_UART_Transmit+0x2c>
 800568e:	88fb      	ldrh	r3, [r7, #6]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d101      	bne.n	8005698 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005694:	2301      	movs	r3, #1
 8005696:	e075      	b.n	8005784 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800569e:	2b01      	cmp	r3, #1
 80056a0:	d101      	bne.n	80056a6 <HAL_UART_Transmit+0x3e>
 80056a2:	2302      	movs	r3, #2
 80056a4:	e06e      	b.n	8005784 <HAL_UART_Transmit+0x11c>
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	2201      	movs	r2, #1
 80056aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	2200      	movs	r2, #0
 80056b2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	2221      	movs	r2, #33	; 0x21
 80056b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80056bc:	f7fd fb14 	bl	8002ce8 <HAL_GetTick>
 80056c0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	88fa      	ldrh	r2, [r7, #6]
 80056c6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	88fa      	ldrh	r2, [r7, #6]
 80056cc:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	689b      	ldr	r3, [r3, #8]
 80056d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056d6:	d108      	bne.n	80056ea <HAL_UART_Transmit+0x82>
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	691b      	ldr	r3, [r3, #16]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d104      	bne.n	80056ea <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80056e0:	2300      	movs	r3, #0
 80056e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	61bb      	str	r3, [r7, #24]
 80056e8:	e003      	b.n	80056f2 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80056ea:	68bb      	ldr	r3, [r7, #8]
 80056ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80056ee:	2300      	movs	r3, #0
 80056f0:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	2200      	movs	r2, #0
 80056f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80056fa:	e02a      	b.n	8005752 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	9300      	str	r3, [sp, #0]
 8005700:	697b      	ldr	r3, [r7, #20]
 8005702:	2200      	movs	r2, #0
 8005704:	2180      	movs	r1, #128	; 0x80
 8005706:	68f8      	ldr	r0, [r7, #12]
 8005708:	f000 fb5a 	bl	8005dc0 <UART_WaitOnFlagUntilTimeout>
 800570c:	4603      	mov	r3, r0
 800570e:	2b00      	cmp	r3, #0
 8005710:	d001      	beq.n	8005716 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005712:	2303      	movs	r3, #3
 8005714:	e036      	b.n	8005784 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005716:	69fb      	ldr	r3, [r7, #28]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d10b      	bne.n	8005734 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800571c:	69bb      	ldr	r3, [r7, #24]
 800571e:	881b      	ldrh	r3, [r3, #0]
 8005720:	461a      	mov	r2, r3
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800572a:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800572c:	69bb      	ldr	r3, [r7, #24]
 800572e:	3302      	adds	r3, #2
 8005730:	61bb      	str	r3, [r7, #24]
 8005732:	e007      	b.n	8005744 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005734:	69fb      	ldr	r3, [r7, #28]
 8005736:	781a      	ldrb	r2, [r3, #0]
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800573e:	69fb      	ldr	r3, [r7, #28]
 8005740:	3301      	adds	r3, #1
 8005742:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005748:	b29b      	uxth	r3, r3
 800574a:	3b01      	subs	r3, #1
 800574c:	b29a      	uxth	r2, r3
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005756:	b29b      	uxth	r3, r3
 8005758:	2b00      	cmp	r3, #0
 800575a:	d1cf      	bne.n	80056fc <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	9300      	str	r3, [sp, #0]
 8005760:	697b      	ldr	r3, [r7, #20]
 8005762:	2200      	movs	r2, #0
 8005764:	2140      	movs	r1, #64	; 0x40
 8005766:	68f8      	ldr	r0, [r7, #12]
 8005768:	f000 fb2a 	bl	8005dc0 <UART_WaitOnFlagUntilTimeout>
 800576c:	4603      	mov	r3, r0
 800576e:	2b00      	cmp	r3, #0
 8005770:	d001      	beq.n	8005776 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005772:	2303      	movs	r3, #3
 8005774:	e006      	b.n	8005784 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	2220      	movs	r2, #32
 800577a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800577e:	2300      	movs	r3, #0
 8005780:	e000      	b.n	8005784 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005782:	2302      	movs	r3, #2
  }
}
 8005784:	4618      	mov	r0, r3
 8005786:	3720      	adds	r7, #32
 8005788:	46bd      	mov	sp, r7
 800578a:	bd80      	pop	{r7, pc}

0800578c <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800578c:	b480      	push	{r7}
 800578e:	b085      	sub	sp, #20
 8005790:	af00      	add	r7, sp, #0
 8005792:	60f8      	str	r0, [r7, #12]
 8005794:	60b9      	str	r1, [r7, #8]
 8005796:	4613      	mov	r3, r2
 8005798:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057a0:	b2db      	uxtb	r3, r3
 80057a2:	2b20      	cmp	r3, #32
 80057a4:	d130      	bne.n	8005808 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80057a6:	68bb      	ldr	r3, [r7, #8]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d002      	beq.n	80057b2 <HAL_UART_Transmit_IT+0x26>
 80057ac:	88fb      	ldrh	r3, [r7, #6]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d101      	bne.n	80057b6 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80057b2:	2301      	movs	r3, #1
 80057b4:	e029      	b.n	800580a <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057bc:	2b01      	cmp	r3, #1
 80057be:	d101      	bne.n	80057c4 <HAL_UART_Transmit_IT+0x38>
 80057c0:	2302      	movs	r3, #2
 80057c2:	e022      	b.n	800580a <HAL_UART_Transmit_IT+0x7e>
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	2201      	movs	r2, #1
 80057c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	68ba      	ldr	r2, [r7, #8]
 80057d0:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	88fa      	ldrh	r2, [r7, #6]
 80057d6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	88fa      	ldrh	r2, [r7, #6]
 80057dc:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	2200      	movs	r2, #0
 80057e2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	2221      	movs	r2, #33	; 0x21
 80057e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	2200      	movs	r2, #0
 80057f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	68da      	ldr	r2, [r3, #12]
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005802:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8005804:	2300      	movs	r3, #0
 8005806:	e000      	b.n	800580a <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8005808:	2302      	movs	r3, #2
  }
}
 800580a:	4618      	mov	r0, r3
 800580c:	3714      	adds	r7, #20
 800580e:	46bd      	mov	sp, r7
 8005810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005814:	4770      	bx	lr

08005816 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005816:	b580      	push	{r7, lr}
 8005818:	b084      	sub	sp, #16
 800581a:	af00      	add	r7, sp, #0
 800581c:	60f8      	str	r0, [r7, #12]
 800581e:	60b9      	str	r1, [r7, #8]
 8005820:	4613      	mov	r3, r2
 8005822:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800582a:	b2db      	uxtb	r3, r3
 800582c:	2b20      	cmp	r3, #32
 800582e:	d11d      	bne.n	800586c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d002      	beq.n	800583c <HAL_UART_Receive_IT+0x26>
 8005836:	88fb      	ldrh	r3, [r7, #6]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d101      	bne.n	8005840 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800583c:	2301      	movs	r3, #1
 800583e:	e016      	b.n	800586e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005846:	2b01      	cmp	r3, #1
 8005848:	d101      	bne.n	800584e <HAL_UART_Receive_IT+0x38>
 800584a:	2302      	movs	r3, #2
 800584c:	e00f      	b.n	800586e <HAL_UART_Receive_IT+0x58>
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	2201      	movs	r2, #1
 8005852:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	2200      	movs	r2, #0
 800585a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800585c:	88fb      	ldrh	r3, [r7, #6]
 800585e:	461a      	mov	r2, r3
 8005860:	68b9      	ldr	r1, [r7, #8]
 8005862:	68f8      	ldr	r0, [r7, #12]
 8005864:	f000 fb1a 	bl	8005e9c <UART_Start_Receive_IT>
 8005868:	4603      	mov	r3, r0
 800586a:	e000      	b.n	800586e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800586c:	2302      	movs	r3, #2
  }
}
 800586e:	4618      	mov	r0, r3
 8005870:	3710      	adds	r7, #16
 8005872:	46bd      	mov	sp, r7
 8005874:	bd80      	pop	{r7, pc}
	...

08005878 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b0ba      	sub	sp, #232	; 0xe8
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	68db      	ldr	r3, [r3, #12]
 8005890:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	695b      	ldr	r3, [r3, #20]
 800589a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800589e:	2300      	movs	r3, #0
 80058a0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80058a4:	2300      	movs	r3, #0
 80058a6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80058aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058ae:	f003 030f 	and.w	r3, r3, #15
 80058b2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80058b6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d10f      	bne.n	80058de <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80058be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058c2:	f003 0320 	and.w	r3, r3, #32
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d009      	beq.n	80058de <HAL_UART_IRQHandler+0x66>
 80058ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80058ce:	f003 0320 	and.w	r3, r3, #32
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d003      	beq.n	80058de <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80058d6:	6878      	ldr	r0, [r7, #4]
 80058d8:	f000 fbfd 	bl	80060d6 <UART_Receive_IT>
      return;
 80058dc:	e256      	b.n	8005d8c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80058de:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	f000 80de 	beq.w	8005aa4 <HAL_UART_IRQHandler+0x22c>
 80058e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80058ec:	f003 0301 	and.w	r3, r3, #1
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d106      	bne.n	8005902 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80058f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80058f8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	f000 80d1 	beq.w	8005aa4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005902:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005906:	f003 0301 	and.w	r3, r3, #1
 800590a:	2b00      	cmp	r3, #0
 800590c:	d00b      	beq.n	8005926 <HAL_UART_IRQHandler+0xae>
 800590e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005912:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005916:	2b00      	cmp	r3, #0
 8005918:	d005      	beq.n	8005926 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800591e:	f043 0201 	orr.w	r2, r3, #1
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005926:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800592a:	f003 0304 	and.w	r3, r3, #4
 800592e:	2b00      	cmp	r3, #0
 8005930:	d00b      	beq.n	800594a <HAL_UART_IRQHandler+0xd2>
 8005932:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005936:	f003 0301 	and.w	r3, r3, #1
 800593a:	2b00      	cmp	r3, #0
 800593c:	d005      	beq.n	800594a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005942:	f043 0202 	orr.w	r2, r3, #2
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800594a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800594e:	f003 0302 	and.w	r3, r3, #2
 8005952:	2b00      	cmp	r3, #0
 8005954:	d00b      	beq.n	800596e <HAL_UART_IRQHandler+0xf6>
 8005956:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800595a:	f003 0301 	and.w	r3, r3, #1
 800595e:	2b00      	cmp	r3, #0
 8005960:	d005      	beq.n	800596e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005966:	f043 0204 	orr.w	r2, r3, #4
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800596e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005972:	f003 0308 	and.w	r3, r3, #8
 8005976:	2b00      	cmp	r3, #0
 8005978:	d011      	beq.n	800599e <HAL_UART_IRQHandler+0x126>
 800597a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800597e:	f003 0320 	and.w	r3, r3, #32
 8005982:	2b00      	cmp	r3, #0
 8005984:	d105      	bne.n	8005992 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005986:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800598a:	f003 0301 	and.w	r3, r3, #1
 800598e:	2b00      	cmp	r3, #0
 8005990:	d005      	beq.n	800599e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005996:	f043 0208 	orr.w	r2, r3, #8
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	f000 81ed 	beq.w	8005d82 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80059a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059ac:	f003 0320 	and.w	r3, r3, #32
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d008      	beq.n	80059c6 <HAL_UART_IRQHandler+0x14e>
 80059b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059b8:	f003 0320 	and.w	r3, r3, #32
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d002      	beq.n	80059c6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80059c0:	6878      	ldr	r0, [r7, #4]
 80059c2:	f000 fb88 	bl	80060d6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	695b      	ldr	r3, [r3, #20]
 80059cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059d0:	2b40      	cmp	r3, #64	; 0x40
 80059d2:	bf0c      	ite	eq
 80059d4:	2301      	moveq	r3, #1
 80059d6:	2300      	movne	r3, #0
 80059d8:	b2db      	uxtb	r3, r3
 80059da:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059e2:	f003 0308 	and.w	r3, r3, #8
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d103      	bne.n	80059f2 <HAL_UART_IRQHandler+0x17a>
 80059ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d04f      	beq.n	8005a92 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80059f2:	6878      	ldr	r0, [r7, #4]
 80059f4:	f000 fa90 	bl	8005f18 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	695b      	ldr	r3, [r3, #20]
 80059fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a02:	2b40      	cmp	r3, #64	; 0x40
 8005a04:	d141      	bne.n	8005a8a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	3314      	adds	r3, #20
 8005a0c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a10:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005a14:	e853 3f00 	ldrex	r3, [r3]
 8005a18:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005a1c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005a20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a24:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	3314      	adds	r3, #20
 8005a2e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005a32:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005a36:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a3a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005a3e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005a42:	e841 2300 	strex	r3, r2, [r1]
 8005a46:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005a4a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d1d9      	bne.n	8005a06 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d013      	beq.n	8005a82 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a5e:	4a7d      	ldr	r2, [pc, #500]	; (8005c54 <HAL_UART_IRQHandler+0x3dc>)
 8005a60:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a66:	4618      	mov	r0, r3
 8005a68:	f7fd fb21 	bl	80030ae <HAL_DMA_Abort_IT>
 8005a6c:	4603      	mov	r3, r0
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d016      	beq.n	8005aa0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a78:	687a      	ldr	r2, [r7, #4]
 8005a7a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005a7c:	4610      	mov	r0, r2
 8005a7e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a80:	e00e      	b.n	8005aa0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005a82:	6878      	ldr	r0, [r7, #4]
 8005a84:	f7fc fb86 	bl	8002194 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a88:	e00a      	b.n	8005aa0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005a8a:	6878      	ldr	r0, [r7, #4]
 8005a8c:	f7fc fb82 	bl	8002194 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a90:	e006      	b.n	8005aa0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005a92:	6878      	ldr	r0, [r7, #4]
 8005a94:	f7fc fb7e 	bl	8002194 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005a9e:	e170      	b.n	8005d82 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005aa0:	bf00      	nop
    return;
 8005aa2:	e16e      	b.n	8005d82 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aa8:	2b01      	cmp	r3, #1
 8005aaa:	f040 814a 	bne.w	8005d42 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005aae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ab2:	f003 0310 	and.w	r3, r3, #16
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	f000 8143 	beq.w	8005d42 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005abc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ac0:	f003 0310 	and.w	r3, r3, #16
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	f000 813c 	beq.w	8005d42 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005aca:	2300      	movs	r3, #0
 8005acc:	60bb      	str	r3, [r7, #8]
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	60bb      	str	r3, [r7, #8]
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	685b      	ldr	r3, [r3, #4]
 8005adc:	60bb      	str	r3, [r7, #8]
 8005ade:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	695b      	ldr	r3, [r3, #20]
 8005ae6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005aea:	2b40      	cmp	r3, #64	; 0x40
 8005aec:	f040 80b4 	bne.w	8005c58 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	685b      	ldr	r3, [r3, #4]
 8005af8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005afc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	f000 8140 	beq.w	8005d86 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005b0a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005b0e:	429a      	cmp	r2, r3
 8005b10:	f080 8139 	bcs.w	8005d86 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005b1a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b20:	69db      	ldr	r3, [r3, #28]
 8005b22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b26:	f000 8088 	beq.w	8005c3a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	330c      	adds	r3, #12
 8005b30:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b34:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005b38:	e853 3f00 	ldrex	r3, [r3]
 8005b3c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005b40:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005b44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b48:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	330c      	adds	r3, #12
 8005b52:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005b56:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005b5a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b5e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005b62:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005b66:	e841 2300 	strex	r3, r2, [r1]
 8005b6a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005b6e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d1d9      	bne.n	8005b2a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	3314      	adds	r3, #20
 8005b7c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b7e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005b80:	e853 3f00 	ldrex	r3, [r3]
 8005b84:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005b86:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005b88:	f023 0301 	bic.w	r3, r3, #1
 8005b8c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	3314      	adds	r3, #20
 8005b96:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005b9a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005b9e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ba0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005ba2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005ba6:	e841 2300 	strex	r3, r2, [r1]
 8005baa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005bac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d1e1      	bne.n	8005b76 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	3314      	adds	r3, #20
 8005bb8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005bbc:	e853 3f00 	ldrex	r3, [r3]
 8005bc0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005bc2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005bc4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005bc8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	3314      	adds	r3, #20
 8005bd2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005bd6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005bd8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bda:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005bdc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005bde:	e841 2300 	strex	r3, r2, [r1]
 8005be2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005be4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d1e3      	bne.n	8005bb2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2220      	movs	r2, #32
 8005bee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	330c      	adds	r3, #12
 8005bfe:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c02:	e853 3f00 	ldrex	r3, [r3]
 8005c06:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005c08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c0a:	f023 0310 	bic.w	r3, r3, #16
 8005c0e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	330c      	adds	r3, #12
 8005c18:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005c1c:	65ba      	str	r2, [r7, #88]	; 0x58
 8005c1e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c20:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005c22:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005c24:	e841 2300 	strex	r3, r2, [r1]
 8005c28:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005c2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d1e3      	bne.n	8005bf8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c34:	4618      	mov	r0, r3
 8005c36:	f7fd f9ca 	bl	8002fce <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005c42:	b29b      	uxth	r3, r3
 8005c44:	1ad3      	subs	r3, r2, r3
 8005c46:	b29b      	uxth	r3, r3
 8005c48:	4619      	mov	r1, r3
 8005c4a:	6878      	ldr	r0, [r7, #4]
 8005c4c:	f000 f8ac 	bl	8005da8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005c50:	e099      	b.n	8005d86 <HAL_UART_IRQHandler+0x50e>
 8005c52:	bf00      	nop
 8005c54:	08005fdf 	.word	0x08005fdf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005c60:	b29b      	uxth	r3, r3
 8005c62:	1ad3      	subs	r3, r2, r3
 8005c64:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005c6c:	b29b      	uxth	r3, r3
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	f000 808b 	beq.w	8005d8a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005c74:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	f000 8086 	beq.w	8005d8a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	330c      	adds	r3, #12
 8005c84:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c88:	e853 3f00 	ldrex	r3, [r3]
 8005c8c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005c8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c90:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005c94:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	330c      	adds	r3, #12
 8005c9e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005ca2:	647a      	str	r2, [r7, #68]	; 0x44
 8005ca4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ca6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005ca8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005caa:	e841 2300 	strex	r3, r2, [r1]
 8005cae:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005cb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d1e3      	bne.n	8005c7e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	3314      	adds	r3, #20
 8005cbc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cc0:	e853 3f00 	ldrex	r3, [r3]
 8005cc4:	623b      	str	r3, [r7, #32]
   return(result);
 8005cc6:	6a3b      	ldr	r3, [r7, #32]
 8005cc8:	f023 0301 	bic.w	r3, r3, #1
 8005ccc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	3314      	adds	r3, #20
 8005cd6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005cda:	633a      	str	r2, [r7, #48]	; 0x30
 8005cdc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cde:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005ce0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ce2:	e841 2300 	strex	r3, r2, [r1]
 8005ce6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005ce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d1e3      	bne.n	8005cb6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2220      	movs	r2, #32
 8005cf2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	330c      	adds	r3, #12
 8005d02:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d04:	693b      	ldr	r3, [r7, #16]
 8005d06:	e853 3f00 	ldrex	r3, [r3]
 8005d0a:	60fb      	str	r3, [r7, #12]
   return(result);
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	f023 0310 	bic.w	r3, r3, #16
 8005d12:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	330c      	adds	r3, #12
 8005d1c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005d20:	61fa      	str	r2, [r7, #28]
 8005d22:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d24:	69b9      	ldr	r1, [r7, #24]
 8005d26:	69fa      	ldr	r2, [r7, #28]
 8005d28:	e841 2300 	strex	r3, r2, [r1]
 8005d2c:	617b      	str	r3, [r7, #20]
   return(result);
 8005d2e:	697b      	ldr	r3, [r7, #20]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d1e3      	bne.n	8005cfc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005d34:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005d38:	4619      	mov	r1, r3
 8005d3a:	6878      	ldr	r0, [r7, #4]
 8005d3c:	f000 f834 	bl	8005da8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005d40:	e023      	b.n	8005d8a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005d42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d009      	beq.n	8005d62 <HAL_UART_IRQHandler+0x4ea>
 8005d4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d003      	beq.n	8005d62 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005d5a:	6878      	ldr	r0, [r7, #4]
 8005d5c:	f000 f953 	bl	8006006 <UART_Transmit_IT>
    return;
 8005d60:	e014      	b.n	8005d8c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005d62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d00e      	beq.n	8005d8c <HAL_UART_IRQHandler+0x514>
 8005d6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d008      	beq.n	8005d8c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005d7a:	6878      	ldr	r0, [r7, #4]
 8005d7c:	f000 f993 	bl	80060a6 <UART_EndTransmit_IT>
    return;
 8005d80:	e004      	b.n	8005d8c <HAL_UART_IRQHandler+0x514>
    return;
 8005d82:	bf00      	nop
 8005d84:	e002      	b.n	8005d8c <HAL_UART_IRQHandler+0x514>
      return;
 8005d86:	bf00      	nop
 8005d88:	e000      	b.n	8005d8c <HAL_UART_IRQHandler+0x514>
      return;
 8005d8a:	bf00      	nop
  }
}
 8005d8c:	37e8      	adds	r7, #232	; 0xe8
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	bd80      	pop	{r7, pc}
 8005d92:	bf00      	nop

08005d94 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005d94:	b480      	push	{r7}
 8005d96:	b083      	sub	sp, #12
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005d9c:	bf00      	nop
 8005d9e:	370c      	adds	r7, #12
 8005da0:	46bd      	mov	sp, r7
 8005da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da6:	4770      	bx	lr

08005da8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005da8:	b480      	push	{r7}
 8005daa:	b083      	sub	sp, #12
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
 8005db0:	460b      	mov	r3, r1
 8005db2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005db4:	bf00      	nop
 8005db6:	370c      	adds	r7, #12
 8005db8:	46bd      	mov	sp, r7
 8005dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbe:	4770      	bx	lr

08005dc0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b090      	sub	sp, #64	; 0x40
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	60f8      	str	r0, [r7, #12]
 8005dc8:	60b9      	str	r1, [r7, #8]
 8005dca:	603b      	str	r3, [r7, #0]
 8005dcc:	4613      	mov	r3, r2
 8005dce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005dd0:	e050      	b.n	8005e74 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005dd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005dd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dd8:	d04c      	beq.n	8005e74 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005dda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d007      	beq.n	8005df0 <UART_WaitOnFlagUntilTimeout+0x30>
 8005de0:	f7fc ff82 	bl	8002ce8 <HAL_GetTick>
 8005de4:	4602      	mov	r2, r0
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	1ad3      	subs	r3, r2, r3
 8005dea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005dec:	429a      	cmp	r2, r3
 8005dee:	d241      	bcs.n	8005e74 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	330c      	adds	r3, #12
 8005df6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dfa:	e853 3f00 	ldrex	r3, [r3]
 8005dfe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e02:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005e06:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	330c      	adds	r3, #12
 8005e0e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005e10:	637a      	str	r2, [r7, #52]	; 0x34
 8005e12:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e14:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005e16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005e18:	e841 2300 	strex	r3, r2, [r1]
 8005e1c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005e1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d1e5      	bne.n	8005df0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	3314      	adds	r3, #20
 8005e2a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e2c:	697b      	ldr	r3, [r7, #20]
 8005e2e:	e853 3f00 	ldrex	r3, [r3]
 8005e32:	613b      	str	r3, [r7, #16]
   return(result);
 8005e34:	693b      	ldr	r3, [r7, #16]
 8005e36:	f023 0301 	bic.w	r3, r3, #1
 8005e3a:	63bb      	str	r3, [r7, #56]	; 0x38
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	3314      	adds	r3, #20
 8005e42:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005e44:	623a      	str	r2, [r7, #32]
 8005e46:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e48:	69f9      	ldr	r1, [r7, #28]
 8005e4a:	6a3a      	ldr	r2, [r7, #32]
 8005e4c:	e841 2300 	strex	r3, r2, [r1]
 8005e50:	61bb      	str	r3, [r7, #24]
   return(result);
 8005e52:	69bb      	ldr	r3, [r7, #24]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d1e5      	bne.n	8005e24 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	2220      	movs	r2, #32
 8005e5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	2220      	movs	r2, #32
 8005e64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005e70:	2303      	movs	r3, #3
 8005e72:	e00f      	b.n	8005e94 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	681a      	ldr	r2, [r3, #0]
 8005e7a:	68bb      	ldr	r3, [r7, #8]
 8005e7c:	4013      	ands	r3, r2
 8005e7e:	68ba      	ldr	r2, [r7, #8]
 8005e80:	429a      	cmp	r2, r3
 8005e82:	bf0c      	ite	eq
 8005e84:	2301      	moveq	r3, #1
 8005e86:	2300      	movne	r3, #0
 8005e88:	b2db      	uxtb	r3, r3
 8005e8a:	461a      	mov	r2, r3
 8005e8c:	79fb      	ldrb	r3, [r7, #7]
 8005e8e:	429a      	cmp	r2, r3
 8005e90:	d09f      	beq.n	8005dd2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005e92:	2300      	movs	r3, #0
}
 8005e94:	4618      	mov	r0, r3
 8005e96:	3740      	adds	r7, #64	; 0x40
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	bd80      	pop	{r7, pc}

08005e9c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b085      	sub	sp, #20
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	60f8      	str	r0, [r7, #12]
 8005ea4:	60b9      	str	r1, [r7, #8]
 8005ea6:	4613      	mov	r3, r2
 8005ea8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	68ba      	ldr	r2, [r7, #8]
 8005eae:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	88fa      	ldrh	r2, [r7, #6]
 8005eb4:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	88fa      	ldrh	r2, [r7, #6]
 8005eba:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	2222      	movs	r2, #34	; 0x22
 8005ec6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	2200      	movs	r2, #0
 8005ece:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	691b      	ldr	r3, [r3, #16]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d007      	beq.n	8005eea <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	68da      	ldr	r2, [r3, #12]
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005ee8:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	695a      	ldr	r2, [r3, #20]
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f042 0201 	orr.w	r2, r2, #1
 8005ef8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	68da      	ldr	r2, [r3, #12]
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f042 0220 	orr.w	r2, r2, #32
 8005f08:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005f0a:	2300      	movs	r3, #0
}
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	3714      	adds	r7, #20
 8005f10:	46bd      	mov	sp, r7
 8005f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f16:	4770      	bx	lr

08005f18 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005f18:	b480      	push	{r7}
 8005f1a:	b095      	sub	sp, #84	; 0x54
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	330c      	adds	r3, #12
 8005f26:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f2a:	e853 3f00 	ldrex	r3, [r3]
 8005f2e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005f30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f32:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005f36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	330c      	adds	r3, #12
 8005f3e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005f40:	643a      	str	r2, [r7, #64]	; 0x40
 8005f42:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f44:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005f46:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005f48:	e841 2300 	strex	r3, r2, [r1]
 8005f4c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005f4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d1e5      	bne.n	8005f20 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	3314      	adds	r3, #20
 8005f5a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f5c:	6a3b      	ldr	r3, [r7, #32]
 8005f5e:	e853 3f00 	ldrex	r3, [r3]
 8005f62:	61fb      	str	r3, [r7, #28]
   return(result);
 8005f64:	69fb      	ldr	r3, [r7, #28]
 8005f66:	f023 0301 	bic.w	r3, r3, #1
 8005f6a:	64bb      	str	r3, [r7, #72]	; 0x48
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	3314      	adds	r3, #20
 8005f72:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005f74:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005f76:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f78:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005f7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f7c:	e841 2300 	strex	r3, r2, [r1]
 8005f80:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d1e5      	bne.n	8005f54 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f8c:	2b01      	cmp	r3, #1
 8005f8e:	d119      	bne.n	8005fc4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	330c      	adds	r3, #12
 8005f96:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	e853 3f00 	ldrex	r3, [r3]
 8005f9e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005fa0:	68bb      	ldr	r3, [r7, #8]
 8005fa2:	f023 0310 	bic.w	r3, r3, #16
 8005fa6:	647b      	str	r3, [r7, #68]	; 0x44
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	330c      	adds	r3, #12
 8005fae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005fb0:	61ba      	str	r2, [r7, #24]
 8005fb2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fb4:	6979      	ldr	r1, [r7, #20]
 8005fb6:	69ba      	ldr	r2, [r7, #24]
 8005fb8:	e841 2300 	strex	r3, r2, [r1]
 8005fbc:	613b      	str	r3, [r7, #16]
   return(result);
 8005fbe:	693b      	ldr	r3, [r7, #16]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d1e5      	bne.n	8005f90 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2220      	movs	r2, #32
 8005fc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2200      	movs	r2, #0
 8005fd0:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005fd2:	bf00      	nop
 8005fd4:	3754      	adds	r7, #84	; 0x54
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fdc:	4770      	bx	lr

08005fde <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005fde:	b580      	push	{r7, lr}
 8005fe0:	b084      	sub	sp, #16
 8005fe2:	af00      	add	r7, sp, #0
 8005fe4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fea:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	2200      	movs	r2, #0
 8005ff0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005ff8:	68f8      	ldr	r0, [r7, #12]
 8005ffa:	f7fc f8cb 	bl	8002194 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005ffe:	bf00      	nop
 8006000:	3710      	adds	r7, #16
 8006002:	46bd      	mov	sp, r7
 8006004:	bd80      	pop	{r7, pc}

08006006 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006006:	b480      	push	{r7}
 8006008:	b085      	sub	sp, #20
 800600a:	af00      	add	r7, sp, #0
 800600c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006014:	b2db      	uxtb	r3, r3
 8006016:	2b21      	cmp	r3, #33	; 0x21
 8006018:	d13e      	bne.n	8006098 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	689b      	ldr	r3, [r3, #8]
 800601e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006022:	d114      	bne.n	800604e <UART_Transmit_IT+0x48>
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	691b      	ldr	r3, [r3, #16]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d110      	bne.n	800604e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6a1b      	ldr	r3, [r3, #32]
 8006030:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	881b      	ldrh	r3, [r3, #0]
 8006036:	461a      	mov	r2, r3
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006040:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6a1b      	ldr	r3, [r3, #32]
 8006046:	1c9a      	adds	r2, r3, #2
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	621a      	str	r2, [r3, #32]
 800604c:	e008      	b.n	8006060 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6a1b      	ldr	r3, [r3, #32]
 8006052:	1c59      	adds	r1, r3, #1
 8006054:	687a      	ldr	r2, [r7, #4]
 8006056:	6211      	str	r1, [r2, #32]
 8006058:	781a      	ldrb	r2, [r3, #0]
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006064:	b29b      	uxth	r3, r3
 8006066:	3b01      	subs	r3, #1
 8006068:	b29b      	uxth	r3, r3
 800606a:	687a      	ldr	r2, [r7, #4]
 800606c:	4619      	mov	r1, r3
 800606e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006070:	2b00      	cmp	r3, #0
 8006072:	d10f      	bne.n	8006094 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	68da      	ldr	r2, [r3, #12]
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006082:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	68da      	ldr	r2, [r3, #12]
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006092:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006094:	2300      	movs	r3, #0
 8006096:	e000      	b.n	800609a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006098:	2302      	movs	r3, #2
  }
}
 800609a:	4618      	mov	r0, r3
 800609c:	3714      	adds	r7, #20
 800609e:	46bd      	mov	sp, r7
 80060a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a4:	4770      	bx	lr

080060a6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80060a6:	b580      	push	{r7, lr}
 80060a8:	b082      	sub	sp, #8
 80060aa:	af00      	add	r7, sp, #0
 80060ac:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	68da      	ldr	r2, [r3, #12]
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80060bc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2220      	movs	r2, #32
 80060c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80060c6:	6878      	ldr	r0, [r7, #4]
 80060c8:	f7ff fe64 	bl	8005d94 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80060cc:	2300      	movs	r3, #0
}
 80060ce:	4618      	mov	r0, r3
 80060d0:	3708      	adds	r7, #8
 80060d2:	46bd      	mov	sp, r7
 80060d4:	bd80      	pop	{r7, pc}

080060d6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80060d6:	b580      	push	{r7, lr}
 80060d8:	b08c      	sub	sp, #48	; 0x30
 80060da:	af00      	add	r7, sp, #0
 80060dc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80060e4:	b2db      	uxtb	r3, r3
 80060e6:	2b22      	cmp	r3, #34	; 0x22
 80060e8:	f040 80ab 	bne.w	8006242 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	689b      	ldr	r3, [r3, #8]
 80060f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060f4:	d117      	bne.n	8006126 <UART_Receive_IT+0x50>
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	691b      	ldr	r3, [r3, #16]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d113      	bne.n	8006126 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80060fe:	2300      	movs	r3, #0
 8006100:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006106:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	685b      	ldr	r3, [r3, #4]
 800610e:	b29b      	uxth	r3, r3
 8006110:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006114:	b29a      	uxth	r2, r3
 8006116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006118:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800611e:	1c9a      	adds	r2, r3, #2
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	629a      	str	r2, [r3, #40]	; 0x28
 8006124:	e026      	b.n	8006174 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800612a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800612c:	2300      	movs	r3, #0
 800612e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	689b      	ldr	r3, [r3, #8]
 8006134:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006138:	d007      	beq.n	800614a <UART_Receive_IT+0x74>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	689b      	ldr	r3, [r3, #8]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d10a      	bne.n	8006158 <UART_Receive_IT+0x82>
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	691b      	ldr	r3, [r3, #16]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d106      	bne.n	8006158 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	685b      	ldr	r3, [r3, #4]
 8006150:	b2da      	uxtb	r2, r3
 8006152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006154:	701a      	strb	r2, [r3, #0]
 8006156:	e008      	b.n	800616a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	685b      	ldr	r3, [r3, #4]
 800615e:	b2db      	uxtb	r3, r3
 8006160:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006164:	b2da      	uxtb	r2, r3
 8006166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006168:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800616e:	1c5a      	adds	r2, r3, #1
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006178:	b29b      	uxth	r3, r3
 800617a:	3b01      	subs	r3, #1
 800617c:	b29b      	uxth	r3, r3
 800617e:	687a      	ldr	r2, [r7, #4]
 8006180:	4619      	mov	r1, r3
 8006182:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006184:	2b00      	cmp	r3, #0
 8006186:	d15a      	bne.n	800623e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	68da      	ldr	r2, [r3, #12]
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f022 0220 	bic.w	r2, r2, #32
 8006196:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	68da      	ldr	r2, [r3, #12]
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80061a6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	695a      	ldr	r2, [r3, #20]
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f022 0201 	bic.w	r2, r2, #1
 80061b6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2220      	movs	r2, #32
 80061bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061c4:	2b01      	cmp	r3, #1
 80061c6:	d135      	bne.n	8006234 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2200      	movs	r2, #0
 80061cc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	330c      	adds	r3, #12
 80061d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061d6:	697b      	ldr	r3, [r7, #20]
 80061d8:	e853 3f00 	ldrex	r3, [r3]
 80061dc:	613b      	str	r3, [r7, #16]
   return(result);
 80061de:	693b      	ldr	r3, [r7, #16]
 80061e0:	f023 0310 	bic.w	r3, r3, #16
 80061e4:	627b      	str	r3, [r7, #36]	; 0x24
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	330c      	adds	r3, #12
 80061ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061ee:	623a      	str	r2, [r7, #32]
 80061f0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061f2:	69f9      	ldr	r1, [r7, #28]
 80061f4:	6a3a      	ldr	r2, [r7, #32]
 80061f6:	e841 2300 	strex	r3, r2, [r1]
 80061fa:	61bb      	str	r3, [r7, #24]
   return(result);
 80061fc:	69bb      	ldr	r3, [r7, #24]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d1e5      	bne.n	80061ce <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f003 0310 	and.w	r3, r3, #16
 800620c:	2b10      	cmp	r3, #16
 800620e:	d10a      	bne.n	8006226 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006210:	2300      	movs	r3, #0
 8006212:	60fb      	str	r3, [r7, #12]
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	60fb      	str	r3, [r7, #12]
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	685b      	ldr	r3, [r3, #4]
 8006222:	60fb      	str	r3, [r7, #12]
 8006224:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800622a:	4619      	mov	r1, r3
 800622c:	6878      	ldr	r0, [r7, #4]
 800622e:	f7ff fdbb 	bl	8005da8 <HAL_UARTEx_RxEventCallback>
 8006232:	e002      	b.n	800623a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006234:	6878      	ldr	r0, [r7, #4]
 8006236:	f7fc f803 	bl	8002240 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800623a:	2300      	movs	r3, #0
 800623c:	e002      	b.n	8006244 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800623e:	2300      	movs	r3, #0
 8006240:	e000      	b.n	8006244 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006242:	2302      	movs	r3, #2
  }
}
 8006244:	4618      	mov	r0, r3
 8006246:	3730      	adds	r7, #48	; 0x30
 8006248:	46bd      	mov	sp, r7
 800624a:	bd80      	pop	{r7, pc}

0800624c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800624c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006250:	b0c0      	sub	sp, #256	; 0x100
 8006252:	af00      	add	r7, sp, #0
 8006254:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006258:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	691b      	ldr	r3, [r3, #16]
 8006260:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006264:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006268:	68d9      	ldr	r1, [r3, #12]
 800626a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800626e:	681a      	ldr	r2, [r3, #0]
 8006270:	ea40 0301 	orr.w	r3, r0, r1
 8006274:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006276:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800627a:	689a      	ldr	r2, [r3, #8]
 800627c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006280:	691b      	ldr	r3, [r3, #16]
 8006282:	431a      	orrs	r2, r3
 8006284:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006288:	695b      	ldr	r3, [r3, #20]
 800628a:	431a      	orrs	r2, r3
 800628c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006290:	69db      	ldr	r3, [r3, #28]
 8006292:	4313      	orrs	r3, r2
 8006294:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006298:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	68db      	ldr	r3, [r3, #12]
 80062a0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80062a4:	f021 010c 	bic.w	r1, r1, #12
 80062a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062ac:	681a      	ldr	r2, [r3, #0]
 80062ae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80062b2:	430b      	orrs	r3, r1
 80062b4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80062b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	695b      	ldr	r3, [r3, #20]
 80062be:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80062c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062c6:	6999      	ldr	r1, [r3, #24]
 80062c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062cc:	681a      	ldr	r2, [r3, #0]
 80062ce:	ea40 0301 	orr.w	r3, r0, r1
 80062d2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80062d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062d8:	681a      	ldr	r2, [r3, #0]
 80062da:	4b8f      	ldr	r3, [pc, #572]	; (8006518 <UART_SetConfig+0x2cc>)
 80062dc:	429a      	cmp	r2, r3
 80062de:	d005      	beq.n	80062ec <UART_SetConfig+0xa0>
 80062e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062e4:	681a      	ldr	r2, [r3, #0]
 80062e6:	4b8d      	ldr	r3, [pc, #564]	; (800651c <UART_SetConfig+0x2d0>)
 80062e8:	429a      	cmp	r2, r3
 80062ea:	d104      	bne.n	80062f6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80062ec:	f7fd fde2 	bl	8003eb4 <HAL_RCC_GetPCLK2Freq>
 80062f0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80062f4:	e003      	b.n	80062fe <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80062f6:	f7fd fdc9 	bl	8003e8c <HAL_RCC_GetPCLK1Freq>
 80062fa:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80062fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006302:	69db      	ldr	r3, [r3, #28]
 8006304:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006308:	f040 810c 	bne.w	8006524 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800630c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006310:	2200      	movs	r2, #0
 8006312:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006316:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800631a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800631e:	4622      	mov	r2, r4
 8006320:	462b      	mov	r3, r5
 8006322:	1891      	adds	r1, r2, r2
 8006324:	65b9      	str	r1, [r7, #88]	; 0x58
 8006326:	415b      	adcs	r3, r3
 8006328:	65fb      	str	r3, [r7, #92]	; 0x5c
 800632a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800632e:	4621      	mov	r1, r4
 8006330:	eb12 0801 	adds.w	r8, r2, r1
 8006334:	4629      	mov	r1, r5
 8006336:	eb43 0901 	adc.w	r9, r3, r1
 800633a:	f04f 0200 	mov.w	r2, #0
 800633e:	f04f 0300 	mov.w	r3, #0
 8006342:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006346:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800634a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800634e:	4690      	mov	r8, r2
 8006350:	4699      	mov	r9, r3
 8006352:	4623      	mov	r3, r4
 8006354:	eb18 0303 	adds.w	r3, r8, r3
 8006358:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800635c:	462b      	mov	r3, r5
 800635e:	eb49 0303 	adc.w	r3, r9, r3
 8006362:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006366:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800636a:	685b      	ldr	r3, [r3, #4]
 800636c:	2200      	movs	r2, #0
 800636e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006372:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006376:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800637a:	460b      	mov	r3, r1
 800637c:	18db      	adds	r3, r3, r3
 800637e:	653b      	str	r3, [r7, #80]	; 0x50
 8006380:	4613      	mov	r3, r2
 8006382:	eb42 0303 	adc.w	r3, r2, r3
 8006386:	657b      	str	r3, [r7, #84]	; 0x54
 8006388:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800638c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006390:	f7f9 ff8e 	bl	80002b0 <__aeabi_uldivmod>
 8006394:	4602      	mov	r2, r0
 8006396:	460b      	mov	r3, r1
 8006398:	4b61      	ldr	r3, [pc, #388]	; (8006520 <UART_SetConfig+0x2d4>)
 800639a:	fba3 2302 	umull	r2, r3, r3, r2
 800639e:	095b      	lsrs	r3, r3, #5
 80063a0:	011c      	lsls	r4, r3, #4
 80063a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80063a6:	2200      	movs	r2, #0
 80063a8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80063ac:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80063b0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80063b4:	4642      	mov	r2, r8
 80063b6:	464b      	mov	r3, r9
 80063b8:	1891      	adds	r1, r2, r2
 80063ba:	64b9      	str	r1, [r7, #72]	; 0x48
 80063bc:	415b      	adcs	r3, r3
 80063be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80063c0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80063c4:	4641      	mov	r1, r8
 80063c6:	eb12 0a01 	adds.w	sl, r2, r1
 80063ca:	4649      	mov	r1, r9
 80063cc:	eb43 0b01 	adc.w	fp, r3, r1
 80063d0:	f04f 0200 	mov.w	r2, #0
 80063d4:	f04f 0300 	mov.w	r3, #0
 80063d8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80063dc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80063e0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80063e4:	4692      	mov	sl, r2
 80063e6:	469b      	mov	fp, r3
 80063e8:	4643      	mov	r3, r8
 80063ea:	eb1a 0303 	adds.w	r3, sl, r3
 80063ee:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80063f2:	464b      	mov	r3, r9
 80063f4:	eb4b 0303 	adc.w	r3, fp, r3
 80063f8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80063fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006400:	685b      	ldr	r3, [r3, #4]
 8006402:	2200      	movs	r2, #0
 8006404:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006408:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800640c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006410:	460b      	mov	r3, r1
 8006412:	18db      	adds	r3, r3, r3
 8006414:	643b      	str	r3, [r7, #64]	; 0x40
 8006416:	4613      	mov	r3, r2
 8006418:	eb42 0303 	adc.w	r3, r2, r3
 800641c:	647b      	str	r3, [r7, #68]	; 0x44
 800641e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006422:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006426:	f7f9 ff43 	bl	80002b0 <__aeabi_uldivmod>
 800642a:	4602      	mov	r2, r0
 800642c:	460b      	mov	r3, r1
 800642e:	4611      	mov	r1, r2
 8006430:	4b3b      	ldr	r3, [pc, #236]	; (8006520 <UART_SetConfig+0x2d4>)
 8006432:	fba3 2301 	umull	r2, r3, r3, r1
 8006436:	095b      	lsrs	r3, r3, #5
 8006438:	2264      	movs	r2, #100	; 0x64
 800643a:	fb02 f303 	mul.w	r3, r2, r3
 800643e:	1acb      	subs	r3, r1, r3
 8006440:	00db      	lsls	r3, r3, #3
 8006442:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006446:	4b36      	ldr	r3, [pc, #216]	; (8006520 <UART_SetConfig+0x2d4>)
 8006448:	fba3 2302 	umull	r2, r3, r3, r2
 800644c:	095b      	lsrs	r3, r3, #5
 800644e:	005b      	lsls	r3, r3, #1
 8006450:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006454:	441c      	add	r4, r3
 8006456:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800645a:	2200      	movs	r2, #0
 800645c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006460:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006464:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006468:	4642      	mov	r2, r8
 800646a:	464b      	mov	r3, r9
 800646c:	1891      	adds	r1, r2, r2
 800646e:	63b9      	str	r1, [r7, #56]	; 0x38
 8006470:	415b      	adcs	r3, r3
 8006472:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006474:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006478:	4641      	mov	r1, r8
 800647a:	1851      	adds	r1, r2, r1
 800647c:	6339      	str	r1, [r7, #48]	; 0x30
 800647e:	4649      	mov	r1, r9
 8006480:	414b      	adcs	r3, r1
 8006482:	637b      	str	r3, [r7, #52]	; 0x34
 8006484:	f04f 0200 	mov.w	r2, #0
 8006488:	f04f 0300 	mov.w	r3, #0
 800648c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006490:	4659      	mov	r1, fp
 8006492:	00cb      	lsls	r3, r1, #3
 8006494:	4651      	mov	r1, sl
 8006496:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800649a:	4651      	mov	r1, sl
 800649c:	00ca      	lsls	r2, r1, #3
 800649e:	4610      	mov	r0, r2
 80064a0:	4619      	mov	r1, r3
 80064a2:	4603      	mov	r3, r0
 80064a4:	4642      	mov	r2, r8
 80064a6:	189b      	adds	r3, r3, r2
 80064a8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80064ac:	464b      	mov	r3, r9
 80064ae:	460a      	mov	r2, r1
 80064b0:	eb42 0303 	adc.w	r3, r2, r3
 80064b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80064b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064bc:	685b      	ldr	r3, [r3, #4]
 80064be:	2200      	movs	r2, #0
 80064c0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80064c4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80064c8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80064cc:	460b      	mov	r3, r1
 80064ce:	18db      	adds	r3, r3, r3
 80064d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80064d2:	4613      	mov	r3, r2
 80064d4:	eb42 0303 	adc.w	r3, r2, r3
 80064d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80064da:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80064de:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80064e2:	f7f9 fee5 	bl	80002b0 <__aeabi_uldivmod>
 80064e6:	4602      	mov	r2, r0
 80064e8:	460b      	mov	r3, r1
 80064ea:	4b0d      	ldr	r3, [pc, #52]	; (8006520 <UART_SetConfig+0x2d4>)
 80064ec:	fba3 1302 	umull	r1, r3, r3, r2
 80064f0:	095b      	lsrs	r3, r3, #5
 80064f2:	2164      	movs	r1, #100	; 0x64
 80064f4:	fb01 f303 	mul.w	r3, r1, r3
 80064f8:	1ad3      	subs	r3, r2, r3
 80064fa:	00db      	lsls	r3, r3, #3
 80064fc:	3332      	adds	r3, #50	; 0x32
 80064fe:	4a08      	ldr	r2, [pc, #32]	; (8006520 <UART_SetConfig+0x2d4>)
 8006500:	fba2 2303 	umull	r2, r3, r2, r3
 8006504:	095b      	lsrs	r3, r3, #5
 8006506:	f003 0207 	and.w	r2, r3, #7
 800650a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	4422      	add	r2, r4
 8006512:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006514:	e106      	b.n	8006724 <UART_SetConfig+0x4d8>
 8006516:	bf00      	nop
 8006518:	40011000 	.word	0x40011000
 800651c:	40011400 	.word	0x40011400
 8006520:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006524:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006528:	2200      	movs	r2, #0
 800652a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800652e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006532:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006536:	4642      	mov	r2, r8
 8006538:	464b      	mov	r3, r9
 800653a:	1891      	adds	r1, r2, r2
 800653c:	6239      	str	r1, [r7, #32]
 800653e:	415b      	adcs	r3, r3
 8006540:	627b      	str	r3, [r7, #36]	; 0x24
 8006542:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006546:	4641      	mov	r1, r8
 8006548:	1854      	adds	r4, r2, r1
 800654a:	4649      	mov	r1, r9
 800654c:	eb43 0501 	adc.w	r5, r3, r1
 8006550:	f04f 0200 	mov.w	r2, #0
 8006554:	f04f 0300 	mov.w	r3, #0
 8006558:	00eb      	lsls	r3, r5, #3
 800655a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800655e:	00e2      	lsls	r2, r4, #3
 8006560:	4614      	mov	r4, r2
 8006562:	461d      	mov	r5, r3
 8006564:	4643      	mov	r3, r8
 8006566:	18e3      	adds	r3, r4, r3
 8006568:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800656c:	464b      	mov	r3, r9
 800656e:	eb45 0303 	adc.w	r3, r5, r3
 8006572:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006576:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800657a:	685b      	ldr	r3, [r3, #4]
 800657c:	2200      	movs	r2, #0
 800657e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006582:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006586:	f04f 0200 	mov.w	r2, #0
 800658a:	f04f 0300 	mov.w	r3, #0
 800658e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006592:	4629      	mov	r1, r5
 8006594:	008b      	lsls	r3, r1, #2
 8006596:	4621      	mov	r1, r4
 8006598:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800659c:	4621      	mov	r1, r4
 800659e:	008a      	lsls	r2, r1, #2
 80065a0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80065a4:	f7f9 fe84 	bl	80002b0 <__aeabi_uldivmod>
 80065a8:	4602      	mov	r2, r0
 80065aa:	460b      	mov	r3, r1
 80065ac:	4b60      	ldr	r3, [pc, #384]	; (8006730 <UART_SetConfig+0x4e4>)
 80065ae:	fba3 2302 	umull	r2, r3, r3, r2
 80065b2:	095b      	lsrs	r3, r3, #5
 80065b4:	011c      	lsls	r4, r3, #4
 80065b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80065ba:	2200      	movs	r2, #0
 80065bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80065c0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80065c4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80065c8:	4642      	mov	r2, r8
 80065ca:	464b      	mov	r3, r9
 80065cc:	1891      	adds	r1, r2, r2
 80065ce:	61b9      	str	r1, [r7, #24]
 80065d0:	415b      	adcs	r3, r3
 80065d2:	61fb      	str	r3, [r7, #28]
 80065d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80065d8:	4641      	mov	r1, r8
 80065da:	1851      	adds	r1, r2, r1
 80065dc:	6139      	str	r1, [r7, #16]
 80065de:	4649      	mov	r1, r9
 80065e0:	414b      	adcs	r3, r1
 80065e2:	617b      	str	r3, [r7, #20]
 80065e4:	f04f 0200 	mov.w	r2, #0
 80065e8:	f04f 0300 	mov.w	r3, #0
 80065ec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80065f0:	4659      	mov	r1, fp
 80065f2:	00cb      	lsls	r3, r1, #3
 80065f4:	4651      	mov	r1, sl
 80065f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80065fa:	4651      	mov	r1, sl
 80065fc:	00ca      	lsls	r2, r1, #3
 80065fe:	4610      	mov	r0, r2
 8006600:	4619      	mov	r1, r3
 8006602:	4603      	mov	r3, r0
 8006604:	4642      	mov	r2, r8
 8006606:	189b      	adds	r3, r3, r2
 8006608:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800660c:	464b      	mov	r3, r9
 800660e:	460a      	mov	r2, r1
 8006610:	eb42 0303 	adc.w	r3, r2, r3
 8006614:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006618:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800661c:	685b      	ldr	r3, [r3, #4]
 800661e:	2200      	movs	r2, #0
 8006620:	67bb      	str	r3, [r7, #120]	; 0x78
 8006622:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006624:	f04f 0200 	mov.w	r2, #0
 8006628:	f04f 0300 	mov.w	r3, #0
 800662c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006630:	4649      	mov	r1, r9
 8006632:	008b      	lsls	r3, r1, #2
 8006634:	4641      	mov	r1, r8
 8006636:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800663a:	4641      	mov	r1, r8
 800663c:	008a      	lsls	r2, r1, #2
 800663e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006642:	f7f9 fe35 	bl	80002b0 <__aeabi_uldivmod>
 8006646:	4602      	mov	r2, r0
 8006648:	460b      	mov	r3, r1
 800664a:	4611      	mov	r1, r2
 800664c:	4b38      	ldr	r3, [pc, #224]	; (8006730 <UART_SetConfig+0x4e4>)
 800664e:	fba3 2301 	umull	r2, r3, r3, r1
 8006652:	095b      	lsrs	r3, r3, #5
 8006654:	2264      	movs	r2, #100	; 0x64
 8006656:	fb02 f303 	mul.w	r3, r2, r3
 800665a:	1acb      	subs	r3, r1, r3
 800665c:	011b      	lsls	r3, r3, #4
 800665e:	3332      	adds	r3, #50	; 0x32
 8006660:	4a33      	ldr	r2, [pc, #204]	; (8006730 <UART_SetConfig+0x4e4>)
 8006662:	fba2 2303 	umull	r2, r3, r2, r3
 8006666:	095b      	lsrs	r3, r3, #5
 8006668:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800666c:	441c      	add	r4, r3
 800666e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006672:	2200      	movs	r2, #0
 8006674:	673b      	str	r3, [r7, #112]	; 0x70
 8006676:	677a      	str	r2, [r7, #116]	; 0x74
 8006678:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800667c:	4642      	mov	r2, r8
 800667e:	464b      	mov	r3, r9
 8006680:	1891      	adds	r1, r2, r2
 8006682:	60b9      	str	r1, [r7, #8]
 8006684:	415b      	adcs	r3, r3
 8006686:	60fb      	str	r3, [r7, #12]
 8006688:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800668c:	4641      	mov	r1, r8
 800668e:	1851      	adds	r1, r2, r1
 8006690:	6039      	str	r1, [r7, #0]
 8006692:	4649      	mov	r1, r9
 8006694:	414b      	adcs	r3, r1
 8006696:	607b      	str	r3, [r7, #4]
 8006698:	f04f 0200 	mov.w	r2, #0
 800669c:	f04f 0300 	mov.w	r3, #0
 80066a0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80066a4:	4659      	mov	r1, fp
 80066a6:	00cb      	lsls	r3, r1, #3
 80066a8:	4651      	mov	r1, sl
 80066aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80066ae:	4651      	mov	r1, sl
 80066b0:	00ca      	lsls	r2, r1, #3
 80066b2:	4610      	mov	r0, r2
 80066b4:	4619      	mov	r1, r3
 80066b6:	4603      	mov	r3, r0
 80066b8:	4642      	mov	r2, r8
 80066ba:	189b      	adds	r3, r3, r2
 80066bc:	66bb      	str	r3, [r7, #104]	; 0x68
 80066be:	464b      	mov	r3, r9
 80066c0:	460a      	mov	r2, r1
 80066c2:	eb42 0303 	adc.w	r3, r2, r3
 80066c6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80066c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066cc:	685b      	ldr	r3, [r3, #4]
 80066ce:	2200      	movs	r2, #0
 80066d0:	663b      	str	r3, [r7, #96]	; 0x60
 80066d2:	667a      	str	r2, [r7, #100]	; 0x64
 80066d4:	f04f 0200 	mov.w	r2, #0
 80066d8:	f04f 0300 	mov.w	r3, #0
 80066dc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80066e0:	4649      	mov	r1, r9
 80066e2:	008b      	lsls	r3, r1, #2
 80066e4:	4641      	mov	r1, r8
 80066e6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80066ea:	4641      	mov	r1, r8
 80066ec:	008a      	lsls	r2, r1, #2
 80066ee:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80066f2:	f7f9 fddd 	bl	80002b0 <__aeabi_uldivmod>
 80066f6:	4602      	mov	r2, r0
 80066f8:	460b      	mov	r3, r1
 80066fa:	4b0d      	ldr	r3, [pc, #52]	; (8006730 <UART_SetConfig+0x4e4>)
 80066fc:	fba3 1302 	umull	r1, r3, r3, r2
 8006700:	095b      	lsrs	r3, r3, #5
 8006702:	2164      	movs	r1, #100	; 0x64
 8006704:	fb01 f303 	mul.w	r3, r1, r3
 8006708:	1ad3      	subs	r3, r2, r3
 800670a:	011b      	lsls	r3, r3, #4
 800670c:	3332      	adds	r3, #50	; 0x32
 800670e:	4a08      	ldr	r2, [pc, #32]	; (8006730 <UART_SetConfig+0x4e4>)
 8006710:	fba2 2303 	umull	r2, r3, r2, r3
 8006714:	095b      	lsrs	r3, r3, #5
 8006716:	f003 020f 	and.w	r2, r3, #15
 800671a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	4422      	add	r2, r4
 8006722:	609a      	str	r2, [r3, #8]
}
 8006724:	bf00      	nop
 8006726:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800672a:	46bd      	mov	sp, r7
 800672c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006730:	51eb851f 	.word	0x51eb851f

08006734 <HW_RESET>:
#include "main.h"

//No se puede quedar esperando en las funciones, hay que detectar a situaci�n y salir del bucle.
//pensar que solo entra cuando recibe datos, si no vuelve a entrar queda ah� eternamentes.
void HW_RESET(struct WIFI *a)
{
 8006734:	b580      	push	{r7, lr}
 8006736:	b082      	sub	sp, #8
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(a->RESET_PORT, a->RESET_PIN, GPIO_PIN_RESET);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	6818      	ldr	r0, [r3, #0]
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	889b      	ldrh	r3, [r3, #4]
 8006744:	2200      	movs	r2, #0
 8006746:	4619      	mov	r1, r3
 8006748:	f7fc ff3c 	bl	80035c4 <HAL_GPIO_WritePin>
    ITM0_Write("\r\n ESP HW Resetting\r\n",strlen("\r\n ESP HW Resetting\r\n"));
 800674c:	2115      	movs	r1, #21
 800674e:	480b      	ldr	r0, [pc, #44]	; (800677c <HW_RESET+0x48>)
 8006750:	f7fa ff72 	bl	8001638 <ITM0_Write>
    HAL_Delay(2000);											//Tiempo de reset del módulo
 8006754:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8006758:	f7fc fad2 	bl	8002d00 <HAL_Delay>
    ITM0_Write("\r\n ESP Reset\r\n",strlen("\r\n ESP Reset\r\n"));
 800675c:	210e      	movs	r1, #14
 800675e:	4808      	ldr	r0, [pc, #32]	; (8006780 <HW_RESET+0x4c>)
 8006760:	f7fa ff6a 	bl	8001638 <ITM0_Write>
    HAL_GPIO_WritePin(a->RESET_PORT, a->RESET_PIN, GPIO_PIN_SET);		//Habilito módulo
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6818      	ldr	r0, [r3, #0]
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	889b      	ldrh	r3, [r3, #4]
 800676c:	2201      	movs	r2, #1
 800676e:	4619      	mov	r1, r3
 8006770:	f7fc ff28 	bl	80035c4 <HAL_GPIO_WritePin>
}
 8006774:	bf00      	nop
 8006776:	3708      	adds	r7, #8
 8006778:	46bd      	mov	sp, r7
 800677a:	bd80      	pop	{r7, pc}
 800677c:	080101dc 	.word	0x080101dc
 8006780:	080101f4 	.word	0x080101f4

08006784 <NOP>:
void NOP(struct WIFI *a)
{
 8006784:	b480      	push	{r7}
 8006786:	b083      	sub	sp, #12
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
	a->_instruccion=0;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2200      	movs	r2, #0
 8006790:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
	a->_enviaruart=0;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2200      	movs	r2, #0
 8006798:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
	a->_pasos=0;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2200      	movs	r2, #0
 80067a0:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
}
 80067a4:	bf00      	nop
 80067a6:	370c      	adds	r7, #12
 80067a8:	46bd      	mov	sp, r7
 80067aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ae:	4770      	bx	lr

080067b0 <Cambiar_CWMODE>:
void Cambiar_CWMODE(struct WIFI *a)
{
 80067b0:	b480      	push	{r7}
 80067b2:	b083      	sub	sp, #12
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
	a->_instruccion=1;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2201      	movs	r2, #1
 80067bc:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
	a->_enviaruart=1;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2201      	movs	r2, #1
 80067c4:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
	a->_pasos=0; //210416
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2200      	movs	r2, #0
 80067cc:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
}
 80067d0:	bf00      	nop
 80067d2:	370c      	adds	r7, #12
 80067d4:	46bd      	mov	sp, r7
 80067d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067da:	4770      	bx	lr

080067dc <ConectarWIFI>:
	a->_instruccion=-1;
	a->_enviaruart=1;
	a->_pasos=0; //210416
}
void ConectarWIFI(struct WIFI *a)
{
 80067dc:	b480      	push	{r7}
 80067de:	b083      	sub	sp, #12
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
	a->_instruccion=2;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2202      	movs	r2, #2
 80067e8:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
	a->_enviaruart=1;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2201      	movs	r2, #1
 80067f0:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
	a->_pasos=0; //210416
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2200      	movs	r2, #0
 80067f8:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
}
 80067fc:	bf00      	nop
 80067fe:	370c      	adds	r7, #12
 8006800:	46bd      	mov	sp, r7
 8006802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006806:	4770      	bx	lr

08006808 <MUX>:
void MUX(struct WIFI *a)
{
 8006808:	b480      	push	{r7}
 800680a:	b083      	sub	sp, #12
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
	a->_instruccion=4;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2204      	movs	r2, #4
 8006814:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
	a->_enviaruart=1;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2201      	movs	r2, #1
 800681c:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
	a->_pasos=0; //210416
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2200      	movs	r2, #0
 8006824:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
}
 8006828:	bf00      	nop
 800682a:	370c      	adds	r7, #12
 800682c:	46bd      	mov	sp, r7
 800682e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006832:	4770      	bx	lr

08006834 <IPDef>:
void IPDef(struct WIFI *a)
{
 8006834:	b480      	push	{r7}
 8006836:	b083      	sub	sp, #12
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
	a->_instruccion=5;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2205      	movs	r2, #5
 8006840:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
	a->_enviaruart=1;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2201      	movs	r2, #1
 8006848:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
	a->_pasos=0; //210416
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2200      	movs	r2, #0
 8006850:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
}
 8006854:	bf00      	nop
 8006856:	370c      	adds	r7, #12
 8006858:	46bd      	mov	sp, r7
 800685a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685e:	4770      	bx	lr

08006860 <DesconectarWIFI>:
void DesconectarWIFI(struct WIFI *a)
	{
 8006860:	b480      	push	{r7}
 8006862:	b083      	sub	sp, #12
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
	a->_instruccion=0;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2200      	movs	r2, #0
 800686c:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
	a->_enviaruart=1;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2201      	movs	r2, #1
 8006874:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
	a->_pasos=0; //210416
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2200      	movs	r2, #0
 800687c:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	}
 8006880:	bf00      	nop
 8006882:	370c      	adds	r7, #12
 8006884:	46bd      	mov	sp, r7
 8006886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688a:	4770      	bx	lr

0800688c <ConectarTCP>:
void ConectarTCP(struct WIFI *a)
	{
 800688c:	b480      	push	{r7}
 800688e:	b083      	sub	sp, #12
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
	a->_instruccion=6;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2206      	movs	r2, #6
 8006898:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
	a->_enviaruart=1;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2201      	movs	r2, #1
 80068a0:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
	a->_pasos=0; //210416
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2200      	movs	r2, #0
 80068a8:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	}
 80068ac:	bf00      	nop
 80068ae:	370c      	adds	r7, #12
 80068b0:	46bd      	mov	sp, r7
 80068b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b6:	4770      	bx	lr

080068b8 <CrearServidorTCP>:
void CrearServidorTCP(struct WIFI *a)
	{
 80068b8:	b480      	push	{r7}
 80068ba:	b083      	sub	sp, #12
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
	a->_instruccion=8;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2208      	movs	r2, #8
 80068c4:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
	a->_enviaruart=1;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2201      	movs	r2, #1
 80068cc:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
	a->_pasos=0; //210416
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2200      	movs	r2, #0
 80068d4:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	}
 80068d8:	bf00      	nop
 80068da:	370c      	adds	r7, #12
 80068dc:	46bd      	mov	sp, r7
 80068de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e2:	4770      	bx	lr

080068e4 <EnviarDatosSRVR>:
void EnviarDatosSRVR(struct WIFI *a)
	{
 80068e4:	b480      	push	{r7}
 80068e6:	b083      	sub	sp, #12
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
	a->_instruccion=9;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2209      	movs	r2, #9
 80068f0:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
	a->_enviaruart=1;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2201      	movs	r2, #1
 80068f8:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
	a->_pasos=0; //210416
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2200      	movs	r2, #0
 8006900:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	}
 8006904:	bf00      	nop
 8006906:	370c      	adds	r7, #12
 8006908:	46bd      	mov	sp, r7
 800690a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690e:	4770      	bx	lr

08006910 <EnviarDatos>:
	//a->_instruccion=4;
	a->_enviaruart=1;
	a->_pasos=0; //210416
	}
void EnviarDatos(struct WIFI *a)
	{
 8006910:	b480      	push	{r7}
 8006912:	b083      	sub	sp, #12
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
	a->_instruccion=7;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2207      	movs	r2, #7
 800691c:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
	a->_enviaruart=1;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2201      	movs	r2, #1
 8006924:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
	a->_pasos=0; //210416
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2200      	movs	r2, #0
 800692c:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	}
 8006930:	bf00      	nop
 8006932:	370c      	adds	r7, #12
 8006934:	46bd      	mov	sp, r7
 8006936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693a:	4770      	bx	lr

0800693c <Inicializar>:
void Inicializar(struct WIFI *a)
{
 800693c:	b480      	push	{r7}
 800693e:	b083      	sub	sp, #12
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
a->_WF_Net[32]='\0';				//Nombre de la red WIFI  a conectaraurt
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2200      	movs	r2, #0
 8006948:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
a->_WF_Pass[16]='\0';				//Password de la red WIFI
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2200      	movs	r2, #0
 8006950:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
a->_TCP_Remote_Server_IP[16]='\0';			//IP del Servidor TCP al que me voy a conectar
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2200      	movs	r2, #0
 8006958:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
a->_TCP_Remote_Server_Port[6]='\0';			//Puerto del Servidor TCP al que me voy a conectar
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2200      	movs	r2, #0
 8006960:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
a->_TCP_Local_Server_IP[16]='\0';		//IP del Servidor TCP Local
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2200      	movs	r2, #0
 8006968:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
a->_TCP_Local_Server_Port[6]='\0';		//Puerto del Servidor TCP local
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2200      	movs	r2, #0
 8006970:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
a->_TCP_Local_Server_GWY[16]='\0';		//Gateway de red
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2200      	movs	r2, #0
 8006978:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
a->_TCP_Local_Server_MSK[16]='\0';		//Mascara de red
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2200      	movs	r2, #0
 8006980:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
a->_TCP_Local_Server_Initiated=0;		//Servidor TCP no iniciado
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2200      	movs	r2, #0
 8006988:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
a->_estado=0;					//Estado de m�dulo WIFI
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2200      	movs	r2, #0
 8006990:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
a->_estado_rcv_data=0;			//Estado de Recepcion de datos
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2200      	movs	r2, #0
 8006998:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
a->_dataRCV[1024]='\0'; //a->_dataRCV[512]='\0';			//Data recibida por TCP   SOLO PARA EVITAR SOBREESCRITURA VALOR ORIGINAL 64 RESTRINGIR EN EL .C
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2200      	movs	r2, #0
 80069a0:	f883 2498 	strb.w	r2, [r3, #1176]	; 0x498
a->_data2SND[64]='\0';			//Data a enviar por TCP
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2200      	movs	r2, #0
 80069a8:	f883 22d8 	strb.w	r2, [r3, #728]	; 0x2d8
a->_uart2snd[1024]='\0';//a->_uart2snd[512]='\0';			//Datos a enviar por UART
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2200      	movs	r2, #0
 80069b0:	f883 2898 	strb.w	r2, [r3, #2200]	; 0x898
a->_uartRCVD[1024]='\0';//a->_uartRCVD[512]='\0';			//Datos recibidos de UART
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2200      	movs	r2, #0
 80069b8:	f883 2a98 	strb.w	r2, [r3, #2712]	; 0xa98
a->_uartRCVD_tok[1024]='\0';//a->_uartRCVD_tok[512]='\0';		//Datos recibidos de UART
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2200      	movs	r2, #0
 80069c0:	f883 2c98 	strb.w	r2, [r3, #3224]	; 0xc98
a->_uartCHrcvd=0;				//Cantidad de caracteres recibidos por la uart
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2200      	movs	r2, #0
 80069c8:	f8c3 2aa0 	str.w	r2, [r3, #2720]	; 0xaa0
a->_TCPchRCVD=0;				//Caracteres recibidos por TCP
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2200      	movs	r2, #0
 80069d0:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
a->_enviaruart=0;				//Envia _uart2snd por puerto serie
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2200      	movs	r2, #0
 80069d8:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
a->_pasos=0;					//Pasos por la maquina de estados no se puede manejar como variable local porque hay que almacenarlos cuando entra y sale de la llamada
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2200      	movs	r2, #0
 80069e0:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
a->_instruccion=0;				//Funcion que se desea realizar
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2200      	movs	r2, #0
 80069e8:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
a->_ejecucion=0;				//Funcion en ejecucion	
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2200      	movs	r2, #0
 80069f0:	f8c3 2ab4 	str.w	r2, [r3, #2740]	; 0xab4
a->_okenvio[64]='\0';			//String para enviao de datos, comparacion de enviado y recibido strings variables
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2200      	movs	r2, #0
 80069f8:	f883 2af8 	strb.w	r2, [r3, #2808]	; 0xaf8
a->_ticks=0;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2200      	movs	r2, #0
 8006a00:	f8c3 2cb8 	str.w	r2, [r3, #3256]	; 0xcb8
a->_ticks2=0;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2200      	movs	r2, #0
 8006a08:	f8c3 2cbc 	str.w	r2, [r3, #3260]	; 0xcbc
a->_debug=0;					//utilizada par fines de debugging
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2200      	movs	r2, #0
 8006a10:	f8c3 2cc8 	str.w	r2, [r3, #3272]	; 0xcc8
a->_debug_str=0;				//utilizada par fines de debugging
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2200      	movs	r2, #0
 8006a18:	f8c3 2ccc 	str.w	r2, [r3, #3276]	; 0xccc
a->_debug_pos=0;				//utilizada par fines de debugging
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2200      	movs	r2, #0
 8006a20:	f8c3 2cd0 	str.w	r2, [r3, #3280]	; 0xcd0
a->_debug_chrs=0;				//utilizada par fines de debugging
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2200      	movs	r2, #0
 8006a28:	f8c3 2cd4 	str.w	r2, [r3, #3284]	; 0xcd4
a->_debug_rx_ok=0;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2200      	movs	r2, #0
 8006a30:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
a->_debug_rx_no_ok=0;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2200      	movs	r2, #0
 8006a38:	f8c3 2ce0 	str.w	r2, [r3, #3296]	; 0xce0
a->_debug_SEND_OK=0;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2200      	movs	r2, #0
 8006a40:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
a->_debug_CLOSED=0;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2200      	movs	r2, #0
 8006a48:	f8c3 2d38 	str.w	r2, [r3, #3384]	; 0xd38
a->_debug_WF_DISCONNECT=0;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2200      	movs	r2, #0
 8006a50:	f8c3 2d3c 	str.w	r2, [r3, #3388]	; 0xd3c
a->_debug_FAIL=0;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2200      	movs	r2, #0
 8006a58:	f8c3 2d40 	str.w	r2, [r3, #3392]	; 0xd40
a->_debug_CONNECT=0;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2200      	movs	r2, #0
 8006a60:	f8c3 2d34 	str.w	r2, [r3, #3380]	; 0xd34
a->_debug_count=0;				//Cuento la catidad de ipds	
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2200      	movs	r2, #0
 8006a68:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
a->_debug_count_old=0;			//Cuento la catidad de ipds
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2200      	movs	r2, #0
 8006a70:	f8c3 2d08 	str.w	r2, [r3, #3336]	; 0xd08
a->_debug_count2=0;				//SEND OK para enviar datos
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2200      	movs	r2, #0
 8006a78:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c
a->_debug_count3=0;				//SEND OK recuperado de un IPD	
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2200      	movs	r2, #0
 8006a80:	f8c3 2d10 	str.w	r2, [r3, #3344]	; 0xd10
a->_debug_count4=0;				//SEDN OK recibido directo
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2200      	movs	r2, #0
 8006a88:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
a->_debug_count5=0;				//Cuento la catidad de ipds	
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2200      	movs	r2, #0
 8006a90:	f8c3 2d18 	str.w	r2, [r3, #3352]	; 0xd18
a->_debug_count6=0;				//Cuento la catidad de ipds	
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2200      	movs	r2, #0
 8006a98:	f8c3 2d1c 	str.w	r2, [r3, #3356]	; 0xd1c
a->_debug_count7=0;				//Cuento la catidad de ipds
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20
a->_debug_count8=0;				//Cuento la catidad de ipds
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	f8c3 2d24 	str.w	r2, [r3, #3364]	; 0xd24
a->_debug_count9=0;				//Cuento la catidad de ipds
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2200      	movs	r2, #0
 8006ab0:	f8c3 2d28 	str.w	r2, [r3, #3368]	; 0xd28
a->_debug_count10=0;			//Cuento la catidad de ipds
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	f8c3 2d2c 	str.w	r2, [r3, #3372]	; 0xd2c
a->_subpaso=0;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2200      	movs	r2, #0
 8006ac0:	f8c3 2d50 	str.w	r2, [r3, #3408]	; 0xd50
a->_overflowVector=512;			//Maximo tamaño del vector al procesar un +IPD
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006aca:	f8c3 2d54 	str.w	r2, [r3, #3412]	; 0xd54
}
 8006ace:	bf00      	nop
 8006ad0:	370c      	adds	r7, #12
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad8:	4770      	bx	lr
	...

08006adc <AT_ESP8266_ND>:

 // estado no cambia a->estado salvo que dicho estado sea algun valor esperado en la funcion
 //	la recepcion de datos no afecta la variable a->estado, pero puede afectar el registro recibido, en tal caso la funci�n de cae por timeout de rpta a->ticks=5eg
 /*--------------------------------------------------------------*/
int AT_ESP8266_ND( struct WIFI *a )
 {
 8006adc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006ade:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8006ae2:	af06      	add	r7, sp, #24
 8006ae4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006ae8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006aec:	6018      	str	r0, [r3, #0]
	 int l3=0, AT_decode=0, estado=0, str=0,chr_pos_fnc=0;
 8006aee:	2300      	movs	r3, #0
 8006af0:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 8006af4:	2300      	movs	r3, #0
 8006af6:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8006afa:	2300      	movs	r3, #0
 8006afc:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 8006b00:	2300      	movs	r3, #0
 8006b02:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
 8006b06:	2300      	movs	r3, #0
 8006b08:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230
	 char *token;
	 char memstr=' ';
 8006b0c:	2320      	movs	r3, #32
 8006b0e:	f887 323f 	strb.w	r3, [r7, #575]	; 0x23f
		char comillas='"';
 8006b12:	2322      	movs	r3, #34	; 0x22
 8006b14:	f887 322f 	strb.w	r3, [r7, #559]	; 0x22f
		char separador[]={'"',',','"','\0'};
 8006b18:	4b7c      	ldr	r3, [pc, #496]	; (8006d0c <AT_ESP8266_ND+0x230>)
 8006b1a:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
		char finalizar[]={'"','\r','\n'};
 8006b1e:	4a7c      	ldr	r2, [pc, #496]	; (8006d10 <AT_ESP8266_ND+0x234>)
 8006b20:	f507 7309 	add.w	r3, r7, #548	; 0x224
 8006b24:	6812      	ldr	r2, [r2, #0]
 8006b26:	4611      	mov	r1, r2
 8006b28:	8019      	strh	r1, [r3, #0]
 8006b2a:	3302      	adds	r3, #2
 8006b2c:	0c12      	lsrs	r2, r2, #16
 8006b2e:	701a      	strb	r2, [r3, #0]
		char separador2[]={'"',','};
 8006b30:	f642 4322 	movw	r3, #11298	; 0x2c22
 8006b34:	f8a7 3220 	strh.w	r3, [r7, #544]	; 0x220
		char finalizar2[]={'\r','\n'};
 8006b38:	f640 230d 	movw	r3, #2573	; 0xa0d
 8006b3c:	f8a7 321c 	strh.w	r3, [r7, #540]	; 0x21c
		char vectorcopia[512];
	 //Agregar condicion de falla al conectar strcmp(a->_uartRCVD,"+CWJAP 1\r\n\r\nFAIL\r\n")
	 //a->_estado=0;
//--------BUSCO ERRRORES DE SOLPAMIENTO------------//
int pos=0, pos2=0;
 8006b40:	2300      	movs	r3, #0
 8006b42:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
 8006b46:	2300      	movs	r3, #0
 8006b48:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
a->_debug_pos=0;
 8006b4c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006b50:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	2200      	movs	r2, #0
 8006b58:	f8c3 2cd0 	str.w	r2, [r3, #3280]	; 0xcd0
a->_debug_str=strlen(a->_uartRCVD);//str=strlen(a->_uartRCVD)-1;
 8006b5c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006b60:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f503 63d3 	add.w	r3, r3, #1688	; 0x698
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	f7f9 fb42 	bl	80001f4 <strlen>
 8006b70:	4603      	mov	r3, r0
 8006b72:	461a      	mov	r2, r3
 8006b74:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006b78:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f8c3 2ccc 	str.w	r2, [r3, #3276]	; 0xccc
a->_estado_data=0; //Al entrar, nunca se como se recibió la info
 8006b82:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006b86:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	f8c3 2cfc 	str.w	r2, [r3, #3324]	; 0xcfc

	 a->_uartCHrcvd=strlen(a->_uartRCVD);
 8006b92:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006b96:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f503 63d3 	add.w	r3, r3, #1688	; 0x698
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	f7f9 fb27 	bl	80001f4 <strlen>
 8006ba6:	4603      	mov	r3, r0
 8006ba8:	461a      	mov	r2, r3
 8006baa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006bae:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f8c3 2aa0 	str.w	r2, [r3, #2720]	; 0xaa0
	 // Si tiene datos recibidos los +IPD proceso = saco lo correspondiente al +IPD a->_uartRCVD_tok y dejo el vector original a->_uartRCVD




	 a->_n_fcomp=strlen("\r\n+IPD");
 8006bb8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006bbc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	2206      	movs	r2, #6
 8006bc4:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
	 if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\n+IPD",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8006bc8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006bcc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 8006bd6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006bda:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 8006be4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006be8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 8006bf2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006bf6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f603 0398 	addw	r3, r3, #2200	; 0x898
 8006c00:	603b      	str	r3, [r7, #0]
 8006c02:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006c06:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006c0a:	6812      	ldr	r2, [r2, #0]
 8006c0c:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 8006c10:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006c14:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006c18:	6809      	ldr	r1, [r1, #0]
 8006c1a:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 8006c1e:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8006c22:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8006c26:	6800      	ldr	r0, [r0, #0]
 8006c28:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	9305      	str	r3, [sp, #20]
 8006c30:	9004      	str	r0, [sp, #16]
 8006c32:	9103      	str	r1, [sp, #12]
 8006c34:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006c38:	9102      	str	r1, [sp, #8]
 8006c3a:	9201      	str	r2, [sp, #4]
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	9300      	str	r3, [sp, #0]
 8006c40:	4633      	mov	r3, r6
 8006c42:	4a34      	ldr	r2, [pc, #208]	; (8006d14 <AT_ESP8266_ND+0x238>)
 8006c44:	4629      	mov	r1, r5
 8006c46:	4620      	mov	r0, r4
 8006c48:	f007 faf4 	bl	800e234 <FT_String_ND>
 8006c4c:	4603      	mov	r3, r0
 8006c4e:	2b01      	cmp	r3, #1
 8006c50:	f040 8140 	bne.w	8006ed4 <AT_ESP8266_ND+0x3f8>
		 {
			a->_n_fcomp=strlen("\r\n+IPD");
 8006c54:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c58:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	2206      	movs	r2, #6
 8006c60:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
			if(a->_TCP_Local_Server_EN==0)
 8006c64:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c68:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d150      	bne.n	8006d18 <AT_ESP8266_ND+0x23c>
				{
					a->_estado_data=FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\n+IPD",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,TOKIPDDATA);
 8006c76:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c7a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 8006c84:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c88:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 8006c92:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c96:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 8006ca0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006ca4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	f603 0398 	addw	r3, r3, #2200	; 0x898
 8006cae:	603b      	str	r3, [r7, #0]
 8006cb0:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006cb4:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006cb8:	6812      	ldr	r2, [r2, #0]
 8006cba:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 8006cbe:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006cc2:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006cc6:	6809      	ldr	r1, [r1, #0]
 8006cc8:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 8006ccc:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8006cd0:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8006cd4:	6800      	ldr	r0, [r0, #0]
 8006cd6:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 8006cda:	2304      	movs	r3, #4
 8006cdc:	9305      	str	r3, [sp, #20]
 8006cde:	9004      	str	r0, [sp, #16]
 8006ce0:	9103      	str	r1, [sp, #12]
 8006ce2:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006ce6:	9102      	str	r1, [sp, #8]
 8006ce8:	9201      	str	r2, [sp, #4]
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	9300      	str	r3, [sp, #0]
 8006cee:	4633      	mov	r3, r6
 8006cf0:	4a08      	ldr	r2, [pc, #32]	; (8006d14 <AT_ESP8266_ND+0x238>)
 8006cf2:	4629      	mov	r1, r5
 8006cf4:	4620      	mov	r0, r4
 8006cf6:	f007 fa9d 	bl	800e234 <FT_String_ND>
 8006cfa:	4602      	mov	r2, r0
 8006cfc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006d00:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f8c3 2cfc 	str.w	r2, [r3, #3324]	; 0xcfc
 8006d0a:	e04f      	b.n	8006dac <AT_ESP8266_ND+0x2d0>
 8006d0c:	00222c22 	.word	0x00222c22
 8006d10:	08010460 	.word	0x08010460
 8006d14:	08010204 	.word	0x08010204
				}
				else
				{
					a->_estado_data=FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\n+IPD",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,TOKIPDDATASRVR);
 8006d18:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006d1c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 8006d26:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006d2a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 8006d34:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006d38:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 8006d42:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006d46:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f603 0398 	addw	r3, r3, #2200	; 0x898
 8006d50:	603b      	str	r3, [r7, #0]
 8006d52:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006d56:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006d5a:	6812      	ldr	r2, [r2, #0]
 8006d5c:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 8006d60:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006d64:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006d68:	6809      	ldr	r1, [r1, #0]
 8006d6a:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 8006d6e:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8006d72:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8006d76:	6800      	ldr	r0, [r0, #0]
 8006d78:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 8006d7c:	2305      	movs	r3, #5
 8006d7e:	9305      	str	r3, [sp, #20]
 8006d80:	9004      	str	r0, [sp, #16]
 8006d82:	9103      	str	r1, [sp, #12]
 8006d84:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006d88:	9102      	str	r1, [sp, #8]
 8006d8a:	9201      	str	r2, [sp, #4]
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	9300      	str	r3, [sp, #0]
 8006d90:	4633      	mov	r3, r6
 8006d92:	4acb      	ldr	r2, [pc, #812]	; (80070c0 <AT_ESP8266_ND+0x5e4>)
 8006d94:	4629      	mov	r1, r5
 8006d96:	4620      	mov	r0, r4
 8006d98:	f007 fa4c 	bl	800e234 <FT_String_ND>
 8006d9c:	4602      	mov	r2, r0
 8006d9e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006da2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f8c3 2cfc 	str.w	r2, [r3, #3324]	; 0xcfc
				}

			if(a->_estado_data==4)
 8006dac:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006db0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	f8d3 3cfc 	ldr.w	r3, [r3, #3324]	; 0xcfc
 8006dba:	2b04      	cmp	r3, #4
 8006dbc:	d15a      	bne.n	8006e74 <AT_ESP8266_ND+0x398>
				{
					a->_estado_rcv_data=99;
 8006dbe:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006dc2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	2263      	movs	r2, #99	; 0x63
 8006dca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
					a->_n_dataRCV=a->_n_tok;
 8006dce:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006dd2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f8d3 2cec 	ldr.w	r2, [r3, #3308]	; 0xcec
 8006ddc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006de0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00
					CopiaVector(a->_dataRCV,a->_uartRCVD_tok,a->_n_tok,0,'A');  //Solo copio la info si es correcta
 8006dea:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006dee:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f103 0098 	add.w	r0, r3, #152	; 0x98
 8006df8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006dfc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f603 0198 	addw	r1, r3, #2200	; 0x898
 8006e06:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006e0a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f8d3 2cec 	ldr.w	r2, [r3, #3308]	; 0xcec
 8006e14:	2341      	movs	r3, #65	; 0x41
 8006e16:	9300      	str	r3, [sp, #0]
 8006e18:	2300      	movs	r3, #0
 8006e1a:	f007 fd87 	bl	800e92c <CopiaVector>
					CopiaVector(a->_data2SND,a->_uartRCVD_tok,5,0,'A');  //Solo copio la info si es correcta
 8006e1e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006e22:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f503 7026 	add.w	r0, r3, #664	; 0x298
 8006e2c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006e30:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f603 0198 	addw	r1, r3, #2200	; 0x898
 8006e3a:	2341      	movs	r3, #65	; 0x41
 8006e3c:	9300      	str	r3, [sp, #0]
 8006e3e:	2300      	movs	r3, #0
 8006e40:	2205      	movs	r2, #5
 8006e42:	f007 fd73 	bl	800e92c <CopiaVector>

					a->_debug_rx_ok++;
 8006e46:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006e4a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f8d3 3cd8 	ldr.w	r3, [r3, #3288]	; 0xcd8
 8006e54:	1c5a      	adds	r2, r3, #1
 8006e56:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006e5a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
					a->_new_data_rcv=1;
 8006e64:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006e68:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	2201      	movs	r2, #1
 8006e70:	f8c3 2cdc 	str.w	r2, [r3, #3292]	; 0xcdc
				}
			if(a->_estado_data==5)
 8006e74:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006e78:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f8d3 3cfc 	ldr.w	r3, [r3, #3324]	; 0xcfc
 8006e82:	2b05      	cmp	r3, #5
 8006e84:	d126      	bne.n	8006ed4 <AT_ESP8266_ND+0x3f8>
				{
					a->_estado_rcv_data=55;
 8006e86:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006e8a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	2237      	movs	r2, #55	; 0x37
 8006e92:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
					a->_n_dataRCV=0;
 8006e96:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006e9a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00
					a->_debug_rx_no_ok++;
 8006ea6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006eaa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f8d3 3ce0 	ldr.w	r3, [r3, #3296]	; 0xce0
 8006eb4:	1c5a      	adds	r2, r3, #1
 8006eb6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006eba:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f8c3 2ce0 	str.w	r2, [r3, #3296]	; 0xce0
					a->_new_data_rcv=1;
 8006ec4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006ec8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	2201      	movs	r2, #1
 8006ed0:	f8c3 2cdc 	str.w	r2, [r3, #3292]	; 0xcdc
	 //--------------------------------------------------------------------------------------------------------------//
	 // 	Arranco preguntando por la sentencia OK, y luego busco otros string dentro de lo recibido     			 //
	 //--------------------------------------------------------------------------------------------------------------//

	//------------------RECIBO CAMBIO DE MODO OK ------------------//
	 a->_n_fcomp=strlen("AT+CWMODE=1\r\n\r\nOK\r\n");
 8006ed4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006ed8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	2213      	movs	r2, #19
 8006ee0:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
	if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CWMODE=1\r\n\r\nOK\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8006ee4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006ee8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 8006ef2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006ef6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 8006f00:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006f04:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 8006f0e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006f12:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	f603 0398 	addw	r3, r3, #2200	; 0x898
 8006f1c:	603b      	str	r3, [r7, #0]
 8006f1e:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006f22:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006f26:	6812      	ldr	r2, [r2, #0]
 8006f28:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 8006f2c:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006f30:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006f34:	6809      	ldr	r1, [r1, #0]
 8006f36:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 8006f3a:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8006f3e:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8006f42:	6800      	ldr	r0, [r0, #0]
 8006f44:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 8006f48:	2300      	movs	r3, #0
 8006f4a:	9305      	str	r3, [sp, #20]
 8006f4c:	9004      	str	r0, [sp, #16]
 8006f4e:	9103      	str	r1, [sp, #12]
 8006f50:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006f54:	9102      	str	r1, [sp, #8]
 8006f56:	9201      	str	r2, [sp, #4]
 8006f58:	683b      	ldr	r3, [r7, #0]
 8006f5a:	9300      	str	r3, [sp, #0]
 8006f5c:	4633      	mov	r3, r6
 8006f5e:	4a59      	ldr	r2, [pc, #356]	; (80070c4 <AT_ESP8266_ND+0x5e8>)
 8006f60:	4629      	mov	r1, r5
 8006f62:	4620      	mov	r0, r4
 8006f64:	f007 f966 	bl	800e234 <FT_String_ND>
 8006f68:	4603      	mov	r3, r0
 8006f6a:	2b01      	cmp	r3, #1
 8006f6c:	d104      	bne.n	8006f78 <AT_ESP8266_ND+0x49c>
		{AT_decode=at_cambiar_modo1_ok;}
 8006f6e:	2302      	movs	r3, #2
 8006f70:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8006f74:	f000 bf80 	b.w	8007e78 <AT_ESP8266_ND+0x139c>
		else
		//------------------RECIBO CAMBIO DE MODO MAL ------------------//
			{
			a->_n_fcomp=strlen("AT+CWMODE=1\r\n\r\nERROR\r\n");
 8006f78:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006f7c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	2216      	movs	r2, #22
 8006f84:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CWMODE=1\r\n\r\nOK\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8006f88:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006f8c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 8006f96:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006f9a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 8006fa4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006fa8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 8006fb2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006fb6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f603 0398 	addw	r3, r3, #2200	; 0x898
 8006fc0:	603b      	str	r3, [r7, #0]
 8006fc2:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006fc6:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006fca:	6812      	ldr	r2, [r2, #0]
 8006fcc:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 8006fd0:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006fd4:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006fd8:	6809      	ldr	r1, [r1, #0]
 8006fda:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 8006fde:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8006fe2:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8006fe6:	6800      	ldr	r0, [r0, #0]
 8006fe8:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 8006fec:	2300      	movs	r3, #0
 8006fee:	9305      	str	r3, [sp, #20]
 8006ff0:	9004      	str	r0, [sp, #16]
 8006ff2:	9103      	str	r1, [sp, #12]
 8006ff4:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006ff8:	9102      	str	r1, [sp, #8]
 8006ffa:	9201      	str	r2, [sp, #4]
 8006ffc:	683b      	ldr	r3, [r7, #0]
 8006ffe:	9300      	str	r3, [sp, #0]
 8007000:	4633      	mov	r3, r6
 8007002:	4a30      	ldr	r2, [pc, #192]	; (80070c4 <AT_ESP8266_ND+0x5e8>)
 8007004:	4629      	mov	r1, r5
 8007006:	4620      	mov	r0, r4
 8007008:	f007 f914 	bl	800e234 <FT_String_ND>
 800700c:	4603      	mov	r3, r0
 800700e:	2b01      	cmp	r3, #1
 8007010:	d104      	bne.n	800701c <AT_ESP8266_ND+0x540>
				{AT_decode=at_cambiar_modo1_err;}
 8007012:	2303      	movs	r3, #3
 8007014:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007018:	f000 bf2e 	b.w	8007e78 <AT_ESP8266_ND+0x139c>
			else
			//------------------MULTIPLES CONEXIONES ------------------//
				{
				a->_n_fcomp=strlen("AT+CIPMUX=0\r\n\r\nOK\r\n");
 800701c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007020:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	2213      	movs	r2, #19
 8007028:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPMUX=0\r\n\r\nOK\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 800702c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007030:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 800703a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800703e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 8007048:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800704c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 8007056:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800705a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f603 0398 	addw	r3, r3, #2200	; 0x898
 8007064:	603b      	str	r3, [r7, #0]
 8007066:	f507 7214 	add.w	r2, r7, #592	; 0x250
 800706a:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 800706e:	6812      	ldr	r2, [r2, #0]
 8007070:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 8007074:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007078:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 800707c:	6809      	ldr	r1, [r1, #0]
 800707e:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 8007082:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007086:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 800708a:	6800      	ldr	r0, [r0, #0]
 800708c:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 8007090:	2300      	movs	r3, #0
 8007092:	9305      	str	r3, [sp, #20]
 8007094:	9004      	str	r0, [sp, #16]
 8007096:	9103      	str	r1, [sp, #12]
 8007098:	f507 710c 	add.w	r1, r7, #560	; 0x230
 800709c:	9102      	str	r1, [sp, #8]
 800709e:	9201      	str	r2, [sp, #4]
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	9300      	str	r3, [sp, #0]
 80070a4:	4633      	mov	r3, r6
 80070a6:	4a08      	ldr	r2, [pc, #32]	; (80070c8 <AT_ESP8266_ND+0x5ec>)
 80070a8:	4629      	mov	r1, r5
 80070aa:	4620      	mov	r0, r4
 80070ac:	f007 f8c2 	bl	800e234 <FT_String_ND>
 80070b0:	4603      	mov	r3, r0
 80070b2:	2b01      	cmp	r3, #1
 80070b4:	d10a      	bne.n	80070cc <AT_ESP8266_ND+0x5f0>
					{AT_decode=at_no_multiple_conn_ok;}
 80070b6:	2304      	movs	r3, #4
 80070b8:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80070bc:	f000 bedc 	b.w	8007e78 <AT_ESP8266_ND+0x139c>
 80070c0:	08010204 	.word	0x08010204
 80070c4:	0801020c 	.word	0x0801020c
 80070c8:	08010220 	.word	0x08010220
				else
				//------------------MULTIPLES CONEXIONES ERROR------------------//
					{
					a->_n_fcomp=strlen("AT+CIPMUX=0\r\n\r\nERROR\r\n");
 80070cc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80070d0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	2216      	movs	r2, #22
 80070d8:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
					if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPMUX=0\r\n\r\nERROR\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 80070dc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80070e0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 80070ea:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80070ee:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 80070f8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80070fc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 8007106:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800710a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	f603 0398 	addw	r3, r3, #2200	; 0x898
 8007114:	603b      	str	r3, [r7, #0]
 8007116:	f507 7214 	add.w	r2, r7, #592	; 0x250
 800711a:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 800711e:	6812      	ldr	r2, [r2, #0]
 8007120:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 8007124:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007128:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 800712c:	6809      	ldr	r1, [r1, #0]
 800712e:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 8007132:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007136:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 800713a:	6800      	ldr	r0, [r0, #0]
 800713c:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 8007140:	2300      	movs	r3, #0
 8007142:	9305      	str	r3, [sp, #20]
 8007144:	9004      	str	r0, [sp, #16]
 8007146:	9103      	str	r1, [sp, #12]
 8007148:	f507 710c 	add.w	r1, r7, #560	; 0x230
 800714c:	9102      	str	r1, [sp, #8]
 800714e:	9201      	str	r2, [sp, #4]
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	9300      	str	r3, [sp, #0]
 8007154:	4633      	mov	r3, r6
 8007156:	4aaa      	ldr	r2, [pc, #680]	; (8007400 <AT_ESP8266_ND+0x924>)
 8007158:	4629      	mov	r1, r5
 800715a:	4620      	mov	r0, r4
 800715c:	f007 f86a 	bl	800e234 <FT_String_ND>
 8007160:	4603      	mov	r3, r0
 8007162:	2b01      	cmp	r3, #1
 8007164:	d104      	bne.n	8007170 <AT_ESP8266_ND+0x694>
						{AT_decode=at_no_multiple_conn_err;}
 8007166:	2305      	movs	r3, #5
 8007168:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 800716c:	f000 be84 	b.w	8007e78 <AT_ESP8266_ND+0x139c>
					else
					//------------------CONEXIÓN OK------------------//
						{
						a->_n_fcomp=strlen("WIFI GOT IP\r\n");
 8007170:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007174:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	220d      	movs	r2, #13
 800717c:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
						if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"WIFI GOT IP\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8007180:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007184:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 800718e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007192:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 800719c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80071a0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 80071aa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80071ae:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f603 0398 	addw	r3, r3, #2200	; 0x898
 80071b8:	603b      	str	r3, [r7, #0]
 80071ba:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80071be:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80071c2:	6812      	ldr	r2, [r2, #0]
 80071c4:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 80071c8:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80071cc:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80071d0:	6809      	ldr	r1, [r1, #0]
 80071d2:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 80071d6:	f507 7014 	add.w	r0, r7, #592	; 0x250
 80071da:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 80071de:	6800      	ldr	r0, [r0, #0]
 80071e0:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 80071e4:	2300      	movs	r3, #0
 80071e6:	9305      	str	r3, [sp, #20]
 80071e8:	9004      	str	r0, [sp, #16]
 80071ea:	9103      	str	r1, [sp, #12]
 80071ec:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80071f0:	9102      	str	r1, [sp, #8]
 80071f2:	9201      	str	r2, [sp, #4]
 80071f4:	683b      	ldr	r3, [r7, #0]
 80071f6:	9300      	str	r3, [sp, #0]
 80071f8:	4633      	mov	r3, r6
 80071fa:	4a82      	ldr	r2, [pc, #520]	; (8007404 <AT_ESP8266_ND+0x928>)
 80071fc:	4629      	mov	r1, r5
 80071fe:	4620      	mov	r0, r4
 8007200:	f007 f818 	bl	800e234 <FT_String_ND>
 8007204:	4603      	mov	r3, r0
 8007206:	2b01      	cmp	r3, #1
 8007208:	d104      	bne.n	8007214 <AT_ESP8266_ND+0x738>
							{AT_decode=at_wifi_gotip;}
 800720a:	2306      	movs	r3, #6
 800720c:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007210:	f000 be32 	b.w	8007e78 <AT_ESP8266_ND+0x139c>
						else
						//------------------CONEXIÓN ERROR------------------//
							{
							a->_n_fcomp=strlen("\"\r\n\r\nERROR\r\n");
 8007214:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007218:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	220c      	movs	r2, #12
 8007220:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
							if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"\"\r\n\r\nERROR\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8007224:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007228:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 8007232:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007236:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 8007240:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007244:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 800724e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007252:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f603 0398 	addw	r3, r3, #2200	; 0x898
 800725c:	603b      	str	r3, [r7, #0]
 800725e:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007262:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007266:	6812      	ldr	r2, [r2, #0]
 8007268:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 800726c:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007270:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007274:	6809      	ldr	r1, [r1, #0]
 8007276:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 800727a:	f507 7014 	add.w	r0, r7, #592	; 0x250
 800727e:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007282:	6800      	ldr	r0, [r0, #0]
 8007284:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 8007288:	2300      	movs	r3, #0
 800728a:	9305      	str	r3, [sp, #20]
 800728c:	9004      	str	r0, [sp, #16]
 800728e:	9103      	str	r1, [sp, #12]
 8007290:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007294:	9102      	str	r1, [sp, #8]
 8007296:	9201      	str	r2, [sp, #4]
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	9300      	str	r3, [sp, #0]
 800729c:	4633      	mov	r3, r6
 800729e:	4a5a      	ldr	r2, [pc, #360]	; (8007408 <AT_ESP8266_ND+0x92c>)
 80072a0:	4629      	mov	r1, r5
 80072a2:	4620      	mov	r0, r4
 80072a4:	f006 ffc6 	bl	800e234 <FT_String_ND>
 80072a8:	4603      	mov	r3, r0
 80072aa:	2b01      	cmp	r3, #1
 80072ac:	d104      	bne.n	80072b8 <AT_ESP8266_ND+0x7dc>
								{AT_decode=at_wifi_err;}
 80072ae:	2307      	movs	r3, #7
 80072b0:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80072b4:	f000 bde0 	b.w	8007e78 <AT_ESP8266_ND+0x139c>
							else
							//------------------CONEXIÓN TIMEOUT ERROR------------------//
								{
								a->_n_fcomp=strlen("+CWJAP:1\r\n\r\nFAIL\r\n");
 80072b8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80072bc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	2212      	movs	r2, #18
 80072c4:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
								if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"+CWJAP:1\r\n\r\nFAIL\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 80072c8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80072cc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 80072d6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80072da:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 80072e4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80072e8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 80072f2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80072f6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	f603 0398 	addw	r3, r3, #2200	; 0x898
 8007300:	603b      	str	r3, [r7, #0]
 8007302:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007306:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 800730a:	6812      	ldr	r2, [r2, #0]
 800730c:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 8007310:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007314:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007318:	6809      	ldr	r1, [r1, #0]
 800731a:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 800731e:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007322:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007326:	6800      	ldr	r0, [r0, #0]
 8007328:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 800732c:	2300      	movs	r3, #0
 800732e:	9305      	str	r3, [sp, #20]
 8007330:	9004      	str	r0, [sp, #16]
 8007332:	9103      	str	r1, [sp, #12]
 8007334:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007338:	9102      	str	r1, [sp, #8]
 800733a:	9201      	str	r2, [sp, #4]
 800733c:	683b      	ldr	r3, [r7, #0]
 800733e:	9300      	str	r3, [sp, #0]
 8007340:	4633      	mov	r3, r6
 8007342:	4a32      	ldr	r2, [pc, #200]	; (800740c <AT_ESP8266_ND+0x930>)
 8007344:	4629      	mov	r1, r5
 8007346:	4620      	mov	r0, r4
 8007348:	f006 ff74 	bl	800e234 <FT_String_ND>
 800734c:	4603      	mov	r3, r0
 800734e:	2b01      	cmp	r3, #1
 8007350:	d104      	bne.n	800735c <AT_ESP8266_ND+0x880>
									{AT_decode=at_wifi_tout_err;}
 8007352:	2308      	movs	r3, #8
 8007354:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007358:	f000 bd8e 	b.w	8007e78 <AT_ESP8266_ND+0x139c>
								else
								//------------------CONEXIÓN PASSWORD ERROR------------------//
									{
									a->_n_fcomp=strlen("+CWJAP:2\r\n\r\nFAIL\r\n");
 800735c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007360:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	2212      	movs	r2, #18
 8007368:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
									if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"+CWJAP:2\r\n\r\nFAIL\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 800736c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007370:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 800737a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800737e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 8007388:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800738c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 8007396:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800739a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	f603 0398 	addw	r3, r3, #2200	; 0x898
 80073a4:	603b      	str	r3, [r7, #0]
 80073a6:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80073aa:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80073ae:	6812      	ldr	r2, [r2, #0]
 80073b0:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 80073b4:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80073b8:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80073bc:	6809      	ldr	r1, [r1, #0]
 80073be:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 80073c2:	f507 7014 	add.w	r0, r7, #592	; 0x250
 80073c6:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 80073ca:	6800      	ldr	r0, [r0, #0]
 80073cc:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 80073d0:	2300      	movs	r3, #0
 80073d2:	9305      	str	r3, [sp, #20]
 80073d4:	9004      	str	r0, [sp, #16]
 80073d6:	9103      	str	r1, [sp, #12]
 80073d8:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80073dc:	9102      	str	r1, [sp, #8]
 80073de:	9201      	str	r2, [sp, #4]
 80073e0:	683b      	ldr	r3, [r7, #0]
 80073e2:	9300      	str	r3, [sp, #0]
 80073e4:	4633      	mov	r3, r6
 80073e6:	4a0a      	ldr	r2, [pc, #40]	; (8007410 <AT_ESP8266_ND+0x934>)
 80073e8:	4629      	mov	r1, r5
 80073ea:	4620      	mov	r0, r4
 80073ec:	f006 ff22 	bl	800e234 <FT_String_ND>
 80073f0:	4603      	mov	r3, r0
 80073f2:	2b01      	cmp	r3, #1
 80073f4:	d10e      	bne.n	8007414 <AT_ESP8266_ND+0x938>
										{AT_decode=at_wifi_pass_err;}
 80073f6:	2309      	movs	r3, #9
 80073f8:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80073fc:	f000 bd3c 	b.w	8007e78 <AT_ESP8266_ND+0x139c>
 8007400:	08010234 	.word	0x08010234
 8007404:	0801024c 	.word	0x0801024c
 8007408:	0801025c 	.word	0x0801025c
 800740c:	0801026c 	.word	0x0801026c
 8007410:	08010280 	.word	0x08010280
									else
									//------------------CONEXIÓN NET NAME ERROR------------------//
										{
										a->_n_fcomp=strlen("+CWJAP:3\r\n\r\nFAIL\r\n");
 8007414:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007418:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	2212      	movs	r2, #18
 8007420:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
										if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"+CWJAP:3\r\n\r\nFAIL\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8007424:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007428:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 8007432:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007436:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 8007440:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007444:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 800744e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007452:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	f603 0398 	addw	r3, r3, #2200	; 0x898
 800745c:	603b      	str	r3, [r7, #0]
 800745e:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007462:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007466:	6812      	ldr	r2, [r2, #0]
 8007468:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 800746c:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007470:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007474:	6809      	ldr	r1, [r1, #0]
 8007476:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 800747a:	f507 7014 	add.w	r0, r7, #592	; 0x250
 800747e:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007482:	6800      	ldr	r0, [r0, #0]
 8007484:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 8007488:	2300      	movs	r3, #0
 800748a:	9305      	str	r3, [sp, #20]
 800748c:	9004      	str	r0, [sp, #16]
 800748e:	9103      	str	r1, [sp, #12]
 8007490:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007494:	9102      	str	r1, [sp, #8]
 8007496:	9201      	str	r2, [sp, #4]
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	9300      	str	r3, [sp, #0]
 800749c:	4633      	mov	r3, r6
 800749e:	4aa9      	ldr	r2, [pc, #676]	; (8007744 <AT_ESP8266_ND+0xc68>)
 80074a0:	4629      	mov	r1, r5
 80074a2:	4620      	mov	r0, r4
 80074a4:	f006 fec6 	bl	800e234 <FT_String_ND>
 80074a8:	4603      	mov	r3, r0
 80074aa:	2b01      	cmp	r3, #1
 80074ac:	d104      	bne.n	80074b8 <AT_ESP8266_ND+0x9dc>
											{AT_decode=at_wifi_name_err;}
 80074ae:	230a      	movs	r3, #10
 80074b0:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80074b4:	f000 bce0 	b.w	8007e78 <AT_ESP8266_ND+0x139c>
										else
										//------------------CONEXIÓN CONN ERROR------------------//
											{
											a->_n_fcomp=strlen("+CWJAP:4\r\n\r\nFAIL\r\n");
 80074b8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80074bc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	2212      	movs	r2, #18
 80074c4:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
											if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"+CWJAP:4\r\n\r\nFAIL\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 80074c8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80074cc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 80074d6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80074da:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 80074e4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80074e8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 80074f2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80074f6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	f603 0398 	addw	r3, r3, #2200	; 0x898
 8007500:	603b      	str	r3, [r7, #0]
 8007502:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007506:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 800750a:	6812      	ldr	r2, [r2, #0]
 800750c:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 8007510:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007514:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007518:	6809      	ldr	r1, [r1, #0]
 800751a:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 800751e:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007522:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007526:	6800      	ldr	r0, [r0, #0]
 8007528:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 800752c:	2300      	movs	r3, #0
 800752e:	9305      	str	r3, [sp, #20]
 8007530:	9004      	str	r0, [sp, #16]
 8007532:	9103      	str	r1, [sp, #12]
 8007534:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007538:	9102      	str	r1, [sp, #8]
 800753a:	9201      	str	r2, [sp, #4]
 800753c:	683b      	ldr	r3, [r7, #0]
 800753e:	9300      	str	r3, [sp, #0]
 8007540:	4633      	mov	r3, r6
 8007542:	4a81      	ldr	r2, [pc, #516]	; (8007748 <AT_ESP8266_ND+0xc6c>)
 8007544:	4629      	mov	r1, r5
 8007546:	4620      	mov	r0, r4
 8007548:	f006 fe74 	bl	800e234 <FT_String_ND>
 800754c:	4603      	mov	r3, r0
 800754e:	2b01      	cmp	r3, #1
 8007550:	d104      	bne.n	800755c <AT_ESP8266_ND+0xa80>
												{AT_decode=at_wifi_conn_err;}
 8007552:	230b      	movs	r3, #11
 8007554:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007558:	f000 bc8e 	b.w	8007e78 <AT_ESP8266_ND+0x139c>
											else
											//------------------WIFI DISCONNECT------------------//
												{
												a->_n_fcomp=strlen("WIFI DISCONNECT\r\n");
 800755c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007560:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	2211      	movs	r2, #17
 8007568:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
												if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"WIFI DISCONNECT\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 800756c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007570:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 800757a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800757e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 8007588:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800758c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 8007596:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800759a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	f603 0398 	addw	r3, r3, #2200	; 0x898
 80075a4:	603b      	str	r3, [r7, #0]
 80075a6:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80075aa:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80075ae:	6812      	ldr	r2, [r2, #0]
 80075b0:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 80075b4:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80075b8:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80075bc:	6809      	ldr	r1, [r1, #0]
 80075be:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 80075c2:	f507 7014 	add.w	r0, r7, #592	; 0x250
 80075c6:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 80075ca:	6800      	ldr	r0, [r0, #0]
 80075cc:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 80075d0:	2300      	movs	r3, #0
 80075d2:	9305      	str	r3, [sp, #20]
 80075d4:	9004      	str	r0, [sp, #16]
 80075d6:	9103      	str	r1, [sp, #12]
 80075d8:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80075dc:	9102      	str	r1, [sp, #8]
 80075de:	9201      	str	r2, [sp, #4]
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	9300      	str	r3, [sp, #0]
 80075e4:	4633      	mov	r3, r6
 80075e6:	4a59      	ldr	r2, [pc, #356]	; (800774c <AT_ESP8266_ND+0xc70>)
 80075e8:	4629      	mov	r1, r5
 80075ea:	4620      	mov	r0, r4
 80075ec:	f006 fe22 	bl	800e234 <FT_String_ND>
 80075f0:	4603      	mov	r3, r0
 80075f2:	2b01      	cmp	r3, #1
 80075f4:	d104      	bne.n	8007600 <AT_ESP8266_ND+0xb24>
													{AT_decode=at_wifi_disconnect;}
 80075f6:	230c      	movs	r3, #12
 80075f8:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80075fc:	f000 bc3c 	b.w	8007e78 <AT_ESP8266_ND+0x139c>
												else
												//------------------WIFI CONNECTED------------------//
													{
													a->_n_fcomp=strlen("WIFI CONNECTED\r\n");
 8007600:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007604:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	2210      	movs	r2, #16
 800760c:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
													if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"WIFI CONNECTED\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8007610:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007614:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 800761e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007622:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 800762c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007630:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 800763a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800763e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	f603 0398 	addw	r3, r3, #2200	; 0x898
 8007648:	603b      	str	r3, [r7, #0]
 800764a:	f507 7214 	add.w	r2, r7, #592	; 0x250
 800764e:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007652:	6812      	ldr	r2, [r2, #0]
 8007654:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 8007658:	f507 7114 	add.w	r1, r7, #592	; 0x250
 800765c:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007660:	6809      	ldr	r1, [r1, #0]
 8007662:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 8007666:	f507 7014 	add.w	r0, r7, #592	; 0x250
 800766a:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 800766e:	6800      	ldr	r0, [r0, #0]
 8007670:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 8007674:	2300      	movs	r3, #0
 8007676:	9305      	str	r3, [sp, #20]
 8007678:	9004      	str	r0, [sp, #16]
 800767a:	9103      	str	r1, [sp, #12]
 800767c:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007680:	9102      	str	r1, [sp, #8]
 8007682:	9201      	str	r2, [sp, #4]
 8007684:	683b      	ldr	r3, [r7, #0]
 8007686:	9300      	str	r3, [sp, #0]
 8007688:	4633      	mov	r3, r6
 800768a:	4a31      	ldr	r2, [pc, #196]	; (8007750 <AT_ESP8266_ND+0xc74>)
 800768c:	4629      	mov	r1, r5
 800768e:	4620      	mov	r0, r4
 8007690:	f006 fdd0 	bl	800e234 <FT_String_ND>
 8007694:	4603      	mov	r3, r0
 8007696:	2b01      	cmp	r3, #1
 8007698:	d103      	bne.n	80076a2 <AT_ESP8266_ND+0xbc6>
														{AT_decode=at_wifi_connected;}
 800769a:	230d      	movs	r3, #13
 800769c:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80076a0:	e3ea      	b.n	8007e78 <AT_ESP8266_ND+0x139c>
													else
													//------------------TCP CONECTADO------------------//
														{
														a->_n_fcomp=strlen("CONNECT\r\n\r\nOK\r\n");
 80076a2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80076a6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	220f      	movs	r2, #15
 80076ae:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
														if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"CONNECT\r\n\r\nOK\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 80076b2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80076b6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 80076c0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80076c4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 80076ce:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80076d2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 80076dc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80076e0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	f603 0398 	addw	r3, r3, #2200	; 0x898
 80076ea:	603b      	str	r3, [r7, #0]
 80076ec:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80076f0:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80076f4:	6812      	ldr	r2, [r2, #0]
 80076f6:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 80076fa:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80076fe:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007702:	6809      	ldr	r1, [r1, #0]
 8007704:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 8007708:	f507 7014 	add.w	r0, r7, #592	; 0x250
 800770c:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007710:	6800      	ldr	r0, [r0, #0]
 8007712:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 8007716:	2300      	movs	r3, #0
 8007718:	9305      	str	r3, [sp, #20]
 800771a:	9004      	str	r0, [sp, #16]
 800771c:	9103      	str	r1, [sp, #12]
 800771e:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007722:	9102      	str	r1, [sp, #8]
 8007724:	9201      	str	r2, [sp, #4]
 8007726:	683b      	ldr	r3, [r7, #0]
 8007728:	9300      	str	r3, [sp, #0]
 800772a:	4633      	mov	r3, r6
 800772c:	4a09      	ldr	r2, [pc, #36]	; (8007754 <AT_ESP8266_ND+0xc78>)
 800772e:	4629      	mov	r1, r5
 8007730:	4620      	mov	r0, r4
 8007732:	f006 fd7f 	bl	800e234 <FT_String_ND>
 8007736:	4603      	mov	r3, r0
 8007738:	2b01      	cmp	r3, #1
 800773a:	d10d      	bne.n	8007758 <AT_ESP8266_ND+0xc7c>
															{AT_decode=at_tcp_conectado;}
 800773c:	230e      	movs	r3, #14
 800773e:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007742:	e399      	b.n	8007e78 <AT_ESP8266_ND+0x139c>
 8007744:	08010294 	.word	0x08010294
 8007748:	080102a8 	.word	0x080102a8
 800774c:	080102bc 	.word	0x080102bc
 8007750:	080102d0 	.word	0x080102d0
 8007754:	080102e4 	.word	0x080102e4
														else
														//------------------TCP ERROR CLOSED------------------//
															{
															a->_n_fcomp=strlen("ERROR\r\nCLOSED\r\n");
 8007758:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800775c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	220f      	movs	r2, #15
 8007764:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
															if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"ERROR\r\nCLOSED\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8007768:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800776c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 8007776:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800777a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 8007784:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007788:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 8007792:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007796:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	f603 0398 	addw	r3, r3, #2200	; 0x898
 80077a0:	603b      	str	r3, [r7, #0]
 80077a2:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80077a6:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80077aa:	6812      	ldr	r2, [r2, #0]
 80077ac:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 80077b0:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80077b4:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80077b8:	6809      	ldr	r1, [r1, #0]
 80077ba:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 80077be:	f507 7014 	add.w	r0, r7, #592	; 0x250
 80077c2:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 80077c6:	6800      	ldr	r0, [r0, #0]
 80077c8:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 80077cc:	2300      	movs	r3, #0
 80077ce:	9305      	str	r3, [sp, #20]
 80077d0:	9004      	str	r0, [sp, #16]
 80077d2:	9103      	str	r1, [sp, #12]
 80077d4:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80077d8:	9102      	str	r1, [sp, #8]
 80077da:	9201      	str	r2, [sp, #4]
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	9300      	str	r3, [sp, #0]
 80077e0:	4633      	mov	r3, r6
 80077e2:	4aa8      	ldr	r2, [pc, #672]	; (8007a84 <AT_ESP8266_ND+0xfa8>)
 80077e4:	4629      	mov	r1, r5
 80077e6:	4620      	mov	r0, r4
 80077e8:	f006 fd24 	bl	800e234 <FT_String_ND>
 80077ec:	4603      	mov	r3, r0
 80077ee:	2b01      	cmp	r3, #1
 80077f0:	d103      	bne.n	80077fa <AT_ESP8266_ND+0xd1e>
																{AT_decode=at_tcp_conn_err;}
 80077f2:	230f      	movs	r3, #15
 80077f4:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80077f8:	e33e      	b.n	8007e78 <AT_ESP8266_ND+0x139c>
															else
															//------------------TCP ERROR ALREADY CONNECTED------------------//
																{
																a->_n_fcomp=strlen("\r\nALREADY CONNECTED\r\n\r\nERROR\r\n");
 80077fa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80077fe:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	221e      	movs	r2, #30
 8007806:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
																if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\nALREADY CONNECTED\r\n\r\nERROR\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 800780a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800780e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 8007818:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800781c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 8007826:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800782a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 8007834:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007838:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	f603 0398 	addw	r3, r3, #2200	; 0x898
 8007842:	603b      	str	r3, [r7, #0]
 8007844:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007848:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 800784c:	6812      	ldr	r2, [r2, #0]
 800784e:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 8007852:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007856:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 800785a:	6809      	ldr	r1, [r1, #0]
 800785c:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 8007860:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007864:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007868:	6800      	ldr	r0, [r0, #0]
 800786a:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 800786e:	2300      	movs	r3, #0
 8007870:	9305      	str	r3, [sp, #20]
 8007872:	9004      	str	r0, [sp, #16]
 8007874:	9103      	str	r1, [sp, #12]
 8007876:	f507 710c 	add.w	r1, r7, #560	; 0x230
 800787a:	9102      	str	r1, [sp, #8]
 800787c:	9201      	str	r2, [sp, #4]
 800787e:	683b      	ldr	r3, [r7, #0]
 8007880:	9300      	str	r3, [sp, #0]
 8007882:	4633      	mov	r3, r6
 8007884:	4a80      	ldr	r2, [pc, #512]	; (8007a88 <AT_ESP8266_ND+0xfac>)
 8007886:	4629      	mov	r1, r5
 8007888:	4620      	mov	r0, r4
 800788a:	f006 fcd3 	bl	800e234 <FT_String_ND>
 800788e:	4603      	mov	r3, r0
 8007890:	2b01      	cmp	r3, #1
 8007892:	d103      	bne.n	800789c <AT_ESP8266_ND+0xdc0>
																	{AT_decode=at_tcp_alrdy_cnntd_err;}
 8007894:	2310      	movs	r3, #16
 8007896:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 800789a:	e2ed      	b.n	8007e78 <AT_ESP8266_ND+0x139c>
																else
																//------------------TCP ERROR no ip------------------//
																	{
																	a->_n_fcomp=strlen("\r\nno ip\r\n\r\nERROR\r\n");
 800789c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80078a0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	2212      	movs	r2, #18
 80078a8:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
																	if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\nno ip\r\n\r\nERROR\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 80078ac:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80078b0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 80078ba:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80078be:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 80078c8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80078cc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 80078d6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80078da:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	f603 0398 	addw	r3, r3, #2200	; 0x898
 80078e4:	603b      	str	r3, [r7, #0]
 80078e6:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80078ea:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80078ee:	6812      	ldr	r2, [r2, #0]
 80078f0:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 80078f4:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80078f8:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80078fc:	6809      	ldr	r1, [r1, #0]
 80078fe:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 8007902:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007906:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 800790a:	6800      	ldr	r0, [r0, #0]
 800790c:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 8007910:	2300      	movs	r3, #0
 8007912:	9305      	str	r3, [sp, #20]
 8007914:	9004      	str	r0, [sp, #16]
 8007916:	9103      	str	r1, [sp, #12]
 8007918:	f507 710c 	add.w	r1, r7, #560	; 0x230
 800791c:	9102      	str	r1, [sp, #8]
 800791e:	9201      	str	r2, [sp, #4]
 8007920:	683b      	ldr	r3, [r7, #0]
 8007922:	9300      	str	r3, [sp, #0]
 8007924:	4633      	mov	r3, r6
 8007926:	4a59      	ldr	r2, [pc, #356]	; (8007a8c <AT_ESP8266_ND+0xfb0>)
 8007928:	4629      	mov	r1, r5
 800792a:	4620      	mov	r0, r4
 800792c:	f006 fc82 	bl	800e234 <FT_String_ND>
 8007930:	4603      	mov	r3, r0
 8007932:	2b01      	cmp	r3, #1
 8007934:	d103      	bne.n	800793e <AT_ESP8266_ND+0xe62>
																		{AT_decode=at_tcp_noip_err;}
 8007936:	2311      	movs	r3, #17
 8007938:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 800793c:	e29c      	b.n	8007e78 <AT_ESP8266_ND+0x139c>
																	else
																	//------------------CIPCLOSE OK------------------//
																		{
																		a->_n_fcomp=strlen("AT+CIPCLOSE\r\nCLOSED\r\n\r\nOK\r\n");
 800793e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007942:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	221b      	movs	r2, #27
 800794a:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
																		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPCLOSE\r\nCLOSED\r\n\r\nOK\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 800794e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007952:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 800795c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007960:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 800796a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800796e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 8007978:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800797c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	f603 0398 	addw	r3, r3, #2200	; 0x898
 8007986:	603b      	str	r3, [r7, #0]
 8007988:	f507 7214 	add.w	r2, r7, #592	; 0x250
 800798c:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007990:	6812      	ldr	r2, [r2, #0]
 8007992:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 8007996:	f507 7114 	add.w	r1, r7, #592	; 0x250
 800799a:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 800799e:	6809      	ldr	r1, [r1, #0]
 80079a0:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 80079a4:	f507 7014 	add.w	r0, r7, #592	; 0x250
 80079a8:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 80079ac:	6800      	ldr	r0, [r0, #0]
 80079ae:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 80079b2:	2300      	movs	r3, #0
 80079b4:	9305      	str	r3, [sp, #20]
 80079b6:	9004      	str	r0, [sp, #16]
 80079b8:	9103      	str	r1, [sp, #12]
 80079ba:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80079be:	9102      	str	r1, [sp, #8]
 80079c0:	9201      	str	r2, [sp, #4]
 80079c2:	683b      	ldr	r3, [r7, #0]
 80079c4:	9300      	str	r3, [sp, #0]
 80079c6:	4633      	mov	r3, r6
 80079c8:	4a31      	ldr	r2, [pc, #196]	; (8007a90 <AT_ESP8266_ND+0xfb4>)
 80079ca:	4629      	mov	r1, r5
 80079cc:	4620      	mov	r0, r4
 80079ce:	f006 fc31 	bl	800e234 <FT_String_ND>
 80079d2:	4603      	mov	r3, r0
 80079d4:	2b01      	cmp	r3, #1
 80079d6:	d103      	bne.n	80079e0 <AT_ESP8266_ND+0xf04>
																			{AT_decode=at_tcp_closed_ok;}
 80079d8:	2312      	movs	r3, #18
 80079da:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80079de:	e24b      	b.n	8007e78 <AT_ESP8266_ND+0x139c>
																		else
																		//------------------CIPCLOSE ERROR------------------//
																			{
																			a->_n_fcomp=strlen("AT+CIPCLOSE\r\n\r\nERROR\r\n");
 80079e0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80079e4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	2216      	movs	r2, #22
 80079ec:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
																			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPCLOSE\r\n\r\nERROR\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 80079f0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80079f4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 80079fe:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007a02:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 8007a0c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007a10:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 8007a1a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007a1e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	f603 0398 	addw	r3, r3, #2200	; 0x898
 8007a28:	603b      	str	r3, [r7, #0]
 8007a2a:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007a2e:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007a32:	6812      	ldr	r2, [r2, #0]
 8007a34:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 8007a38:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007a3c:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007a40:	6809      	ldr	r1, [r1, #0]
 8007a42:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 8007a46:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007a4a:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007a4e:	6800      	ldr	r0, [r0, #0]
 8007a50:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 8007a54:	2300      	movs	r3, #0
 8007a56:	9305      	str	r3, [sp, #20]
 8007a58:	9004      	str	r0, [sp, #16]
 8007a5a:	9103      	str	r1, [sp, #12]
 8007a5c:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007a60:	9102      	str	r1, [sp, #8]
 8007a62:	9201      	str	r2, [sp, #4]
 8007a64:	683b      	ldr	r3, [r7, #0]
 8007a66:	9300      	str	r3, [sp, #0]
 8007a68:	4633      	mov	r3, r6
 8007a6a:	4a0a      	ldr	r2, [pc, #40]	; (8007a94 <AT_ESP8266_ND+0xfb8>)
 8007a6c:	4629      	mov	r1, r5
 8007a6e:	4620      	mov	r0, r4
 8007a70:	f006 fbe0 	bl	800e234 <FT_String_ND>
 8007a74:	4603      	mov	r3, r0
 8007a76:	2b01      	cmp	r3, #1
 8007a78:	d10e      	bne.n	8007a98 <AT_ESP8266_ND+0xfbc>
																				{AT_decode=at_tcp_close_err;}
 8007a7a:	2313      	movs	r3, #19
 8007a7c:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007a80:	e1fa      	b.n	8007e78 <AT_ESP8266_ND+0x139c>
 8007a82:	bf00      	nop
 8007a84:	080102f4 	.word	0x080102f4
 8007a88:	08010304 	.word	0x08010304
 8007a8c:	08010324 	.word	0x08010324
 8007a90:	08010338 	.word	0x08010338
 8007a94:	08010354 	.word	0x08010354
																			else
																			//------------------TCP CLOSED------------------//
																				{
																				a->_n_fcomp=strlen("CLOSED\r\n");
 8007a98:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007a9c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	2208      	movs	r2, #8
 8007aa4:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
																				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"CLOSED\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8007aa8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007aac:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 8007ab6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007aba:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 8007ac4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007ac8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 8007ad2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007ad6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	f603 0398 	addw	r3, r3, #2200	; 0x898
 8007ae0:	603b      	str	r3, [r7, #0]
 8007ae2:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007ae6:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007aea:	6812      	ldr	r2, [r2, #0]
 8007aec:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 8007af0:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007af4:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007af8:	6809      	ldr	r1, [r1, #0]
 8007afa:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 8007afe:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007b02:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007b06:	6800      	ldr	r0, [r0, #0]
 8007b08:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 8007b0c:	2300      	movs	r3, #0
 8007b0e:	9305      	str	r3, [sp, #20]
 8007b10:	9004      	str	r0, [sp, #16]
 8007b12:	9103      	str	r1, [sp, #12]
 8007b14:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007b18:	9102      	str	r1, [sp, #8]
 8007b1a:	9201      	str	r2, [sp, #4]
 8007b1c:	683b      	ldr	r3, [r7, #0]
 8007b1e:	9300      	str	r3, [sp, #0]
 8007b20:	4633      	mov	r3, r6
 8007b22:	4aa8      	ldr	r2, [pc, #672]	; (8007dc4 <AT_ESP8266_ND+0x12e8>)
 8007b24:	4629      	mov	r1, r5
 8007b26:	4620      	mov	r0, r4
 8007b28:	f006 fb84 	bl	800e234 <FT_String_ND>
 8007b2c:	4603      	mov	r3, r0
 8007b2e:	2b01      	cmp	r3, #1
 8007b30:	d103      	bne.n	8007b3a <AT_ESP8266_ND+0x105e>
																					{AT_decode=at_tcp_client_desc;}
 8007b32:	2314      	movs	r3, #20
 8007b34:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007b38:	e19e      	b.n	8007e78 <AT_ESP8266_ND+0x139c>
																				else
																				//------------------TCP OK TO SEND------------------//
																					{
																					a->_n_fcomp=strlen("\r\n\r\nOK\r\n>");
 8007b3a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007b3e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	2209      	movs	r2, #9
 8007b46:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
																					if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\n\r\nOK\r\n>",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8007b4a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007b4e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 8007b58:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007b5c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 8007b66:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007b6a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 8007b74:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007b78:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	f603 0398 	addw	r3, r3, #2200	; 0x898
 8007b82:	603b      	str	r3, [r7, #0]
 8007b84:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007b88:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007b8c:	6812      	ldr	r2, [r2, #0]
 8007b8e:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 8007b92:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007b96:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007b9a:	6809      	ldr	r1, [r1, #0]
 8007b9c:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 8007ba0:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007ba4:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007ba8:	6800      	ldr	r0, [r0, #0]
 8007baa:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 8007bae:	2300      	movs	r3, #0
 8007bb0:	9305      	str	r3, [sp, #20]
 8007bb2:	9004      	str	r0, [sp, #16]
 8007bb4:	9103      	str	r1, [sp, #12]
 8007bb6:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007bba:	9102      	str	r1, [sp, #8]
 8007bbc:	9201      	str	r2, [sp, #4]
 8007bbe:	683b      	ldr	r3, [r7, #0]
 8007bc0:	9300      	str	r3, [sp, #0]
 8007bc2:	4633      	mov	r3, r6
 8007bc4:	4a80      	ldr	r2, [pc, #512]	; (8007dc8 <AT_ESP8266_ND+0x12ec>)
 8007bc6:	4629      	mov	r1, r5
 8007bc8:	4620      	mov	r0, r4
 8007bca:	f006 fb33 	bl	800e234 <FT_String_ND>
 8007bce:	4603      	mov	r3, r0
 8007bd0:	2b01      	cmp	r3, #1
 8007bd2:	d103      	bne.n	8007bdc <AT_ESP8266_ND+0x1100>
																						{AT_decode=at_tcp_ok_to_send;}
 8007bd4:	2315      	movs	r3, #21
 8007bd6:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007bda:	e14d      	b.n	8007e78 <AT_ESP8266_ND+0x139c>
																					else
																					//------------------TCP SEND OK ------------------//
																						{
																						a->_n_fcomp=strlen("\r\n\r\nSEND OK\r\n");
 8007bdc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007be0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	220d      	movs	r2, #13
 8007be8:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
																						if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\n\r\nSEND OK\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8007bec:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007bf0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 8007bfa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007bfe:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 8007c08:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007c0c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 8007c16:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007c1a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	f603 0398 	addw	r3, r3, #2200	; 0x898
 8007c24:	603b      	str	r3, [r7, #0]
 8007c26:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007c2a:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007c2e:	6812      	ldr	r2, [r2, #0]
 8007c30:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 8007c34:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007c38:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007c3c:	6809      	ldr	r1, [r1, #0]
 8007c3e:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 8007c42:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007c46:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007c4a:	6800      	ldr	r0, [r0, #0]
 8007c4c:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 8007c50:	2300      	movs	r3, #0
 8007c52:	9305      	str	r3, [sp, #20]
 8007c54:	9004      	str	r0, [sp, #16]
 8007c56:	9103      	str	r1, [sp, #12]
 8007c58:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007c5c:	9102      	str	r1, [sp, #8]
 8007c5e:	9201      	str	r2, [sp, #4]
 8007c60:	683b      	ldr	r3, [r7, #0]
 8007c62:	9300      	str	r3, [sp, #0]
 8007c64:	4633      	mov	r3, r6
 8007c66:	4a59      	ldr	r2, [pc, #356]	; (8007dcc <AT_ESP8266_ND+0x12f0>)
 8007c68:	4629      	mov	r1, r5
 8007c6a:	4620      	mov	r0, r4
 8007c6c:	f006 fae2 	bl	800e234 <FT_String_ND>
 8007c70:	4603      	mov	r3, r0
 8007c72:	2b01      	cmp	r3, #1
 8007c74:	d103      	bne.n	8007c7e <AT_ESP8266_ND+0x11a2>
																							{AT_decode=at_tcp_enviado_ok;}
 8007c76:	2316      	movs	r3, #22
 8007c78:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007c7c:	e0fc      	b.n	8007e78 <AT_ESP8266_ND+0x139c>
																						else
																						//------------------TCP link not valid ------------------//
																							{
																							a->_n_fcomp=strlen("\r\nlink is not valid\r\n\r\nERROR\r\n");
 8007c7e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007c82:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	221e      	movs	r2, #30
 8007c8a:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
																							if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\nlink is not valid\r\n\r\nERROR\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8007c8e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007c92:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 8007c9c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007ca0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 8007caa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007cae:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 8007cb8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007cbc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	f603 0398 	addw	r3, r3, #2200	; 0x898
 8007cc6:	603b      	str	r3, [r7, #0]
 8007cc8:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007ccc:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007cd0:	6812      	ldr	r2, [r2, #0]
 8007cd2:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 8007cd6:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007cda:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007cde:	6809      	ldr	r1, [r1, #0]
 8007ce0:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 8007ce4:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007ce8:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007cec:	6800      	ldr	r0, [r0, #0]
 8007cee:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	9305      	str	r3, [sp, #20]
 8007cf6:	9004      	str	r0, [sp, #16]
 8007cf8:	9103      	str	r1, [sp, #12]
 8007cfa:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007cfe:	9102      	str	r1, [sp, #8]
 8007d00:	9201      	str	r2, [sp, #4]
 8007d02:	683b      	ldr	r3, [r7, #0]
 8007d04:	9300      	str	r3, [sp, #0]
 8007d06:	4633      	mov	r3, r6
 8007d08:	4a31      	ldr	r2, [pc, #196]	; (8007dd0 <AT_ESP8266_ND+0x12f4>)
 8007d0a:	4629      	mov	r1, r5
 8007d0c:	4620      	mov	r0, r4
 8007d0e:	f006 fa91 	bl	800e234 <FT_String_ND>
 8007d12:	4603      	mov	r3, r0
 8007d14:	2b01      	cmp	r3, #1
 8007d16:	d103      	bne.n	8007d20 <AT_ESP8266_ND+0x1244>
																								{AT_decode=at_tcp_snd_err;}
 8007d18:	2317      	movs	r3, #23
 8007d1a:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007d1e:	e0ab      	b.n	8007e78 <AT_ESP8266_ND+0x139c>
																							else
																							//------------------TCP SEND FAIL ------------------//
																								{
																								a->_n_fcomp=strlen("\r\nSEND FAIL\r\n");
 8007d20:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007d24:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	220d      	movs	r2, #13
 8007d2c:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
																								if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\nSEND FAIL\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8007d30:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007d34:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 8007d3e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007d42:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 8007d4c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007d50:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 8007d5a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007d5e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	f603 0398 	addw	r3, r3, #2200	; 0x898
 8007d68:	603b      	str	r3, [r7, #0]
 8007d6a:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007d6e:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007d72:	6812      	ldr	r2, [r2, #0]
 8007d74:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 8007d78:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007d7c:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007d80:	6809      	ldr	r1, [r1, #0]
 8007d82:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 8007d86:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007d8a:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007d8e:	6800      	ldr	r0, [r0, #0]
 8007d90:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 8007d94:	2300      	movs	r3, #0
 8007d96:	9305      	str	r3, [sp, #20]
 8007d98:	9004      	str	r0, [sp, #16]
 8007d9a:	9103      	str	r1, [sp, #12]
 8007d9c:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007da0:	9102      	str	r1, [sp, #8]
 8007da2:	9201      	str	r2, [sp, #4]
 8007da4:	683b      	ldr	r3, [r7, #0]
 8007da6:	9300      	str	r3, [sp, #0]
 8007da8:	4633      	mov	r3, r6
 8007daa:	4a0a      	ldr	r2, [pc, #40]	; (8007dd4 <AT_ESP8266_ND+0x12f8>)
 8007dac:	4629      	mov	r1, r5
 8007dae:	4620      	mov	r0, r4
 8007db0:	f006 fa40 	bl	800e234 <FT_String_ND>
 8007db4:	4603      	mov	r3, r0
 8007db6:	2b01      	cmp	r3, #1
 8007db8:	d10e      	bne.n	8007dd8 <AT_ESP8266_ND+0x12fc>
																									{AT_decode=at_tcp_enviado_error;}
 8007dba:	2318      	movs	r3, #24
 8007dbc:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007dc0:	e05a      	b.n	8007e78 <AT_ESP8266_ND+0x139c>
 8007dc2:	bf00      	nop
 8007dc4:	0801036c 	.word	0x0801036c
 8007dc8:	08010378 	.word	0x08010378
 8007dcc:	08010384 	.word	0x08010384
 8007dd0:	08010394 	.word	0x08010394
 8007dd4:	080103b4 	.word	0x080103b4
																								else
																								//------------------ready ON RESET ------------------//
																									{
																									a->_n_fcomp=strlen("ready");
 8007dd8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007ddc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	2205      	movs	r2, #5
 8007de4:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
																									if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"ready",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8007de8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007dec:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 8007df6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007dfa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 8007e04:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007e08:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 8007e12:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007e16:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	f603 0398 	addw	r3, r3, #2200	; 0x898
 8007e20:	603b      	str	r3, [r7, #0]
 8007e22:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007e26:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007e2a:	6812      	ldr	r2, [r2, #0]
 8007e2c:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 8007e30:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007e34:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007e38:	6809      	ldr	r1, [r1, #0]
 8007e3a:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 8007e3e:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007e42:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007e46:	6800      	ldr	r0, [r0, #0]
 8007e48:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 8007e4c:	2300      	movs	r3, #0
 8007e4e:	9305      	str	r3, [sp, #20]
 8007e50:	9004      	str	r0, [sp, #16]
 8007e52:	9103      	str	r1, [sp, #12]
 8007e54:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007e58:	9102      	str	r1, [sp, #8]
 8007e5a:	9201      	str	r2, [sp, #4]
 8007e5c:	683b      	ldr	r3, [r7, #0]
 8007e5e:	9300      	str	r3, [sp, #0]
 8007e60:	4633      	mov	r3, r6
 8007e62:	4a6a      	ldr	r2, [pc, #424]	; (800800c <AT_ESP8266_ND+0x1530>)
 8007e64:	4629      	mov	r1, r5
 8007e66:	4620      	mov	r0, r4
 8007e68:	f006 f9e4 	bl	800e234 <FT_String_ND>
 8007e6c:	4603      	mov	r3, r0
 8007e6e:	2b01      	cmp	r3, #1
 8007e70:	d102      	bne.n	8007e78 <AT_ESP8266_ND+0x139c>
																										{AT_decode=at_ready;}
 8007e72:	2301      	movs	r3, #1
 8007e74:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
				}	
			}

 //Evaluo todo lo recibido desde el puerto serie

		switch (a->_instruccion)
 8007e78:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007e7c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	f8d3 3ab0 	ldr.w	r3, [r3, #2736]	; 0xab0
 8007e86:	3b01      	subs	r3, #1
 8007e88:	2b08      	cmp	r3, #8
 8007e8a:	f201 84b7 	bhi.w	80097fc <AT_ESP8266_ND+0x2d20>
 8007e8e:	a201      	add	r2, pc, #4	; (adr r2, 8007e94 <AT_ESP8266_ND+0x13b8>)
 8007e90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e94:	08007eb9 	.word	0x08007eb9
 8007e98:	08008015 	.word	0x08008015
 8007e9c:	0800828d 	.word	0x0800828d
 8007ea0:	0800840b 	.word	0x0800840b
 8007ea4:	08008631 	.word	0x08008631
 8007ea8:	08008911 	.word	0x08008911
 8007eac:	08008b6f 	.word	0x08008b6f
 8007eb0:	0800906b 	.word	0x0800906b
 8007eb4:	0800924b 	.word	0x0800924b
			//--------------------------------------------------------//
			//					Cambiar CWMODE						  //
		    //--------------------------------------------------------//
			case 1:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 8007eb8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007ebc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	f883 2498 	strb.w	r2, [r3, #1176]	; 0x498

				if( a->_enviaruart==1)	//Solo se llama durante b->_estado!=, luego no entra mas en ambos.
 8007ec8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007ecc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8007ed6:	2b01      	cmp	r3, #1
 8007ed8:	d13f      	bne.n	8007f5a <AT_ESP8266_ND+0x147e>
						{
						a->_pasos=0;
 8007eda:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007ede:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	2200      	movs	r2, #0
 8007ee6:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
						a->_ejecucion=1;
 8007eea:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007eee:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	2201      	movs	r2, #1
 8007ef6:	f8c3 2ab4 	str.w	r2, [r3, #2740]	; 0xab4
						strncat(a->_uart2snd,"AT+CWMODE=1\r\n",strlen("AT+CWMODE=1\r\n"));
 8007efa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007efe:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	f503 6493 	add.w	r4, r3, #1176	; 0x498
 8007f08:	4620      	mov	r0, r4
 8007f0a:	f7f8 f973 	bl	80001f4 <strlen>
 8007f0e:	4603      	mov	r3, r0
 8007f10:	4423      	add	r3, r4
 8007f12:	4a3f      	ldr	r2, [pc, #252]	; (8008010 <AT_ESP8266_ND+0x1534>)
 8007f14:	461c      	mov	r4, r3
 8007f16:	4613      	mov	r3, r2
 8007f18:	cb07      	ldmia	r3!, {r0, r1, r2}
 8007f1a:	6020      	str	r0, [r4, #0]
 8007f1c:	6061      	str	r1, [r4, #4]
 8007f1e:	60a2      	str	r2, [r4, #8]
 8007f20:	881b      	ldrh	r3, [r3, #0]
 8007f22:	81a3      	strh	r3, [r4, #12]
						a->_n_uart2SND=strlen(a->_uart2snd);
 8007f24:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007f28:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 8007f32:	4618      	mov	r0, r3
 8007f34:	f7f8 f95e 	bl	80001f4 <strlen>
 8007f38:	4603      	mov	r3, r0
 8007f3a:	461a      	mov	r2, r3
 8007f3c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007f40:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	f8c3 2cf4 	str.w	r2, [r3, #3316]	; 0xcf4
						a->_estado=CAMBIAR_MODO_EN_CURSO;
 8007f4a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007f4e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	2264      	movs	r2, #100	; 0x64
 8007f56:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						}


				a->_pasos++;
 8007f5a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007f5e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	f8d3 3aac 	ldr.w	r3, [r3, #2732]	; 0xaac
 8007f68:	1c5a      	adds	r2, r3, #1
 8007f6a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007f6e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
				if (((a->_enviaruart==0)&&((AT_decode==at_ok)||(AT_decode==at_cambiar_modo1_ok)
 8007f78:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007f7c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d10b      	bne.n	8007fa2 <AT_ESP8266_ND+0x14c6>
 8007f8a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007f8e:	2b01      	cmp	r3, #1
 8007f90:	d018      	beq.n	8007fc4 <AT_ESP8266_ND+0x14e8>
 8007f92:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007f96:	2b02      	cmp	r3, #2
 8007f98:	d014      	beq.n	8007fc4 <AT_ESP8266_ND+0x14e8>
															 ||(AT_decode==at_cambiar_modo1_err)))
 8007f9a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007f9e:	2b03      	cmp	r3, #3
 8007fa0:	d010      	beq.n	8007fc4 <AT_ESP8266_ND+0x14e8>
															 ||(a->_ticks > a->_wtchdog))//210630 Se agrega ATDecode 11 y 12 //Que analice luego de enviar por uart
 8007fa2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007fa6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	f8d3 2cb8 	ldr.w	r2, [r3, #3256]	; 0xcb8
 8007fb0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007fb4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	f8d3 3cc0 	ldr.w	r3, [r3, #3264]	; 0xcc0
 8007fbe:	429a      	cmp	r2, r3
 8007fc0:	f341 8426 	ble.w	8009810 <AT_ESP8266_ND+0x2d34>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 8007fc4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007fc8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8007fd2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						a->_instruccion=0;	//Finalizo la instrucci�n
 8007fd6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007fda:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	2200      	movs	r2, #0
 8007fe2:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						a->_ejecucion=0;
 8007fe6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007fea:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	2200      	movs	r2, #0
 8007ff2:	f8c3 2ab4 	str.w	r2, [r3, #2740]	; 0xab4
						a->_ticks=0;
 8007ff6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007ffa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	2200      	movs	r2, #0
 8008002:	f8c3 2cb8 	str.w	r2, [r3, #3256]	; 0xcb8
					}

			}
			break;
 8008006:	f001 bc03 	b.w	8009810 <AT_ESP8266_ND+0x2d34>
 800800a:	bf00      	nop
 800800c:	080103c4 	.word	0x080103c4
 8008010:	080103cc 	.word	0x080103cc
			//--------------------------------------------------------//
			//					Conectar WiFi						  //
		    //--------------------------------------------------------//
			case 2:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 8008014:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008018:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	2200      	movs	r2, #0
 8008020:	f883 2498 	strb.w	r2, [r3, #1176]	; 0x498
				if(( a->_enviaruart==1)&&((AT_decode > at_wifi_connected)||(AT_decode==0)))
 8008024:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008028:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8008032:	2b01      	cmp	r3, #1
 8008034:	f040 80ae 	bne.w	8008194 <AT_ESP8266_ND+0x16b8>
 8008038:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800803c:	2b0d      	cmp	r3, #13
 800803e:	dc04      	bgt.n	800804a <AT_ESP8266_ND+0x156e>
 8008040:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008044:	2b00      	cmp	r3, #0
 8008046:	f040 80a5 	bne.w	8008194 <AT_ESP8266_ND+0x16b8>
									   &&(AT_decode!=at_wifi_err)
									   &&(AT_decode!=at_wifi_disconnect)
									   &&(AT_decode!=at_wifi_connected)
									   &&(AT_decode!=at_wifi_gotip))*/
						{
						a->_pasos=0;
 800804a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800804e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	2200      	movs	r2, #0
 8008056:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
						a->_ejecucion=1;
 800805a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800805e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	2201      	movs	r2, #1
 8008066:	f8c3 2ab4 	str.w	r2, [r3, #2740]	; 0xab4
						//------Generacion del comando para conectar---------//
						strncat(a->_uart2snd,"AT+CWJAP=",strlen("AT+CWJAP="));
 800806a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800806e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	f503 6493 	add.w	r4, r3, #1176	; 0x498
 8008078:	4620      	mov	r0, r4
 800807a:	f7f8 f8bb 	bl	80001f4 <strlen>
 800807e:	4603      	mov	r3, r0
 8008080:	4423      	add	r3, r4
 8008082:	4981      	ldr	r1, [pc, #516]	; (8008288 <AT_ESP8266_ND+0x17ac>)
 8008084:	461a      	mov	r2, r3
 8008086:	460b      	mov	r3, r1
 8008088:	cb03      	ldmia	r3!, {r0, r1}
 800808a:	6010      	str	r0, [r2, #0]
 800808c:	6051      	str	r1, [r2, #4]
 800808e:	881b      	ldrh	r3, [r3, #0]
 8008090:	8113      	strh	r3, [r2, #8]
						strncat(a->_uart2snd,&comillas,1);
 8008092:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008096:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 80080a0:	f207 212f 	addw	r1, r7, #559	; 0x22f
 80080a4:	2201      	movs	r2, #1
 80080a6:	4618      	mov	r0, r3
 80080a8:	f006 fe93 	bl	800edd2 <strncat>
						strncat(a->_uart2snd,a->_WF_Net,strlen(a->_WF_Net));
 80080ac:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80080b0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	f503 6493 	add.w	r4, r3, #1176	; 0x498
 80080ba:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80080be:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	1d9d      	adds	r5, r3, #6
 80080c6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80080ca:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	3306      	adds	r3, #6
 80080d2:	4618      	mov	r0, r3
 80080d4:	f7f8 f88e 	bl	80001f4 <strlen>
 80080d8:	4603      	mov	r3, r0
 80080da:	461a      	mov	r2, r3
 80080dc:	4629      	mov	r1, r5
 80080de:	4620      	mov	r0, r4
 80080e0:	f006 fe77 	bl	800edd2 <strncat>
						strncat(a->_uart2snd,separador,strlen(separador));//strncat(a->_uart2snd,separador,3);//
 80080e4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80080e8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	f503 6493 	add.w	r4, r3, #1176	; 0x498
 80080f2:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80080f6:	4618      	mov	r0, r3
 80080f8:	f7f8 f87c 	bl	80001f4 <strlen>
 80080fc:	4602      	mov	r2, r0
 80080fe:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8008102:	4619      	mov	r1, r3
 8008104:	4620      	mov	r0, r4
 8008106:	f006 fe64 	bl	800edd2 <strncat>
						strncat(a->_uart2snd,a->_WF_Pass,strlen(a->_WF_Pass));
 800810a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800810e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	f503 6493 	add.w	r4, r3, #1176	; 0x498
 8008118:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800811c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8008126:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800812a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	3326      	adds	r3, #38	; 0x26
 8008132:	4618      	mov	r0, r3
 8008134:	f7f8 f85e 	bl	80001f4 <strlen>
 8008138:	4603      	mov	r3, r0
 800813a:	461a      	mov	r2, r3
 800813c:	4629      	mov	r1, r5
 800813e:	4620      	mov	r0, r4
 8008140:	f006 fe47 	bl	800edd2 <strncat>
						strncat(a->_uart2snd,finalizar,3);//strncat(a->_uart2snd,finalizar,strlen(finalizar));
 8008144:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008148:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 8008152:	f507 7109 	add.w	r1, r7, #548	; 0x224
 8008156:	2203      	movs	r2, #3
 8008158:	4618      	mov	r0, r3
 800815a:	f006 fe3a 	bl	800edd2 <strncat>
						a->_n_uart2SND=strlen(a->_uart2snd);//210418
 800815e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008162:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 800816c:	4618      	mov	r0, r3
 800816e:	f7f8 f841 	bl	80001f4 <strlen>
 8008172:	4603      	mov	r3, r0
 8008174:	461a      	mov	r2, r3
 8008176:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800817a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	f8c3 2cf4 	str.w	r2, [r3, #3316]	; 0xcf4
						a->_estado=CONEXION_EN_CURSO;
 8008184:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008188:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	22c8      	movs	r2, #200	; 0xc8
 8008190:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						//------Generacion del comando para conectar---------//
						}
				a->_pasos++;
 8008194:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008198:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	f8d3 3aac 	ldr.w	r3, [r3, #2732]	; 0xaac
 80081a2:	1c5a      	adds	r2, r3, #1
 80081a4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80081a8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
				//La primera vez no entra
				if ((a->_enviaruart==0)&&((AT_decode <= at_wifi_connected)||(AT_decode==0)||(a->_ticks2 > 20000)))  //Que analice luego de enviar por uart
 80081b2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80081b6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	f041 8327 	bne.w	8009814 <AT_ESP8266_ND+0x2d38>
 80081c6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80081ca:	2b0d      	cmp	r3, #13
 80081cc:	dd0f      	ble.n	80081ee <AT_ESP8266_ND+0x1712>
 80081ce:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d00b      	beq.n	80081ee <AT_ESP8266_ND+0x1712>
 80081d6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80081da:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	f8d3 3cbc 	ldr.w	r3, [r3, #3260]	; 0xcbc
 80081e4:	f644 6220 	movw	r2, #20000	; 0x4e20
 80081e8:	4293      	cmp	r3, r2
 80081ea:	f341 8313 	ble.w	8009814 <AT_ESP8266_ND+0x2d38>
															||(AT_decode==at_wifi_connected)
															||(AT_decode==at_wifi_gotip))||(a->_ticks2 > 20000))*/

					{

						if((AT_decode==at_wifi_disconnect)&&(a->_ticks2 > 3000)) a->_estado=AT_decode;
 80081ee:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80081f2:	2b0c      	cmp	r3, #12
 80081f4:	d113      	bne.n	800821e <AT_ESP8266_ND+0x1742>
 80081f6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80081fa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	f8d3 3cbc 	ldr.w	r3, [r3, #3260]	; 0xcbc
 8008204:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8008208:	4293      	cmp	r3, r2
 800820a:	dd08      	ble.n	800821e <AT_ESP8266_ND+0x1742>
 800820c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008210:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 800821a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						//Al conectar cuando esta conectado lo primero que hace es desconectar, esta desconexión, es una desconexió forzada por
						//el mòdulo por ello es que la tenemos que ignorar, primero se desconecta y luego de aprox 3 seg continua con el WIFI CONNECTED
						//y luego con el WIFI GOT IP.
						if(AT_decode!=at_wifi_disconnect)
 800821e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008222:	2b0c      	cmp	r3, #12
 8008224:	d025      	beq.n	8008272 <AT_ESP8266_ND+0x1796>
						{
							a->_instruccion=0;	//Para que siga contando por timeout al recibir WIFI DISCONNECT//Finalizo la instrucci�n
 8008226:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800822a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	2200      	movs	r2, #0
 8008232:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
							a->_ejecucion=0;
 8008236:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800823a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	2200      	movs	r2, #0
 8008242:	f8c3 2ab4 	str.w	r2, [r3, #2740]	; 0xab4
							if (AT_decode==0)
 8008246:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800824a:	2b00      	cmp	r3, #0
 800824c:	d108      	bne.n	8008260 <AT_ESP8266_ND+0x1784>
							{
								a->_estado=CONEXION_EN_CURSO;
 800824e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008252:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	22c8      	movs	r2, #200	; 0xc8
 800825a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 800825e:	e008      	b.n	8008272 <AT_ESP8266_ND+0x1796>
							}
							else
								{
								a->_estado=AT_decode;
 8008260:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008264:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 800826e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								}
							
						}

						a->_ticks2=0;
 8008272:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008276:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	2200      	movs	r2, #0
 800827e:	f8c3 2cbc 	str.w	r2, [r3, #3260]	; 0xcbc
					}

			}
			break;
 8008282:	f001 bac7 	b.w	8009814 <AT_ESP8266_ND+0x2d38>
 8008286:	bf00      	nop
 8008288:	080103dc 	.word	0x080103dc
			//--------------------------------------------------------//
			//					Desconectar WiFi					  //
		    //--------------------------------------------------------//
			case 3:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 800828c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008290:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	2200      	movs	r2, #0
 8008298:	f883 2498 	strb.w	r2, [r3, #1176]	; 0x498

				if(( a->_enviaruart==1)&&(AT_decode!=at_restart	)&&(AT_decode!=at_wifi_disconnect)&&(AT_decode!=at_deconectar_ok ))
 800829c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80082a0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 80082aa:	2b01      	cmp	r3, #1
 80082ac:	d14d      	bne.n	800834a <AT_ESP8266_ND+0x186e>
 80082ae:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80082b2:	2b04      	cmp	r3, #4
 80082b4:	d049      	beq.n	800834a <AT_ESP8266_ND+0x186e>
 80082b6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80082ba:	2b0c      	cmp	r3, #12
 80082bc:	d045      	beq.n	800834a <AT_ESP8266_ND+0x186e>
 80082be:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80082c2:	2b0d      	cmp	r3, #13
 80082c4:	d041      	beq.n	800834a <AT_ESP8266_ND+0x186e>
						{
						a->_pasos=0;
 80082c6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80082ca:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	2200      	movs	r2, #0
 80082d2:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
						a->_ejecucion=1;
 80082d6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80082da:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	2201      	movs	r2, #1
 80082e2:	f8c3 2ab4 	str.w	r2, [r3, #2740]	; 0xab4
						//------Generacion del comando para desconectar---------//
						strncat(a->_uart2snd,"AT+CWQAP\r\n",10);
 80082e6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80082ea:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	f503 6493 	add.w	r4, r3, #1176	; 0x498
 80082f4:	4620      	mov	r0, r4
 80082f6:	f7f7 ff7d 	bl	80001f4 <strlen>
 80082fa:	4603      	mov	r3, r0
 80082fc:	4423      	add	r3, r4
 80082fe:	49c9      	ldr	r1, [pc, #804]	; (8008624 <AT_ESP8266_ND+0x1b48>)
 8008300:	461a      	mov	r2, r3
 8008302:	460b      	mov	r3, r1
 8008304:	cb03      	ldmia	r3!, {r0, r1}
 8008306:	6010      	str	r0, [r2, #0]
 8008308:	6051      	str	r1, [r2, #4]
 800830a:	8819      	ldrh	r1, [r3, #0]
 800830c:	789b      	ldrb	r3, [r3, #2]
 800830e:	8111      	strh	r1, [r2, #8]
 8008310:	7293      	strb	r3, [r2, #10]
						a->_n_uart2SND=strlen(a->_uart2snd);
 8008312:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008316:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 8008320:	4618      	mov	r0, r3
 8008322:	f7f7 ff67 	bl	80001f4 <strlen>
 8008326:	4603      	mov	r3, r0
 8008328:	461a      	mov	r2, r3
 800832a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800832e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	f8c3 2cf4 	str.w	r2, [r3, #3316]	; 0xcf4
						//------Generacion del comando para desconectar---------//
						a->_estado=DESCONEXION_EN_CURSO;
 8008338:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800833c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8008346:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						}

				a->_pasos++;
 800834a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800834e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	f8d3 3aac 	ldr.w	r3, [r3, #2732]	; 0xaac
 8008358:	1c5a      	adds	r2, r3, #1
 800835a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800835e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
				if (((a->_enviaruart==0)&&((AT_decode==at_wifi_disconnect)||(AT_decode==at_wifi_connected)
 8008368:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800836c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8008376:	2b00      	cmp	r3, #0
 8008378:	d113      	bne.n	80083a2 <AT_ESP8266_ND+0x18c6>
 800837a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800837e:	2b0c      	cmp	r3, #12
 8008380:	d020      	beq.n	80083c4 <AT_ESP8266_ND+0x18e8>
 8008382:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008386:	2b0d      	cmp	r3, #13
 8008388:	d01c      	beq.n	80083c4 <AT_ESP8266_ND+0x18e8>
																		  ||(AT_decode==at_wifi_gotip)
 800838a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800838e:	2b06      	cmp	r3, #6
 8008390:	d018      	beq.n	80083c4 <AT_ESP8266_ND+0x18e8>
																		  ||(AT_decode==at_restart	)
 8008392:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008396:	2b04      	cmp	r3, #4
 8008398:	d014      	beq.n	80083c4 <AT_ESP8266_ND+0x18e8>
																		  ||(AT_decode==at_deconectar_ok )))
 800839a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800839e:	2b0d      	cmp	r3, #13
 80083a0:	d010      	beq.n	80083c4 <AT_ESP8266_ND+0x18e8>
																		  ||(a->_ticks > a->_wtchdog))  //Que analice luego de enviar por uart
 80083a2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80083a6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	f8d3 2cb8 	ldr.w	r2, [r3, #3256]	; 0xcb8
 80083b0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80083b4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	f8d3 3cc0 	ldr.w	r3, [r3, #3264]	; 0xcc0
 80083be:	429a      	cmp	r2, r3
 80083c0:	f341 822a 	ble.w	8009818 <AT_ESP8266_ND+0x2d3c>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 80083c4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80083c8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 80083d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						a->_instruccion=0;	//Finalizo la instrucci�n
 80083d6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80083da:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	2200      	movs	r2, #0
 80083e2:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						a->_ejecucion=0;
 80083e6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80083ea:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	2200      	movs	r2, #0
 80083f2:	f8c3 2ab4 	str.w	r2, [r3, #2740]	; 0xab4
						a->_ticks=0;
 80083f6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80083fa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	2200      	movs	r2, #0
 8008402:	f8c3 2cb8 	str.w	r2, [r3, #3256]	; 0xcb8
					}
					//a->_ticks=0;						//Reseteo cada vez que entro
  		}
			break;
 8008406:	f001 ba07 	b.w	8009818 <AT_ESP8266_ND+0x2d3c>
			//--------------------------------------------------------//
			//					Multiples Conexiones     			  //
		    //--------------------------------------------------------//
			case 4:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 800840a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800840e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	2200      	movs	r2, #0
 8008416:	f883 2498 	strb.w	r2, [r3, #1176]	; 0x498

				if(( a->_enviaruart==1)&&(AT_decode!=at_ready)
 800841a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800841e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8008428:	2b01      	cmp	r3, #1
 800842a:	d17f      	bne.n	800852c <AT_ESP8266_ND+0x1a50>
 800842c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008430:	2b01      	cmp	r3, #1
 8008432:	d07b      	beq.n	800852c <AT_ESP8266_ND+0x1a50>
									   &&(AT_decode!=at_wifi_tout_err)
 8008434:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008438:	2b08      	cmp	r3, #8
 800843a:	d077      	beq.n	800852c <AT_ESP8266_ND+0x1a50>
									   &&(AT_decode!=at_wifi_pass_err)
 800843c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008440:	2b09      	cmp	r3, #9
 8008442:	d073      	beq.n	800852c <AT_ESP8266_ND+0x1a50>
									   &&(AT_decode!=at_wifi_name_err)
 8008444:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008448:	2b0a      	cmp	r3, #10
 800844a:	d06f      	beq.n	800852c <AT_ESP8266_ND+0x1a50>
									   &&(AT_decode!=at_wifi_err)
 800844c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008450:	2b07      	cmp	r3, #7
 8008452:	d06b      	beq.n	800852c <AT_ESP8266_ND+0x1a50>
									   &&(AT_decode!=at_wifi_disconnect)
 8008454:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008458:	2b0c      	cmp	r3, #12
 800845a:	d067      	beq.n	800852c <AT_ESP8266_ND+0x1a50>
									   &&(AT_decode!=at_wifi_connected)
 800845c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008460:	2b0d      	cmp	r3, #13
 8008462:	d063      	beq.n	800852c <AT_ESP8266_ND+0x1a50>
									   &&(AT_decode!=at_wifi_gotip))
 8008464:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008468:	2b06      	cmp	r3, #6
 800846a:	d05f      	beq.n	800852c <AT_ESP8266_ND+0x1a50>
						{
						a->_pasos=0;
 800846c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008470:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	2200      	movs	r2, #0
 8008478:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
						a->_ejecucion=1;
 800847c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008480:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	2201      	movs	r2, #1
 8008488:	f8c3 2ab4 	str.w	r2, [r3, #2740]	; 0xab4
						//------Generacion del comando para desconectar---------//
						if(a->_TCP_Local_Server_EN==1)
 800848c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008490:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800849a:	2b01      	cmp	r3, #1
 800849c:	d115      	bne.n	80084ca <AT_ESP8266_ND+0x19ee>
						{
							strncat(a->_uart2snd,"AT+CIPMUX=1\r\n",strlen("AT+CIPMUX=1\r\n"));
 800849e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80084a2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	f503 6493 	add.w	r4, r3, #1176	; 0x498
 80084ac:	4620      	mov	r0, r4
 80084ae:	f7f7 fea1 	bl	80001f4 <strlen>
 80084b2:	4603      	mov	r3, r0
 80084b4:	4423      	add	r3, r4
 80084b6:	4a5c      	ldr	r2, [pc, #368]	; (8008628 <AT_ESP8266_ND+0x1b4c>)
 80084b8:	461c      	mov	r4, r3
 80084ba:	4613      	mov	r3, r2
 80084bc:	cb07      	ldmia	r3!, {r0, r1, r2}
 80084be:	6020      	str	r0, [r4, #0]
 80084c0:	6061      	str	r1, [r4, #4]
 80084c2:	60a2      	str	r2, [r4, #8]
 80084c4:	881b      	ldrh	r3, [r3, #0]
 80084c6:	81a3      	strh	r3, [r4, #12]
 80084c8:	e014      	b.n	80084f4 <AT_ESP8266_ND+0x1a18>
						}
						else
						{
							strncat(a->_uart2snd,"AT+CIPMUX=0\r\n",strlen("AT+CIPMUX=0\r\n"));
 80084ca:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80084ce:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	f503 6493 	add.w	r4, r3, #1176	; 0x498
 80084d8:	4620      	mov	r0, r4
 80084da:	f7f7 fe8b 	bl	80001f4 <strlen>
 80084de:	4603      	mov	r3, r0
 80084e0:	4423      	add	r3, r4
 80084e2:	4a52      	ldr	r2, [pc, #328]	; (800862c <AT_ESP8266_ND+0x1b50>)
 80084e4:	461c      	mov	r4, r3
 80084e6:	4613      	mov	r3, r2
 80084e8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80084ea:	6020      	str	r0, [r4, #0]
 80084ec:	6061      	str	r1, [r4, #4]
 80084ee:	60a2      	str	r2, [r4, #8]
 80084f0:	881b      	ldrh	r3, [r3, #0]
 80084f2:	81a3      	strh	r3, [r4, #12]
						}
						a->_n_uart2SND=strlen(a->_uart2snd);
 80084f4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80084f8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 8008502:	4618      	mov	r0, r3
 8008504:	f7f7 fe76 	bl	80001f4 <strlen>
 8008508:	4603      	mov	r3, r0
 800850a:	461a      	mov	r2, r3
 800850c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008510:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	f8c3 2cf4 	str.w	r2, [r3, #3316]	; 0xcf4
						//------Generacion del comando para desconectar---------//
						a->_estado=MUX_CONN_EN_CURSO;
 800851a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800851e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8008528:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						}

				a->_pasos++;
 800852c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008530:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	f8d3 3aac 	ldr.w	r3, [r3, #2732]	; 0xaac
 800853a:	1c5a      	adds	r2, r3, #1
 800853c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008540:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
				//Se deja pasar todo lo anterior para que pueda tomar decisiones en función a lo recibido, ya que si solo escucha lo referente a la
				//conexiones múltiples no puede volver al estado anterior de conexión, cuando mas se avanza, mas condiciones hay, claramente podemos separar
				// los if por casos de exitos para acelerar y  luego por todos los demás.
				if (((a->_enviaruart==0)&&((AT_decode==at_ok)||(AT_decode==at_wifi_tout_err)
 800854a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800854e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8008558:	2b00      	cmp	r3, #0
 800855a:	d12f      	bne.n	80085bc <AT_ESP8266_ND+0x1ae0>
 800855c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008560:	2b01      	cmp	r3, #1
 8008562:	d03c      	beq.n	80085de <AT_ESP8266_ND+0x1b02>
 8008564:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008568:	2b08      	cmp	r3, #8
 800856a:	d038      	beq.n	80085de <AT_ESP8266_ND+0x1b02>
															||(AT_decode==at_wifi_pass_err)
 800856c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008570:	2b09      	cmp	r3, #9
 8008572:	d034      	beq.n	80085de <AT_ESP8266_ND+0x1b02>
															||(AT_decode==at_wifi_name_err)
 8008574:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008578:	2b0a      	cmp	r3, #10
 800857a:	d030      	beq.n	80085de <AT_ESP8266_ND+0x1b02>
															||(AT_decode==at_wifi_err)
 800857c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008580:	2b07      	cmp	r3, #7
 8008582:	d02c      	beq.n	80085de <AT_ESP8266_ND+0x1b02>
															||(AT_decode==at_wifi_disconnect)
 8008584:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008588:	2b0c      	cmp	r3, #12
 800858a:	d028      	beq.n	80085de <AT_ESP8266_ND+0x1b02>
															||(AT_decode==at_wifi_connected)
 800858c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008590:	2b0d      	cmp	r3, #13
 8008592:	d024      	beq.n	80085de <AT_ESP8266_ND+0x1b02>
															||(AT_decode==at_wifi_gotip)
 8008594:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008598:	2b06      	cmp	r3, #6
 800859a:	d020      	beq.n	80085de <AT_ESP8266_ND+0x1b02>
															||(AT_decode==at_multiple_conn_ok)
 800859c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80085a0:	2b07      	cmp	r3, #7
 80085a2:	d01c      	beq.n	80085de <AT_ESP8266_ND+0x1b02>
															||(AT_decode==at_no_multiple_conn_ok)
 80085a4:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80085a8:	2b04      	cmp	r3, #4
 80085aa:	d018      	beq.n	80085de <AT_ESP8266_ND+0x1b02>
															||(AT_decode==at_multiple_conn_err)
 80085ac:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80085b0:	2b1e      	cmp	r3, #30
 80085b2:	d014      	beq.n	80085de <AT_ESP8266_ND+0x1b02>
															||(AT_decode==at_no_multiple_conn_err)))
 80085b4:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80085b8:	2b05      	cmp	r3, #5
 80085ba:	d010      	beq.n	80085de <AT_ESP8266_ND+0x1b02>
															||(a->_ticks > a->_wtchdog))  //Que analice luego de enviar por uart
 80085bc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80085c0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	f8d3 2cb8 	ldr.w	r2, [r3, #3256]	; 0xcb8
 80085ca:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80085ce:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	f8d3 3cc0 	ldr.w	r3, [r3, #3264]	; 0xcc0
 80085d8:	429a      	cmp	r2, r3
 80085da:	f341 811f 	ble.w	800981c <AT_ESP8266_ND+0x2d40>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 80085de:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80085e2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 80085ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						a->_instruccion=0;	//Finalizo la instrucci�n
 80085f0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80085f4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	2200      	movs	r2, #0
 80085fc:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						a->_ejecucion=0;
 8008600:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008604:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	2200      	movs	r2, #0
 800860c:	f8c3 2ab4 	str.w	r2, [r3, #2740]	; 0xab4
						a->_ticks=0;
 8008610:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008614:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	2200      	movs	r2, #0
 800861c:	f8c3 2cb8 	str.w	r2, [r3, #3256]	; 0xcb8
					}
					//a->_ticks=0;						//Reseteo cada vez que entro
  		}
			break;
 8008620:	f001 b8fc 	b.w	800981c <AT_ESP8266_ND+0x2d40>
 8008624:	080103e8 	.word	0x080103e8
 8008628:	080103f4 	.word	0x080103f4
 800862c:	08010404 	.word	0x08010404
			//--------------------------------------------------------//
			//					Especificar IP           			  //
		    //--------------------------------------------------------//
			case 5:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 8008630:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008634:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	2200      	movs	r2, #0
 800863c:	f883 2498 	strb.w	r2, [r3, #1176]	; 0x498

				if(( a->_enviaruart==1)&&(AT_decode!=at_restart)
 8008640:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008644:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 800864e:	2b01      	cmp	r3, #1
 8008650:	f040 80f3 	bne.w	800883a <AT_ESP8266_ND+0x1d5e>
 8008654:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008658:	2b04      	cmp	r3, #4
 800865a:	f000 80ee 	beq.w	800883a <AT_ESP8266_ND+0x1d5e>
									   &&(AT_decode!=at_ok)
 800865e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008662:	2b01      	cmp	r3, #1
 8008664:	f000 80e9 	beq.w	800883a <AT_ESP8266_ND+0x1d5e>
									   &&(AT_decode!=at_error)
 8008668:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800866c:	2b02      	cmp	r3, #2
 800866e:	f000 80e4 	beq.w	800883a <AT_ESP8266_ND+0x1d5e>
									   &&(AT_decode!=at_def_ip_err)
 8008672:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008676:	2b21      	cmp	r3, #33	; 0x21
 8008678:	f000 80df 	beq.w	800883a <AT_ESP8266_ND+0x1d5e>
									   &&(AT_decode!=at_def_ip_ok))
 800867c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008680:	2b1b      	cmp	r3, #27
 8008682:	f000 80da 	beq.w	800883a <AT_ESP8266_ND+0x1d5e>
						{
						a->_pasos=0;
 8008686:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800868a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	2200      	movs	r2, #0
 8008692:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
						a->_ejecucion=1;
 8008696:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800869a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	2201      	movs	r2, #1
 80086a2:	f8c3 2ab4 	str.w	r2, [r3, #2740]	; 0xab4
						//------Generacion del comando para desconectar---------//
						strncat(a->_uart2snd,"AT+CIPSTA=",strlen("AT+CIPSTA="));
 80086a6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80086aa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	f503 6493 	add.w	r4, r3, #1176	; 0x498
 80086b4:	4620      	mov	r0, r4
 80086b6:	f7f7 fd9d 	bl	80001f4 <strlen>
 80086ba:	4603      	mov	r3, r0
 80086bc:	4423      	add	r3, r4
 80086be:	4993      	ldr	r1, [pc, #588]	; (800890c <AT_ESP8266_ND+0x1e30>)
 80086c0:	461a      	mov	r2, r3
 80086c2:	460b      	mov	r3, r1
 80086c4:	cb03      	ldmia	r3!, {r0, r1}
 80086c6:	6010      	str	r0, [r2, #0]
 80086c8:	6051      	str	r1, [r2, #4]
 80086ca:	8819      	ldrh	r1, [r3, #0]
 80086cc:	789b      	ldrb	r3, [r3, #2]
 80086ce:	8111      	strh	r1, [r2, #8]
 80086d0:	7293      	strb	r3, [r2, #10]
						strncat(a->_uart2snd,&comillas,1);
 80086d2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80086d6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 80086e0:	f207 212f 	addw	r1, r7, #559	; 0x22f
 80086e4:	2201      	movs	r2, #1
 80086e6:	4618      	mov	r0, r3
 80086e8:	f006 fb73 	bl	800edd2 <strncat>
						strncat(a->_uart2snd,a->_TCP_Local_Server_IP,strlen(a->_TCP_Local_Server_IP));
 80086ec:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80086f0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	f503 6493 	add.w	r4, r3, #1176	; 0x498
 80086fa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80086fe:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	f103 054c 	add.w	r5, r3, #76	; 0x4c
 8008708:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800870c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	334c      	adds	r3, #76	; 0x4c
 8008714:	4618      	mov	r0, r3
 8008716:	f7f7 fd6d 	bl	80001f4 <strlen>
 800871a:	4603      	mov	r3, r0
 800871c:	461a      	mov	r2, r3
 800871e:	4629      	mov	r1, r5
 8008720:	4620      	mov	r0, r4
 8008722:	f006 fb56 	bl	800edd2 <strncat>
						strncat(a->_uart2snd,separador,3);
 8008726:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800872a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 8008734:	f507 710a 	add.w	r1, r7, #552	; 0x228
 8008738:	2203      	movs	r2, #3
 800873a:	4618      	mov	r0, r3
 800873c:	f006 fb49 	bl	800edd2 <strncat>
						strncat(a->_uart2snd,a->_TCP_Local_Server_GWY,strlen(a->_TCP_Local_Server_GWY));
 8008740:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008744:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	f503 6493 	add.w	r4, r3, #1176	; 0x498
 800874e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008752:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	f103 0562 	add.w	r5, r3, #98	; 0x62
 800875c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008760:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	3362      	adds	r3, #98	; 0x62
 8008768:	4618      	mov	r0, r3
 800876a:	f7f7 fd43 	bl	80001f4 <strlen>
 800876e:	4603      	mov	r3, r0
 8008770:	461a      	mov	r2, r3
 8008772:	4629      	mov	r1, r5
 8008774:	4620      	mov	r0, r4
 8008776:	f006 fb2c 	bl	800edd2 <strncat>
						strncat(a->_uart2snd,separador,3);
 800877a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800877e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 8008788:	f507 710a 	add.w	r1, r7, #552	; 0x228
 800878c:	2203      	movs	r2, #3
 800878e:	4618      	mov	r0, r3
 8008790:	f006 fb1f 	bl	800edd2 <strncat>
						strncat(a->_uart2snd,a->_TCP_Local_Server_MSK,strlen(a->_TCP_Local_Server_MSK));
 8008794:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008798:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	f503 6493 	add.w	r4, r3, #1176	; 0x498
 80087a2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80087a6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	f103 0572 	add.w	r5, r3, #114	; 0x72
 80087b0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80087b4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	3372      	adds	r3, #114	; 0x72
 80087bc:	4618      	mov	r0, r3
 80087be:	f7f7 fd19 	bl	80001f4 <strlen>
 80087c2:	4603      	mov	r3, r0
 80087c4:	461a      	mov	r2, r3
 80087c6:	4629      	mov	r1, r5
 80087c8:	4620      	mov	r0, r4
 80087ca:	f006 fb02 	bl	800edd2 <strncat>
						strncat(a->_uart2snd,&comillas,1);
 80087ce:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80087d2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 80087dc:	f207 212f 	addw	r1, r7, #559	; 0x22f
 80087e0:	2201      	movs	r2, #1
 80087e2:	4618      	mov	r0, r3
 80087e4:	f006 faf5 	bl	800edd2 <strncat>
						strncat(a->_uart2snd,finalizar2,2);//strncat(a->_uart2snd,finalizar2,strlen(finalizar2));
 80087e8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80087ec:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 80087f6:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 80087fa:	2202      	movs	r2, #2
 80087fc:	4618      	mov	r0, r3
 80087fe:	f006 fae8 	bl	800edd2 <strncat>

						a->_n_uart2SND=strlen(a->_uart2snd);
 8008802:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008806:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 8008810:	4618      	mov	r0, r3
 8008812:	f7f7 fcef 	bl	80001f4 <strlen>
 8008816:	4603      	mov	r3, r0
 8008818:	461a      	mov	r2, r3
 800881a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800881e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	f8c3 2cf4 	str.w	r2, [r3, #3316]	; 0xcf4
						//------Generacion del comando para desconectar---------//
						a->_estado=DEF_IP_EN_CURSO;
 8008828:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800882c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8008836:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						}

				a->_pasos++;
 800883a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800883e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	f8d3 3aac 	ldr.w	r3, [r3, #2732]	; 0xaac
 8008848:	1c5a      	adds	r2, r3, #1
 800884a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800884e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
				if (((a->_enviaruart==0)&&((AT_decode==at_ok)||(AT_decode==at_wifi_connected)
 8008858:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800885c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8008866:	2b00      	cmp	r3, #0
 8008868:	d11b      	bne.n	80088a2 <AT_ESP8266_ND+0x1dc6>
 800886a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800886e:	2b01      	cmp	r3, #1
 8008870:	d028      	beq.n	80088c4 <AT_ESP8266_ND+0x1de8>
 8008872:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008876:	2b0d      	cmp	r3, #13
 8008878:	d024      	beq.n	80088c4 <AT_ESP8266_ND+0x1de8>
															 ||(AT_decode==at_wifi_gotip)
 800887a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800887e:	2b06      	cmp	r3, #6
 8008880:	d020      	beq.n	80088c4 <AT_ESP8266_ND+0x1de8>
															 ||(AT_decode==at_restart)
 8008882:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008886:	2b04      	cmp	r3, #4
 8008888:	d01c      	beq.n	80088c4 <AT_ESP8266_ND+0x1de8>
															 ||(AT_decode==at_error)
 800888a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800888e:	2b02      	cmp	r3, #2
 8008890:	d018      	beq.n	80088c4 <AT_ESP8266_ND+0x1de8>
															 ||(AT_decode==at_def_ip_err)
 8008892:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008896:	2b21      	cmp	r3, #33	; 0x21
 8008898:	d014      	beq.n	80088c4 <AT_ESP8266_ND+0x1de8>
															 ||(AT_decode==at_def_ip_ok)))
 800889a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800889e:	2b1b      	cmp	r3, #27
 80088a0:	d010      	beq.n	80088c4 <AT_ESP8266_ND+0x1de8>
															 ||(a->_ticks > a->_wtchdog))  //Que analice luego de enviar por uart
 80088a2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80088a6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	f8d3 2cb8 	ldr.w	r2, [r3, #3256]	; 0xcb8
 80088b0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80088b4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	f8d3 3cc0 	ldr.w	r3, [r3, #3264]	; 0xcc0
 80088be:	429a      	cmp	r2, r3
 80088c0:	f340 87ae 	ble.w	8009820 <AT_ESP8266_ND+0x2d44>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 80088c4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80088c8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 80088d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						a->_instruccion=0;	//Finalizo la instrucci�n
 80088d6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80088da:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	2200      	movs	r2, #0
 80088e2:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						a->_ejecucion=0;
 80088e6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80088ea:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	2200      	movs	r2, #0
 80088f2:	f8c3 2ab4 	str.w	r2, [r3, #2740]	; 0xab4
						a->_ticks=0;
 80088f6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80088fa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	2200      	movs	r2, #0
 8008902:	f8c3 2cb8 	str.w	r2, [r3, #3256]	; 0xcb8
					}
					//a->_ticks=0;						//Reseteo cada vez que entro
  		}
			break;
 8008906:	f000 bf8b 	b.w	8009820 <AT_ESP8266_ND+0x2d44>
 800890a:	bf00      	nop
 800890c:	08010414 	.word	0x08010414
			//--------------------------------------------------------//
			//					Conectar a TCP Server    			  //
		    //--------------------------------------------------------//
			case 6:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 8008910:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008914:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	2200      	movs	r2, #0
 800891c:	f883 2498 	strb.w	r2, [r3, #1176]	; 0x498
				//Al entrar en teoría AT_decode es 0 ya que no se enviaron datos por puerto serie aún, en el caso
				// que llegaran datos se analiza mediante la otra rama de la OR.
				if(( a->_enviaruart==1)&&((AT_decode > at_tcp_client_desc)||(AT_decode==0)))
 8008920:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008924:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 800892e:	2b01      	cmp	r3, #1
 8008930:	f040 80cd 	bne.w	8008ace <AT_ESP8266_ND+0x1ff2>
 8008934:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008938:	2b14      	cmp	r3, #20
 800893a:	dc04      	bgt.n	8008946 <AT_ESP8266_ND+0x1e6a>
 800893c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008940:	2b00      	cmp	r3, #0
 8008942:	f040 80c4 	bne.w	8008ace <AT_ESP8266_ND+0x1ff2>
									   &&(AT_decode!=at_tcp_alrdy_cnntd_err)
									   &&(AT_decode!=at_tcp_conectado)
									   &&(AT_decode!=at_tcp_client_desc)
									   &&(AT_decode!=at_error))*/
						{
						a->_pasos=0;
 8008946:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800894a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	2200      	movs	r2, #0
 8008952:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
						a->_ejecucion=1;
 8008956:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800895a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	2201      	movs	r2, #1
 8008962:	f8c3 2ab4 	str.w	r2, [r3, #2740]	; 0xab4
						//------Generacion del comando ---------//
						strncat(a->_uart2snd,"AT+CIPSTART=",strlen("AT+CIPSTART="));
 8008966:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800896a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	f503 6493 	add.w	r4, r3, #1176	; 0x498
 8008974:	4620      	mov	r0, r4
 8008976:	f7f7 fc3d 	bl	80001f4 <strlen>
 800897a:	4603      	mov	r3, r0
 800897c:	4423      	add	r3, r4
 800897e:	4a99      	ldr	r2, [pc, #612]	; (8008be4 <AT_ESP8266_ND+0x2108>)
 8008980:	461c      	mov	r4, r3
 8008982:	4613      	mov	r3, r2
 8008984:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008986:	6020      	str	r0, [r4, #0]
 8008988:	6061      	str	r1, [r4, #4]
 800898a:	60a2      	str	r2, [r4, #8]
 800898c:	781b      	ldrb	r3, [r3, #0]
 800898e:	7323      	strb	r3, [r4, #12]
						strncat(a->_uart2snd,&comillas,1);
 8008990:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008994:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 800899e:	f207 212f 	addw	r1, r7, #559	; 0x22f
 80089a2:	2201      	movs	r2, #1
 80089a4:	4618      	mov	r0, r3
 80089a6:	f006 fa14 	bl	800edd2 <strncat>
						strncat(a->_uart2snd,"TCP",strlen("TCP"));
 80089aa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80089ae:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	f503 6493 	add.w	r4, r3, #1176	; 0x498
 80089b8:	4620      	mov	r0, r4
 80089ba:	f7f7 fc1b 	bl	80001f4 <strlen>
 80089be:	4603      	mov	r3, r0
 80089c0:	4423      	add	r3, r4
 80089c2:	4a89      	ldr	r2, [pc, #548]	; (8008be8 <AT_ESP8266_ND+0x210c>)
 80089c4:	6810      	ldr	r0, [r2, #0]
 80089c6:	6018      	str	r0, [r3, #0]
						strncat(a->_uart2snd,separador,3);
 80089c8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80089cc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 80089d6:	f507 710a 	add.w	r1, r7, #552	; 0x228
 80089da:	2203      	movs	r2, #3
 80089dc:	4618      	mov	r0, r3
 80089de:	f006 f9f8 	bl	800edd2 <strncat>
						strncat(a->_uart2snd,a->_TCP_Remote_Server_IP,strlen(a->_TCP_Remote_Server_IP));
 80089e2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80089e6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	f503 6493 	add.w	r4, r3, #1176	; 0x498
 80089f0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80089f4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	f103 0536 	add.w	r5, r3, #54	; 0x36
 80089fe:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a02:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	3336      	adds	r3, #54	; 0x36
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	f7f7 fbf2 	bl	80001f4 <strlen>
 8008a10:	4603      	mov	r3, r0
 8008a12:	461a      	mov	r2, r3
 8008a14:	4629      	mov	r1, r5
 8008a16:	4620      	mov	r0, r4
 8008a18:	f006 f9db 	bl	800edd2 <strncat>
						strncat(a->_uart2snd,separador2,2);
 8008a1c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a20:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 8008a2a:	f507 7108 	add.w	r1, r7, #544	; 0x220
 8008a2e:	2202      	movs	r2, #2
 8008a30:	4618      	mov	r0, r3
 8008a32:	f006 f9ce 	bl	800edd2 <strncat>
						strncat(a->_uart2snd,a->_TCP_Remote_Server_Port,strlen(a->_TCP_Remote_Server_Port));
 8008a36:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a3a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	f503 6493 	add.w	r4, r3, #1176	; 0x498
 8008a44:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a48:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	f103 0546 	add.w	r5, r3, #70	; 0x46
 8008a52:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a56:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	3346      	adds	r3, #70	; 0x46
 8008a5e:	4618      	mov	r0, r3
 8008a60:	f7f7 fbc8 	bl	80001f4 <strlen>
 8008a64:	4603      	mov	r3, r0
 8008a66:	461a      	mov	r2, r3
 8008a68:	4629      	mov	r1, r5
 8008a6a:	4620      	mov	r0, r4
 8008a6c:	f006 f9b1 	bl	800edd2 <strncat>
						strncat(a->_uart2snd,finalizar2,strlen(finalizar2));
 8008a70:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a74:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	f503 6493 	add.w	r4, r3, #1176	; 0x498
 8008a7e:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8008a82:	4618      	mov	r0, r3
 8008a84:	f7f7 fbb6 	bl	80001f4 <strlen>
 8008a88:	4602      	mov	r2, r0
 8008a8a:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8008a8e:	4619      	mov	r1, r3
 8008a90:	4620      	mov	r0, r4
 8008a92:	f006 f99e 	bl	800edd2 <strncat>
						a->_n_uart2SND=strlen(a->_uart2snd);
 8008a96:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a9a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	f7f7 fba5 	bl	80001f4 <strlen>
 8008aaa:	4603      	mov	r3, r0
 8008aac:	461a      	mov	r2, r3
 8008aae:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ab2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	f8c3 2cf4 	str.w	r2, [r3, #3316]	; 0xcf4
						a->_estado=TCP_CONN_EN_CURSO;
 8008abc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ac0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	f44f 7216 	mov.w	r2, #600	; 0x258
 8008aca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						//------Generacion del comando ---------//
						}

				a->_pasos++;
 8008ace:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ad2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	f8d3 3aac 	ldr.w	r3, [r3, #2732]	; 0xaac
 8008adc:	1c5a      	adds	r2, r3, #1
 8008ade:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ae2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
				//No dejo que entre por AT_decode=0. Si recibo info erronea ingreso porque al no encontrar un cadena que se corresponda
				// con los valores fijados AT_decode va a valer 0. Si ese if devuelve a->_estado=0, se vuelve a enviar la petición de 
				// conexión a TCP por puerto serie, la cual queda en loop porque lo primero que se recibe de la comunicación al intentar
				// conectar a un servidor TCP es la misma instrucción AT+CIPSTART . .. .  y esto vale 0.
				if ((a->_enviaruart==0)&&(((AT_decode <= at_tcp_client_desc)&&(AT_decode!=0))||(a->_ticks2 > 10000))) //a->_wtchdog)))
 8008aec:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008af0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	f040 8692 	bne.w	8009824 <AT_ESP8266_ND+0x2d48>
 8008b00:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008b04:	2b14      	cmp	r3, #20
 8008b06:	dc03      	bgt.n	8008b10 <AT_ESP8266_ND+0x2034>
 8008b08:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d10b      	bne.n	8008b28 <AT_ESP8266_ND+0x204c>
 8008b10:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b14:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	f8d3 3cbc 	ldr.w	r3, [r3, #3260]	; 0xcbc
 8008b1e:	f242 7210 	movw	r2, #10000	; 0x2710
 8008b22:	4293      	cmp	r3, r2
 8008b24:	f340 867e 	ble.w	8009824 <AT_ESP8266_ND+0x2d48>
																		  ||(AT_decode==at_tcp_client_desc)
																		  ||(AT_decode==at_error)
																		  ||(AT_decode==at_busy_p)))
																		  ||(a->_ticks > a->_wtchdog))*///210419 if (((a->_enviaruart==0)&&((estado==5)||(estado==6)||(estado==7)||(estado==13)||(estado==14)))||(a->_ticks > a->_wtchdog))  //Que analice luego de enviar por uart
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 8008b28:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b2c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8008b36:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						a->_instruccion=0;	//Finalizo la instrucci�n
 8008b3a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b3e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	2200      	movs	r2, #0
 8008b46:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						a->_ejecucion=0;
 8008b4a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b4e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	2200      	movs	r2, #0
 8008b56:	f8c3 2ab4 	str.w	r2, [r3, #2740]	; 0xab4
						a->_ticks=0;
 8008b5a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b5e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	2200      	movs	r2, #0
 8008b66:	f8c3 2cb8 	str.w	r2, [r3, #3256]	; 0xcb8
					}
					//a->_ticks=0;						//Reseteo cada vez que entro
			}
			break;
 8008b6a:	f000 be5b 	b.w	8009824 <AT_ESP8266_ND+0x2d48>
			//--------------------------------------------------------//
			//			   Enviar datos a TCP Server    			  //
		    //--------------------------------------------------------//
			case 7:
			{
					unsigned char caracteres[8]="";
 8008b6e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b72:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 8008b76:	2200      	movs	r2, #0
 8008b78:	601a      	str	r2, [r3, #0]
 8008b7a:	2200      	movs	r2, #0
 8008b7c:	605a      	str	r2, [r3, #4]


				if((AT_decode <= at_tcp_client_desc)&&(AT_decode!=at_tcp_alrdy_cnntd_err)&&(AT_decode!=at_tcp_conectado)&&(AT_decode!=0))
 8008b7e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008b82:	2b14      	cmp	r3, #20
 8008b84:	dc32      	bgt.n	8008bec <AT_ESP8266_ND+0x2110>
 8008b86:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008b8a:	2b10      	cmp	r3, #16
 8008b8c:	d02e      	beq.n	8008bec <AT_ESP8266_ND+0x2110>
 8008b8e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008b92:	2b0e      	cmp	r3, #14
 8008b94:	d02a      	beq.n	8008bec <AT_ESP8266_ND+0x2110>
 8008b96:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d026      	beq.n	8008bec <AT_ESP8266_ND+0x2110>
				/*if((AT_decode==at_tcp_client_desc)||(AT_decode==at_wifi_disconnect)||(AT_decode==at_fail)
						||(AT_decode==at_error))*/ //240420
				{
					a->_estado=AT_decode;
 8008b9e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ba2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8008bac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					a->_instruccion=0;		//Finalizo la instrucci�n
 8008bb0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008bb4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	2200      	movs	r2, #0
 8008bbc:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
					a->_ejecucion=0;
 8008bc0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008bc4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	2200      	movs	r2, #0
 8008bcc:	f8c3 2ab4 	str.w	r2, [r3, #2740]	; 0xab4
					a->_subpaso=0;
 8008bd0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008bd4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	2200      	movs	r2, #0
 8008bdc:	f8c3 2d50 	str.w	r2, [r3, #3408]	; 0xd50
									a->_ejecucion=0;
									a->_subpaso=0;
								}
				}
			}
			break;
 8008be0:	f000 be22 	b.w	8009828 <AT_ESP8266_ND+0x2d4c>
 8008be4:	08010420 	.word	0x08010420
 8008be8:	08010430 	.word	0x08010430
							if( (a->_enviaruart==1)&&(a->_subpaso==0))
 8008bec:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008bf0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8008bfa:	2b01      	cmp	r3, #1
 8008bfc:	f040 80d1 	bne.w	8008da2 <AT_ESP8266_ND+0x22c6>
 8008c00:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c04:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	f040 80c7 	bne.w	8008da2 <AT_ESP8266_ND+0x22c6>
										a->_ejecucion=1;
 8008c14:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c18:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	2201      	movs	r2, #1
 8008c20:	f8c3 2ab4 	str.w	r2, [r3, #2740]	; 0xab4
										a->_estado=24;
 8008c24:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c28:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	2218      	movs	r2, #24
 8008c30:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
										a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 8008c34:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c38:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	2200      	movs	r2, #0
 8008c40:	f883 2498 	strb.w	r2, [r3, #1176]	; 0x498
										a->_subpaso++;					//Asigno para que no vuelva a entrar
 8008c44:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c48:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 8008c52:	1c5a      	adds	r2, r3, #1
 8008c54:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c58:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	f8c3 2d50 	str.w	r2, [r3, #3408]	; 0xd50
										a->_pasos=0;
 8008c62:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c66:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	2200      	movs	r2, #0
 8008c6e:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
										a->_okenvio[0]='\0';	  //Borro el vector a->_okenvio
 8008c72:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c76:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	2200      	movs	r2, #0
 8008c7e:	f883 2ab8 	strb.w	r2, [r3, #2744]	; 0xab8
										strncat(a->_uart2snd,"AT+CIPSEND=",strlen("AT+CIPSEND="));
 8008c82:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c86:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	f503 6493 	add.w	r4, r3, #1176	; 0x498
 8008c90:	4620      	mov	r0, r4
 8008c92:	f7f7 faaf 	bl	80001f4 <strlen>
 8008c96:	4603      	mov	r3, r0
 8008c98:	4423      	add	r3, r4
 8008c9a:	4ab1      	ldr	r2, [pc, #708]	; (8008f60 <AT_ESP8266_ND+0x2484>)
 8008c9c:	461c      	mov	r4, r3
 8008c9e:	4613      	mov	r3, r2
 8008ca0:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008ca2:	6020      	str	r0, [r4, #0]
 8008ca4:	6061      	str	r1, [r4, #4]
 8008ca6:	60a2      	str	r2, [r4, #8]
										INTOA(a->_n_D2SND, caracteres);	//INTOA(strlen(a->_data2SND), caracteres);		        //Longitud  de datos a enviar
 8008ca8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008cac:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	f8d3 3cf0 	ldr.w	r3, [r3, #3312]	; 0xcf0
 8008cb6:	f107 0214 	add.w	r2, r7, #20
 8008cba:	4611      	mov	r1, r2
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	f005 fe01 	bl	800e8c4 <INTOA>
										strncat(a->_uart2snd,caracteres,strlen(caracteres));//strncat(a->_uart2snd,caracteres,strlen(caracteres));//AT+CIPSEND="cdad caracteres"
 8008cc2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008cc6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	f503 6493 	add.w	r4, r3, #1176	; 0x498
 8008cd0:	f107 0314 	add.w	r3, r7, #20
 8008cd4:	4618      	mov	r0, r3
 8008cd6:	f7f7 fa8d 	bl	80001f4 <strlen>
 8008cda:	4602      	mov	r2, r0
 8008cdc:	f107 0314 	add.w	r3, r7, #20
 8008ce0:	4619      	mov	r1, r3
 8008ce2:	4620      	mov	r0, r4
 8008ce4:	f006 f875 	bl	800edd2 <strncat>
										strcpy(a->_okenvio,a->_uart2snd);
 8008ce8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008cec:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	f603 22b8 	addw	r2, r3, #2744	; 0xab8
 8008cf6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008cfa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 8008d04:	4619      	mov	r1, r3
 8008d06:	4610      	mov	r0, r2
 8008d08:	f006 f944 	bl	800ef94 <strcpy>
										strncat(a->_uart2snd,finalizar2,2);//strncat(a->_uart2snd,finalizar2,strlen(finalizar2));
 8008d0c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008d10:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 8008d1a:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 8008d1e:	2202      	movs	r2, #2
 8008d20:	4618      	mov	r0, r3
 8008d22:	f006 f856 	bl	800edd2 <strncat>
										a->_n_uart2SND=strlen(a->_uart2snd);
 8008d26:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008d2a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 8008d34:	4618      	mov	r0, r3
 8008d36:	f7f7 fa5d 	bl	80001f4 <strlen>
 8008d3a:	4603      	mov	r3, r0
 8008d3c:	461a      	mov	r2, r3
 8008d3e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008d42:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	f8c3 2cf4 	str.w	r2, [r3, #3316]	; 0xcf4
										strncat(a->_okenvio,"\r\r\n\r\nOK\r\n> ",strlen("\r\r\n\r\nOK\r\n> "));
 8008d4c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008d50:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	f603 24b8 	addw	r4, r3, #2744	; 0xab8
 8008d5a:	4620      	mov	r0, r4
 8008d5c:	f7f7 fa4a 	bl	80001f4 <strlen>
 8008d60:	4603      	mov	r3, r0
 8008d62:	4423      	add	r3, r4
 8008d64:	4a7f      	ldr	r2, [pc, #508]	; (8008f64 <AT_ESP8266_ND+0x2488>)
 8008d66:	461c      	mov	r4, r3
 8008d68:	4613      	mov	r3, r2
 8008d6a:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008d6c:	6020      	str	r0, [r4, #0]
 8008d6e:	6061      	str	r1, [r4, #4]
 8008d70:	60a2      	str	r2, [r4, #8]
										a->_debug_count3++;
 8008d72:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008d76:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	f8d3 3d10 	ldr.w	r3, [r3, #3344]	; 0xd10
 8008d80:	1c5a      	adds	r2, r3, #1
 8008d82:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008d86:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	f8c3 2d10 	str.w	r2, [r3, #3344]	; 0xd10
										a->_estado=TCP_SND_EN_CURSO;
 8008d90:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008d94:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8008d9e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								a->_pasos++;
 8008da2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008da6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	f8d3 3aac 	ldr.w	r3, [r3, #2732]	; 0xaac
 8008db0:	1c5a      	adds	r2, r3, #1
 8008db2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008db6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
							if ((a->_enviaruart==0)&&(AT_decode!=at_tcp_enviado_ok)&&((strcmp(a->_uartRCVD,a->_okenvio)==0)||(AT_decode==at_tcp_ok_to_send)
 8008dc0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008dc4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	f040 80ac 	bne.w	8008f2c <AT_ESP8266_ND+0x2450>
 8008dd4:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008dd8:	2b16      	cmp	r3, #22
 8008dda:	f000 80a7 	beq.w	8008f2c <AT_ESP8266_ND+0x2450>
 8008dde:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008de2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	f503 62d3 	add.w	r2, r3, #1688	; 0x698
 8008dec:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008df0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	f603 23b8 	addw	r3, r3, #2744	; 0xab8
 8008dfa:	4619      	mov	r1, r3
 8008dfc:	4610      	mov	r0, r2
 8008dfe:	f7f7 f9ef 	bl	80001e0 <strcmp>
 8008e02:	4603      	mov	r3, r0
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d01c      	beq.n	8008e42 <AT_ESP8266_ND+0x2366>
 8008e08:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008e0c:	2b15      	cmp	r3, #21
 8008e0e:	d018      	beq.n	8008e42 <AT_ESP8266_ND+0x2366>
												   ||((a->_ticks > a->_wtchdog)&&(a->_subpaso==1))))
 8008e10:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e14:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	f8d3 2cb8 	ldr.w	r2, [r3, #3256]	; 0xcb8
 8008e1e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e22:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	f8d3 3cc0 	ldr.w	r3, [r3, #3264]	; 0xcc0
 8008e2c:	429a      	cmp	r2, r3
 8008e2e:	dd7d      	ble.n	8008f2c <AT_ESP8266_ND+0x2450>
 8008e30:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e34:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 8008e3e:	2b01      	cmp	r3, #1
 8008e40:	d174      	bne.n	8008f2c <AT_ESP8266_ND+0x2450>
								if(a->_ticks > a->_wtchdog)//if((a->_ticks > a->_wtchdog)||(a->_subpaso==1))//((a->_ticks > a->_wtchdog)&&(a->_subpaso==1))
 8008e42:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e46:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	f8d3 2cb8 	ldr.w	r2, [r3, #3256]	; 0xcb8
 8008e50:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e54:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	f8d3 3cc0 	ldr.w	r3, [r3, #3264]	; 0xcc0
 8008e5e:	429a      	cmp	r2, r3
 8008e60:	dd0e      	ble.n	8008e80 <AT_ESP8266_ND+0x23a4>
									a->_debug_count7++;//-----------------------------Cuento los que entran por timeout
 8008e62:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e66:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	f8d3 3d20 	ldr.w	r3, [r3, #3360]	; 0xd20
 8008e70:	1c5a      	adds	r2, r3, #1
 8008e72:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e76:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20
								a->_debug_count4++;
 8008e80:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e84:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	f8d3 3d14 	ldr.w	r3, [r3, #3348]	; 0xd14
 8008e8e:	1c5a      	adds	r2, r3, #1
 8008e90:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e94:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
								a->_subpaso++;
 8008e9e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ea2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 8008eac:	1c5a      	adds	r2, r3, #1
 8008eae:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008eb2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	f8c3 2d50 	str.w	r2, [r3, #3408]	; 0xd50
								a->_enviaruart=1;
 8008ebc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ec0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	2201      	movs	r2, #1
 8008ec8:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
								CopiaVector(a->_uart2snd,a->_data2SND,a->_n_D2SND,1,'a');//strcpy(a->_uart2snd,a->_data2SND);
 8008ecc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ed0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	f503 6093 	add.w	r0, r3, #1176	; 0x498
 8008eda:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ede:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	f503 7126 	add.w	r1, r3, #664	; 0x298
 8008ee8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008eec:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	f8d3 2cf0 	ldr.w	r2, [r3, #3312]	; 0xcf0
 8008ef6:	2361      	movs	r3, #97	; 0x61
 8008ef8:	9300      	str	r3, [sp, #0]
 8008efa:	2301      	movs	r3, #1
 8008efc:	f005 fd16 	bl	800e92c <CopiaVector>
								a->_n_uart2SND=a->_n_D2SND; //Asigno cantidad de elementos del vector
 8008f00:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f04:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	f8d3 2cf0 	ldr.w	r2, [r3, #3312]	; 0xcf0
 8008f0e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f12:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	f8c3 2cf4 	str.w	r2, [r3, #3316]	; 0xcf4
								a->_ticks=0;//----------------------------------Evito que entre de toque en el siguiente
 8008f1c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f20:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	2200      	movs	r2, #0
 8008f28:	f8c3 2cb8 	str.w	r2, [r3, #3256]	; 0xcb8
							if(((AT_decode <= at_tcp_enviado_error)&&(AT_decode!=0))||(a->_ticks > a->_wtchdog))
 8008f2c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008f30:	2b18      	cmp	r3, #24
 8008f32:	dc03      	bgt.n	8008f3c <AT_ESP8266_ND+0x2460>
 8008f34:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d115      	bne.n	8008f68 <AT_ESP8266_ND+0x248c>
 8008f3c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f40:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	f8d3 2cb8 	ldr.w	r2, [r3, #3256]	; 0xcb8
 8008f4a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f4e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	f8d3 3cc0 	ldr.w	r3, [r3, #3264]	; 0xcc0
 8008f58:	429a      	cmp	r2, r3
 8008f5a:	f340 8465 	ble.w	8009828 <AT_ESP8266_ND+0x2d4c>
 8008f5e:	e003      	b.n	8008f68 <AT_ESP8266_ND+0x248c>
 8008f60:	08010434 	.word	0x08010434
 8008f64:	08010440 	.word	0x08010440
									a->_debug_count5++;
 8008f68:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f6c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	f8d3 3d18 	ldr.w	r3, [r3, #3352]	; 0xd18
 8008f76:	1c5a      	adds	r2, r3, #1
 8008f78:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f7c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	f8c3 2d18 	str.w	r2, [r3, #3352]	; 0xd18
									if(a->_ticks > a->_wtchdog)
 8008f86:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f8a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	f8d3 2cb8 	ldr.w	r2, [r3, #3256]	; 0xcb8
 8008f94:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f98:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	f8d3 3cc0 	ldr.w	r3, [r3, #3264]	; 0xcc0
 8008fa2:	429a      	cmp	r2, r3
 8008fa4:	dd25      	ble.n	8008ff2 <AT_ESP8266_ND+0x2516>
										a->_debug_count8++;
 8008fa6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008faa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	f8d3 3d24 	ldr.w	r3, [r3, #3364]	; 0xd24
 8008fb4:	1c5a      	adds	r2, r3, #1
 8008fb6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008fba:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	f8c3 2d24 	str.w	r2, [r3, #3364]	; 0xd24
										a->_subpaso++;
 8008fc4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008fc8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 8008fd2:	1c5a      	adds	r2, r3, #1
 8008fd4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008fd8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	f8c3 2d50 	str.w	r2, [r3, #3408]	; 0xd50
										a->_ticks=0;
 8008fe2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008fe6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	2200      	movs	r2, #0
 8008fee:	f8c3 2cb8 	str.w	r2, [r3, #3256]	; 0xcb8
									if((a->_subpaso > 2)&&(AT_decode!=at_tcp_client_desc)&&(AT_decode!=at_wifi_disconnect))//--------------No considero los etados de fallas por TCP o WIFI caido
 8008ff2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ff6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 8009000:	2b02      	cmp	r3, #2
 8009002:	dd10      	ble.n	8009026 <AT_ESP8266_ND+0x254a>
 8009004:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009008:	2b14      	cmp	r3, #20
 800900a:	d00c      	beq.n	8009026 <AT_ESP8266_ND+0x254a>
 800900c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009010:	2b0c      	cmp	r3, #12
 8009012:	d008      	beq.n	8009026 <AT_ESP8266_ND+0x254a>
										a->_estado=15;//-----------------------------Error de Env�o TCP
 8009014:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009018:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	220f      	movs	r2, #15
 8009020:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8009024:	e008      	b.n	8009038 <AT_ESP8266_ND+0x255c>
										a->_estado=AT_decode;	//Devuelvo el estado
 8009026:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800902a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8009034:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									a->_instruccion=0;		//Finalizo la instrucci�n
 8009038:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800903c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	2200      	movs	r2, #0
 8009044:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
									a->_ejecucion=0;
 8009048:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800904c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	2200      	movs	r2, #0
 8009054:	f8c3 2ab4 	str.w	r2, [r3, #2740]	; 0xab4
									a->_subpaso=0;
 8009058:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800905c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	2200      	movs	r2, #0
 8009064:	f8c3 2d50 	str.w	r2, [r3, #3408]	; 0xd50
			break;
 8009068:	e3de      	b.n	8009828 <AT_ESP8266_ND+0x2d4c>
			//--------------------------------------------------------//
			//					Crear Local TCP Server    			  //
		    //--------------------------------------------------------//
			case 8:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 800906a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800906e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	2200      	movs	r2, #0
 8009076:	f883 2498 	strb.w	r2, [r3, #1176]	; 0x498

				if( a->_enviaruart==1)
 800907a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800907e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8009088:	2b01      	cmp	r3, #1
 800908a:	d16f      	bne.n	800916c <AT_ESP8266_ND+0x2690>
						{
						a->_pasos=0;
 800908c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009090:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	2200      	movs	r2, #0
 8009098:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
						a->_ejecucion=1;
 800909c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80090a0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	2201      	movs	r2, #1
 80090a8:	f8c3 2ab4 	str.w	r2, [r3, #2740]	; 0xab4
						//------Generacion del comando ---------//
						strncat(a->_uart2snd,"AT+CIPSERVER=1,",strlen("AT+CIPSERVER=1,"));
 80090ac:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80090b0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	f503 6493 	add.w	r4, r3, #1176	; 0x498
 80090ba:	4620      	mov	r0, r4
 80090bc:	f7f7 f89a 	bl	80001f4 <strlen>
 80090c0:	4603      	mov	r3, r0
 80090c2:	4423      	add	r3, r4
 80090c4:	4a7c      	ldr	r2, [pc, #496]	; (80092b8 <AT_ESP8266_ND+0x27dc>)
 80090c6:	461c      	mov	r4, r3
 80090c8:	4615      	mov	r5, r2
 80090ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80090cc:	6020      	str	r0, [r4, #0]
 80090ce:	6061      	str	r1, [r4, #4]
 80090d0:	60a2      	str	r2, [r4, #8]
 80090d2:	60e3      	str	r3, [r4, #12]
						strncat(a->_uart2snd,a->_TCP_Local_Server_Port,strlen(a->_TCP_Local_Server_Port));
 80090d4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80090d8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	f503 6493 	add.w	r4, r3, #1176	; 0x498
 80090e2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80090e6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	f103 055c 	add.w	r5, r3, #92	; 0x5c
 80090f0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80090f4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	335c      	adds	r3, #92	; 0x5c
 80090fc:	4618      	mov	r0, r3
 80090fe:	f7f7 f879 	bl	80001f4 <strlen>
 8009102:	4603      	mov	r3, r0
 8009104:	461a      	mov	r2, r3
 8009106:	4629      	mov	r1, r5
 8009108:	4620      	mov	r0, r4
 800910a:	f005 fe62 	bl	800edd2 <strncat>
						strncat(a->_uart2snd,finalizar2,strlen(finalizar2));
 800910e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009112:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	f503 6493 	add.w	r4, r3, #1176	; 0x498
 800911c:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8009120:	4618      	mov	r0, r3
 8009122:	f7f7 f867 	bl	80001f4 <strlen>
 8009126:	4602      	mov	r2, r0
 8009128:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800912c:	4619      	mov	r1, r3
 800912e:	4620      	mov	r0, r4
 8009130:	f005 fe4f 	bl	800edd2 <strncat>
						a->_n_uart2SND=strlen(a->_uart2snd);
 8009134:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009138:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 8009142:	4618      	mov	r0, r3
 8009144:	f7f7 f856 	bl	80001f4 <strlen>
 8009148:	4603      	mov	r3, r0
 800914a:	461a      	mov	r2, r3
 800914c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009150:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	f8c3 2cf4 	str.w	r2, [r3, #3316]	; 0xcf4
						a->_estado=800;
 800915a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800915e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	f44f 7248 	mov.w	r2, #800	; 0x320
 8009168:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						//------Generacion del comando ---------//
						}
				a->_pasos++;
 800916c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009170:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	f8d3 3aac 	ldr.w	r3, [r3, #2732]	; 0xaac
 800917a:	1c5a      	adds	r2, r3, #1
 800917c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009180:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
				if (((a->_enviaruart==0)&&((AT_decode==at_wifi_disconnect)||(AT_decode==at_wifi_connected)||(AT_decode==at_wifi_gotip)||(AT_decode==at_tcp_alrdy_cnntd_err)||(AT_decode==at_tcp_conectado)||(AT_decode==at_tcp_client_desc)||(AT_decode==21)||(AT_decode==22)||(AT_decode==23)))||(a->_ticks > a->_wtchdog))//210419 if (((a->_enviaruart==0)&&((estado==5)||(estado==6)||(estado==7)||(estado==13)||(estado==14)))||(a->_ticks > a->_wtchdog))  //Que analice luego de enviar por uart
 800918a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800918e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8009198:	2b00      	cmp	r3, #0
 800919a:	d123      	bne.n	80091e4 <AT_ESP8266_ND+0x2708>
 800919c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80091a0:	2b0c      	cmp	r3, #12
 80091a2:	d030      	beq.n	8009206 <AT_ESP8266_ND+0x272a>
 80091a4:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80091a8:	2b0d      	cmp	r3, #13
 80091aa:	d02c      	beq.n	8009206 <AT_ESP8266_ND+0x272a>
 80091ac:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80091b0:	2b06      	cmp	r3, #6
 80091b2:	d028      	beq.n	8009206 <AT_ESP8266_ND+0x272a>
 80091b4:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80091b8:	2b10      	cmp	r3, #16
 80091ba:	d024      	beq.n	8009206 <AT_ESP8266_ND+0x272a>
 80091bc:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80091c0:	2b0e      	cmp	r3, #14
 80091c2:	d020      	beq.n	8009206 <AT_ESP8266_ND+0x272a>
 80091c4:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80091c8:	2b14      	cmp	r3, #20
 80091ca:	d01c      	beq.n	8009206 <AT_ESP8266_ND+0x272a>
 80091cc:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80091d0:	2b15      	cmp	r3, #21
 80091d2:	d018      	beq.n	8009206 <AT_ESP8266_ND+0x272a>
 80091d4:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80091d8:	2b16      	cmp	r3, #22
 80091da:	d014      	beq.n	8009206 <AT_ESP8266_ND+0x272a>
 80091dc:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80091e0:	2b17      	cmp	r3, #23
 80091e2:	d010      	beq.n	8009206 <AT_ESP8266_ND+0x272a>
 80091e4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80091e8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	f8d3 2cb8 	ldr.w	r2, [r3, #3256]	; 0xcb8
 80091f2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80091f6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	f8d3 3cc0 	ldr.w	r3, [r3, #3264]	; 0xcc0
 8009200:	429a      	cmp	r2, r3
 8009202:	f340 8313 	ble.w	800982c <AT_ESP8266_ND+0x2d50>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 8009206:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800920a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8009214:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						a->_instruccion=0;	//Finalizo la instrucci�n
 8009218:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800921c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	2200      	movs	r2, #0
 8009224:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						a->_ejecucion=0;
 8009228:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800922c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	2200      	movs	r2, #0
 8009234:	f8c3 2ab4 	str.w	r2, [r3, #2740]	; 0xab4
						a->_ticks=0;
 8009238:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800923c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	2200      	movs	r2, #0
 8009244:	f8c3 2cb8 	str.w	r2, [r3, #3256]	; 0xcb8
					}
			}
			break;
 8009248:	e2f0      	b.n	800982c <AT_ESP8266_ND+0x2d50>
			//--------------------------------------------------------//
			//			   Enviar datos desde TCP Server    			  //
		    //--------------------------------------------------------//
			case 9:
			{
					unsigned char caracteres[8]="";
 800924a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800924e:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8009252:	2200      	movs	r2, #0
 8009254:	601a      	str	r2, [r3, #0]
 8009256:	2200      	movs	r2, #0
 8009258:	605a      	str	r2, [r3, #4]

					if((AT_decode==at_tcp_client_desc)||(AT_decode==at_wifi_disconnect)||(AT_decode==at_fail))
 800925a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800925e:	2b14      	cmp	r3, #20
 8009260:	d007      	beq.n	8009272 <AT_ESP8266_ND+0x2796>
 8009262:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009266:	2b0c      	cmp	r3, #12
 8009268:	d003      	beq.n	8009272 <AT_ESP8266_ND+0x2796>
 800926a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800926e:	2b03      	cmp	r3, #3
 8009270:	d124      	bne.n	80092bc <AT_ESP8266_ND+0x27e0>
				{
					a->_estado=AT_decode;
 8009272:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009276:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8009280:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					a->_instruccion=0;		//Finalizo la instrucci�n
 8009284:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009288:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	2200      	movs	r2, #0
 8009290:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
					a->_ejecucion=0;
 8009294:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009298:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	2200      	movs	r2, #0
 80092a0:	f8c3 2ab4 	str.w	r2, [r3, #2740]	; 0xab4
					a->_subpaso=0;
 80092a4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80092a8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	2200      	movs	r2, #0
 80092b0:	f8c3 2d50 	str.w	r2, [r3, #3408]	; 0xd50
									a->_subpaso=0;
								}
				}
					//a->_ticks=0;						//Reseteo cada vez que entro
			}
			break;
 80092b4:	e2bc      	b.n	8009830 <AT_ESP8266_ND+0x2d54>
 80092b6:	bf00      	nop
 80092b8:	0801044c 	.word	0x0801044c
							if( (a->_enviaruart==1)&&(a->_subpaso==0))
 80092bc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80092c0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 80092ca:	2b01      	cmp	r3, #1
 80092cc:	f040 8102 	bne.w	80094d4 <AT_ESP8266_ND+0x29f8>
 80092d0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80092d4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 80092de:	2b00      	cmp	r3, #0
 80092e0:	f040 80f8 	bne.w	80094d4 <AT_ESP8266_ND+0x29f8>
										a->_ejecucion=1;
 80092e4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80092e8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	2201      	movs	r2, #1
 80092f0:	f8c3 2ab4 	str.w	r2, [r3, #2740]	; 0xab4
										a->_estado=24;
 80092f4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80092f8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	2218      	movs	r2, #24
 8009300:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
										a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 8009304:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009308:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	2200      	movs	r2, #0
 8009310:	f883 2498 	strb.w	r2, [r3, #1176]	; 0x498
										a->_subpaso++;					//Asigno para que no vuelva a entrar
 8009314:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009318:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 8009322:	1c5a      	adds	r2, r3, #1
 8009324:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009328:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	f8c3 2d50 	str.w	r2, [r3, #3408]	; 0xd50
										a->_pasos=0;
 8009332:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009336:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	2200      	movs	r2, #0
 800933e:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
										a->_okenvio[0]='\0';	  //Borro el vector a->_okenvio
 8009342:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009346:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	2200      	movs	r2, #0
 800934e:	f883 2ab8 	strb.w	r2, [r3, #2744]	; 0xab8
										strncat(a->_uart2snd,"AT+CIPSEND=",strlen("AT+CIPSEND="));//strncat(a->_uart2snd,"AT+CIPSEND=0,",strlen("AT+CIPSEND=0,"));
 8009352:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009356:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	f503 6493 	add.w	r4, r3, #1176	; 0x498
 8009360:	4620      	mov	r0, r4
 8009362:	f7f6 ff47 	bl	80001f4 <strlen>
 8009366:	4603      	mov	r3, r0
 8009368:	4423      	add	r3, r4
 800936a:	4a86      	ldr	r2, [pc, #536]	; (8009584 <AT_ESP8266_ND+0x2aa8>)
 800936c:	461c      	mov	r4, r3
 800936e:	4613      	mov	r3, r2
 8009370:	cb07      	ldmia	r3!, {r0, r1, r2}
 8009372:	6020      	str	r0, [r4, #0]
 8009374:	6061      	str	r1, [r4, #4]
 8009376:	60a2      	str	r2, [r4, #8]
										INTOA(a->_id_conn, caracteres);
 8009378:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800937c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	f8d3 3a98 	ldr.w	r3, [r3, #2712]	; 0xa98
 8009386:	f107 020c 	add.w	r2, r7, #12
 800938a:	4611      	mov	r1, r2
 800938c:	4618      	mov	r0, r3
 800938e:	f005 fa99 	bl	800e8c4 <INTOA>
										strncat(a->_uart2snd,caracteres,strlen(caracteres));
 8009392:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009396:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	f503 6493 	add.w	r4, r3, #1176	; 0x498
 80093a0:	f107 030c 	add.w	r3, r7, #12
 80093a4:	4618      	mov	r0, r3
 80093a6:	f7f6 ff25 	bl	80001f4 <strlen>
 80093aa:	4602      	mov	r2, r0
 80093ac:	f107 030c 	add.w	r3, r7, #12
 80093b0:	4619      	mov	r1, r3
 80093b2:	4620      	mov	r0, r4
 80093b4:	f005 fd0d 	bl	800edd2 <strncat>
										strncat(a->_uart2snd,",",1);
 80093b8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80093bc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	f503 6493 	add.w	r4, r3, #1176	; 0x498
 80093c6:	4620      	mov	r0, r4
 80093c8:	f7f6 ff14 	bl	80001f4 <strlen>
 80093cc:	4603      	mov	r3, r0
 80093ce:	4423      	add	r3, r4
 80093d0:	496d      	ldr	r1, [pc, #436]	; (8009588 <AT_ESP8266_ND+0x2aac>)
 80093d2:	461a      	mov	r2, r3
 80093d4:	460b      	mov	r3, r1
 80093d6:	881b      	ldrh	r3, [r3, #0]
 80093d8:	8013      	strh	r3, [r2, #0]
										INTOA(a->_n_D2SND, caracteres);	//INTOA(strlen(a->_data2SND), caracteres);		        //Longitud  de datos a enviar
 80093da:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80093de:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	f8d3 3cf0 	ldr.w	r3, [r3, #3312]	; 0xcf0
 80093e8:	f107 020c 	add.w	r2, r7, #12
 80093ec:	4611      	mov	r1, r2
 80093ee:	4618      	mov	r0, r3
 80093f0:	f005 fa68 	bl	800e8c4 <INTOA>
										strncat(a->_uart2snd,caracteres,strlen(caracteres));//strncat(a->_uart2snd,caracteres,strlen(caracteres));//AT+CIPSEND="cdad caracteres"
 80093f4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80093f8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	f503 6493 	add.w	r4, r3, #1176	; 0x498
 8009402:	f107 030c 	add.w	r3, r7, #12
 8009406:	4618      	mov	r0, r3
 8009408:	f7f6 fef4 	bl	80001f4 <strlen>
 800940c:	4602      	mov	r2, r0
 800940e:	f107 030c 	add.w	r3, r7, #12
 8009412:	4619      	mov	r1, r3
 8009414:	4620      	mov	r0, r4
 8009416:	f005 fcdc 	bl	800edd2 <strncat>
										strcpy(a->_okenvio,a->_uart2snd);
 800941a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800941e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	f603 22b8 	addw	r2, r3, #2744	; 0xab8
 8009428:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800942c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 8009436:	4619      	mov	r1, r3
 8009438:	4610      	mov	r0, r2
 800943a:	f005 fdab 	bl	800ef94 <strcpy>
										strncat(a->_uart2snd,finalizar2,2);//strncat(a->_uart2snd,finalizar2,strlen(finalizar2));
 800943e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009442:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 800944c:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 8009450:	2202      	movs	r2, #2
 8009452:	4618      	mov	r0, r3
 8009454:	f005 fcbd 	bl	800edd2 <strncat>
										a->_n_uart2SND=strlen(a->_uart2snd);
 8009458:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800945c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 8009466:	4618      	mov	r0, r3
 8009468:	f7f6 fec4 	bl	80001f4 <strlen>
 800946c:	4603      	mov	r3, r0
 800946e:	461a      	mov	r2, r3
 8009470:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009474:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	f8c3 2cf4 	str.w	r2, [r3, #3316]	; 0xcf4
										strncat(a->_okenvio,"\r\r\n\r\nOK\r\n> ",strlen("\r\r\n\r\nOK\r\n> "));
 800947e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009482:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	f603 24b8 	addw	r4, r3, #2744	; 0xab8
 800948c:	4620      	mov	r0, r4
 800948e:	f7f6 feb1 	bl	80001f4 <strlen>
 8009492:	4603      	mov	r3, r0
 8009494:	4423      	add	r3, r4
 8009496:	4a3d      	ldr	r2, [pc, #244]	; (800958c <AT_ESP8266_ND+0x2ab0>)
 8009498:	461c      	mov	r4, r3
 800949a:	4613      	mov	r3, r2
 800949c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800949e:	6020      	str	r0, [r4, #0]
 80094a0:	6061      	str	r1, [r4, #4]
 80094a2:	60a2      	str	r2, [r4, #8]
										a->_debug_count3++;
 80094a4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80094a8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	f8d3 3d10 	ldr.w	r3, [r3, #3344]	; 0xd10
 80094b2:	1c5a      	adds	r2, r3, #1
 80094b4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80094b8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	f8c3 2d10 	str.w	r2, [r3, #3344]	; 0xd10
										a->_estado=900;
 80094c2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80094c6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	f44f 7261 	mov.w	r2, #900	; 0x384
 80094d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								a->_pasos++;
 80094d4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80094d8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	f8d3 3aac 	ldr.w	r3, [r3, #2732]	; 0xaac
 80094e2:	1c5a      	adds	r2, r3, #1
 80094e4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80094e8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
							if ((a->_enviaruart==0)&&(AT_decode!=at_tcp_enviado_ok)&&((strcmp(a->_uartRCVD,a->_okenvio)==0)||(AT_decode==at_ok)||(AT_decode==20)||((a->_ticks > a->_wtchdog)&&(a->_subpaso==1))))
 80094f2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80094f6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8009500:	2b00      	cmp	r3, #0
 8009502:	f040 80c3 	bne.w	800968c <AT_ESP8266_ND+0x2bb0>
 8009506:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800950a:	2b16      	cmp	r3, #22
 800950c:	f000 80be 	beq.w	800968c <AT_ESP8266_ND+0x2bb0>
 8009510:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009514:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	f503 62d3 	add.w	r2, r3, #1688	; 0x698
 800951e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009522:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	f603 23b8 	addw	r3, r3, #2744	; 0xab8
 800952c:	4619      	mov	r1, r3
 800952e:	4610      	mov	r0, r2
 8009530:	f7f6 fe56 	bl	80001e0 <strcmp>
 8009534:	4603      	mov	r3, r0
 8009536:	2b00      	cmp	r3, #0
 8009538:	d02a      	beq.n	8009590 <AT_ESP8266_ND+0x2ab4>
 800953a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800953e:	2b01      	cmp	r3, #1
 8009540:	d026      	beq.n	8009590 <AT_ESP8266_ND+0x2ab4>
 8009542:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009546:	2b14      	cmp	r3, #20
 8009548:	d022      	beq.n	8009590 <AT_ESP8266_ND+0x2ab4>
 800954a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800954e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	f8d3 2cb8 	ldr.w	r2, [r3, #3256]	; 0xcb8
 8009558:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800955c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	f8d3 3cc0 	ldr.w	r3, [r3, #3264]	; 0xcc0
 8009566:	429a      	cmp	r2, r3
 8009568:	f340 8090 	ble.w	800968c <AT_ESP8266_ND+0x2bb0>
 800956c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009570:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 800957a:	2b01      	cmp	r3, #1
 800957c:	f040 8086 	bne.w	800968c <AT_ESP8266_ND+0x2bb0>
 8009580:	e006      	b.n	8009590 <AT_ESP8266_ND+0x2ab4>
 8009582:	bf00      	nop
 8009584:	08010434 	.word	0x08010434
 8009588:	0801045c 	.word	0x0801045c
 800958c:	08010440 	.word	0x08010440
								if((a->_ticks > a->_wtchdog)&&(a->_subpaso==1))
 8009590:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009594:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	f8d3 2cb8 	ldr.w	r2, [r3, #3256]	; 0xcb8
 800959e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80095a2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	f8d3 3cc0 	ldr.w	r3, [r3, #3264]	; 0xcc0
 80095ac:	429a      	cmp	r2, r3
 80095ae:	dd17      	ble.n	80095e0 <AT_ESP8266_ND+0x2b04>
 80095b0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80095b4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 80095be:	2b01      	cmp	r3, #1
 80095c0:	d10e      	bne.n	80095e0 <AT_ESP8266_ND+0x2b04>
									a->_debug_count7++;//-----------------------------Cuento los que entran por timeout
 80095c2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80095c6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	f8d3 3d20 	ldr.w	r3, [r3, #3360]	; 0xd20
 80095d0:	1c5a      	adds	r2, r3, #1
 80095d2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80095d6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20
								a->_debug_count4++;
 80095e0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80095e4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	f8d3 3d14 	ldr.w	r3, [r3, #3348]	; 0xd14
 80095ee:	1c5a      	adds	r2, r3, #1
 80095f0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80095f4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
								a->_subpaso++;
 80095fe:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009602:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 800960c:	1c5a      	adds	r2, r3, #1
 800960e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009612:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	f8c3 2d50 	str.w	r2, [r3, #3408]	; 0xd50
								a->_enviaruart=1;
 800961c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009620:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	2201      	movs	r2, #1
 8009628:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
								CopiaVector(a->_uart2snd,a->_data2SND,a->_n_D2SND,1,'a');//strcpy(a->_uart2snd,a->_data2SND);
 800962c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009630:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	f503 6093 	add.w	r0, r3, #1176	; 0x498
 800963a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800963e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	f503 7126 	add.w	r1, r3, #664	; 0x298
 8009648:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800964c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	f8d3 2cf0 	ldr.w	r2, [r3, #3312]	; 0xcf0
 8009656:	2361      	movs	r3, #97	; 0x61
 8009658:	9300      	str	r3, [sp, #0]
 800965a:	2301      	movs	r3, #1
 800965c:	f005 f966 	bl	800e92c <CopiaVector>
								a->_n_uart2SND=a->_n_D2SND; //Asigno cantidad de elementos del vector
 8009660:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009664:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	f8d3 2cf0 	ldr.w	r2, [r3, #3312]	; 0xcf0
 800966e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009672:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	f8c3 2cf4 	str.w	r2, [r3, #3316]	; 0xcf4
								a->_ticks=0;//----------------------------------Evito que entre de toque en el siguiente
 800967c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009680:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	2200      	movs	r2, #0
 8009688:	f8c3 2cb8 	str.w	r2, [r3, #3256]	; 0xcb8
							if((a->_estado==900)&&((AT_decode==at_tcp_enviado_ok)||(AT_decode==at_wifi_connected)||(AT_decode==at_wifi_gotip)||(a->_ticks > a->_wtchdog)||(AT_decode==at_wifi_disconnect)||(AT_decode==at_tcp_client_desc)||(AT_decode==at_tcp_snd_err)||(AT_decode==at_tcp_enviado_error)||(AT_decode==22)||(AT_decode==25)))
 800968c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009690:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800969a:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 800969e:	f040 80c7 	bne.w	8009830 <AT_ESP8266_ND+0x2d54>
 80096a2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80096a6:	2b16      	cmp	r3, #22
 80096a8:	d030      	beq.n	800970c <AT_ESP8266_ND+0x2c30>
 80096aa:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80096ae:	2b0d      	cmp	r3, #13
 80096b0:	d02c      	beq.n	800970c <AT_ESP8266_ND+0x2c30>
 80096b2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80096b6:	2b06      	cmp	r3, #6
 80096b8:	d028      	beq.n	800970c <AT_ESP8266_ND+0x2c30>
 80096ba:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80096be:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	f8d3 2cb8 	ldr.w	r2, [r3, #3256]	; 0xcb8
 80096c8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80096cc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	f8d3 3cc0 	ldr.w	r3, [r3, #3264]	; 0xcc0
 80096d6:	429a      	cmp	r2, r3
 80096d8:	dc18      	bgt.n	800970c <AT_ESP8266_ND+0x2c30>
 80096da:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80096de:	2b0c      	cmp	r3, #12
 80096e0:	d014      	beq.n	800970c <AT_ESP8266_ND+0x2c30>
 80096e2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80096e6:	2b14      	cmp	r3, #20
 80096e8:	d010      	beq.n	800970c <AT_ESP8266_ND+0x2c30>
 80096ea:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80096ee:	2b17      	cmp	r3, #23
 80096f0:	d00c      	beq.n	800970c <AT_ESP8266_ND+0x2c30>
 80096f2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80096f6:	2b18      	cmp	r3, #24
 80096f8:	d008      	beq.n	800970c <AT_ESP8266_ND+0x2c30>
 80096fa:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80096fe:	2b16      	cmp	r3, #22
 8009700:	d004      	beq.n	800970c <AT_ESP8266_ND+0x2c30>
 8009702:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009706:	2b19      	cmp	r3, #25
 8009708:	f040 8092 	bne.w	8009830 <AT_ESP8266_ND+0x2d54>
									a->_debug_count5++;
 800970c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009710:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	f8d3 3d18 	ldr.w	r3, [r3, #3352]	; 0xd18
 800971a:	1c5a      	adds	r2, r3, #1
 800971c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009720:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	f8c3 2d18 	str.w	r2, [r3, #3352]	; 0xd18
									if(a->_ticks > a->_wtchdog)
 800972a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800972e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	f8d3 2cb8 	ldr.w	r2, [r3, #3256]	; 0xcb8
 8009738:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800973c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	f8d3 3cc0 	ldr.w	r3, [r3, #3264]	; 0xcc0
 8009746:	429a      	cmp	r2, r3
 8009748:	dd25      	ble.n	8009796 <AT_ESP8266_ND+0x2cba>
										a->_debug_count8++;
 800974a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800974e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	f8d3 3d24 	ldr.w	r3, [r3, #3364]	; 0xd24
 8009758:	1c5a      	adds	r2, r3, #1
 800975a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800975e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	f8c3 2d24 	str.w	r2, [r3, #3364]	; 0xd24
										a->_subpaso++;
 8009768:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800976c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 8009776:	1c5a      	adds	r2, r3, #1
 8009778:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800977c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	f8c3 2d50 	str.w	r2, [r3, #3408]	; 0xd50
										a->_ticks=0;
 8009786:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800978a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	2200      	movs	r2, #0
 8009792:	f8c3 2cb8 	str.w	r2, [r3, #3256]	; 0xcb8
									if((a->_subpaso > 2)&&(AT_decode!=at_tcp_client_desc)&&(AT_decode!=at_wifi_disconnect))//--------------No considero los etados de fallas por TCP o WIFI caido
 8009796:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800979a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 80097a4:	2b02      	cmp	r3, #2
 80097a6:	dd07      	ble.n	80097b8 <AT_ESP8266_ND+0x2cdc>
 80097a8:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80097ac:	2b14      	cmp	r3, #20
 80097ae:	d003      	beq.n	80097b8 <AT_ESP8266_ND+0x2cdc>
 80097b0:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80097b4:	2b0c      	cmp	r3, #12
 80097b6:	d108      	bne.n	80097ca <AT_ESP8266_ND+0x2cee>
										a->_estado=AT_decode;	//Devuelvo el estado
 80097b8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80097bc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 80097c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									a->_instruccion=0;		//Finalizo la instrucci�n
 80097ca:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80097ce:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	2200      	movs	r2, #0
 80097d6:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
									a->_ejecucion=0;
 80097da:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80097de:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	2200      	movs	r2, #0
 80097e6:	f8c3 2ab4 	str.w	r2, [r3, #2740]	; 0xab4
									a->_subpaso=0;
 80097ea:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80097ee:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	2200      	movs	r2, #0
 80097f6:	f8c3 2d50 	str.w	r2, [r3, #3408]	; 0xd50
			break;
 80097fa:	e019      	b.n	8009830 <AT_ESP8266_ND+0x2d54>
			default:		//Si no hay instruccion paso el estado a la estructura
			{
				a->_estado=AT_decode;
 80097fc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009800:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 800980a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
			}
			break;
 800980e:	e010      	b.n	8009832 <AT_ESP8266_ND+0x2d56>
			break;
 8009810:	bf00      	nop
 8009812:	e00e      	b.n	8009832 <AT_ESP8266_ND+0x2d56>
			break;
 8009814:	bf00      	nop
 8009816:	e00c      	b.n	8009832 <AT_ESP8266_ND+0x2d56>
			break;
 8009818:	bf00      	nop
 800981a:	e00a      	b.n	8009832 <AT_ESP8266_ND+0x2d56>
			break;
 800981c:	bf00      	nop
 800981e:	e008      	b.n	8009832 <AT_ESP8266_ND+0x2d56>
			break;
 8009820:	bf00      	nop
 8009822:	e006      	b.n	8009832 <AT_ESP8266_ND+0x2d56>
			break;
 8009824:	bf00      	nop
 8009826:	e004      	b.n	8009832 <AT_ESP8266_ND+0x2d56>
			break;
 8009828:	bf00      	nop
 800982a:	e002      	b.n	8009832 <AT_ESP8266_ND+0x2d56>
			break;
 800982c:	bf00      	nop
 800982e:	e000      	b.n	8009832 <AT_ESP8266_ND+0x2d56>
			break;
 8009830:	bf00      	nop
		}


		a->_uartRCVD[0]='\0'; //200829  Elimino el registro de recepcion, solo se vuelve a actualizar en TIMEOUT
 8009832:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009836:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	2200      	movs	r2, #0
 800983e:	f883 2698 	strb.w	r2, [r3, #1688]	; 0x698
		a->_n_orig=0;
 8009842:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009846:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	2200      	movs	r2, #0
 800984e:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4

		return (a->_estado);
 8009852:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009856:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88

 }
 8009860:	4618      	mov	r0, r3
 8009862:	f507 7715 	add.w	r7, r7, #596	; 0x254
 8009866:	46bd      	mov	sp, r7
 8009868:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800986a:	bf00      	nop

0800986c <WiFi_Conn_ND>:
 }
 /*--------------------------------------------------------------*/

// ACÁ ENTRO SIEMPRE ENTRO NO DEPENDO DE RECIBIR LOS DATOS
int WiFi_Conn_ND( struct WIFI *b, UART_HandleTypeDef *PORTSER, int EN_DEBUG )
{
 800986c:	b580      	push	{r7, lr}
 800986e:	b084      	sub	sp, #16
 8009870:	af00      	add	r7, sp, #0
 8009872:	60f8      	str	r0, [r7, #12]
 8009874:	60b9      	str	r1, [r7, #8]
 8009876:	607a      	str	r2, [r7, #4]
		switch (b->_estado_conexion)
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800987e:	f240 328d 	movw	r2, #909	; 0x38d
 8009882:	4293      	cmp	r3, r2
 8009884:	f001 83bc 	beq.w	800b000 <WiFi_Conn_ND+0x1794>
 8009888:	f240 328d 	movw	r2, #909	; 0x38d
 800988c:	4293      	cmp	r3, r2
 800988e:	f301 8451 	bgt.w	800b134 <WiFi_Conn_ND+0x18c8>
 8009892:	f240 3289 	movw	r2, #905	; 0x389
 8009896:	4293      	cmp	r3, r2
 8009898:	f001 8329 	beq.w	800aeee <WiFi_Conn_ND+0x1682>
 800989c:	f240 3289 	movw	r2, #905	; 0x389
 80098a0:	4293      	cmp	r3, r2
 80098a2:	f301 8447 	bgt.w	800b134 <WiFi_Conn_ND+0x18c8>
 80098a6:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 80098aa:	f001 8218 	beq.w	800acde <WiFi_Conn_ND+0x1472>
 80098ae:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 80098b2:	f301 843f 	bgt.w	800b134 <WiFi_Conn_ND+0x18c8>
 80098b6:	f240 3229 	movw	r2, #809	; 0x329
 80098ba:	4293      	cmp	r3, r2
 80098bc:	f301 843a 	bgt.w	800b134 <WiFi_Conn_ND+0x18c8>
 80098c0:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80098c4:	f280 80a4 	bge.w	8009a10 <WiFi_Conn_ND+0x1a4>
 80098c8:	f240 22c5 	movw	r2, #709	; 0x2c5
 80098cc:	4293      	cmp	r3, r2
 80098ce:	f000 874c 	beq.w	800a76a <WiFi_Conn_ND+0xefe>
 80098d2:	f240 22c5 	movw	r2, #709	; 0x2c5
 80098d6:	4293      	cmp	r3, r2
 80098d8:	f301 842c 	bgt.w	800b134 <WiFi_Conn_ND+0x18c8>
 80098dc:	f240 22c1 	movw	r2, #705	; 0x2c1
 80098e0:	4293      	cmp	r3, r2
 80098e2:	f000 86c3 	beq.w	800a66c <WiFi_Conn_ND+0xe00>
 80098e6:	f240 22c1 	movw	r2, #705	; 0x2c1
 80098ea:	4293      	cmp	r3, r2
 80098ec:	f301 8422 	bgt.w	800b134 <WiFi_Conn_ND+0x18c8>
 80098f0:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 80098f4:	f000 8602 	beq.w	800a4fc <WiFi_Conn_ND+0xc90>
 80098f8:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 80098fc:	f301 841a 	bgt.w	800b134 <WiFi_Conn_ND+0x18c8>
 8009900:	f240 2261 	movw	r2, #609	; 0x261
 8009904:	4293      	cmp	r3, r2
 8009906:	f000 8588 	beq.w	800a41a <WiFi_Conn_ND+0xbae>
 800990a:	f240 2261 	movw	r2, #609	; 0x261
 800990e:	4293      	cmp	r3, r2
 8009910:	f301 8410 	bgt.w	800b134 <WiFi_Conn_ND+0x18c8>
 8009914:	f240 225d 	movw	r2, #605	; 0x25d
 8009918:	4293      	cmp	r3, r2
 800991a:	f000 851d 	beq.w	800a358 <WiFi_Conn_ND+0xaec>
 800991e:	f240 225d 	movw	r2, #605	; 0x25d
 8009922:	4293      	cmp	r3, r2
 8009924:	f301 8406 	bgt.w	800b134 <WiFi_Conn_ND+0x18c8>
 8009928:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 800992c:	f000 84b9 	beq.w	800a2a2 <WiFi_Conn_ND+0xa36>
 8009930:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8009934:	f301 83fe 	bgt.w	800b134 <WiFi_Conn_ND+0x18c8>
 8009938:	f240 12fd 	movw	r2, #509	; 0x1fd
 800993c:	4293      	cmp	r3, r2
 800993e:	f000 844f 	beq.w	800a1e0 <WiFi_Conn_ND+0x974>
 8009942:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 8009946:	f281 83f5 	bge.w	800b134 <WiFi_Conn_ND+0x18c8>
 800994a:	f240 12f9 	movw	r2, #505	; 0x1f9
 800994e:	4293      	cmp	r3, r2
 8009950:	f000 8405 	beq.w	800a15e <WiFi_Conn_ND+0x8f2>
 8009954:	f5b3 7ffd 	cmp.w	r3, #506	; 0x1fa
 8009958:	f281 83ec 	bge.w	800b134 <WiFi_Conn_ND+0x18c8>
 800995c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8009960:	f000 8390 	beq.w	800a084 <WiFi_Conn_ND+0x818>
 8009964:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8009968:	f301 83e4 	bgt.w	800b134 <WiFi_Conn_ND+0x18c8>
 800996c:	f240 1299 	movw	r2, #409	; 0x199
 8009970:	4293      	cmp	r3, r2
 8009972:	f000 8331 	beq.w	8009fd8 <WiFi_Conn_ND+0x76c>
 8009976:	f5b3 7fcd 	cmp.w	r3, #410	; 0x19a
 800997a:	f281 83db 	bge.w	800b134 <WiFi_Conn_ND+0x18c8>
 800997e:	f240 1295 	movw	r2, #405	; 0x195
 8009982:	4293      	cmp	r3, r2
 8009984:	f000 82ec 	beq.w	8009f60 <WiFi_Conn_ND+0x6f4>
 8009988:	f5b3 7fcb 	cmp.w	r3, #406	; 0x196
 800998c:	f281 83d2 	bge.w	800b134 <WiFi_Conn_ND+0x18c8>
 8009990:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8009994:	f000 8263 	beq.w	8009e5e <WiFi_Conn_ND+0x5f2>
 8009998:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800999c:	f301 83ca 	bgt.w	800b134 <WiFi_Conn_ND+0x18c8>
 80099a0:	f240 1235 	movw	r2, #309	; 0x135
 80099a4:	4293      	cmp	r3, r2
 80099a6:	f000 8234 	beq.w	8009e12 <WiFi_Conn_ND+0x5a6>
 80099aa:	f5b3 7f9b 	cmp.w	r3, #310	; 0x136
 80099ae:	f281 83c1 	bge.w	800b134 <WiFi_Conn_ND+0x18c8>
 80099b2:	f240 1231 	movw	r2, #305	; 0x131
 80099b6:	4293      	cmp	r3, r2
 80099b8:	f000 8226 	beq.w	8009e08 <WiFi_Conn_ND+0x59c>
 80099bc:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 80099c0:	f281 83b8 	bge.w	800b134 <WiFi_Conn_ND+0x18c8>
 80099c4:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80099c8:	f000 81ca 	beq.w	8009d60 <WiFi_Conn_ND+0x4f4>
 80099cc:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80099d0:	f301 83b0 	bgt.w	800b134 <WiFi_Conn_ND+0x18c8>
 80099d4:	2bd1      	cmp	r3, #209	; 0xd1
 80099d6:	f000 8163 	beq.w	8009ca0 <WiFi_Conn_ND+0x434>
 80099da:	2bd1      	cmp	r3, #209	; 0xd1
 80099dc:	f301 83aa 	bgt.w	800b134 <WiFi_Conn_ND+0x18c8>
 80099e0:	2bcd      	cmp	r3, #205	; 0xcd
 80099e2:	f000 8123 	beq.w	8009c2c <WiFi_Conn_ND+0x3c0>
 80099e6:	2bcd      	cmp	r3, #205	; 0xcd
 80099e8:	f301 83a4 	bgt.w	800b134 <WiFi_Conn_ND+0x18c8>
 80099ec:	2bc8      	cmp	r3, #200	; 0xc8
 80099ee:	f000 80c6 	beq.w	8009b7e <WiFi_Conn_ND+0x312>
 80099f2:	2bc8      	cmp	r3, #200	; 0xc8
 80099f4:	f301 839e 	bgt.w	800b134 <WiFi_Conn_ND+0x18c8>
 80099f8:	2b6d      	cmp	r3, #109	; 0x6d
 80099fa:	f000 8088 	beq.w	8009b0e <WiFi_Conn_ND+0x2a2>
 80099fe:	2b6d      	cmp	r3, #109	; 0x6d
 8009a00:	f301 8398 	bgt.w	800b134 <WiFi_Conn_ND+0x18c8>
 8009a04:	2b64      	cmp	r3, #100	; 0x64
 8009a06:	d01f      	beq.n	8009a48 <WiFi_Conn_ND+0x1dc>
 8009a08:	2b69      	cmp	r3, #105	; 0x69
 8009a0a:	d06b      	beq.n	8009ae4 <WiFi_Conn_ND+0x278>
 8009a0c:	f001 bb92 	b.w	800b134 <WiFi_Conn_ND+0x18c8>
 8009a10:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
 8009a14:	2b09      	cmp	r3, #9
 8009a16:	f201 838d 	bhi.w	800b134 <WiFi_Conn_ND+0x18c8>
 8009a1a:	a201      	add	r2, pc, #4	; (adr r2, 8009a20 <WiFi_Conn_ND+0x1b4>)
 8009a1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a20:	0800a881 	.word	0x0800a881
 8009a24:	0800b135 	.word	0x0800b135
 8009a28:	0800b135 	.word	0x0800b135
 8009a2c:	0800b135 	.word	0x0800b135
 8009a30:	0800b135 	.word	0x0800b135
 8009a34:	0800a94f 	.word	0x0800a94f
 8009a38:	0800a9f9 	.word	0x0800a9f9
 8009a3c:	0800aaa3 	.word	0x0800aaa3
 8009a40:	0800ab4d 	.word	0x0800ab4d
 8009a44:	0800abf7 	.word	0x0800abf7
				//la manda por puerto serie, hasta que no se reciba info, b->_estado_conexion seguirá con el valor CAMBIAR MODO EN CURSO ya que//
				//al no recibirse info, no se procesa el AT_ESP8266_ND y no se le asigna valores leidos a b->_estado que no es mas que lo que //
				//se está recbibiendo por puerto serie. Los valores leídos de b->_estado son leidos por WiFi_COnn_ND donde se asiga _estado_conexion																				  //
				//Una vez recibido datos por puerto serie, se toma la decisión de realizar el cambio de estado								  //
				//----------------------------------------------------------------------------------------------------------------------------//
				if((b->_estado!=CAMBIAR_MODO_EN_CURSO)&&(b->_estado!=at_cambiar_modo1_ok)
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a4e:	2b64      	cmp	r3, #100	; 0x64
 8009a50:	d033      	beq.n	8009aba <WiFi_Conn_ND+0x24e>
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a58:	2b02      	cmp	r3, #2
 8009a5a:	d02e      	beq.n	8009aba <WiFi_Conn_ND+0x24e>
													  &&(b->_estado!=at_tcp_enviado_ok))	//Si estoy conectando, no vuelvo a conectar.
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a62:	2b16      	cmp	r3, #22
 8009a64:	d029      	beq.n	8009aba <WiFi_Conn_ND+0x24e>
				{
						Cambiar_CWMODE(b);
 8009a66:	68f8      	ldr	r0, [r7, #12]
 8009a68:	f7fc fea2 	bl	80067b0 <Cambiar_CWMODE>
						//if(b->_enviaruart==1)
							//{
						b->_estado=AT_ESP8266_ND(b);  //Genero las instrucciones a enviar, aquí estado ya es CAMBIAR MODO EN CURSO, siguiente ingreso no vengo por aquí.
 8009a6c:	68f8      	ldr	r0, [r7, #12]
 8009a6e:	f7fd f835 	bl	8006adc <AT_ESP8266_ND>
 8009a72:	4602      	mov	r2, r0
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_enviaruart=0;
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	2200      	movs	r2, #0
 8009a7e:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
						if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	f8d3 3d5c 	ldr.w	r3, [r3, #3420]	; 0xd5c
 8009a88:	2b01      	cmp	r3, #1
 8009a8a:	d109      	bne.n	8009aa0 <WiFi_Conn_ND+0x234>
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	f503 6293 	add.w	r2, r3, #1176	; 0x498
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	f8d3 3cf4 	ldr.w	r3, [r3, #3316]	; 0xcf4
 8009a98:	4619      	mov	r1, r3
 8009a9a:	4610      	mov	r0, r2
 8009a9c:	f7f7 fdcc 	bl	8001638 <ITM0_Write>
						HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	f503 6193 	add.w	r1, r3, #1176	; 0x498
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	f8d3 3cf4 	ldr.w	r3, [r3, #3316]	; 0xcf4
 8009aac:	b29a      	uxth	r2, r3
 8009aae:	2364      	movs	r3, #100	; 0x64
 8009ab0:	68b8      	ldr	r0, [r7, #8]
 8009ab2:	f7fb fdd9 	bl	8005668 <HAL_UART_Transmit>
					if((b->_estado==at_cambiar_modo1_err)) b->_estado_conexion=CAMBIAR_MODO_ERROR; //210630 Se agrega ATDecode 4, 11 y 12	//Cambio de estado erroneo

					//----Condiciones de cambio de estado
				}
			}
			break;
 8009ab6:	f001 bb0e 	b.w	800b0d6 <WiFi_Conn_ND+0x186a>
					if((b->_estado==at_cambiar_modo1_ok)) b->_estado_conexion=CAMBIAR_MODO_OK; 	//Cambio de estado exitoso
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ac0:	2b02      	cmp	r3, #2
 8009ac2:	d103      	bne.n	8009acc <WiFi_Conn_ND+0x260>
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	226d      	movs	r2, #109	; 0x6d
 8009ac8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					if((b->_estado==at_cambiar_modo1_err)) b->_estado_conexion=CAMBIAR_MODO_ERROR; //210630 Se agrega ATDecode 4, 11 y 12	//Cambio de estado erroneo
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ad2:	2b03      	cmp	r3, #3
 8009ad4:	f041 82ff 	bne.w	800b0d6 <WiFi_Conn_ND+0x186a>
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	2269      	movs	r2, #105	; 0x69
 8009adc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			break;
 8009ae0:	f001 baf9 	b.w	800b0d6 <WiFi_Conn_ND+0x186a>
			case CAMBIAR_MODO_ERROR://Error al cambiar de modo
			{
				Cambiar_CWMODE(b);
 8009ae4:	68f8      	ldr	r0, [r7, #12]
 8009ae6:	f7fc fe63 	bl	80067b0 <Cambiar_CWMODE>
				b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	2264      	movs	r2, #100	; 0x64
 8009aee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				b->_estado=0;
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	2200      	movs	r2, #0
 8009af6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
				b->_n_orig=0; //Borro el vector RX
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	2200      	movs	r2, #0
 8009afe:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4

				b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	2200      	movs	r2, #0
 8009b06:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
			}
			break;
 8009b0a:	f001 bb13 	b.w	800b134 <WiFi_Conn_ND+0x18c8>
			case CAMBIAR_MODO_OK ://Cambio de modo OK
			{
//220818
				if (b->_TCP_Local_Server_EN)//
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d00c      	beq.n	8009b32 <WiFi_Conn_ND+0x2c6>
				{//
					MUX(b);	//								//Si me conecté seteo las múltiples Conexiones
 8009b18:	68f8      	ldr	r0, [r7, #12]
 8009b1a:	f7fc fe75 	bl	8006808 <MUX>
					b->_estado_conexion=MUX_CONN_EN_CURSO;//
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8009b24:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;//
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	2200      	movs	r2, #0
 8009b2c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8009b30:	e00e      	b.n	8009b50 <WiFi_Conn_ND+0x2e4>

				}//
				else//
				{//
					ConectarWIFI(b);
 8009b32:	68f8      	ldr	r0, [r7, #12]
 8009b34:	f7fc fe52 	bl	80067dc <ConectarWIFI>
					b->_estado_conexion=CONEXION_EN_CURSO;
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	22c8      	movs	r2, #200	; 0xc8
 8009b3c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	2200      	movs	r2, #0
 8009b44:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	2200      	movs	r2, #0
 8009b4c:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
				}//

				if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b56:	2b04      	cmp	r3, #4
 8009b58:	f041 82bf 	bne.w	800b0da <WiFi_Conn_ND+0x186e>
					{
						Cambiar_CWMODE(b);
 8009b5c:	68f8      	ldr	r0, [r7, #12]
 8009b5e:	f7fc fe27 	bl	80067b0 <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	2264      	movs	r2, #100	; 0x64
 8009b66:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	2200      	movs	r2, #0
 8009b6e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	2200      	movs	r2, #0
 8009b76:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
			}
			break;
 8009b7a:	f001 baae 	b.w	800b0da <WiFi_Conn_ND+0x186e>
													&&(b->_estado!=at_wifi_pass_err)
													&&(b->_estado!=at_wifi_name_err)
													&&(b->_estado!=at_wifi_disconnect)
													&&(b->_estado!=at_wifi_connected)
													&&(b->_estado!=at_wifi_gotip)))	//Si estoy conectando, no vuelvo a conectar.*/
				if((b->_estado!=CONEXION_EN_CURSO)&&((b->_estado > at_wifi_connected)||(b->_estado==0)))
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b84:	2bc8      	cmp	r3, #200	; 0xc8
 8009b86:	d036      	beq.n	8009bf6 <WiFi_Conn_ND+0x38a>
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b8e:	2b0d      	cmp	r3, #13
 8009b90:	dc04      	bgt.n	8009b9c <WiFi_Conn_ND+0x330>
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d12c      	bne.n	8009bf6 <WiFi_Conn_ND+0x38a>
				{
						ConectarWIFI(b);
 8009b9c:	68f8      	ldr	r0, [r7, #12]
 8009b9e:	f7fc fe1d 	bl	80067dc <ConectarWIFI>
						if(b->_enviaruart==1)
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8009ba8:	2b01      	cmp	r3, #1
 8009baa:	d124      	bne.n	8009bf6 <WiFi_Conn_ND+0x38a>
							{
								b->_estado=AT_ESP8266_ND(b);
 8009bac:	68f8      	ldr	r0, [r7, #12]
 8009bae:	f7fc ff95 	bl	8006adc <AT_ESP8266_ND>
 8009bb2:	4602      	mov	r2, r0
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_enviaruart=0;
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	2200      	movs	r2, #0
 8009bbe:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	f8d3 3d5c 	ldr.w	r3, [r3, #3420]	; 0xd5c
 8009bc8:	2b01      	cmp	r3, #1
 8009bca:	d109      	bne.n	8009be0 <WiFi_Conn_ND+0x374>
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	f503 6293 	add.w	r2, r3, #1176	; 0x498
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	f8d3 3cf4 	ldr.w	r3, [r3, #3316]	; 0xcf4
 8009bd8:	4619      	mov	r1, r3
 8009bda:	4610      	mov	r0, r2
 8009bdc:	f7f7 fd2c 	bl	8001638 <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	f503 6193 	add.w	r1, r3, #1176	; 0x498
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	f8d3 3cf4 	ldr.w	r3, [r3, #3316]	; 0xcf4
 8009bec:	b29a      	uxth	r2, r3
 8009bee:	2364      	movs	r3, #100	; 0x64
 8009bf0:	68b8      	ldr	r0, [r7, #8]
 8009bf2:	f7fb fd39 	bl	8005668 <HAL_UART_Transmit>
				}

				//----Condiciones de cambio de estado
				//OJO, luego de esto el módulo arroja un OK, si se envía algo antes del OK aparece un busy p....
				//la conexión OK se podría definir con el OK el tema es que tarda en aparecer y se puede tambien confundir con otros.
				if((b->_estado==at_wifi_gotip))//||(b->_estado==at_wifi_connected))
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009bfc:	2b06      	cmp	r3, #6
 8009bfe:	d103      	bne.n	8009c08 <WiFi_Conn_ND+0x39c>
					{
						b->_estado_conexion=CONEXION_OK; 	//Ya puedo pedir conexi�n TCP
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	22d1      	movs	r2, #209	; 0xd1
 8009c04:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
										 ||(b->_estado==at_wifi_tout_err)
										 ||(b->_estado==at_wifi_pass_err)
										 ||(b->_estado==at_wifi_name_err)
										 ||(b->_estado==at_wifi_conn_err)
										 ||(b->_estado==at_wifi_disconnect))*/ 
				if((b->_estado >=at_wifi_err)&&(b->_estado <=at_wifi_conn_err))//240509
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c0e:	2b06      	cmp	r3, #6
 8009c10:	f341 8265 	ble.w	800b0de <WiFi_Conn_ND+0x1872>
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c1a:	2b0b      	cmp	r3, #11
 8009c1c:	f301 825f 	bgt.w	800b0de <WiFi_Conn_ND+0x1872>
				//if(((b->_estado >=at_wifi_err)&&(b->_estado <=at_wifi_conn_err))&&(b->_ticks2 > 2000))
										 {
											b->_estado_conexion=CONEXION_ERROR; 	//Ya puedo pedir conexi�n TCP
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	22cd      	movs	r2, #205	; 0xcd
 8009c24:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
										 }
				//----Condiciones de cambio de estado
			}
			break;
 8009c28:	f001 ba59 	b.w	800b0de <WiFi_Conn_ND+0x1872>
				// La unica manera de solucionarlo es seteando nuevamente AT+CWMODE=1					//
				// La realidad es que es muy dificil que se borre la flash una vez inciado el módulo	//
				// se le podría dar un tratamiento pero de momento no lo haremos salvo que sea necesario//
				//--------------------------------------------------------------------------------------//
				//240509 Con esta modificación, por cada error se demora 2 segundos
				if(((b->_estado >=at_wifi_err)&&(b->_estado <=at_wifi_conn_err))&&(b->_ticks2 > 2000))
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c32:	2b06      	cmp	r3, #6
 8009c34:	dd1d      	ble.n	8009c72 <WiFi_Conn_ND+0x406>
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c3c:	2b0b      	cmp	r3, #11
 8009c3e:	dc18      	bgt.n	8009c72 <WiFi_Conn_ND+0x406>
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	f8d3 3cbc 	ldr.w	r3, [r3, #3260]	; 0xcbc
 8009c46:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8009c4a:	dd12      	ble.n	8009c72 <WiFi_Conn_ND+0x406>
				{
					ConectarWIFI(b);
 8009c4c:	68f8      	ldr	r0, [r7, #12]
 8009c4e:	f7fc fdc5 	bl	80067dc <ConectarWIFI>
					b->_estado_conexion=CONEXION_EN_CURSO;
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	22c8      	movs	r2, #200	; 0xc8
 8009c56:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	2200      	movs	r2, #0
 8009c5e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	2200      	movs	r2, #0
 8009c66:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
					b->_ticks2=0;
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	2200      	movs	r2, #0
 8009c6e:	f8c3 2cbc 	str.w	r2, [r3, #3260]	; 0xcbc
				}

				if(b->_estado==at_restart	)		//Reinicio involuntario de módulo
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c78:	2b04      	cmp	r3, #4
 8009c7a:	f041 8232 	bne.w	800b0e2 <WiFi_Conn_ND+0x1876>
					{
						Cambiar_CWMODE(b);
 8009c7e:	68f8      	ldr	r0, [r7, #12]
 8009c80:	f7fc fd96 	bl	80067b0 <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	2264      	movs	r2, #100	; 0x64
 8009c88:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	2200      	movs	r2, #0
 8009c90:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	2200      	movs	r2, #0
 8009c98:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
			}
			break;
 8009c9c:	f001 ba21 	b.w	800b0e2 <WiFi_Conn_ND+0x1876>
			case CONEXION_OK://Conecta OK
			{
				b->_n_orig=0; //Borro el vector RX
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	2200      	movs	r2, #0
 8009ca4:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4

				if(b->_TCP_Local_Server_Initiated==1)  //Si el servidor ya estaba iniciado, voy al servidor inciado
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	f893 3083 	ldrb.w	r3, [r3, #131]	; 0x83
 8009cae:	2b01      	cmp	r3, #1
 8009cb0:	d108      	bne.n	8009cc4 <WiFi_Conn_ND+0x458>
				{
					b->_estado_conexion=TCP_SRVR_OK ;
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	f240 3229 	movw	r2, #809	; 0x329
 8009cb8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	2200      	movs	r2, #0
 8009cc0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
				}
				//if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok)||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
				if((b->_estado >=at_wifi_err)&&(b->_estado <=at_wifi_conn_err))  // Si se genera cualquier error de conexión, vuevlo a conectar	
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009cca:	2b06      	cmp	r3, #6
 8009ccc:	dd0f      	ble.n	8009cee <WiFi_Conn_ND+0x482>
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009cd4:	2b0b      	cmp	r3, #11
 8009cd6:	dc0a      	bgt.n	8009cee <WiFi_Conn_ND+0x482>
				{
					ConectarWIFI(b);
 8009cd8:	68f8      	ldr	r0, [r7, #12]
 8009cda:	f7fc fd7f 	bl	80067dc <ConectarWIFI>
					b->_estado_conexion=CONEXION_EN_CURSO;
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	22c8      	movs	r2, #200	; 0xc8
 8009ce2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	2200      	movs	r2, #0
 8009cea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
				}
				if(b->_estado==at_ready)					  //Reinicio involuntario de módulo
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009cf4:	2b01      	cmp	r3, #1
 8009cf6:	d10e      	bne.n	8009d16 <WiFi_Conn_ND+0x4aa>
					{
						Cambiar_CWMODE(b);
 8009cf8:	68f8      	ldr	r0, [r7, #12]
 8009cfa:	f7fc fd59 	bl	80067b0 <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	2264      	movs	r2, #100	; 0x64
 8009d02:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	2200      	movs	r2, #0
 8009d0a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	2200      	movs	r2, #0
 8009d12:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
//220818
				if(b->_TCP_Local_Server_EN)//
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d011      	beq.n	8009d44 <WiFi_Conn_ND+0x4d8>
				{//
					CrearServidorTCP(b);
 8009d20:	68f8      	ldr	r0, [r7, #12]
 8009d22:	f7fc fdc9 	bl	80068b8 <CrearServidorTCP>
					b->_estado_conexion=TCP_SRVR_EN_CURSO;
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	f44f 7248 	mov.w	r2, #800	; 0x320
 8009d2c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	2200      	movs	r2, #0
 8009d34:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	2200      	movs	r2, #0
 8009d3c:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
					MUX(b);									//Si me conecté seteo las múltiples Conexiones
					b->_estado_conexion=MUX_CONN_EN_CURSO;
					b->_estado=0;
				}//
			}
			break;
 8009d40:	f001 b9f8 	b.w	800b134 <WiFi_Conn_ND+0x18c8>
					MUX(b);									//Si me conecté seteo las múltiples Conexiones
 8009d44:	68f8      	ldr	r0, [r7, #12]
 8009d46:	f7fc fd5f 	bl	8006808 <MUX>
					b->_estado_conexion=MUX_CONN_EN_CURSO;
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8009d50:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	2200      	movs	r2, #0
 8009d58:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
			break;
 8009d5c:	f001 b9ea 	b.w	800b134 <WiFi_Conn_ND+0x18c8>
			case DESCONEXION_EN_CURSO:			//Desconectar WiFi
			{
				if((b->_estado!=DESCONEXION_EN_CURSO)&&(b->_estado!=at_restart)&&(b->_estado!=at_wifi_disconnect)&&(b->_estado!=at_deconectar_ok ))	//Si estoy conectando, no vuelvo a conectar.
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d66:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8009d6a:	d03b      	beq.n	8009de4 <WiFi_Conn_ND+0x578>
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d72:	2b04      	cmp	r3, #4
 8009d74:	d036      	beq.n	8009de4 <WiFi_Conn_ND+0x578>
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d7c:	2b0c      	cmp	r3, #12
 8009d7e:	d031      	beq.n	8009de4 <WiFi_Conn_ND+0x578>
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d86:	2b0d      	cmp	r3, #13
 8009d88:	d02c      	beq.n	8009de4 <WiFi_Conn_ND+0x578>
				{
						DesconectarWIFI(b);
 8009d8a:	68f8      	ldr	r0, [r7, #12]
 8009d8c:	f7fc fd68 	bl	8006860 <DesconectarWIFI>
						if(b->_enviaruart==1)
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8009d96:	2b01      	cmp	r3, #1
 8009d98:	d124      	bne.n	8009de4 <WiFi_Conn_ND+0x578>
							{
								b->_estado=AT_ESP8266_ND(b);
 8009d9a:	68f8      	ldr	r0, [r7, #12]
 8009d9c:	f7fc fe9e 	bl	8006adc <AT_ESP8266_ND>
 8009da0:	4602      	mov	r2, r0
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_enviaruart=0;
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	2200      	movs	r2, #0
 8009dac:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	f8d3 3d5c 	ldr.w	r3, [r3, #3420]	; 0xd5c
 8009db6:	2b01      	cmp	r3, #1
 8009db8:	d109      	bne.n	8009dce <WiFi_Conn_ND+0x562>
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	f503 6293 	add.w	r2, r3, #1176	; 0x498
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	f8d3 3cf4 	ldr.w	r3, [r3, #3316]	; 0xcf4
 8009dc6:	4619      	mov	r1, r3
 8009dc8:	4610      	mov	r0, r2
 8009dca:	f7f7 fc35 	bl	8001638 <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	f503 6193 	add.w	r1, r3, #1176	; 0x498
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	f8d3 3cf4 	ldr.w	r3, [r3, #3316]	; 0xcf4
 8009dda:	b29a      	uxth	r2, r3
 8009ddc:	2364      	movs	r3, #100	; 0x64
 8009dde:	68b8      	ldr	r0, [r7, #8]
 8009de0:	f7fb fc42 	bl	8005668 <HAL_UART_Transmit>

							}
				}

				//----Condiciones de cambio de estado
				if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) b->_estado_conexion=DESCONEXION_OK; 	//Ya puedo pedir conexi�n TCP
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009dea:	2b0c      	cmp	r3, #12
 8009dec:	d005      	beq.n	8009dfa <WiFi_Conn_ND+0x58e>
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009df4:	2b0d      	cmp	r3, #13
 8009df6:	f041 8176 	bne.w	800b0e6 <WiFi_Conn_ND+0x187a>
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	f240 1235 	movw	r2, #309	; 0x135
 8009e00:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				//----Condiciones de cambio de estado
			}
			break;
 8009e04:	f001 b96f 	b.w	800b0e6 <WiFi_Conn_ND+0x187a>
			case DESCONEXION_ERROR ://Error al Desconectar WiFi
			{
				NOP(b);
 8009e08:	68f8      	ldr	r0, [r7, #12]
 8009e0a:	f7fc fcbb 	bl	8006784 <NOP>
			}
			break;
 8009e0e:	f001 b991 	b.w	800b134 <WiFi_Conn_ND+0x18c8>
			case DESCONEXION_OK ://Desconectar WiFi OK
			{
				b->_n_orig=0; //Borro el vector RX
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	2200      	movs	r2, #0
 8009e16:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4

				ConectarWIFI(b);
 8009e1a:	68f8      	ldr	r0, [r7, #12]
 8009e1c:	f7fc fcde 	bl	80067dc <ConectarWIFI>
				b->_estado_conexion=CONEXION_EN_CURSO;
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	22c8      	movs	r2, #200	; 0xc8
 8009e24:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				b->_estado=0;
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	2200      	movs	r2, #0
 8009e2c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

					if(b->_estado==at_restart	)		//Reinicio involuntario de módulo
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e36:	2b04      	cmp	r3, #4
 8009e38:	f041 8157 	bne.w	800b0ea <WiFi_Conn_ND+0x187e>
					{
						Cambiar_CWMODE(b);
 8009e3c:	68f8      	ldr	r0, [r7, #12]
 8009e3e:	f7fc fcb7 	bl	80067b0 <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	2264      	movs	r2, #100	; 0x64
 8009e46:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	2200      	movs	r2, #0
 8009e4e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88


						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	2200      	movs	r2, #0
 8009e56:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
			}
			break;
 8009e5a:	f001 b946 	b.w	800b0ea <WiFi_Conn_ND+0x187e>
			case MUX_CONN_EN_CURSO:			//Multiples Conexiones
			{
				if((b->_estado!=MUX_CONN_EN_CURSO)&&(b->_estado!=at_restart)
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e64:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8009e68:	d04f      	beq.n	8009f0a <WiFi_Conn_ND+0x69e>
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e70:	2b04      	cmp	r3, #4
 8009e72:	d04a      	beq.n	8009f0a <WiFi_Conn_ND+0x69e>
									&&(b->_estado!=at_ok)
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e7a:	2b01      	cmp	r3, #1
 8009e7c:	d045      	beq.n	8009f0a <WiFi_Conn_ND+0x69e>
									&&(b->_estado!=at_error)
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e84:	2b02      	cmp	r3, #2
 8009e86:	d040      	beq.n	8009f0a <WiFi_Conn_ND+0x69e>
									&&(b->_estado!=at_multiple_conn_ok)
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e8e:	2b07      	cmp	r3, #7
 8009e90:	d03b      	beq.n	8009f0a <WiFi_Conn_ND+0x69e>
						            &&(b->_estado!=at_no_multiple_conn_ok)
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e98:	2b04      	cmp	r3, #4
 8009e9a:	d036      	beq.n	8009f0a <WiFi_Conn_ND+0x69e>
									&&(b->_estado!=at_multiple_conn_err)
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ea2:	2b1e      	cmp	r3, #30
 8009ea4:	d031      	beq.n	8009f0a <WiFi_Conn_ND+0x69e>
									&&(b->_estado!=at_no_multiple_conn_err))	//Si estoy conectando, no vuelvo a conectar.
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009eac:	2b05      	cmp	r3, #5
 8009eae:	d02c      	beq.n	8009f0a <WiFi_Conn_ND+0x69e>
				{
						MUX(b);
 8009eb0:	68f8      	ldr	r0, [r7, #12]
 8009eb2:	f7fc fca9 	bl	8006808 <MUX>
						if(b->_enviaruart==1)
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8009ebc:	2b01      	cmp	r3, #1
 8009ebe:	d124      	bne.n	8009f0a <WiFi_Conn_ND+0x69e>
							{
								b->_estado=AT_ESP8266_ND(b);
 8009ec0:	68f8      	ldr	r0, [r7, #12]
 8009ec2:	f7fc fe0b 	bl	8006adc <AT_ESP8266_ND>
 8009ec6:	4602      	mov	r2, r0
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_enviaruart=0;
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	2200      	movs	r2, #0
 8009ed2:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	f8d3 3d5c 	ldr.w	r3, [r3, #3420]	; 0xd5c
 8009edc:	2b01      	cmp	r3, #1
 8009ede:	d109      	bne.n	8009ef4 <WiFi_Conn_ND+0x688>
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	f503 6293 	add.w	r2, r3, #1176	; 0x498
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	f8d3 3cf4 	ldr.w	r3, [r3, #3316]	; 0xcf4
 8009eec:	4619      	mov	r1, r3
 8009eee:	4610      	mov	r0, r2
 8009ef0:	f7f7 fba2 	bl	8001638 <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	f503 6193 	add.w	r1, r3, #1176	; 0x498
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	f8d3 3cf4 	ldr.w	r3, [r3, #3316]	; 0xcf4
 8009f00:	b29a      	uxth	r2, r3
 8009f02:	2364      	movs	r3, #100	; 0x64
 8009f04:	68b8      	ldr	r0, [r7, #8]
 8009f06:	f7fb fbaf 	bl	8005668 <HAL_UART_Transmit>

							}
				}

				//----Condiciones de cambio de estado
				if((b->_estado==at_ok)||(b->_estado==at_multiple_conn_ok)||(b->_estado==at_no_multiple_conn_ok)) b->_estado_conexion=MUX_CONN_OK;
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f10:	2b01      	cmp	r3, #1
 8009f12:	d009      	beq.n	8009f28 <WiFi_Conn_ND+0x6bc>
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f1a:	2b07      	cmp	r3, #7
 8009f1c:	d004      	beq.n	8009f28 <WiFi_Conn_ND+0x6bc>
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f24:	2b04      	cmp	r3, #4
 8009f26:	d104      	bne.n	8009f32 <WiFi_Conn_ND+0x6c6>
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	f240 1299 	movw	r2, #409	; 0x199
 8009f2e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				if((b->_estado==at_error)||(b->_estado==at_multiple_conn_err)||(b->_estado==at_no_multiple_conn_err))
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f38:	2b02      	cmp	r3, #2
 8009f3a:	d00a      	beq.n	8009f52 <WiFi_Conn_ND+0x6e6>
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f42:	2b1e      	cmp	r3, #30
 8009f44:	d005      	beq.n	8009f52 <WiFi_Conn_ND+0x6e6>
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f4c:	2b05      	cmp	r3, #5
 8009f4e:	f041 80ce 	bne.w	800b0ee <WiFi_Conn_ND+0x1882>
					{
					b->_estado_conexion=MUX_CONN_ERROR;
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	f240 1295 	movw	r2, #405	; 0x195
 8009f58:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					}
				//----Condiciones de cambio de estado
			}
			break;
 8009f5c:	f001 b8c7 	b.w	800b0ee <WiFi_Conn_ND+0x1882>
			case MUX_CONN_ERROR://Error Multiples Conexiones
			{
				NOP(b);
 8009f60:	68f8      	ldr	r0, [r7, #12]
 8009f62:	f7fc fc0f 	bl	8006784 <NOP>
				if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f6c:	2b04      	cmp	r3, #4
 8009f6e:	d112      	bne.n	8009f96 <WiFi_Conn_ND+0x72a>
				{
					Cambiar_CWMODE(b);
 8009f70:	68f8      	ldr	r0, [r7, #12]
 8009f72:	f7fc fc1d 	bl	80067b0 <Cambiar_CWMODE>
					b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	2264      	movs	r2, #100	; 0x64
 8009f7a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	2200      	movs	r2, #0
 8009f82:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	2200      	movs	r2, #0
 8009f8a:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4

					b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	2200      	movs	r2, #0
 8009f92:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
				}
				if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f9c:	2b0c      	cmp	r3, #12
 8009f9e:	d00a      	beq.n	8009fb6 <WiFi_Conn_ND+0x74a>
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009fa6:	2b0d      	cmp	r3, #13
 8009fa8:	d005      	beq.n	8009fb6 <WiFi_Conn_ND+0x74a>
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009fb0:	2b03      	cmp	r3, #3
 8009fb2:	f041 809e 	bne.w	800b0f2 <WiFi_Conn_ND+0x1886>
				{
					ConectarWIFI(b);
 8009fb6:	68f8      	ldr	r0, [r7, #12]
 8009fb8:	f7fc fc10 	bl	80067dc <ConectarWIFI>
					b->_estado_conexion=CONEXION_EN_CURSO;
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	22c8      	movs	r2, #200	; 0xc8
 8009fc0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	2200      	movs	r2, #0
 8009fc8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	2200      	movs	r2, #0
 8009fd0:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
				}
			}
			break;
 8009fd4:	f001 b88d 	b.w	800b0f2 <WiFi_Conn_ND+0x1886>
			case MUX_CONN_OK://Multiples Conexiones OK
			{
				NOP(b);
 8009fd8:	68f8      	ldr	r0, [r7, #12]
 8009fda:	f7fc fbd3 	bl	8006784 <NOP>
				b->_n_orig=0; //Borro el vector RX
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	2200      	movs	r2, #0
 8009fe2:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4

					if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009fec:	2b04      	cmp	r3, #4
 8009fee:	d10e      	bne.n	800a00e <WiFi_Conn_ND+0x7a2>
					{
						Cambiar_CWMODE(b);
 8009ff0:	68f8      	ldr	r0, [r7, #12]
 8009ff2:	f7fc fbdd 	bl	80067b0 <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	2264      	movs	r2, #100	; 0x64
 8009ffa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	2200      	movs	r2, #0
 800a002:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	2200      	movs	r2, #0
 800a00a:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
					if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a014:	2b0c      	cmp	r3, #12
 800a016:	d009      	beq.n	800a02c <WiFi_Conn_ND+0x7c0>
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a01e:	2b0d      	cmp	r3, #13
 800a020:	d004      	beq.n	800a02c <WiFi_Conn_ND+0x7c0>
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a028:	2b03      	cmp	r3, #3
 800a02a:	d10a      	bne.n	800a042 <WiFi_Conn_ND+0x7d6>
					{
						ConectarWIFI(b);
 800a02c:	68f8      	ldr	r0, [r7, #12]
 800a02e:	f7fc fbd5 	bl	80067dc <ConectarWIFI>
						b->_estado_conexion=CONEXION_EN_CURSO;
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	22c8      	movs	r2, #200	; 0xc8
 800a036:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	2200      	movs	r2, #0
 800a03e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					}
					if(b->_NO_IP==0)
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	f8d3 3d58 	ldr.w	r3, [r3, #3416]	; 0xd58
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d10d      	bne.n	800a068 <WiFi_Conn_ND+0x7fc>
					{
						IPDef(b);
 800a04c:	68f8      	ldr	r0, [r7, #12]
 800a04e:	f7fc fbf1 	bl	8006834 <IPDef>
						b->_estado_conexion=DEF_IP_EN_CURSO;
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800a058:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	2200      	movs	r2, #0
 800a060:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_estado=0;
					}


			}
			break;
 800a064:	f001 b866 	b.w	800b134 <WiFi_Conn_ND+0x18c8>
						IPDef(b);
 800a068:	68f8      	ldr	r0, [r7, #12]
 800a06a:	f7fc fbe3 	bl	8006834 <IPDef>
						b->_estado_conexion=DEF_IP_OK;
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	f240 12fd 	movw	r2, #509	; 0x1fd
 800a074:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	2200      	movs	r2, #0
 800a07c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
			break;
 800a080:	f001 b858 	b.w	800b134 <WiFi_Conn_ND+0x18c8>
			case DEF_IP_EN_CURSO:			//Definir IP
			{
				if((b->_estado!=DEF_IP_EN_CURSO)&&(b->_estado!=at_restart)
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a08a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800a08e:	d045      	beq.n	800a11c <WiFi_Conn_ND+0x8b0>
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a096:	2b04      	cmp	r3, #4
 800a098:	d040      	beq.n	800a11c <WiFi_Conn_ND+0x8b0>
									&&(b->_estado!=at_ok)
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0a0:	2b01      	cmp	r3, #1
 800a0a2:	d03b      	beq.n	800a11c <WiFi_Conn_ND+0x8b0>
									&&(b->_estado!=at_error)
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0aa:	2b02      	cmp	r3, #2
 800a0ac:	d036      	beq.n	800a11c <WiFi_Conn_ND+0x8b0>
									&&(b->_estado!=at_def_ip_ok)
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0b4:	2b1b      	cmp	r3, #27
 800a0b6:	d031      	beq.n	800a11c <WiFi_Conn_ND+0x8b0>
									&&(b->_estado!=at_def_ip_err))	//Si estoy conectando, no vuelvo a conectar.
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0be:	2b21      	cmp	r3, #33	; 0x21
 800a0c0:	d02c      	beq.n	800a11c <WiFi_Conn_ND+0x8b0>
				{
						IPDef(b);
 800a0c2:	68f8      	ldr	r0, [r7, #12]
 800a0c4:	f7fc fbb6 	bl	8006834 <IPDef>
						if(b->_enviaruart==1)
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 800a0ce:	2b01      	cmp	r3, #1
 800a0d0:	d124      	bne.n	800a11c <WiFi_Conn_ND+0x8b0>
							{
								b->_estado=AT_ESP8266_ND(b);
 800a0d2:	68f8      	ldr	r0, [r7, #12]
 800a0d4:	f7fc fd02 	bl	8006adc <AT_ESP8266_ND>
 800a0d8:	4602      	mov	r2, r0
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_enviaruart=0;
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	2200      	movs	r2, #0
 800a0e4:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	f8d3 3d5c 	ldr.w	r3, [r3, #3420]	; 0xd5c
 800a0ee:	2b01      	cmp	r3, #1
 800a0f0:	d109      	bne.n	800a106 <WiFi_Conn_ND+0x89a>
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	f503 6293 	add.w	r2, r3, #1176	; 0x498
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	f8d3 3cf4 	ldr.w	r3, [r3, #3316]	; 0xcf4
 800a0fe:	4619      	mov	r1, r3
 800a100:	4610      	mov	r0, r2
 800a102:	f7f7 fa99 	bl	8001638 <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	f503 6193 	add.w	r1, r3, #1176	; 0x498
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	f8d3 3cf4 	ldr.w	r3, [r3, #3316]	; 0xcf4
 800a112:	b29a      	uxth	r2, r3
 800a114:	2364      	movs	r3, #100	; 0x64
 800a116:	68b8      	ldr	r0, [r7, #8]
 800a118:	f7fb faa6 	bl	8005668 <HAL_UART_Transmit>

							}
				}

				//----Condiciones de cambio de estado
				if((b->_estado==at_ok)||(b->_estado==at_def_ip_ok)) b->_estado_conexion=DEF_IP_OK;
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a122:	2b01      	cmp	r3, #1
 800a124:	d004      	beq.n	800a130 <WiFi_Conn_ND+0x8c4>
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a12c:	2b1b      	cmp	r3, #27
 800a12e:	d104      	bne.n	800a13a <WiFi_Conn_ND+0x8ce>
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	f240 12fd 	movw	r2, #509	; 0x1fd
 800a136:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				if((b->_estado==at_error)||(b->_estado==at_def_ip_err)) b->_estado_conexion=DEF_IP_ERROR;
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a140:	2b02      	cmp	r3, #2
 800a142:	d005      	beq.n	800a150 <WiFi_Conn_ND+0x8e4>
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a14a:	2b21      	cmp	r3, #33	; 0x21
 800a14c:	f040 87d3 	bne.w	800b0f6 <WiFi_Conn_ND+0x188a>
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	f240 12f9 	movw	r2, #505	; 0x1f9
 800a156:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				//----Condiciones de cambio de estado
			}
			break;
 800a15a:	f000 bfcc 	b.w	800b0f6 <WiFi_Conn_ND+0x188a>
			case DEF_IP_ERROR://Error Definir IP
			{
				NOP(b);
 800a15e:	68f8      	ldr	r0, [r7, #12]
 800a160:	f7fc fb10 	bl	8006784 <NOP>
				if((b->_estado==at_restart)||(b->_estado==at_error))		//Reinicio involuntario de módulo
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a16a:	2b04      	cmp	r3, #4
 800a16c:	d004      	beq.n	800a178 <WiFi_Conn_ND+0x90c>
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a174:	2b02      	cmp	r3, #2
 800a176:	d112      	bne.n	800a19e <WiFi_Conn_ND+0x932>
				{
					Cambiar_CWMODE(b);
 800a178:	68f8      	ldr	r0, [r7, #12]
 800a17a:	f7fc fb19 	bl	80067b0 <Cambiar_CWMODE>
					b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	2264      	movs	r2, #100	; 0x64
 800a182:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	2200      	movs	r2, #0
 800a18a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	2200      	movs	r2, #0
 800a192:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4

					b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	2200      	movs	r2, #0
 800a19a:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
				}
				if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a1a4:	2b0c      	cmp	r3, #12
 800a1a6:	d00a      	beq.n	800a1be <WiFi_Conn_ND+0x952>
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a1ae:	2b0d      	cmp	r3, #13
 800a1b0:	d005      	beq.n	800a1be <WiFi_Conn_ND+0x952>
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a1b8:	2b03      	cmp	r3, #3
 800a1ba:	f040 879e 	bne.w	800b0fa <WiFi_Conn_ND+0x188e>
				{
					ConectarWIFI(b);
 800a1be:	68f8      	ldr	r0, [r7, #12]
 800a1c0:	f7fc fb0c 	bl	80067dc <ConectarWIFI>
					b->_estado_conexion=CONEXION_EN_CURSO;
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	22c8      	movs	r2, #200	; 0xc8
 800a1c8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	2200      	movs	r2, #0
 800a1d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	2200      	movs	r2, #0
 800a1d8:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
				}
			}
			break;
 800a1dc:	f000 bf8d 	b.w	800b0fa <WiFi_Conn_ND+0x188e>
			case DEF_IP_OK://Definir IP OK
			{
				NOP(b);
 800a1e0:	68f8      	ldr	r0, [r7, #12]
 800a1e2:	f7fc facf 	bl	8006784 <NOP>

					if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a1ec:	2b04      	cmp	r3, #4
 800a1ee:	d112      	bne.n	800a216 <WiFi_Conn_ND+0x9aa>
					{
						Cambiar_CWMODE(b);
 800a1f0:	68f8      	ldr	r0, [r7, #12]
 800a1f2:	f7fc fadd 	bl	80067b0 <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	2264      	movs	r2, #100	; 0x64
 800a1fa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	2200      	movs	r2, #0
 800a202:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	2200      	movs	r2, #0
 800a20a:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4

						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	2200      	movs	r2, #0
 800a212:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
					if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a21c:	2b0c      	cmp	r3, #12
 800a21e:	d009      	beq.n	800a234 <WiFi_Conn_ND+0x9c8>
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a226:	2b0d      	cmp	r3, #13
 800a228:	d004      	beq.n	800a234 <WiFi_Conn_ND+0x9c8>
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a230:	2b03      	cmp	r3, #3
 800a232:	d10e      	bne.n	800a252 <WiFi_Conn_ND+0x9e6>
					{
						ConectarWIFI(b);
 800a234:	68f8      	ldr	r0, [r7, #12]
 800a236:	f7fc fad1 	bl	80067dc <ConectarWIFI>
						b->_estado_conexion=CONEXION_EN_CURSO;
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	22c8      	movs	r2, #200	; 0xc8
 800a23e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	2200      	movs	r2, #0
 800a246:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	2200      	movs	r2, #0
 800a24e:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
					}

//220818 lo anulado esta presente, para volver atras descomentar

					if (b->_TCP_Local_Server_EN==0)
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d111      	bne.n	800a280 <WiFi_Conn_ND+0xa14>
					{
						ConectarTCP(b);
 800a25c:	68f8      	ldr	r0, [r7, #12]
 800a25e:	f7fc fb15 	bl	800688c <ConectarTCP>
						b->_estado_conexion=TCP_CONN_EN_CURSO;
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	f44f 7216 	mov.w	r2, #600	; 0x258
 800a268:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	2200      	movs	r2, #0
 800a270:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	2200      	movs	r2, #0
 800a278:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
						b->_estado=0;//
						b->_n_orig=0;// //Borro el vector RX

					}
			}
			break;
 800a27c:	f000 bf5a 	b.w	800b134 <WiFi_Conn_ND+0x18c8>
						ConectarWIFI(b);//
 800a280:	68f8      	ldr	r0, [r7, #12]
 800a282:	f7fc faab 	bl	80067dc <ConectarWIFI>
						b->_estado_conexion=CONEXION_EN_CURSO;//
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	22c8      	movs	r2, #200	; 0xc8
 800a28a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;//
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	2200      	movs	r2, #0
 800a292:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0;// //Borro el vector RX
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	2200      	movs	r2, #0
 800a29a:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
			break;
 800a29e:	f000 bf49 	b.w	800b134 <WiFi_Conn_ND+0x18c8>
									&&(b->_estado!=at_ready)
									&&(b->_estado!=at_wifi_disconnect)
									&&(b->_estado!=at_tcp_alrdy_cnntd_err)
									&&(b->_estado!=at_tcp_conectado)
									&&(b->_estado!=at_tcp_client_desc))*/	//Si estoy conectando, no vuelvo a conectar.
				if((b->_estado!=TCP_CONN_EN_CURSO)&&((b->_estado > at_tcp_close_err)||(b->_estado==0))) //||(b->_estado==0)))
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a2a8:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 800a2ac:	d036      	beq.n	800a31c <WiFi_Conn_ND+0xab0>
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a2b4:	2b13      	cmp	r3, #19
 800a2b6:	dc04      	bgt.n	800a2c2 <WiFi_Conn_ND+0xa56>
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d12c      	bne.n	800a31c <WiFi_Conn_ND+0xab0>
				{
					ConectarTCP(b);
 800a2c2:	68f8      	ldr	r0, [r7, #12]
 800a2c4:	f7fc fae2 	bl	800688c <ConectarTCP>
						if(b->_enviaruart==1)
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 800a2ce:	2b01      	cmp	r3, #1
 800a2d0:	d124      	bne.n	800a31c <WiFi_Conn_ND+0xab0>
							{
								b->_estado=AT_ESP8266_ND(b);  //a partir de ahora b->_estado vale TCP_CONN_EN_CURSO
 800a2d2:	68f8      	ldr	r0, [r7, #12]
 800a2d4:	f7fc fc02 	bl	8006adc <AT_ESP8266_ND>
 800a2d8:	4602      	mov	r2, r0
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_enviaruart=0;
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	2200      	movs	r2, #0
 800a2e4:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	f8d3 3d5c 	ldr.w	r3, [r3, #3420]	; 0xd5c
 800a2ee:	2b01      	cmp	r3, #1
 800a2f0:	d109      	bne.n	800a306 <WiFi_Conn_ND+0xa9a>
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	f503 6293 	add.w	r2, r3, #1176	; 0x498
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	f8d3 3cf4 	ldr.w	r3, [r3, #3316]	; 0xcf4
 800a2fe:	4619      	mov	r1, r3
 800a300:	4610      	mov	r0, r2
 800a302:	f7f7 f999 	bl	8001638 <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	f503 6193 	add.w	r1, r3, #1176	; 0x498
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	f8d3 3cf4 	ldr.w	r3, [r3, #3316]	; 0xcf4
 800a312:	b29a      	uxth	r2, r3
 800a314:	2364      	movs	r3, #100	; 0x64
 800a316:	68b8      	ldr	r0, [r7, #8]
 800a318:	f7fb f9a6 	bl	8005668 <HAL_UART_Transmit>
							}
				}
				//----Condiciones de cambio de estado
				if((b->_estado==at_tcp_alrdy_cnntd_err)||(b->_estado==at_tcp_conectado)) 	
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a322:	2b10      	cmp	r3, #16
 800a324:	d004      	beq.n	800a330 <WiFi_Conn_ND+0xac4>
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a32c:	2b0e      	cmp	r3, #14
 800a32e:	d106      	bne.n	800a33e <WiFi_Conn_ND+0xad2>
					{
						b->_estado_conexion=TCP_CONN_OK;
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	f240 2261 	movw	r2, #609	; 0x261
 800a336:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						}

				//if((b->_estado==at_error)||(b->_estado==at_tcp_client_desc))  				b->_estado_conexion=TCP_CONN_ERROR;
				//----Condiciones de cambio de estado
			}
			break;
 800a33a:	f000 bee0 	b.w	800b0fe <WiFi_Conn_ND+0x1892>
						if(b->_estado<= at_tcp_client_desc)  b->_estado_conexion=TCP_CONN_ERROR;	
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a344:	2b14      	cmp	r3, #20
 800a346:	f300 86da 	bgt.w	800b0fe <WiFi_Conn_ND+0x1892>
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	f240 225d 	movw	r2, #605	; 0x25d
 800a350:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			break;
 800a354:	f000 bed3 	b.w	800b0fe <WiFi_Conn_ND+0x1892>
			case TCP_CONN_ERROR://Error al Conectar a Servidor TCP
			{
				NOP(b);
 800a358:	68f8      	ldr	r0, [r7, #12]
 800a35a:	f7fc fa13 	bl	8006784 <NOP>
				if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a364:	2b04      	cmp	r3, #4
 800a366:	d112      	bne.n	800a38e <WiFi_Conn_ND+0xb22>
				{
					Cambiar_CWMODE(b);
 800a368:	68f8      	ldr	r0, [r7, #12]
 800a36a:	f7fc fa21 	bl	80067b0 <Cambiar_CWMODE>
					b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	2264      	movs	r2, #100	; 0x64
 800a372:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	2200      	movs	r2, #0
 800a37a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	2200      	movs	r2, #0
 800a382:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4

					b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	2200      	movs	r2, #0
 800a38a:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
				}
				if((b->_estado==at_wifi_disconnect)||(b->_estado==at_ready)||(b->_estado==at_tcp_noip_err)) //Si me desconecto, me vuelvo a conectar
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a394:	2b0c      	cmp	r3, #12
 800a396:	d009      	beq.n	800a3ac <WiFi_Conn_ND+0xb40>
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a39e:	2b01      	cmp	r3, #1
 800a3a0:	d004      	beq.n	800a3ac <WiFi_Conn_ND+0xb40>
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a3a8:	2b11      	cmp	r3, #17
 800a3aa:	d10e      	bne.n	800a3ca <WiFi_Conn_ND+0xb5e>
				{
					ConectarWIFI(b);
 800a3ac:	68f8      	ldr	r0, [r7, #12]
 800a3ae:	f7fc fa15 	bl	80067dc <ConectarWIFI>
					b->_estado_conexion=CONEXION_EN_CURSO;
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	22c8      	movs	r2, #200	; 0xc8
 800a3b6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	2200      	movs	r2, #0
 800a3be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	2200      	movs	r2, #0
 800a3c6:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
				}

				if(((b->_estado==at_tcp_client_desc)||(b->_estado==at_tcp_conn_err))&&(b->_ticks2 > 2000)) //Si se cierra la conexión vuelvo a conectar
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a3d0:	2b14      	cmp	r3, #20
 800a3d2:	d005      	beq.n	800a3e0 <WiFi_Conn_ND+0xb74>
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a3da:	2b0f      	cmp	r3, #15
 800a3dc:	f040 8691 	bne.w	800b102 <WiFi_Conn_ND+0x1896>
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	f8d3 3cbc 	ldr.w	r3, [r3, #3260]	; 0xcbc
 800a3e6:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800a3ea:	f340 868a 	ble.w	800b102 <WiFi_Conn_ND+0x1896>
				{
					ConectarTCP(b);
 800a3ee:	68f8      	ldr	r0, [r7, #12]
 800a3f0:	f7fc fa4c 	bl	800688c <ConectarTCP>
					b->_estado_conexion=TCP_CONN_EN_CURSO;
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	f44f 7216 	mov.w	r2, #600	; 0x258
 800a3fa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	2200      	movs	r2, #0
 800a402:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	2200      	movs	r2, #0
 800a40a:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
					b->_ticks2=0;
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	2200      	movs	r2, #0
 800a412:	f8c3 2cbc 	str.w	r2, [r3, #3260]	; 0xcbc
				}
			}
			break;
 800a416:	f000 be74 	b.w	800b102 <WiFi_Conn_ND+0x1896>
			case TCP_CONN_OK://Conectar a Servidor TCP OK
			{
				NOP(b);
 800a41a:	68f8      	ldr	r0, [r7, #12]
 800a41c:	f7fc f9b2 	bl	8006784 <NOP>

					if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a426:	2b04      	cmp	r3, #4
 800a428:	d112      	bne.n	800a450 <WiFi_Conn_ND+0xbe4>
					{
						Cambiar_CWMODE(b);
 800a42a:	68f8      	ldr	r0, [r7, #12]
 800a42c:	f7fc f9c0 	bl	80067b0 <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	2264      	movs	r2, #100	; 0x64
 800a434:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	2200      	movs	r2, #0
 800a43c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	2200      	movs	r2, #0
 800a444:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	2200      	movs	r2, #0
 800a44c:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
					if((b->_estado==at_wifi_disconnect)||(b->_estado==at_ready)||(b->_estado==at_tcp_noip_err)) //Si me desconecto, me vuelvo a conectar
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a456:	2b0c      	cmp	r3, #12
 800a458:	d009      	beq.n	800a46e <WiFi_Conn_ND+0xc02>
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a460:	2b01      	cmp	r3, #1
 800a462:	d004      	beq.n	800a46e <WiFi_Conn_ND+0xc02>
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a46a:	2b11      	cmp	r3, #17
 800a46c:	d10e      	bne.n	800a48c <WiFi_Conn_ND+0xc20>
					{
						ConectarWIFI(b);
 800a46e:	68f8      	ldr	r0, [r7, #12]
 800a470:	f7fc f9b4 	bl	80067dc <ConectarWIFI>
						b->_estado_conexion=CONEXION_EN_CURSO;
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	22c8      	movs	r2, #200	; 0xc8
 800a478:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	2200      	movs	r2, #0
 800a480:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	2200      	movs	r2, #0
 800a488:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
					}

					if((b->_estado==at_tcp_client_desc))	//Si se cierra la conexión vuelvo a conectar
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a492:	2b14      	cmp	r3, #20
 800a494:	d10f      	bne.n	800a4b6 <WiFi_Conn_ND+0xc4a>
					{
						ConectarTCP(b);
 800a496:	68f8      	ldr	r0, [r7, #12]
 800a498:	f7fc f9f8 	bl	800688c <ConectarTCP>
						b->_estado_conexion=TCP_CONN_EN_CURSO;
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	f44f 7216 	mov.w	r2, #600	; 0x258
 800a4a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	2200      	movs	r2, #0
 800a4aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX2
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	2200      	movs	r2, #0
 800a4b2:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
					}
					if((b->_estado==at_tcp_alrdy_cnntd_err)||(b->_estado==at_tcp_conectado))
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4bc:	2b10      	cmp	r3, #16
 800a4be:	d005      	beq.n	800a4cc <WiFi_Conn_ND+0xc60>
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4c6:	2b0e      	cmp	r3, #14
 800a4c8:	f040 861d 	bne.w	800b106 <WiFi_Conn_ND+0x189a>
					{
						if(b->_automatizacion >= WF_SEND )
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a4d2:	2b02      	cmp	r3, #2
 800a4d4:	f240 8617 	bls.w	800b106 <WiFi_Conn_ND+0x189a>
						{
							EnviarDatos(b);
 800a4d8:	68f8      	ldr	r0, [r7, #12]
 800a4da:	f7fc fa19 	bl	8006910 <EnviarDatos>
							b->_estado_conexion=TCP_SND_EN_CURSO;
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 800a4e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
							b->_estado=0;
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	2200      	movs	r2, #0
 800a4ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
							b->_n_orig=0; //Borro el vector Rx
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	2200      	movs	r2, #0
 800a4f4:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
						}
					}
			}
			break;
 800a4f8:	f000 be05 	b.w	800b106 <WiFi_Conn_ND+0x189a>
			case TCP_SND_EN_CURSO:			//Enviar datos a Servidor TCP
			{
				if((b->_estado!=TCP_SND_EN_CURSO)&&(b->_estado!=at_error)
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a502:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800a506:	d054      	beq.n	800a5b2 <WiFi_Conn_ND+0xd46>
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a50e:	2b02      	cmp	r3, #2
 800a510:	d04f      	beq.n	800a5b2 <WiFi_Conn_ND+0xd46>
									&&(b->_estado!=at_wifi_disconnect)
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a518:	2b0c      	cmp	r3, #12
 800a51a:	d04a      	beq.n	800a5b2 <WiFi_Conn_ND+0xd46>
									&&(b->_estado!=at_tcp_client_desc)
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a522:	2b14      	cmp	r3, #20
 800a524:	d045      	beq.n	800a5b2 <WiFi_Conn_ND+0xd46>
									&&(b->_estado!=at_tcp_snd_err)
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a52c:	2b17      	cmp	r3, #23
 800a52e:	d040      	beq.n	800a5b2 <WiFi_Conn_ND+0xd46>
									&&(b->_estado!=at_tcp_ok_to_send)
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a536:	2b15      	cmp	r3, #21
 800a538:	d03b      	beq.n	800a5b2 <WiFi_Conn_ND+0xd46>
									&&(b->_estado!=at_tcp_enviado_error))	//Si estoy conectando, no vuelvo a conectar.
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a540:	2b18      	cmp	r3, #24
 800a542:	d036      	beq.n	800a5b2 <WiFi_Conn_ND+0xd46>
				{

					if((b->_automatizacion >= WF_SEND)&&(b->_n_D2SND!=0))  // El envío por este medio es permanente
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a54a:	2b02      	cmp	r3, #2
 800a54c:	d907      	bls.n	800a55e <WiFi_Conn_ND+0xcf2>
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	f8d3 3cf0 	ldr.w	r3, [r3, #3312]	; 0xcf0
 800a554:	2b00      	cmp	r3, #0
 800a556:	d002      	beq.n	800a55e <WiFi_Conn_ND+0xcf2>
					{	/*Ensure to have data before sending*/
							EnviarDatos(b);
 800a558:	68f8      	ldr	r0, [r7, #12]
 800a55a:	f7fc f9d9 	bl	8006910 <EnviarDatos>
					}
						if(b->_enviaruart==1)
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 800a564:	2b01      	cmp	r3, #1
 800a566:	d124      	bne.n	800a5b2 <WiFi_Conn_ND+0xd46>
							{
								b->_estado=AT_ESP8266_ND(b);
 800a568:	68f8      	ldr	r0, [r7, #12]
 800a56a:	f7fc fab7 	bl	8006adc <AT_ESP8266_ND>
 800a56e:	4602      	mov	r2, r0
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_enviaruart=0;
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	2200      	movs	r2, #0
 800a57a:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	f8d3 3d5c 	ldr.w	r3, [r3, #3420]	; 0xd5c
 800a584:	2b01      	cmp	r3, #1
 800a586:	d109      	bne.n	800a59c <WiFi_Conn_ND+0xd30>
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	f503 6293 	add.w	r2, r3, #1176	; 0x498
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	f8d3 3cf4 	ldr.w	r3, [r3, #3316]	; 0xcf4
 800a594:	4619      	mov	r1, r3
 800a596:	4610      	mov	r0, r2
 800a598:	f7f7 f84e 	bl	8001638 <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	f503 6193 	add.w	r1, r3, #1176	; 0x498
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	f8d3 3cf4 	ldr.w	r3, [r3, #3316]	; 0xcf4
 800a5a8:	b29a      	uxth	r2, r3
 800a5aa:	2364      	movs	r3, #100	; 0x64
 800a5ac:	68b8      	ldr	r0, [r7, #8]
 800a5ae:	f7fb f85b 	bl	8005668 <HAL_UART_Transmit>
				&&(b->_estado!=at_tcp_client_desc)
				&&(b->_estado!=at_fail)		//240419
				&&(b->_estado!=at_tcp_snd_err)
				&&(b->_estado!=at_tcp_enviado_error))*/
				//if((b->_estado==TCP_SND_EN_CURSO)&&(b->_enviaruart==1)&&(b->_estado==at_tcp_ok_to_send))
				if((b->_enviaruart==1)&&(b->_estado==at_tcp_ok_to_send))
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 800a5b8:	2b01      	cmp	r3, #1
 800a5ba:	d122      	bne.n	800a602 <WiFi_Conn_ND+0xd96>
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a5c2:	2b15      	cmp	r3, #21
 800a5c4:	d11d      	bne.n	800a602 <WiFi_Conn_ND+0xd96>

							{
								b->_enviaruart=0;
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	2200      	movs	r2, #0
 800a5ca:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	f8d3 3d5c 	ldr.w	r3, [r3, #3420]	; 0xd5c
 800a5d4:	2b01      	cmp	r3, #1
 800a5d6:	d109      	bne.n	800a5ec <WiFi_Conn_ND+0xd80>
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	f503 6293 	add.w	r2, r3, #1176	; 0x498
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	f8d3 3cf4 	ldr.w	r3, [r3, #3316]	; 0xcf4
 800a5e4:	4619      	mov	r1, r3
 800a5e6:	4610      	mov	r0, r2
 800a5e8:	f7f7 f826 	bl	8001638 <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	f503 6193 	add.w	r1, r3, #1176	; 0x498
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	f8d3 3cf4 	ldr.w	r3, [r3, #3316]	; 0xcf4
 800a5f8:	b29a      	uxth	r2, r3
 800a5fa:	2364      	movs	r3, #100	; 0x64
 800a5fc:	68b8      	ldr	r0, [r7, #8]
 800a5fe:	f7fb f833 	bl	8005668 <HAL_UART_Transmit>
							}

				//----Condiciones de cambio de estado
				if((b->_estado==at_tcp_enviado_ok)) b->_estado_conexion=TCP_SND_OK;
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a608:	2b16      	cmp	r3, #22
 800a60a:	d104      	bne.n	800a616 <WiFi_Conn_ND+0xdaa>
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	f240 22c5 	movw	r2, #709	; 0x2c5
 800a612:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				if((b->_estado==at_error)||(b->_estado==at_wifi_disconnect)
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a61c:	2b02      	cmp	r3, #2
 800a61e:	d01e      	beq.n	800a65e <WiFi_Conn_ND+0xdf2>
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a626:	2b0c      	cmp	r3, #12
 800a628:	d019      	beq.n	800a65e <WiFi_Conn_ND+0xdf2>
										 ||(b->_estado==at_fail)
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a630:	2b03      	cmp	r3, #3
 800a632:	d014      	beq.n	800a65e <WiFi_Conn_ND+0xdf2>
										 ||(b->_estado==at_tcp_noip_err)
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a63a:	2b11      	cmp	r3, #17
 800a63c:	d00f      	beq.n	800a65e <WiFi_Conn_ND+0xdf2>
										 ||(b->_estado==at_tcp_client_desc)
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a644:	2b14      	cmp	r3, #20
 800a646:	d00a      	beq.n	800a65e <WiFi_Conn_ND+0xdf2>
										 ||(b->_estado==at_tcp_snd_err)
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a64e:	2b17      	cmp	r3, #23
 800a650:	d005      	beq.n	800a65e <WiFi_Conn_ND+0xdf2>
										 ||(b->_estado==at_tcp_enviado_error))
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a658:	2b18      	cmp	r3, #24
 800a65a:	f040 8556 	bne.w	800b10a <WiFi_Conn_ND+0x189e>
					{
					b->_estado_conexion=TCP_SND_ERROR;
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	f240 22c1 	movw	r2, #705	; 0x2c1
 800a664:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_enviaruart==0;		//Si hay error no me arriesgo a que envíe algo
					}
				//----Condiciones de cambio de estado
			}
			break;
 800a668:	f000 bd4f 	b.w	800b10a <WiFi_Conn_ND+0x189e>
			case TCP_SND_ERROR://Error al Enviar datos a Servidor TCP
			{
				NOP(b);
 800a66c:	68f8      	ldr	r0, [r7, #12]
 800a66e:	f7fc f889 	bl	8006784 <NOP>
				if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a678:	2b04      	cmp	r3, #4
 800a67a:	d112      	bne.n	800a6a2 <WiFi_Conn_ND+0xe36>
				{
					Cambiar_CWMODE(b);
 800a67c:	68f8      	ldr	r0, [r7, #12]
 800a67e:	f7fc f897 	bl	80067b0 <Cambiar_CWMODE>
					b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	2264      	movs	r2, #100	; 0x64
 800a686:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	2200      	movs	r2, #0
 800a68e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	2200      	movs	r2, #0
 800a696:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4

					b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	2200      	movs	r2, #0
 800a69e:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
				}
				if((b->_estado==at_wifi_disconnect)
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a6a8:	2b0c      	cmp	r3, #12
 800a6aa:	d013      	beq.n	800a6d4 <WiFi_Conn_ND+0xe68>
						||(b->_estado==at_deconectar_ok )
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a6b2:	2b0d      	cmp	r3, #13
 800a6b4:	d00e      	beq.n	800a6d4 <WiFi_Conn_ND+0xe68>
						||(b->_estado==at_fail)
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a6bc:	2b03      	cmp	r3, #3
 800a6be:	d009      	beq.n	800a6d4 <WiFi_Conn_ND+0xe68>
						||(b->_estado!=at_error)
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a6c6:	2b02      	cmp	r3, #2
 800a6c8:	d104      	bne.n	800a6d4 <WiFi_Conn_ND+0xe68>
						||(b->_estado!=at_tcp_noip_err)) //Si me desconecto, me vuelvo a conectar 240419
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a6d0:	2b11      	cmp	r3, #17
 800a6d2:	d00e      	beq.n	800a6f2 <WiFi_Conn_ND+0xe86>
				{
					ConectarWIFI(b);
 800a6d4:	68f8      	ldr	r0, [r7, #12]
 800a6d6:	f7fc f881 	bl	80067dc <ConectarWIFI>
					b->_estado_conexion=CONEXION_EN_CURSO;
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	22c8      	movs	r2, #200	; 0xc8
 800a6de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	2200      	movs	r2, #0
 800a6e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	2200      	movs	r2, #0
 800a6ee:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
				}

				if((b->_estado==at_wifi_gotip))	//220130 Si se cayó la conexion y vuelve a conectar, que conecte TCP nuevamente
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a6f8:	2b06      	cmp	r3, #6
 800a6fa:	d10f      	bne.n	800a71c <WiFi_Conn_ND+0xeb0>
				{
					ConectarTCP(b);
 800a6fc:	68f8      	ldr	r0, [r7, #12]
 800a6fe:	f7fc f8c5 	bl	800688c <ConectarTCP>
					b->_estado_conexion=TCP_CONN_EN_CURSO;
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	f44f 7216 	mov.w	r2, #600	; 0x258
 800a708:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	2200      	movs	r2, #0
 800a710:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	2200      	movs	r2, #0
 800a718:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
				}

				if((b->_estado==at_error)||(b->_estado==at_tcp_client_desc)
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a722:	2b02      	cmp	r3, #2
 800a724:	d00f      	beq.n	800a746 <WiFi_Conn_ND+0xeda>
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a72c:	2b14      	cmp	r3, #20
 800a72e:	d00a      	beq.n	800a746 <WiFi_Conn_ND+0xeda>
										 ||(b->_estado==at_tcp_snd_err)
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a736:	2b17      	cmp	r3, #23
 800a738:	d005      	beq.n	800a746 <WiFi_Conn_ND+0xeda>
										 ||(b->_estado==at_tcp_enviado_error))	//Si se cierra la conexión vuelvo a conectar
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a740:	2b18      	cmp	r3, #24
 800a742:	f040 84e4 	bne.w	800b10e <WiFi_Conn_ND+0x18a2>
				{
					ConectarTCP(b);
 800a746:	68f8      	ldr	r0, [r7, #12]
 800a748:	f7fc f8a0 	bl	800688c <ConectarTCP>
					b->_estado_conexion=TCP_CONN_EN_CURSO;
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	f44f 7216 	mov.w	r2, #600	; 0x258
 800a752:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	2200      	movs	r2, #0
 800a75a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	2200      	movs	r2, #0
 800a762:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
				}
			}
			break;
 800a766:	f000 bcd2 	b.w	800b10e <WiFi_Conn_ND+0x18a2>
			case TCP_SND_OK://Enviar datos a Servidor TCP OK
			{
				NOP(b);
 800a76a:	68f8      	ldr	r0, [r7, #12]
 800a76c:	f7fc f80a 	bl	8006784 <NOP>

					if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a776:	2b04      	cmp	r3, #4
 800a778:	d112      	bne.n	800a7a0 <WiFi_Conn_ND+0xf34>
					{
						Cambiar_CWMODE(b);
 800a77a:	68f8      	ldr	r0, [r7, #12]
 800a77c:	f7fc f818 	bl	80067b0 <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	2264      	movs	r2, #100	; 0x64
 800a784:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	2200      	movs	r2, #0
 800a78c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	2200      	movs	r2, #0
 800a794:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4

						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	2200      	movs	r2, #0
 800a79c:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
					if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a7a6:	2b0c      	cmp	r3, #12
 800a7a8:	d009      	beq.n	800a7be <WiFi_Conn_ND+0xf52>
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a7b0:	2b0d      	cmp	r3, #13
 800a7b2:	d004      	beq.n	800a7be <WiFi_Conn_ND+0xf52>
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a7ba:	2b03      	cmp	r3, #3
 800a7bc:	d10e      	bne.n	800a7dc <WiFi_Conn_ND+0xf70>
					{
						ConectarWIFI(b);
 800a7be:	68f8      	ldr	r0, [r7, #12]
 800a7c0:	f7fc f80c 	bl	80067dc <ConectarWIFI>
						b->_estado_conexion=CONEXION_EN_CURSO;
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	22c8      	movs	r2, #200	; 0xc8
 800a7c8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	2200      	movs	r2, #0
 800a7d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	2200      	movs	r2, #0
 800a7d8:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
					}
					if((b->_estado==at_error)||(b->_estado==at_wifi_connected)||(b->_estado==at_wifi_gotip)||(b->_estado==at_tcp_client_desc))	//Si se cierra la conexión vuelvo a conectar
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a7e2:	2b02      	cmp	r3, #2
 800a7e4:	d00e      	beq.n	800a804 <WiFi_Conn_ND+0xf98>
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a7ec:	2b0d      	cmp	r3, #13
 800a7ee:	d009      	beq.n	800a804 <WiFi_Conn_ND+0xf98>
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a7f6:	2b06      	cmp	r3, #6
 800a7f8:	d004      	beq.n	800a804 <WiFi_Conn_ND+0xf98>
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a800:	2b14      	cmp	r3, #20
 800a802:	d10f      	bne.n	800a824 <WiFi_Conn_ND+0xfb8>
					{
						ConectarTCP(b);
 800a804:	68f8      	ldr	r0, [r7, #12]
 800a806:	f7fc f841 	bl	800688c <ConectarTCP>
						b->_estado_conexion=TCP_CONN_EN_CURSO;
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	f44f 7216 	mov.w	r2, #600	; 0x258
 800a810:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	2200      	movs	r2, #0
 800a818:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	2200      	movs	r2, #0
 800a820:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
					}
					//EVITO EL REENVÍO PERMANENTE CON CLIENTE TCO, SOLO BAJO DEMANDA

					HAL_Delay(200);
 800a824:	20c8      	movs	r0, #200	; 0xc8
 800a826:	f7f8 fa6b 	bl	8002d00 <HAL_Delay>
					if((b->_automatizacion >= WF_SEND)&&(b->_n_D2SND!=0))//Check data availability after send process
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a830:	2b02      	cmp	r3, #2
 800a832:	d916      	bls.n	800a862 <WiFi_Conn_ND+0xff6>
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	f8d3 3cf0 	ldr.w	r3, [r3, #3312]	; 0xcf0
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d011      	beq.n	800a862 <WiFi_Conn_ND+0xff6>
					{
							EnviarDatos(b);
 800a83e:	68f8      	ldr	r0, [r7, #12]
 800a840:	f7fc f866 	bl	8006910 <EnviarDatos>
							b->_estado_conexion=TCP_SND_EN_CURSO;
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 800a84a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
							b->_estado=0;
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	2200      	movs	r2, #0
 800a852:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
							b->_n_orig=0; //Borro el vector RX
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	2200      	movs	r2, #0
 800a85a:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
							b->_estado=0;
							b->_n_orig=0;

					}
			}
			break;
 800a85e:	f000 bc69 	b.w	800b134 <WiFi_Conn_ND+0x18c8>
							b->_estado_conexion=TCP_CONN_OK;
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	f240 2261 	movw	r2, #609	; 0x261
 800a868:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
							b->_estado=0;
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	2200      	movs	r2, #0
 800a870:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
							b->_n_orig=0;
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	2200      	movs	r2, #0
 800a878:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
			break;
 800a87c:	f000 bc5a 	b.w	800b134 <WiFi_Conn_ND+0x18c8>
			case TCP_SRVR_EN_CURSO:			//Conectar Servidor TCP local
						{
							if((b->_estado!=TCP_SRVR_EN_CURSO)&&(b->_estado!=at_error)&&(b->_estado!=at_wifi_disconnect)&&(b->_estado!=21)&&(b->_estado!=22)&&(b->_estado!=23))	//Si estoy conectando, no vuelvo a conectar.
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a886:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800a88a:	d045      	beq.n	800a918 <WiFi_Conn_ND+0x10ac>
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a892:	2b02      	cmp	r3, #2
 800a894:	d040      	beq.n	800a918 <WiFi_Conn_ND+0x10ac>
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a89c:	2b0c      	cmp	r3, #12
 800a89e:	d03b      	beq.n	800a918 <WiFi_Conn_ND+0x10ac>
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a8a6:	2b15      	cmp	r3, #21
 800a8a8:	d036      	beq.n	800a918 <WiFi_Conn_ND+0x10ac>
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a8b0:	2b16      	cmp	r3, #22
 800a8b2:	d031      	beq.n	800a918 <WiFi_Conn_ND+0x10ac>
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a8ba:	2b17      	cmp	r3, #23
 800a8bc:	d02c      	beq.n	800a918 <WiFi_Conn_ND+0x10ac>
							{
								CrearServidorTCP(b);
 800a8be:	68f8      	ldr	r0, [r7, #12]
 800a8c0:	f7fb fffa 	bl	80068b8 <CrearServidorTCP>
									if(b->_enviaruart==1)
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 800a8ca:	2b01      	cmp	r3, #1
 800a8cc:	d124      	bne.n	800a918 <WiFi_Conn_ND+0x10ac>
										{
											b->_estado=AT_ESP8266_ND(b);
 800a8ce:	68f8      	ldr	r0, [r7, #12]
 800a8d0:	f7fc f904 	bl	8006adc <AT_ESP8266_ND>
 800a8d4:	4602      	mov	r2, r0
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
											b->_enviaruart=0;
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	2200      	movs	r2, #0
 800a8e0:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
											if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	f8d3 3d5c 	ldr.w	r3, [r3, #3420]	; 0xd5c
 800a8ea:	2b01      	cmp	r3, #1
 800a8ec:	d109      	bne.n	800a902 <WiFi_Conn_ND+0x1096>
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	f503 6293 	add.w	r2, r3, #1176	; 0x498
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	f8d3 3cf4 	ldr.w	r3, [r3, #3316]	; 0xcf4
 800a8fa:	4619      	mov	r1, r3
 800a8fc:	4610      	mov	r0, r2
 800a8fe:	f7f6 fe9b 	bl	8001638 <ITM0_Write>
											HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	f503 6193 	add.w	r1, r3, #1176	; 0x498
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	f8d3 3cf4 	ldr.w	r3, [r3, #3316]	; 0xcf4
 800a90e:	b29a      	uxth	r2, r3
 800a910:	2364      	movs	r3, #100	; 0x64
 800a912:	68b8      	ldr	r0, [r7, #8]
 800a914:	f7fa fea8 	bl	8005668 <HAL_UART_Transmit>

										}
							}

							//----Condiciones de cambio de estado
							if((b->_estado==21)||(b->_estado==23)) b->_estado_conexion=TCP_SRVR_OK;
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a91e:	2b15      	cmp	r3, #21
 800a920:	d004      	beq.n	800a92c <WiFi_Conn_ND+0x10c0>
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a928:	2b17      	cmp	r3, #23
 800a92a:	d104      	bne.n	800a936 <WiFi_Conn_ND+0x10ca>
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	f240 3229 	movw	r2, #809	; 0x329
 800a932:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
							if((b->_estado==22)) b->_estado_conexion=TCP_SRVR_ERROR;
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a93c:	2b16      	cmp	r3, #22
 800a93e:	f040 83e8 	bne.w	800b112 <WiFi_Conn_ND+0x18a6>
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	f240 3225 	movw	r2, #805	; 0x325
 800a948:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
							//----Condiciones de cambio de estado
						}
						break;
 800a94c:	e3e1      	b.n	800b112 <WiFi_Conn_ND+0x18a6>
						case TCP_SRVR_ERROR://Error al Conectar Servidor TCP local
						{
							NOP(b);
 800a94e:	68f8      	ldr	r0, [r7, #12]
 800a950:	f7fb ff18 	bl	8006784 <NOP>
							if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a95a:	2b04      	cmp	r3, #4
 800a95c:	d112      	bne.n	800a984 <WiFi_Conn_ND+0x1118>
							{
								Cambiar_CWMODE(b);
 800a95e:	68f8      	ldr	r0, [r7, #12]
 800a960:	f7fb ff26 	bl	80067b0 <Cambiar_CWMODE>
								b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	2264      	movs	r2, #100	; 0x64
 800a968:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	2200      	movs	r2, #0
 800a970:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	2200      	movs	r2, #0
 800a978:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4

								b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	2200      	movs	r2, #0
 800a980:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
							}
							if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a98a:	2b0c      	cmp	r3, #12
 800a98c:	d009      	beq.n	800a9a2 <WiFi_Conn_ND+0x1136>
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a994:	2b0d      	cmp	r3, #13
 800a996:	d004      	beq.n	800a9a2 <WiFi_Conn_ND+0x1136>
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a99e:	2b03      	cmp	r3, #3
 800a9a0:	d10e      	bne.n	800a9c0 <WiFi_Conn_ND+0x1154>
							{
								ConectarWIFI(b);
 800a9a2:	68f8      	ldr	r0, [r7, #12]
 800a9a4:	f7fb ff1a 	bl	80067dc <ConectarWIFI>
								b->_estado_conexion=CONEXION_EN_CURSO;
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	22c8      	movs	r2, #200	; 0xc8
 800a9ac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	2200      	movs	r2, #0
 800a9b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	2200      	movs	r2, #0
 800a9bc:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
							}

							if((b->_estado==at_error)||(b->_estado==at_tcp_client_desc))	//Si se cierra la conexión vuelvo a conectar
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a9c6:	2b02      	cmp	r3, #2
 800a9c8:	d005      	beq.n	800a9d6 <WiFi_Conn_ND+0x116a>
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a9d0:	2b14      	cmp	r3, #20
 800a9d2:	f040 83a0 	bne.w	800b116 <WiFi_Conn_ND+0x18aa>
							{
								ConectarTCP(b);
 800a9d6:	68f8      	ldr	r0, [r7, #12]
 800a9d8:	f7fb ff58 	bl	800688c <ConectarTCP>
								b->_estado_conexion=TCP_CONN_EN_CURSO;
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	f44f 7216 	mov.w	r2, #600	; 0x258
 800a9e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	2200      	movs	r2, #0
 800a9ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	2200      	movs	r2, #0
 800a9f2:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4

								b->_TCP_Local_Server_Initiated=0;//	//Indico servidor debe ser iniciado
							}*/

						}
						break;
 800a9f6:	e38e      	b.n	800b116 <WiFi_Conn_ND+0x18aa>
						case TCP_SRVR_CLIENT_DSCNN://Error Conectar Servidor TCP local
						{
							NOP(b);
 800a9f8:	68f8      	ldr	r0, [r7, #12]
 800a9fa:	f7fb fec3 	bl	8006784 <NOP>
							if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa04:	2b04      	cmp	r3, #4
 800aa06:	d112      	bne.n	800aa2e <WiFi_Conn_ND+0x11c2>
							{
								Cambiar_CWMODE(b);
 800aa08:	68f8      	ldr	r0, [r7, #12]
 800aa0a:	f7fb fed1 	bl	80067b0 <Cambiar_CWMODE>
								b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	2264      	movs	r2, #100	; 0x64
 800aa12:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	2200      	movs	r2, #0
 800aa1a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	2200      	movs	r2, #0
 800aa22:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4

								b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	2200      	movs	r2, #0
 800aa2a:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
							}
							if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa34:	2b0c      	cmp	r3, #12
 800aa36:	d009      	beq.n	800aa4c <WiFi_Conn_ND+0x11e0>
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa3e:	2b0d      	cmp	r3, #13
 800aa40:	d004      	beq.n	800aa4c <WiFi_Conn_ND+0x11e0>
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa48:	2b03      	cmp	r3, #3
 800aa4a:	d10e      	bne.n	800aa6a <WiFi_Conn_ND+0x11fe>
							{
								ConectarWIFI(b);
 800aa4c:	68f8      	ldr	r0, [r7, #12]
 800aa4e:	f7fb fec5 	bl	80067dc <ConectarWIFI>
								b->_estado_conexion=CONEXION_EN_CURSO;
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	22c8      	movs	r2, #200	; 0xc8
 800aa56:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	2200      	movs	r2, #0
 800aa5e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	2200      	movs	r2, #0
 800aa66:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
							}

							if((b->_estado==at_error)||(b->_estado==at_tcp_client_desc))	//Si se cierra la conexión vuelvo a conectar
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa70:	2b02      	cmp	r3, #2
 800aa72:	d005      	beq.n	800aa80 <WiFi_Conn_ND+0x1214>
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa7a:	2b14      	cmp	r3, #20
 800aa7c:	f040 834d 	bne.w	800b11a <WiFi_Conn_ND+0x18ae>
							{
								ConectarTCP(b);
 800aa80:	68f8      	ldr	r0, [r7, #12]
 800aa82:	f7fb ff03 	bl	800688c <ConectarTCP>
								b->_estado_conexion=TCP_CONN_EN_CURSO;
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	f44f 7216 	mov.w	r2, #600	; 0x258
 800aa8c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	2200      	movs	r2, #0
 800aa94:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	2200      	movs	r2, #0
 800aa9c:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
							}
						}
						break;
 800aaa0:	e33b      	b.n	800b11a <WiFi_Conn_ND+0x18ae>
						case TCP_SRVR_CLIENT_RX://Error al Conectar Servidor TCP local
						{
							NOP(b);
 800aaa2:	68f8      	ldr	r0, [r7, #12]
 800aaa4:	f7fb fe6e 	bl	8006784 <NOP>
							if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aaae:	2b04      	cmp	r3, #4
 800aab0:	d112      	bne.n	800aad8 <WiFi_Conn_ND+0x126c>
							{
								Cambiar_CWMODE(b);
 800aab2:	68f8      	ldr	r0, [r7, #12]
 800aab4:	f7fb fe7c 	bl	80067b0 <Cambiar_CWMODE>
								b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	2264      	movs	r2, #100	; 0x64
 800aabc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	2200      	movs	r2, #0
 800aac4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	2200      	movs	r2, #0
 800aacc:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4

								b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	2200      	movs	r2, #0
 800aad4:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
							}
							if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aade:	2b0c      	cmp	r3, #12
 800aae0:	d009      	beq.n	800aaf6 <WiFi_Conn_ND+0x128a>
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aae8:	2b0d      	cmp	r3, #13
 800aaea:	d004      	beq.n	800aaf6 <WiFi_Conn_ND+0x128a>
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aaf2:	2b03      	cmp	r3, #3
 800aaf4:	d10e      	bne.n	800ab14 <WiFi_Conn_ND+0x12a8>
							{
								ConectarWIFI(b);
 800aaf6:	68f8      	ldr	r0, [r7, #12]
 800aaf8:	f7fb fe70 	bl	80067dc <ConectarWIFI>
								b->_estado_conexion=CONEXION_EN_CURSO;
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	22c8      	movs	r2, #200	; 0xc8
 800ab00:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	2200      	movs	r2, #0
 800ab08:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	2200      	movs	r2, #0
 800ab10:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
							}

							if((b->_estado==at_error)||(b->_estado==at_tcp_client_desc))	//Si se cierra la conexión vuelvo a conectar
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab1a:	2b02      	cmp	r3, #2
 800ab1c:	d005      	beq.n	800ab2a <WiFi_Conn_ND+0x12be>
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab24:	2b14      	cmp	r3, #20
 800ab26:	f040 82fa 	bne.w	800b11e <WiFi_Conn_ND+0x18b2>
							{
								ConectarTCP(b);
 800ab2a:	68f8      	ldr	r0, [r7, #12]
 800ab2c:	f7fb feae 	bl	800688c <ConectarTCP>
								b->_estado_conexion=TCP_CONN_EN_CURSO;
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	f44f 7216 	mov.w	r2, #600	; 0x258
 800ab36:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	2200      	movs	r2, #0
 800ab3e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	2200      	movs	r2, #0
 800ab46:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
							}
						}
						break;
 800ab4a:	e2e8      	b.n	800b11e <WiFi_Conn_ND+0x18b2>
						case TCP_SRVR_CLIENT_CNN://Error al Conectar Servidor TCP local
						{
							NOP(b);
 800ab4c:	68f8      	ldr	r0, [r7, #12]
 800ab4e:	f7fb fe19 	bl	8006784 <NOP>
							if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab58:	2b04      	cmp	r3, #4
 800ab5a:	d112      	bne.n	800ab82 <WiFi_Conn_ND+0x1316>
							{
								Cambiar_CWMODE(b);
 800ab5c:	68f8      	ldr	r0, [r7, #12]
 800ab5e:	f7fb fe27 	bl	80067b0 <Cambiar_CWMODE>
								b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	2264      	movs	r2, #100	; 0x64
 800ab66:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	2200      	movs	r2, #0
 800ab6e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	2200      	movs	r2, #0
 800ab76:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4

								b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	2200      	movs	r2, #0
 800ab7e:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
							}
							if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab88:	2b0c      	cmp	r3, #12
 800ab8a:	d009      	beq.n	800aba0 <WiFi_Conn_ND+0x1334>
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab92:	2b0d      	cmp	r3, #13
 800ab94:	d004      	beq.n	800aba0 <WiFi_Conn_ND+0x1334>
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab9c:	2b03      	cmp	r3, #3
 800ab9e:	d10e      	bne.n	800abbe <WiFi_Conn_ND+0x1352>
							{
								ConectarWIFI(b);
 800aba0:	68f8      	ldr	r0, [r7, #12]
 800aba2:	f7fb fe1b 	bl	80067dc <ConectarWIFI>
								b->_estado_conexion=CONEXION_EN_CURSO;
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	22c8      	movs	r2, #200	; 0xc8
 800abaa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	2200      	movs	r2, #0
 800abb2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	2200      	movs	r2, #0
 800abba:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
							}

							if((b->_estado==at_error)||(b->_estado==at_tcp_client_desc))	//Si se cierra la conexión vuelvo a conectar
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800abc4:	2b02      	cmp	r3, #2
 800abc6:	d005      	beq.n	800abd4 <WiFi_Conn_ND+0x1368>
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800abce:	2b14      	cmp	r3, #20
 800abd0:	f040 82a7 	bne.w	800b122 <WiFi_Conn_ND+0x18b6>
							{
								ConectarTCP(b);
 800abd4:	68f8      	ldr	r0, [r7, #12]
 800abd6:	f7fb fe59 	bl	800688c <ConectarTCP>
								b->_estado_conexion=TCP_CONN_EN_CURSO;
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	f44f 7216 	mov.w	r2, #600	; 0x258
 800abe0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	2200      	movs	r2, #0
 800abe8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	2200      	movs	r2, #0
 800abf0:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
							}
						}
						break;
 800abf4:	e295      	b.n	800b122 <WiFi_Conn_ND+0x18b6>
						case TCP_SRVR_OK://Conectar Servidor TCP local OK
						{
							NOP(b);
 800abf6:	68f8      	ldr	r0, [r7, #12]
 800abf8:	f7fb fdc4 	bl	8006784 <NOP>
								b->_TCP_Local_Server_Initiated=1;
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	2201      	movs	r2, #1
 800ac00:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83

								if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac0a:	2b04      	cmp	r3, #4
 800ac0c:	d112      	bne.n	800ac34 <WiFi_Conn_ND+0x13c8>
								{
									Cambiar_CWMODE(b);
 800ac0e:	68f8      	ldr	r0, [r7, #12]
 800ac10:	f7fb fdce 	bl	80067b0 <Cambiar_CWMODE>
									b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	2264      	movs	r2, #100	; 0x64
 800ac18:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	2200      	movs	r2, #0
 800ac20:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	2200      	movs	r2, #0
 800ac28:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4

									b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	2200      	movs	r2, #0
 800ac30:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
								}
								if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac3a:	2b0c      	cmp	r3, #12
 800ac3c:	d009      	beq.n	800ac52 <WiFi_Conn_ND+0x13e6>
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac44:	2b0d      	cmp	r3, #13
 800ac46:	d004      	beq.n	800ac52 <WiFi_Conn_ND+0x13e6>
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac4e:	2b03      	cmp	r3, #3
 800ac50:	d10e      	bne.n	800ac70 <WiFi_Conn_ND+0x1404>
								{
									ConectarWIFI(b);
 800ac52:	68f8      	ldr	r0, [r7, #12]
 800ac54:	f7fb fdc2 	bl	80067dc <ConectarWIFI>
									b->_estado_conexion=CONEXION_EN_CURSO;
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	22c8      	movs	r2, #200	; 0xc8
 800ac5c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	2200      	movs	r2, #0
 800ac64:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	2200      	movs	r2, #0
 800ac6c:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
								}
								if((b->_estado==at_error)||(b->_estado==at_tcp_client_desc))	//Si se cierra la conexión vuelvo a conectar
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac76:	2b02      	cmp	r3, #2
 800ac78:	d004      	beq.n	800ac84 <WiFi_Conn_ND+0x1418>
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac80:	2b14      	cmp	r3, #20
 800ac82:	d10f      	bne.n	800aca4 <WiFi_Conn_ND+0x1438>
								{
									ConectarTCP(b);
 800ac84:	68f8      	ldr	r0, [r7, #12]
 800ac86:	f7fb fe01 	bl	800688c <ConectarTCP>
									b->_estado_conexion=TCP_CONN_EN_CURSO;
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	f44f 7216 	mov.w	r2, #600	; 0x258
 800ac90:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	2200      	movs	r2, #0
 800ac98:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	2200      	movs	r2, #0
 800aca0:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
									b->_estado_conexion=TCP_SRVR_TX_EN_CURSO;
									b->_estado=0;
									b->_n_orig=0; //Borro el vector RX
								}*/

								if((b->_send_data==1)&&(b->_n_D2SND!=0)) //Check data availability after send process
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	f8d3 3a9c 	ldr.w	r3, [r3, #2716]	; 0xa9c
 800acaa:	2b01      	cmp	r3, #1
 800acac:	f040 823b 	bne.w	800b126 <WiFi_Conn_ND+0x18ba>
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	f8d3 3cf0 	ldr.w	r3, [r3, #3312]	; 0xcf0
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	f000 8235 	beq.w	800b126 <WiFi_Conn_ND+0x18ba>
								{
									EnviarDatosSRVR(b);
 800acbc:	68f8      	ldr	r0, [r7, #12]
 800acbe:	f7fb fe11 	bl	80068e4 <EnviarDatosSRVR>
									b->_estado_conexion=TCP_SRVR_TX_EN_CURSO;
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	f44f 7261 	mov.w	r2, #900	; 0x384
 800acc8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	2200      	movs	r2, #0
 800acd0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	2200      	movs	r2, #0
 800acd8:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
									b->_send_data==0;//b->_new_data_rcv=0; 220219
								}
						}
						break;
 800acdc:	e223      	b.n	800b126 <WiFi_Conn_ND+0x18ba>

						case TCP_SRVR_TX_EN_CURSO:			//Enviar datos desde Servidor TCP
						{
							if((b->_estado!=TCP_SRVR_TX_EN_CURSO)&&(b->_estado!=at_error)&&
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ace4:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 800ace8:	d063      	beq.n	800adb2 <WiFi_Conn_ND+0x1546>
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800acf0:	2b02      	cmp	r3, #2
 800acf2:	d05e      	beq.n	800adb2 <WiFi_Conn_ND+0x1546>
							   (b->_estado!=at_wifi_disconnect)&&
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							if((b->_estado!=TCP_SRVR_TX_EN_CURSO)&&(b->_estado!=at_error)&&
 800acfa:	2b0c      	cmp	r3, #12
 800acfc:	d059      	beq.n	800adb2 <WiFi_Conn_ND+0x1546>
							   (b->_estado!=at_wifi_connected)&&
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_wifi_disconnect)&&
 800ad04:	2b0d      	cmp	r3, #13
 800ad06:	d054      	beq.n	800adb2 <WiFi_Conn_ND+0x1546>
							   (b->_estado!=at_wifi_gotip)&&
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_wifi_connected)&&
 800ad0e:	2b06      	cmp	r3, #6
 800ad10:	d04f      	beq.n	800adb2 <WiFi_Conn_ND+0x1546>
							   (b->_estado!=at_tcp_client_desc)&&
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_wifi_gotip)&&
 800ad18:	2b14      	cmp	r3, #20
 800ad1a:	d04a      	beq.n	800adb2 <WiFi_Conn_ND+0x1546>
							   (b->_estado!=at_tcp_snd_err)&&
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_tcp_client_desc)&&
 800ad22:	2b17      	cmp	r3, #23
 800ad24:	d045      	beq.n	800adb2 <WiFi_Conn_ND+0x1546>
							   (b->_estado!=at_tcp_enviado_error)&&
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_tcp_snd_err)&&
 800ad2c:	2b18      	cmp	r3, #24
 800ad2e:	d040      	beq.n	800adb2 <WiFi_Conn_ND+0x1546>
							   (b->_estado!=at_tcp_enviado_ok)&&
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_tcp_enviado_error)&&
 800ad36:	2b16      	cmp	r3, #22
 800ad38:	d03b      	beq.n	800adb2 <WiFi_Conn_ND+0x1546>
							   (b->_estado!=22)&&(b->_estado!=25)&&(b->_n_D2SND!=0))	//Check data availability after send process
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_tcp_enviado_ok)&&
 800ad40:	2b16      	cmp	r3, #22
 800ad42:	d036      	beq.n	800adb2 <WiFi_Conn_ND+0x1546>
							   (b->_estado!=22)&&(b->_estado!=25)&&(b->_n_D2SND!=0))	//Check data availability after send process
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad4a:	2b19      	cmp	r3, #25
 800ad4c:	d031      	beq.n	800adb2 <WiFi_Conn_ND+0x1546>
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	f8d3 3cf0 	ldr.w	r3, [r3, #3312]	; 0xcf0
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d02c      	beq.n	800adb2 <WiFi_Conn_ND+0x1546>
								{
								EnviarDatosSRVR(b);
 800ad58:	68f8      	ldr	r0, [r7, #12]
 800ad5a:	f7fb fdc3 	bl	80068e4 <EnviarDatosSRVR>
									if(b->_enviaruart==1)
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 800ad64:	2b01      	cmp	r3, #1
 800ad66:	d124      	bne.n	800adb2 <WiFi_Conn_ND+0x1546>
										{
											b->_estado=AT_ESP8266_ND(b);
 800ad68:	68f8      	ldr	r0, [r7, #12]
 800ad6a:	f7fb feb7 	bl	8006adc <AT_ESP8266_ND>
 800ad6e:	4602      	mov	r2, r0
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
											b->_enviaruart=0;
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	2200      	movs	r2, #0
 800ad7a:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
											if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	f8d3 3d5c 	ldr.w	r3, [r3, #3420]	; 0xd5c
 800ad84:	2b01      	cmp	r3, #1
 800ad86:	d109      	bne.n	800ad9c <WiFi_Conn_ND+0x1530>
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	f503 6293 	add.w	r2, r3, #1176	; 0x498
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	f8d3 3cf4 	ldr.w	r3, [r3, #3316]	; 0xcf4
 800ad94:	4619      	mov	r1, r3
 800ad96:	4610      	mov	r0, r2
 800ad98:	f7f6 fc4e 	bl	8001638 <ITM0_Write>
											HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	f503 6193 	add.w	r1, r3, #1176	; 0x498
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	f8d3 3cf4 	ldr.w	r3, [r3, #3316]	; 0xcf4
 800ada8:	b29a      	uxth	r2, r3
 800adaa:	2364      	movs	r3, #100	; 0x64
 800adac:	68b8      	ldr	r0, [r7, #8]
 800adae:	f7fa fc5b 	bl	8005668 <HAL_UART_Transmit>


										}
							}
									if((b->_estado==TCP_SRVR_TX_EN_CURSO)&&(b->_enviaruart==1)&&
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800adb8:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 800adbc:	d154      	bne.n	800ae68 <WiFi_Conn_ND+0x15fc>
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 800adc4:	2b01      	cmp	r3, #1
 800adc6:	d14f      	bne.n	800ae68 <WiFi_Conn_ND+0x15fc>
									   (b->_estado!=at_error)&&
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									if((b->_estado==TCP_SRVR_TX_EN_CURSO)&&(b->_enviaruart==1)&&
 800adce:	2b02      	cmp	r3, #2
 800add0:	d04a      	beq.n	800ae68 <WiFi_Conn_ND+0x15fc>
									   (b->_estado!=at_wifi_disconnect)&&
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_error)&&
 800add8:	2b0c      	cmp	r3, #12
 800adda:	d045      	beq.n	800ae68 <WiFi_Conn_ND+0x15fc>
									   (b->_estado!=at_wifi_connected)&&
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_wifi_disconnect)&&
 800ade2:	2b0d      	cmp	r3, #13
 800ade4:	d040      	beq.n	800ae68 <WiFi_Conn_ND+0x15fc>
									   (b->_estado!=at_wifi_gotip)&&
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_wifi_connected)&&
 800adec:	2b06      	cmp	r3, #6
 800adee:	d03b      	beq.n	800ae68 <WiFi_Conn_ND+0x15fc>
									   (b->_estado!=at_tcp_client_desc)&&
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_wifi_gotip)&&
 800adf6:	2b14      	cmp	r3, #20
 800adf8:	d036      	beq.n	800ae68 <WiFi_Conn_ND+0x15fc>
									   (b->_estado!=at_tcp_snd_err)&&
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_tcp_client_desc)&&
 800ae00:	2b17      	cmp	r3, #23
 800ae02:	d031      	beq.n	800ae68 <WiFi_Conn_ND+0x15fc>
									   (b->_estado!=at_tcp_enviado_error)&&
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_tcp_snd_err)&&
 800ae0a:	2b18      	cmp	r3, #24
 800ae0c:	d02c      	beq.n	800ae68 <WiFi_Conn_ND+0x15fc>
									   (b->_estado!=at_tcp_enviado_ok)&&
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_tcp_enviado_error)&&
 800ae14:	2b16      	cmp	r3, #22
 800ae16:	d027      	beq.n	800ae68 <WiFi_Conn_ND+0x15fc>
									   (b->_estado!=22)&&(b->_estado!=25))//210630 Se agrega 11 y 12 //
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_tcp_enviado_ok)&&
 800ae1e:	2b16      	cmp	r3, #22
 800ae20:	d022      	beq.n	800ae68 <WiFi_Conn_ND+0x15fc>
									   (b->_estado!=22)&&(b->_estado!=25))//210630 Se agrega 11 y 12 //
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae28:	2b19      	cmp	r3, #25
 800ae2a:	d01d      	beq.n	800ae68 <WiFi_Conn_ND+0x15fc>
										{
											b->_enviaruart=0;
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	2200      	movs	r2, #0
 800ae30:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
											if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	f8d3 3d5c 	ldr.w	r3, [r3, #3420]	; 0xd5c
 800ae3a:	2b01      	cmp	r3, #1
 800ae3c:	d109      	bne.n	800ae52 <WiFi_Conn_ND+0x15e6>
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	f503 6293 	add.w	r2, r3, #1176	; 0x498
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	f8d3 3cf4 	ldr.w	r3, [r3, #3316]	; 0xcf4
 800ae4a:	4619      	mov	r1, r3
 800ae4c:	4610      	mov	r0, r2
 800ae4e:	f7f6 fbf3 	bl	8001638 <ITM0_Write>
											HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	f503 6193 	add.w	r1, r3, #1176	; 0x498
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	f8d3 3cf4 	ldr.w	r3, [r3, #3316]	; 0xcf4
 800ae5e:	b29a      	uxth	r2, r3
 800ae60:	2364      	movs	r3, #100	; 0x64
 800ae62:	68b8      	ldr	r0, [r7, #8]
 800ae64:	f7fa fc00 	bl	8005668 <HAL_UART_Transmit>


										}

							//----Condiciones de cambio de estado
							if((b->_estado==at_tcp_enviado_ok)) b->_estado_conexion=TCP_SRVR_TX_OK;
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae6e:	2b16      	cmp	r3, #22
 800ae70:	d104      	bne.n	800ae7c <WiFi_Conn_ND+0x1610>
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	f240 328d 	movw	r2, #909	; 0x38d
 800ae78:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

							if((b->_estado==at_error)||(b->_estado==at_restart)||
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae82:	2b02      	cmp	r3, #2
 800ae84:	d02d      	beq.n	800aee2 <WiFi_Conn_ND+0x1676>
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae8c:	2b04      	cmp	r3, #4
 800ae8e:	d028      	beq.n	800aee2 <WiFi_Conn_ND+0x1676>
							   (b->_estado==at_wifi_disconnect)||(b->_estado==at_wifi_connected)||
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							if((b->_estado==at_error)||(b->_estado==at_restart)||
 800ae96:	2b0c      	cmp	r3, #12
 800ae98:	d023      	beq.n	800aee2 <WiFi_Conn_ND+0x1676>
							   (b->_estado==at_wifi_disconnect)||(b->_estado==at_wifi_connected)||
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aea0:	2b0d      	cmp	r3, #13
 800aea2:	d01e      	beq.n	800aee2 <WiFi_Conn_ND+0x1676>
							   (b->_estado==at_wifi_gotip)||(b->_estado==at_tcp_client_desc)||
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado==at_wifi_disconnect)||(b->_estado==at_wifi_connected)||
 800aeaa:	2b06      	cmp	r3, #6
 800aeac:	d019      	beq.n	800aee2 <WiFi_Conn_ND+0x1676>
							   (b->_estado==at_wifi_gotip)||(b->_estado==at_tcp_client_desc)||
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aeb4:	2b14      	cmp	r3, #20
 800aeb6:	d014      	beq.n	800aee2 <WiFi_Conn_ND+0x1676>
							   (b->_estado==at_tcp_snd_err)||(b->_estado==at_tcp_enviado_error)||
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado==at_wifi_gotip)||(b->_estado==at_tcp_client_desc)||
 800aebe:	2b17      	cmp	r3, #23
 800aec0:	d00f      	beq.n	800aee2 <WiFi_Conn_ND+0x1676>
							   (b->_estado==at_tcp_snd_err)||(b->_estado==at_tcp_enviado_error)||
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aec8:	2b18      	cmp	r3, #24
 800aeca:	d00a      	beq.n	800aee2 <WiFi_Conn_ND+0x1676>
							   (b->_estado==22)||(b->_estado==25))//210630 Se agrega ATDecode 4, 11 y 12
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado==at_tcp_snd_err)||(b->_estado==at_tcp_enviado_error)||
 800aed2:	2b16      	cmp	r3, #22
 800aed4:	d005      	beq.n	800aee2 <WiFi_Conn_ND+0x1676>
							   (b->_estado==22)||(b->_estado==25))//210630 Se agrega ATDecode 4, 11 y 12
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aedc:	2b19      	cmp	r3, #25
 800aede:	f040 8124 	bne.w	800b12a <WiFi_Conn_ND+0x18be>
								{
								b->_estado_conexion=TCP_SRVR_TX_ERROR;
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	f240 3289 	movw	r2, #905	; 0x389
 800aee8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_enviaruart==0;		//Si hay error no me arriesgo a que envíe algo
								}
							//----Condiciones de cambio de estado
						}
						break;
 800aeec:	e11d      	b.n	800b12a <WiFi_Conn_ND+0x18be>
						case TCP_SRVR_TX_ERROR://Error al Enviar datos a Servidor TCP
						{
							NOP(b);
 800aeee:	68f8      	ldr	r0, [r7, #12]
 800aef0:	f7fb fc48 	bl	8006784 <NOP>
							if((b->_estado==at_restart)||(b->_estado==at_wifi_connected)||(b->_estado==at_wifi_gotip))	//210630 Si se reconecta a este nivel hay que resetear		//Reinicio involuntario de módulo
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aefa:	2b04      	cmp	r3, #4
 800aefc:	d009      	beq.n	800af12 <WiFi_Conn_ND+0x16a6>
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af04:	2b0d      	cmp	r3, #13
 800af06:	d004      	beq.n	800af12 <WiFi_Conn_ND+0x16a6>
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af0e:	2b06      	cmp	r3, #6
 800af10:	d112      	bne.n	800af38 <WiFi_Conn_ND+0x16cc>
							{
								Cambiar_CWMODE(b);
 800af12:	68f8      	ldr	r0, [r7, #12]
 800af14:	f7fb fc4c 	bl	80067b0 <Cambiar_CWMODE>
								b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	2264      	movs	r2, #100	; 0x64
 800af1c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	2200      	movs	r2, #0
 800af24:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	2200      	movs	r2, #0
 800af2c:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4

								b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	2200      	movs	r2, #0
 800af34:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
							}
							if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af3e:	2b0c      	cmp	r3, #12
 800af40:	d009      	beq.n	800af56 <WiFi_Conn_ND+0x16ea>
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af48:	2b0d      	cmp	r3, #13
 800af4a:	d004      	beq.n	800af56 <WiFi_Conn_ND+0x16ea>
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af52:	2b03      	cmp	r3, #3
 800af54:	d10e      	bne.n	800af74 <WiFi_Conn_ND+0x1708>
							{
								ConectarWIFI(b);
 800af56:	68f8      	ldr	r0, [r7, #12]
 800af58:	f7fb fc40 	bl	80067dc <ConectarWIFI>
								b->_estado_conexion=CONEXION_EN_CURSO;
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	22c8      	movs	r2, #200	; 0xc8
 800af60:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	2200      	movs	r2, #0
 800af68:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	2200      	movs	r2, #0
 800af70:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
							}

							if(b->_estado==22)		//Error con el Servidor TCP
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af7a:	2b16      	cmp	r3, #22
 800af7c:	d10c      	bne.n	800af98 <WiFi_Conn_ND+0x172c>
							{
								b->_estado_conexion=TCP_SRVR_ERROR;
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	f240 3225 	movw	r2, #805	; 0x325
 800af84:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	2200      	movs	r2, #0
 800af8c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	2200      	movs	r2, #0
 800af94:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
							}

							if(b->_estado==24)		//Se conecta nuevamente el cliente
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af9e:	2b18      	cmp	r3, #24
 800afa0:	d10c      	bne.n	800afbc <WiFi_Conn_ND+0x1750>
							{
								b->_estado_conexion=TCP_SRVR_OK;  //Listo para enviar datos
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	f240 3229 	movw	r2, #809	; 0x329
 800afa8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	2200      	movs	r2, #0
 800afb0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	2200      	movs	r2, #0
 800afb8:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
							}

							if((b->_estado==25)||(b->_estado==at_tcp_snd_err)||(b->_estado=at_tcp_enviado_error))		//Desconexion del cliente o error al enviar vuelvo al proceso de envío
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800afc2:	2b19      	cmp	r3, #25
 800afc4:	d008      	beq.n	800afd8 <WiFi_Conn_ND+0x176c>
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800afcc:	2b17      	cmp	r3, #23
 800afce:	d003      	beq.n	800afd8 <WiFi_Conn_ND+0x176c>
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	2218      	movs	r2, #24
 800afd4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
							{
								if(b->_new_data_rcv==1) //Vuelvo a enviar solo cuando recibo nuevos datos
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	f8d3 3cdc 	ldr.w	r3, [r3, #3292]	; 0xcdc
 800afde:	2b01      	cmp	r3, #1
 800afe0:	f040 80a5 	bne.w	800b12e <WiFi_Conn_ND+0x18c2>
								{
									b->_estado_conexion=TCP_SRVR_TX_EN_CURSO;
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	f44f 7261 	mov.w	r2, #900	; 0x384
 800afea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	2200      	movs	r2, #0
 800aff2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	2200      	movs	r2, #0
 800affa:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4

							}


						}
						break;
 800affe:	e096      	b.n	800b12e <WiFi_Conn_ND+0x18c2>
						case TCP_SRVR_TX_OK://Enviar datos a Servidor TCP OK
						{
							NOP(b);
 800b000:	68f8      	ldr	r0, [r7, #12]
 800b002:	f7fb fbbf 	bl	8006784 <NOP>

								if((b->_estado==at_restart)||(b->_estado==at_wifi_connected)||(b->_estado==at_wifi_gotip))	//210630 Si se reconecta a este nivel hay que resetear	//Reinicio involuntario de módulo
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b00c:	2b04      	cmp	r3, #4
 800b00e:	d009      	beq.n	800b024 <WiFi_Conn_ND+0x17b8>
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b016:	2b0d      	cmp	r3, #13
 800b018:	d004      	beq.n	800b024 <WiFi_Conn_ND+0x17b8>
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b020:	2b06      	cmp	r3, #6
 800b022:	d112      	bne.n	800b04a <WiFi_Conn_ND+0x17de>
								{
									Cambiar_CWMODE(b);
 800b024:	68f8      	ldr	r0, [r7, #12]
 800b026:	f7fb fbc3 	bl	80067b0 <Cambiar_CWMODE>
									b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	2264      	movs	r2, #100	; 0x64
 800b02e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	2200      	movs	r2, #0
 800b036:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	2200      	movs	r2, #0
 800b03e:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4

									b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	2200      	movs	r2, #0
 800b046:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83

								}
								if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b050:	2b0c      	cmp	r3, #12
 800b052:	d009      	beq.n	800b068 <WiFi_Conn_ND+0x17fc>
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b05a:	2b0d      	cmp	r3, #13
 800b05c:	d004      	beq.n	800b068 <WiFi_Conn_ND+0x17fc>
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b064:	2b03      	cmp	r3, #3
 800b066:	d10e      	bne.n	800b086 <WiFi_Conn_ND+0x181a>
								{
									ConectarWIFI(b);
 800b068:	68f8      	ldr	r0, [r7, #12]
 800b06a:	f7fb fbb7 	bl	80067dc <ConectarWIFI>
									b->_estado_conexion=CONEXION_EN_CURSO;
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	22c8      	movs	r2, #200	; 0xc8
 800b072:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	2200      	movs	r2, #0
 800b07a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	2200      	movs	r2, #0
 800b082:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
								}

								if(((b->_new_data_rcv==1)||(b->_send_data==1))&&(b->_n_D2SND!=0)) // Only send with data
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	f8d3 3cdc 	ldr.w	r3, [r3, #3292]	; 0xcdc
 800b08c:	2b01      	cmp	r3, #1
 800b08e:	d004      	beq.n	800b09a <WiFi_Conn_ND+0x182e>
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	f8d3 3a9c 	ldr.w	r3, [r3, #2716]	; 0xa9c
 800b096:	2b01      	cmp	r3, #1
 800b098:	d14b      	bne.n	800b132 <WiFi_Conn_ND+0x18c6>
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	f8d3 3cf0 	ldr.w	r3, [r3, #3312]	; 0xcf0
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d046      	beq.n	800b132 <WiFi_Conn_ND+0x18c6>
								{
									EnviarDatosSRVR(b);
 800b0a4:	68f8      	ldr	r0, [r7, #12]
 800b0a6:	f7fb fc1d 	bl	80068e4 <EnviarDatosSRVR>
									b->_estado_conexion=TCP_SRVR_TX_EN_CURSO;
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	f44f 7261 	mov.w	r2, #900	; 0x384
 800b0b0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	2200      	movs	r2, #0
 800b0b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	2200      	movs	r2, #0
 800b0c0:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
									b->_new_data_rcv=0;
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	2200      	movs	r2, #0
 800b0c8:	f8c3 2cdc 	str.w	r2, [r3, #3292]	; 0xcdc
									b->_send_data=0;
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	2200      	movs	r2, #0
 800b0d0:	f8c3 2a9c 	str.w	r2, [r3, #2716]	; 0xa9c
								}

						}
						break;
 800b0d4:	e02d      	b.n	800b132 <WiFi_Conn_ND+0x18c6>
			break;
 800b0d6:	bf00      	nop
 800b0d8:	e02c      	b.n	800b134 <WiFi_Conn_ND+0x18c8>
			break;
 800b0da:	bf00      	nop
 800b0dc:	e02a      	b.n	800b134 <WiFi_Conn_ND+0x18c8>
			break;
 800b0de:	bf00      	nop
 800b0e0:	e028      	b.n	800b134 <WiFi_Conn_ND+0x18c8>
			break;
 800b0e2:	bf00      	nop
 800b0e4:	e026      	b.n	800b134 <WiFi_Conn_ND+0x18c8>
			break;
 800b0e6:	bf00      	nop
 800b0e8:	e024      	b.n	800b134 <WiFi_Conn_ND+0x18c8>
			break;
 800b0ea:	bf00      	nop
 800b0ec:	e022      	b.n	800b134 <WiFi_Conn_ND+0x18c8>
			break;
 800b0ee:	bf00      	nop
 800b0f0:	e020      	b.n	800b134 <WiFi_Conn_ND+0x18c8>
			break;
 800b0f2:	bf00      	nop
 800b0f4:	e01e      	b.n	800b134 <WiFi_Conn_ND+0x18c8>
			break;
 800b0f6:	bf00      	nop
 800b0f8:	e01c      	b.n	800b134 <WiFi_Conn_ND+0x18c8>
			break;
 800b0fa:	bf00      	nop
 800b0fc:	e01a      	b.n	800b134 <WiFi_Conn_ND+0x18c8>
			break;
 800b0fe:	bf00      	nop
 800b100:	e018      	b.n	800b134 <WiFi_Conn_ND+0x18c8>
			break;
 800b102:	bf00      	nop
 800b104:	e016      	b.n	800b134 <WiFi_Conn_ND+0x18c8>
			break;
 800b106:	bf00      	nop
 800b108:	e014      	b.n	800b134 <WiFi_Conn_ND+0x18c8>
			break;
 800b10a:	bf00      	nop
 800b10c:	e012      	b.n	800b134 <WiFi_Conn_ND+0x18c8>
			break;
 800b10e:	bf00      	nop
 800b110:	e010      	b.n	800b134 <WiFi_Conn_ND+0x18c8>
						break;
 800b112:	bf00      	nop
 800b114:	e00e      	b.n	800b134 <WiFi_Conn_ND+0x18c8>
						break;
 800b116:	bf00      	nop
 800b118:	e00c      	b.n	800b134 <WiFi_Conn_ND+0x18c8>
						break;
 800b11a:	bf00      	nop
 800b11c:	e00a      	b.n	800b134 <WiFi_Conn_ND+0x18c8>
						break;
 800b11e:	bf00      	nop
 800b120:	e008      	b.n	800b134 <WiFi_Conn_ND+0x18c8>
						break;
 800b122:	bf00      	nop
 800b124:	e006      	b.n	800b134 <WiFi_Conn_ND+0x18c8>
						break;
 800b126:	bf00      	nop
 800b128:	e004      	b.n	800b134 <WiFi_Conn_ND+0x18c8>
						break;
 800b12a:	bf00      	nop
 800b12c:	e002      	b.n	800b134 <WiFi_Conn_ND+0x18c8>
						break;
 800b12e:	bf00      	nop
 800b130:	e000      	b.n	800b134 <WiFi_Conn_ND+0x18c8>
						break;
 800b132:	bf00      	nop

		}
		return(b->_estado_conexion);
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
	}
 800b13a:	4618      	mov	r0, r3
 800b13c:	3710      	adds	r7, #16
 800b13e:	46bd      	mov	sp, r7
 800b140:	bd80      	pop	{r7, pc}
 800b142:	bf00      	nop

0800b144 <httpPOST>:

char deviceId[]={',','"','d','e','v','I','d','"',':','\0'};


httpPOST(char * endpoint, char* server_ip, char * port,uint16_t d1, uint16_t d2, uint16_t d3, uint16_t d4,uint16_t d5,uint16_t d6,uint16_t d7,uint16_t d8,uint16_t d9,uint16_t d10, uint16_t d11,uint16_t d12,uint16_t d13,uint16_t d14,uint16_t d15,uint16_t d16, uint16_t devId, char  * post, char * body, int max_char)
{
 800b144:	b5b0      	push	{r4, r5, r7, lr}
 800b146:	b0a8      	sub	sp, #160	; 0xa0
 800b148:	af00      	add	r7, sp, #0
 800b14a:	60f8      	str	r0, [r7, #12]
 800b14c:	60b9      	str	r1, [r7, #8]
 800b14e:	607a      	str	r2, [r7, #4]
 800b150:	807b      	strh	r3, [r7, #2]
	post[0]='\0';
 800b152:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800b156:	2200      	movs	r2, #0
 800b158:	701a      	strb	r2, [r3, #0]
	body[0]='\0';
 800b15a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b15e:	2200      	movs	r2, #0
 800b160:	701a      	strb	r2, [r3, #0]
	strncat(post,"POST ",strlen("POST "));
 800b162:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800b166:	f7f5 f845 	bl	80001f4 <strlen>
 800b16a:	4603      	mov	r3, r0
 800b16c:	461a      	mov	r2, r3
 800b16e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800b172:	4413      	add	r3, r2
 800b174:	4aed      	ldr	r2, [pc, #948]	; (800b52c <httpPOST+0x3e8>)
 800b176:	6810      	ldr	r0, [r2, #0]
 800b178:	6018      	str	r0, [r3, #0]
 800b17a:	8892      	ldrh	r2, [r2, #4]
 800b17c:	809a      	strh	r2, [r3, #4]
	strncat(post,endpoint,strlen(endpoint));
 800b17e:	68f8      	ldr	r0, [r7, #12]
 800b180:	f7f5 f838 	bl	80001f4 <strlen>
 800b184:	4603      	mov	r3, r0
 800b186:	461a      	mov	r2, r3
 800b188:	68f9      	ldr	r1, [r7, #12]
 800b18a:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800b18e:	f003 fe20 	bl	800edd2 <strncat>
	strncat(post,"/ HTTP/1.1",strlen("/ HTTP/1.1"));
 800b192:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800b196:	f7f5 f82d 	bl	80001f4 <strlen>
 800b19a:	4603      	mov	r3, r0
 800b19c:	461a      	mov	r2, r3
 800b19e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800b1a2:	4413      	add	r3, r2
 800b1a4:	49e2      	ldr	r1, [pc, #904]	; (800b530 <httpPOST+0x3ec>)
 800b1a6:	461a      	mov	r2, r3
 800b1a8:	460b      	mov	r3, r1
 800b1aa:	cb03      	ldmia	r3!, {r0, r1}
 800b1ac:	6010      	str	r0, [r2, #0]
 800b1ae:	6051      	str	r1, [r2, #4]
 800b1b0:	8819      	ldrh	r1, [r3, #0]
 800b1b2:	789b      	ldrb	r3, [r3, #2]
 800b1b4:	8111      	strh	r1, [r2, #8]
 800b1b6:	7293      	strb	r3, [r2, #10]
	strncat(post,"\r\n",strlen("\r\n"));
 800b1b8:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800b1bc:	f7f5 f81a 	bl	80001f4 <strlen>
 800b1c0:	4603      	mov	r3, r0
 800b1c2:	461a      	mov	r2, r3
 800b1c4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800b1c8:	4413      	add	r3, r2
 800b1ca:	4ada      	ldr	r2, [pc, #872]	; (800b534 <httpPOST+0x3f0>)
 800b1cc:	8811      	ldrh	r1, [r2, #0]
 800b1ce:	7892      	ldrb	r2, [r2, #2]
 800b1d0:	8019      	strh	r1, [r3, #0]
 800b1d2:	709a      	strb	r2, [r3, #2]

	strncat(post,"Host: ",strlen("Host: "));
 800b1d4:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800b1d8:	f7f5 f80c 	bl	80001f4 <strlen>
 800b1dc:	4603      	mov	r3, r0
 800b1de:	461a      	mov	r2, r3
 800b1e0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800b1e4:	4413      	add	r3, r2
 800b1e6:	4ad4      	ldr	r2, [pc, #848]	; (800b538 <httpPOST+0x3f4>)
 800b1e8:	6810      	ldr	r0, [r2, #0]
 800b1ea:	6018      	str	r0, [r3, #0]
 800b1ec:	8891      	ldrh	r1, [r2, #4]
 800b1ee:	7992      	ldrb	r2, [r2, #6]
 800b1f0:	8099      	strh	r1, [r3, #4]
 800b1f2:	719a      	strb	r2, [r3, #6]
	strncat(post,server_ip,strlen(server_ip));
 800b1f4:	68b8      	ldr	r0, [r7, #8]
 800b1f6:	f7f4 fffd 	bl	80001f4 <strlen>
 800b1fa:	4603      	mov	r3, r0
 800b1fc:	461a      	mov	r2, r3
 800b1fe:	68b9      	ldr	r1, [r7, #8]
 800b200:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800b204:	f003 fde5 	bl	800edd2 <strncat>
	strncat(post,":",1);
 800b208:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800b20c:	f7f4 fff2 	bl	80001f4 <strlen>
 800b210:	4603      	mov	r3, r0
 800b212:	461a      	mov	r2, r3
 800b214:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800b218:	4413      	add	r3, r2
 800b21a:	49c8      	ldr	r1, [pc, #800]	; (800b53c <httpPOST+0x3f8>)
 800b21c:	461a      	mov	r2, r3
 800b21e:	460b      	mov	r3, r1
 800b220:	881b      	ldrh	r3, [r3, #0]
 800b222:	8013      	strh	r3, [r2, #0]
	strncat(post,port,strlen(port));
 800b224:	6878      	ldr	r0, [r7, #4]
 800b226:	f7f4 ffe5 	bl	80001f4 <strlen>
 800b22a:	4603      	mov	r3, r0
 800b22c:	461a      	mov	r2, r3
 800b22e:	6879      	ldr	r1, [r7, #4]
 800b230:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800b234:	f003 fdcd 	bl	800edd2 <strncat>



	strncat(post,"\r\n",strlen("\r\n"));
 800b238:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800b23c:	f7f4 ffda 	bl	80001f4 <strlen>
 800b240:	4603      	mov	r3, r0
 800b242:	461a      	mov	r2, r3
 800b244:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800b248:	4413      	add	r3, r2
 800b24a:	4aba      	ldr	r2, [pc, #744]	; (800b534 <httpPOST+0x3f0>)
 800b24c:	8811      	ldrh	r1, [r2, #0]
 800b24e:	7892      	ldrb	r2, [r2, #2]
 800b250:	8019      	strh	r1, [r3, #0]
 800b252:	709a      	strb	r2, [r3, #2]
	strncat(post,"Content-Type: application/JSON",strlen("Content-Type: application/JSON"));
 800b254:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800b258:	f7f4 ffcc 	bl	80001f4 <strlen>
 800b25c:	4603      	mov	r3, r0
 800b25e:	461a      	mov	r2, r3
 800b260:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800b264:	4413      	add	r3, r2
 800b266:	4ab6      	ldr	r2, [pc, #728]	; (800b540 <httpPOST+0x3fc>)
 800b268:	461d      	mov	r5, r3
 800b26a:	4614      	mov	r4, r2
 800b26c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b26e:	6028      	str	r0, [r5, #0]
 800b270:	6069      	str	r1, [r5, #4]
 800b272:	60aa      	str	r2, [r5, #8]
 800b274:	60eb      	str	r3, [r5, #12]
 800b276:	cc07      	ldmia	r4!, {r0, r1, r2}
 800b278:	6128      	str	r0, [r5, #16]
 800b27a:	6169      	str	r1, [r5, #20]
 800b27c:	61aa      	str	r2, [r5, #24]
 800b27e:	8823      	ldrh	r3, [r4, #0]
 800b280:	78a2      	ldrb	r2, [r4, #2]
 800b282:	83ab      	strh	r3, [r5, #28]
 800b284:	4613      	mov	r3, r2
 800b286:	77ab      	strb	r3, [r5, #30]
	strncat(post,"\r\n",strlen("\r\n"));
 800b288:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800b28c:	f7f4 ffb2 	bl	80001f4 <strlen>
 800b290:	4603      	mov	r3, r0
 800b292:	461a      	mov	r2, r3
 800b294:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800b298:	4413      	add	r3, r2
 800b29a:	4aa6      	ldr	r2, [pc, #664]	; (800b534 <httpPOST+0x3f0>)
 800b29c:	8811      	ldrh	r1, [r2, #0]
 800b29e:	7892      	ldrb	r2, [r2, #2]
 800b2a0:	8019      	strh	r1, [r3, #0]
 800b2a2:	709a      	strb	r2, [r3, #2]
	strncat(post,"Content-Length:",strlen("Content-Length:"));
 800b2a4:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800b2a8:	f7f4 ffa4 	bl	80001f4 <strlen>
 800b2ac:	4603      	mov	r3, r0
 800b2ae:	461a      	mov	r2, r3
 800b2b0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800b2b4:	4413      	add	r3, r2
 800b2b6:	4aa3      	ldr	r2, [pc, #652]	; (800b544 <httpPOST+0x400>)
 800b2b8:	461c      	mov	r4, r3
 800b2ba:	4615      	mov	r5, r2
 800b2bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b2be:	6020      	str	r0, [r4, #0]
 800b2c0:	6061      	str	r1, [r4, #4]
 800b2c2:	60a2      	str	r2, [r4, #8]
 800b2c4:	60e3      	str	r3, [r4, #12]


	// Conversión de datos recibido por ModBUS
	char _d1[8];
	_d1[0]='\0';
 800b2c6:	2300      	movs	r3, #0
 800b2c8:	f887 3098 	strb.w	r3, [r7, #152]	; 0x98
	INTOA( d1, _d1);//FTOA( d1,_d1,2);
 800b2cc:	887b      	ldrh	r3, [r7, #2]
 800b2ce:	f107 0298 	add.w	r2, r7, #152	; 0x98
 800b2d2:	4611      	mov	r1, r2
 800b2d4:	4618      	mov	r0, r3
 800b2d6:	f003 faf5 	bl	800e8c4 <INTOA>

	char _d2[8];
	_d2[0]='\0';
 800b2da:	2300      	movs	r3, #0
 800b2dc:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
	INTOA( d2, _d2);//FTOA( d2, _d2,2);//INTOA( dp_filtro, _filtro);//
 800b2e0:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 800b2e4:	f107 0290 	add.w	r2, r7, #144	; 0x90
 800b2e8:	4611      	mov	r1, r2
 800b2ea:	4618      	mov	r0, r3
 800b2ec:	f003 faea 	bl	800e8c4 <INTOA>

	char _d3[8];
	_d3[0]='\0';
 800b2f0:	2300      	movs	r3, #0
 800b2f2:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
	INTOA( d3, _d3);//FTOA( d3, _d3,2);
 800b2f6:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 800b2fa:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800b2fe:	4611      	mov	r1, r2
 800b300:	4618      	mov	r0, r3
 800b302:	f003 fadf 	bl	800e8c4 <INTOA>

	char _d4[8];
	_d4[0]='\0';
 800b306:	2300      	movs	r3, #0
 800b308:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
	INTOA( d4, _d4);//FTOA( d4, _d4,2);
 800b30c:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	; 0xb8
 800b310:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800b314:	4611      	mov	r1, r2
 800b316:	4618      	mov	r0, r3
 800b318:	f003 fad4 	bl	800e8c4 <INTOA>

	char _d5[8];
	_d5[0]='\0';
 800b31c:	2300      	movs	r3, #0
 800b31e:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78
	INTOA( d5, _d5);//FTOA( d5, _d5,2);
 800b322:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 800b326:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800b32a:	4611      	mov	r1, r2
 800b32c:	4618      	mov	r0, r3
 800b32e:	f003 fac9 	bl	800e8c4 <INTOA>

	char _d6[8];
	_d6[0]='\0';
 800b332:	2300      	movs	r3, #0
 800b334:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
	INTOA( d6, _d6);//INTOA( d6, _d6);
 800b338:	f8b7 30c0 	ldrh.w	r3, [r7, #192]	; 0xc0
 800b33c:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800b340:	4611      	mov	r1, r2
 800b342:	4618      	mov	r0, r3
 800b344:	f003 fabe 	bl	800e8c4 <INTOA>

	char _d7[8];
	_d7[0]='\0';
 800b348:	2300      	movs	r3, #0
 800b34a:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
	INTOA( d7, _d7);//FTOA( d7, _d7,2);
 800b34e:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
 800b352:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800b356:	4611      	mov	r1, r2
 800b358:	4618      	mov	r0, r3
 800b35a:	f003 fab3 	bl	800e8c4 <INTOA>

	char _d8[8];
	_d8[0]='\0';
 800b35e:	2300      	movs	r3, #0
 800b360:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	INTOA( d8, _d8);//FTOA( d8, _d8,2);
 800b364:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 800b368:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800b36c:	4611      	mov	r1, r2
 800b36e:	4618      	mov	r0, r3
 800b370:	f003 faa8 	bl	800e8c4 <INTOA>

	char _d9[8];
	_d9[0]='\0';
 800b374:	2300      	movs	r3, #0
 800b376:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
	INTOA( d9, _d9);//FTOA( d9, _d9,2);
 800b37a:	f8b7 30cc 	ldrh.w	r3, [r7, #204]	; 0xcc
 800b37e:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800b382:	4611      	mov	r1, r2
 800b384:	4618      	mov	r0, r3
 800b386:	f003 fa9d 	bl	800e8c4 <INTOA>

	char _d10[8];
	_d10[0]='\0';
 800b38a:	2300      	movs	r3, #0
 800b38c:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
	INTOA( d10, _d10);//FTOA( d10, _d10,2);
 800b390:	f8b7 30d0 	ldrh.w	r3, [r7, #208]	; 0xd0
 800b394:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800b398:	4611      	mov	r1, r2
 800b39a:	4618      	mov	r0, r3
 800b39c:	f003 fa92 	bl	800e8c4 <INTOA>

	char _d11[8];
	_d11[0]='\0';
 800b3a0:	2300      	movs	r3, #0
 800b3a2:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	INTOA( d11, _d11);//FTOA( d11, _d11,2);
 800b3a6:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	; 0xd4
 800b3aa:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800b3ae:	4611      	mov	r1, r2
 800b3b0:	4618      	mov	r0, r3
 800b3b2:	f003 fa87 	bl	800e8c4 <INTOA>

	char _d12[8];
	_d12[0]='\0';
 800b3b6:	2300      	movs	r3, #0
 800b3b8:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
	INTOA( d12, _d12);//FTOA( d11, _d11,2);
 800b3bc:	f8b7 30d8 	ldrh.w	r3, [r7, #216]	; 0xd8
 800b3c0:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800b3c4:	4611      	mov	r1, r2
 800b3c6:	4618      	mov	r0, r3
 800b3c8:	f003 fa7c 	bl	800e8c4 <INTOA>

	char _d13[8];
	_d13[0]='\0';
 800b3cc:	2300      	movs	r3, #0
 800b3ce:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	INTOA( d13, _d13);//FTOA( d11, _d11,2);
 800b3d2:	f8b7 30dc 	ldrh.w	r3, [r7, #220]	; 0xdc
 800b3d6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800b3da:	4611      	mov	r1, r2
 800b3dc:	4618      	mov	r0, r3
 800b3de:	f003 fa71 	bl	800e8c4 <INTOA>

	char _d14[8];
	_d14[0]='\0';
 800b3e2:	2300      	movs	r3, #0
 800b3e4:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	INTOA( d14, _d14);//FTOA( d11, _d11,2);
 800b3e8:	f8b7 30e0 	ldrh.w	r3, [r7, #224]	; 0xe0
 800b3ec:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800b3f0:	4611      	mov	r1, r2
 800b3f2:	4618      	mov	r0, r3
 800b3f4:	f003 fa66 	bl	800e8c4 <INTOA>

	char _d15[8];
	_d15[0]='\0';
 800b3f8:	2300      	movs	r3, #0
 800b3fa:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	INTOA( d15, _d15);//FTOA( d11, _d11,2);
 800b3fe:	f8b7 30e4 	ldrh.w	r3, [r7, #228]	; 0xe4
 800b402:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800b406:	4611      	mov	r1, r2
 800b408:	4618      	mov	r0, r3
 800b40a:	f003 fa5b 	bl	800e8c4 <INTOA>

	char _d16[8];
	_d16[0]='\0';
 800b40e:	2300      	movs	r3, #0
 800b410:	f887 3020 	strb.w	r3, [r7, #32]
	INTOA( d16, _d16);//FTOA( d11, _d11,2);
 800b414:	f8b7 30e8 	ldrh.w	r3, [r7, #232]	; 0xe8
 800b418:	f107 0220 	add.w	r2, r7, #32
 800b41c:	4611      	mov	r1, r2
 800b41e:	4618      	mov	r0, r3
 800b420:	f003 fa50 	bl	800e8c4 <INTOA>

	char _devId[8];
	_devId[0]='\0';
 800b424:	2300      	movs	r3, #0
 800b426:	763b      	strb	r3, [r7, #24]
	INTOA(devId, _devId);
 800b428:	f8b7 30ec 	ldrh.w	r3, [r7, #236]	; 0xec
 800b42c:	f107 0218 	add.w	r2, r7, #24
 800b430:	4611      	mov	r1, r2
 800b432:	4618      	mov	r0, r3
 800b434:	f003 fa46 	bl	800e8c4 <INTOA>

	strncat(body,dd1,strlen(dd1));
 800b438:	4843      	ldr	r0, [pc, #268]	; (800b548 <httpPOST+0x404>)
 800b43a:	f7f4 fedb 	bl	80001f4 <strlen>
 800b43e:	4603      	mov	r3, r0
 800b440:	461a      	mov	r2, r3
 800b442:	4941      	ldr	r1, [pc, #260]	; (800b548 <httpPOST+0x404>)
 800b444:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b448:	f003 fcc3 	bl	800edd2 <strncat>
	strncat(body,_d1,strlen(_d1));
 800b44c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800b450:	4618      	mov	r0, r3
 800b452:	f7f4 fecf 	bl	80001f4 <strlen>
 800b456:	4602      	mov	r2, r0
 800b458:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800b45c:	4619      	mov	r1, r3
 800b45e:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b462:	f003 fcb6 	bl	800edd2 <strncat>

	strncat(body,dd2,strlen(dd2));
 800b466:	4839      	ldr	r0, [pc, #228]	; (800b54c <httpPOST+0x408>)
 800b468:	f7f4 fec4 	bl	80001f4 <strlen>
 800b46c:	4603      	mov	r3, r0
 800b46e:	461a      	mov	r2, r3
 800b470:	4936      	ldr	r1, [pc, #216]	; (800b54c <httpPOST+0x408>)
 800b472:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b476:	f003 fcac 	bl	800edd2 <strncat>
	strncat(body,_d2,strlen(_d2));
 800b47a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800b47e:	4618      	mov	r0, r3
 800b480:	f7f4 feb8 	bl	80001f4 <strlen>
 800b484:	4602      	mov	r2, r0
 800b486:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800b48a:	4619      	mov	r1, r3
 800b48c:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b490:	f003 fc9f 	bl	800edd2 <strncat>

	strncat(body,dd3,strlen(dd3));
 800b494:	482e      	ldr	r0, [pc, #184]	; (800b550 <httpPOST+0x40c>)
 800b496:	f7f4 fead 	bl	80001f4 <strlen>
 800b49a:	4603      	mov	r3, r0
 800b49c:	461a      	mov	r2, r3
 800b49e:	492c      	ldr	r1, [pc, #176]	; (800b550 <httpPOST+0x40c>)
 800b4a0:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b4a4:	f003 fc95 	bl	800edd2 <strncat>
	strncat(body,_d3,strlen(_d3));
 800b4a8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800b4ac:	4618      	mov	r0, r3
 800b4ae:	f7f4 fea1 	bl	80001f4 <strlen>
 800b4b2:	4602      	mov	r2, r0
 800b4b4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800b4b8:	4619      	mov	r1, r3
 800b4ba:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b4be:	f003 fc88 	bl	800edd2 <strncat>

	strncat(body,dd4,strlen(dd4));
 800b4c2:	4824      	ldr	r0, [pc, #144]	; (800b554 <httpPOST+0x410>)
 800b4c4:	f7f4 fe96 	bl	80001f4 <strlen>
 800b4c8:	4603      	mov	r3, r0
 800b4ca:	461a      	mov	r2, r3
 800b4cc:	4921      	ldr	r1, [pc, #132]	; (800b554 <httpPOST+0x410>)
 800b4ce:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b4d2:	f003 fc7e 	bl	800edd2 <strncat>
	strncat(body,_d4,strlen(_d4));
 800b4d6:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800b4da:	4618      	mov	r0, r3
 800b4dc:	f7f4 fe8a 	bl	80001f4 <strlen>
 800b4e0:	4602      	mov	r2, r0
 800b4e2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800b4e6:	4619      	mov	r1, r3
 800b4e8:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b4ec:	f003 fc71 	bl	800edd2 <strncat>

	strncat(body,dd5,strlen(dd5));
 800b4f0:	4819      	ldr	r0, [pc, #100]	; (800b558 <httpPOST+0x414>)
 800b4f2:	f7f4 fe7f 	bl	80001f4 <strlen>
 800b4f6:	4603      	mov	r3, r0
 800b4f8:	461a      	mov	r2, r3
 800b4fa:	4917      	ldr	r1, [pc, #92]	; (800b558 <httpPOST+0x414>)
 800b4fc:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b500:	f003 fc67 	bl	800edd2 <strncat>
	strncat(body,_d5,strlen(_d5));
 800b504:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800b508:	4618      	mov	r0, r3
 800b50a:	f7f4 fe73 	bl	80001f4 <strlen>
 800b50e:	4602      	mov	r2, r0
 800b510:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800b514:	4619      	mov	r1, r3
 800b516:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b51a:	f003 fc5a 	bl	800edd2 <strncat>

	strncat(body,dd6,strlen(dd6));
 800b51e:	480f      	ldr	r0, [pc, #60]	; (800b55c <httpPOST+0x418>)
 800b520:	f7f4 fe68 	bl	80001f4 <strlen>
 800b524:	4603      	mov	r3, r0
 800b526:	461a      	mov	r2, r3
 800b528:	e01a      	b.n	800b560 <httpPOST+0x41c>
 800b52a:	bf00      	nop
 800b52c:	08010474 	.word	0x08010474
 800b530:	0801047c 	.word	0x0801047c
 800b534:	08010488 	.word	0x08010488
 800b538:	0801048c 	.word	0x0801048c
 800b53c:	08010494 	.word	0x08010494
 800b540:	08010498 	.word	0x08010498
 800b544:	080104b8 	.word	0x080104b8
 800b548:	20000090 	.word	0x20000090
 800b54c:	20000098 	.word	0x20000098
 800b550:	200000a0 	.word	0x200000a0
 800b554:	200000a8 	.word	0x200000a8
 800b558:	200000b0 	.word	0x200000b0
 800b55c:	200000b8 	.word	0x200000b8
 800b560:	49af      	ldr	r1, [pc, #700]	; (800b820 <httpPOST+0x6dc>)
 800b562:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b566:	f003 fc34 	bl	800edd2 <strncat>
	strncat(body,_d6,strlen(_d6));
 800b56a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800b56e:	4618      	mov	r0, r3
 800b570:	f7f4 fe40 	bl	80001f4 <strlen>
 800b574:	4602      	mov	r2, r0
 800b576:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800b57a:	4619      	mov	r1, r3
 800b57c:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b580:	f003 fc27 	bl	800edd2 <strncat>

	strncat(body,dd7,strlen(dd7));
 800b584:	48a7      	ldr	r0, [pc, #668]	; (800b824 <httpPOST+0x6e0>)
 800b586:	f7f4 fe35 	bl	80001f4 <strlen>
 800b58a:	4603      	mov	r3, r0
 800b58c:	461a      	mov	r2, r3
 800b58e:	49a5      	ldr	r1, [pc, #660]	; (800b824 <httpPOST+0x6e0>)
 800b590:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b594:	f003 fc1d 	bl	800edd2 <strncat>
	strncat(body,_d7,strlen(_d7));
 800b598:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800b59c:	4618      	mov	r0, r3
 800b59e:	f7f4 fe29 	bl	80001f4 <strlen>
 800b5a2:	4602      	mov	r2, r0
 800b5a4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800b5a8:	4619      	mov	r1, r3
 800b5aa:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b5ae:	f003 fc10 	bl	800edd2 <strncat>

	strncat(body,dd8,strlen(dd8));
 800b5b2:	489d      	ldr	r0, [pc, #628]	; (800b828 <httpPOST+0x6e4>)
 800b5b4:	f7f4 fe1e 	bl	80001f4 <strlen>
 800b5b8:	4603      	mov	r3, r0
 800b5ba:	461a      	mov	r2, r3
 800b5bc:	499a      	ldr	r1, [pc, #616]	; (800b828 <httpPOST+0x6e4>)
 800b5be:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b5c2:	f003 fc06 	bl	800edd2 <strncat>
	strncat(body,_d8,strlen(_d8));
 800b5c6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800b5ca:	4618      	mov	r0, r3
 800b5cc:	f7f4 fe12 	bl	80001f4 <strlen>
 800b5d0:	4602      	mov	r2, r0
 800b5d2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800b5d6:	4619      	mov	r1, r3
 800b5d8:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b5dc:	f003 fbf9 	bl	800edd2 <strncat>

	strncat(body,dd9,strlen(dd9));
 800b5e0:	4892      	ldr	r0, [pc, #584]	; (800b82c <httpPOST+0x6e8>)
 800b5e2:	f7f4 fe07 	bl	80001f4 <strlen>
 800b5e6:	4603      	mov	r3, r0
 800b5e8:	461a      	mov	r2, r3
 800b5ea:	4990      	ldr	r1, [pc, #576]	; (800b82c <httpPOST+0x6e8>)
 800b5ec:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b5f0:	f003 fbef 	bl	800edd2 <strncat>
	strncat(body,_d9,strlen(_d9));
 800b5f4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b5f8:	4618      	mov	r0, r3
 800b5fa:	f7f4 fdfb 	bl	80001f4 <strlen>
 800b5fe:	4602      	mov	r2, r0
 800b600:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b604:	4619      	mov	r1, r3
 800b606:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b60a:	f003 fbe2 	bl	800edd2 <strncat>

	strncat(body,dd10,strlen(dd10));
 800b60e:	4888      	ldr	r0, [pc, #544]	; (800b830 <httpPOST+0x6ec>)
 800b610:	f7f4 fdf0 	bl	80001f4 <strlen>
 800b614:	4603      	mov	r3, r0
 800b616:	461a      	mov	r2, r3
 800b618:	4985      	ldr	r1, [pc, #532]	; (800b830 <httpPOST+0x6ec>)
 800b61a:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b61e:	f003 fbd8 	bl	800edd2 <strncat>
	strncat(body,_d10,strlen(_d10));
 800b622:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800b626:	4618      	mov	r0, r3
 800b628:	f7f4 fde4 	bl	80001f4 <strlen>
 800b62c:	4602      	mov	r2, r0
 800b62e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800b632:	4619      	mov	r1, r3
 800b634:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b638:	f003 fbcb 	bl	800edd2 <strncat>

	strncat(body,dd11,strlen(dd11));
 800b63c:	487d      	ldr	r0, [pc, #500]	; (800b834 <httpPOST+0x6f0>)
 800b63e:	f7f4 fdd9 	bl	80001f4 <strlen>
 800b642:	4603      	mov	r3, r0
 800b644:	461a      	mov	r2, r3
 800b646:	497b      	ldr	r1, [pc, #492]	; (800b834 <httpPOST+0x6f0>)
 800b648:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b64c:	f003 fbc1 	bl	800edd2 <strncat>
	strncat(body,_d11,strlen(_d11));
 800b650:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800b654:	4618      	mov	r0, r3
 800b656:	f7f4 fdcd 	bl	80001f4 <strlen>
 800b65a:	4602      	mov	r2, r0
 800b65c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800b660:	4619      	mov	r1, r3
 800b662:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b666:	f003 fbb4 	bl	800edd2 <strncat>

	strncat(body,dd12,strlen(dd12));
 800b66a:	4873      	ldr	r0, [pc, #460]	; (800b838 <httpPOST+0x6f4>)
 800b66c:	f7f4 fdc2 	bl	80001f4 <strlen>
 800b670:	4603      	mov	r3, r0
 800b672:	461a      	mov	r2, r3
 800b674:	4970      	ldr	r1, [pc, #448]	; (800b838 <httpPOST+0x6f4>)
 800b676:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b67a:	f003 fbaa 	bl	800edd2 <strncat>
	strncat(body,_d12,strlen(_d12));
 800b67e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800b682:	4618      	mov	r0, r3
 800b684:	f7f4 fdb6 	bl	80001f4 <strlen>
 800b688:	4602      	mov	r2, r0
 800b68a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800b68e:	4619      	mov	r1, r3
 800b690:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b694:	f003 fb9d 	bl	800edd2 <strncat>

	strncat(body,dd13,strlen(dd13));
 800b698:	4868      	ldr	r0, [pc, #416]	; (800b83c <httpPOST+0x6f8>)
 800b69a:	f7f4 fdab 	bl	80001f4 <strlen>
 800b69e:	4603      	mov	r3, r0
 800b6a0:	461a      	mov	r2, r3
 800b6a2:	4966      	ldr	r1, [pc, #408]	; (800b83c <httpPOST+0x6f8>)
 800b6a4:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b6a8:	f003 fb93 	bl	800edd2 <strncat>
	strncat(body,_d13,strlen(_d13));
 800b6ac:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800b6b0:	4618      	mov	r0, r3
 800b6b2:	f7f4 fd9f 	bl	80001f4 <strlen>
 800b6b6:	4602      	mov	r2, r0
 800b6b8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800b6bc:	4619      	mov	r1, r3
 800b6be:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b6c2:	f003 fb86 	bl	800edd2 <strncat>

	strncat(body,dd14,strlen(dd14));
 800b6c6:	485e      	ldr	r0, [pc, #376]	; (800b840 <httpPOST+0x6fc>)
 800b6c8:	f7f4 fd94 	bl	80001f4 <strlen>
 800b6cc:	4603      	mov	r3, r0
 800b6ce:	461a      	mov	r2, r3
 800b6d0:	495b      	ldr	r1, [pc, #364]	; (800b840 <httpPOST+0x6fc>)
 800b6d2:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b6d6:	f003 fb7c 	bl	800edd2 <strncat>
	strncat(body,_d14,strlen(_d14));
 800b6da:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b6de:	4618      	mov	r0, r3
 800b6e0:	f7f4 fd88 	bl	80001f4 <strlen>
 800b6e4:	4602      	mov	r2, r0
 800b6e6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b6ea:	4619      	mov	r1, r3
 800b6ec:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b6f0:	f003 fb6f 	bl	800edd2 <strncat>

	strncat(body,dd15,strlen(dd15));
 800b6f4:	4853      	ldr	r0, [pc, #332]	; (800b844 <httpPOST+0x700>)
 800b6f6:	f7f4 fd7d 	bl	80001f4 <strlen>
 800b6fa:	4603      	mov	r3, r0
 800b6fc:	461a      	mov	r2, r3
 800b6fe:	4951      	ldr	r1, [pc, #324]	; (800b844 <httpPOST+0x700>)
 800b700:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b704:	f003 fb65 	bl	800edd2 <strncat>
	strncat(body,_d15,strlen(_d15));
 800b708:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b70c:	4618      	mov	r0, r3
 800b70e:	f7f4 fd71 	bl	80001f4 <strlen>
 800b712:	4602      	mov	r2, r0
 800b714:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b718:	4619      	mov	r1, r3
 800b71a:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b71e:	f003 fb58 	bl	800edd2 <strncat>

	strncat(body,dd16,strlen(dd16));
 800b722:	4849      	ldr	r0, [pc, #292]	; (800b848 <httpPOST+0x704>)
 800b724:	f7f4 fd66 	bl	80001f4 <strlen>
 800b728:	4603      	mov	r3, r0
 800b72a:	461a      	mov	r2, r3
 800b72c:	4946      	ldr	r1, [pc, #280]	; (800b848 <httpPOST+0x704>)
 800b72e:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b732:	f003 fb4e 	bl	800edd2 <strncat>
	strncat(body,_d16,strlen(_d16));
 800b736:	f107 0320 	add.w	r3, r7, #32
 800b73a:	4618      	mov	r0, r3
 800b73c:	f7f4 fd5a 	bl	80001f4 <strlen>
 800b740:	4602      	mov	r2, r0
 800b742:	f107 0320 	add.w	r3, r7, #32
 800b746:	4619      	mov	r1, r3
 800b748:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b74c:	f003 fb41 	bl	800edd2 <strncat>

	strncat(body,deviceId,strlen(deviceId));
 800b750:	483e      	ldr	r0, [pc, #248]	; (800b84c <httpPOST+0x708>)
 800b752:	f7f4 fd4f 	bl	80001f4 <strlen>
 800b756:	4603      	mov	r3, r0
 800b758:	461a      	mov	r2, r3
 800b75a:	493c      	ldr	r1, [pc, #240]	; (800b84c <httpPOST+0x708>)
 800b75c:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b760:	f003 fb37 	bl	800edd2 <strncat>
	strncat(body,_devId,strlen(_devId));
 800b764:	f107 0318 	add.w	r3, r7, #24
 800b768:	4618      	mov	r0, r3
 800b76a:	f7f4 fd43 	bl	80001f4 <strlen>
 800b76e:	4602      	mov	r2, r0
 800b770:	f107 0318 	add.w	r3, r7, #24
 800b774:	4619      	mov	r1, r3
 800b776:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b77a:	f003 fb2a 	bl	800edd2 <strncat>

	strncat(body,"}",strlen("}"));
 800b77e:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b782:	f7f4 fd37 	bl	80001f4 <strlen>
 800b786:	4603      	mov	r3, r0
 800b788:	461a      	mov	r2, r3
 800b78a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b78e:	4413      	add	r3, r2
 800b790:	492f      	ldr	r1, [pc, #188]	; (800b850 <httpPOST+0x70c>)
 800b792:	461a      	mov	r2, r3
 800b794:	460b      	mov	r3, r1
 800b796:	881b      	ldrh	r3, [r3, #0]
 800b798:	8013      	strh	r3, [r2, #0]

	char length[5];
	INTOA(strlen(body), length);
 800b79a:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b79e:	f7f4 fd29 	bl	80001f4 <strlen>
 800b7a2:	4602      	mov	r2, r0
 800b7a4:	f107 0310 	add.w	r3, r7, #16
 800b7a8:	4619      	mov	r1, r3
 800b7aa:	4610      	mov	r0, r2
 800b7ac:	f003 f88a 	bl	800e8c4 <INTOA>
	strncat(post,length,strlen(length));
 800b7b0:	f107 0310 	add.w	r3, r7, #16
 800b7b4:	4618      	mov	r0, r3
 800b7b6:	f7f4 fd1d 	bl	80001f4 <strlen>
 800b7ba:	4602      	mov	r2, r0
 800b7bc:	f107 0310 	add.w	r3, r7, #16
 800b7c0:	4619      	mov	r1, r3
 800b7c2:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800b7c6:	f003 fb04 	bl	800edd2 <strncat>
	strncat(post,"\r\n\r\n",strlen("\r\n\r\n"));
 800b7ca:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800b7ce:	f7f4 fd11 	bl	80001f4 <strlen>
 800b7d2:	4603      	mov	r3, r0
 800b7d4:	461a      	mov	r2, r3
 800b7d6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800b7da:	4413      	add	r3, r2
 800b7dc:	4a1d      	ldr	r2, [pc, #116]	; (800b854 <httpPOST+0x710>)
 800b7de:	6810      	ldr	r0, [r2, #0]
 800b7e0:	6018      	str	r0, [r3, #0]
 800b7e2:	7912      	ldrb	r2, [r2, #4]
 800b7e4:	711a      	strb	r2, [r3, #4]
	if(strlen(body) < max_char)
 800b7e6:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b7ea:	f7f4 fd03 	bl	80001f4 <strlen>
 800b7ee:	4602      	mov	r2, r0
 800b7f0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b7f4:	429a      	cmp	r2, r3
 800b7f6:	d20d      	bcs.n	800b814 <httpPOST+0x6d0>
	{
		strncat(post,body,strlen(body));
 800b7f8:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b7fc:	f7f4 fcfa 	bl	80001f4 <strlen>
 800b800:	4603      	mov	r3, r0
 800b802:	461a      	mov	r2, r3
 800b804:	f8d7 10f4 	ldr.w	r1, [r7, #244]	; 0xf4
 800b808:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800b80c:	f003 fae1 	bl	800edd2 <strncat>
		return 1 ;
 800b810:	2301      	movs	r3, #1
 800b812:	e000      	b.n	800b816 <httpPOST+0x6d2>
	}
		else
		{
			return 0;
 800b814:	2300      	movs	r3, #0
		}
}
 800b816:	4618      	mov	r0, r3
 800b818:	37a0      	adds	r7, #160	; 0xa0
 800b81a:	46bd      	mov	sp, r7
 800b81c:	bdb0      	pop	{r4, r5, r7, pc}
 800b81e:	bf00      	nop
 800b820:	200000b8 	.word	0x200000b8
 800b824:	200000c0 	.word	0x200000c0
 800b828:	200000c8 	.word	0x200000c8
 800b82c:	200000d0 	.word	0x200000d0
 800b830:	200000d8 	.word	0x200000d8
 800b834:	200000e0 	.word	0x200000e0
 800b838:	200000e8 	.word	0x200000e8
 800b83c:	200000f0 	.word	0x200000f0
 800b840:	200000f8 	.word	0x200000f8
 800b844:	20000100 	.word	0x20000100
 800b848:	20000108 	.word	0x20000108
 800b84c:	20000110 	.word	0x20000110
 800b850:	080104c8 	.word	0x080104c8
 800b854:	080104cc 	.word	0x080104cc

0800b858 <LoRa_Send>:
#include "RYLR896.h"
#include "string.h"
#include "STR_Chelo.h"

int LoRa_Send(struct LoRa *a, UART_HandleTypeDef * SERIAL)
{
 800b858:	b5b0      	push	{r4, r5, r7, lr}
 800b85a:	b086      	sub	sp, #24
 800b85c:	af00      	add	r7, sp, #0
 800b85e:	6078      	str	r0, [r7, #4]
 800b860:	6039      	str	r1, [r7, #0]

	char items[4];

	if(a->txitems > 241)
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	f8d3 37e0 	ldr.w	r3, [r3, #2016]	; 0x7e0
 800b868:	2bf1      	cmp	r3, #241	; 0xf1
 800b86a:	dd01      	ble.n	800b870 <LoRa_Send+0x18>
	{
		return ERROR_BUFFER_SIZE;
 800b86c:	2301      	movs	r3, #1
 800b86e:	e099      	b.n	800b9a4 <LoRa_Send+0x14c>
	}
	else
	{

		items[0]='\0';
 800b870:	2300      	movs	r3, #0
 800b872:	723b      	strb	r3, [r7, #8]
		itoa(a->txitems, items,10);
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	f8d3 37e0 	ldr.w	r3, [r3, #2016]	; 0x7e0
 800b87a:	f107 0108 	add.w	r1, r7, #8
 800b87e:	220a      	movs	r2, #10
 800b880:	4618      	mov	r0, r3
 800b882:	f003 f8ba 	bl	800e9fa <itoa>
		a->txbuff2SND[0]='\0'; 													//Borro el vector
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	2200      	movs	r2, #0
 800b88a:	f883 265c 	strb.w	r2, [r3, #1628]	; 0x65c
		strncat(a->txbuff2SND,"AT+SEND=",strlen("AT+SEND="));					//AT+SEND=
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	f203 645c 	addw	r4, r3, #1628	; 0x65c
 800b894:	4620      	mov	r0, r4
 800b896:	f7f4 fcad 	bl	80001f4 <strlen>
 800b89a:	4603      	mov	r3, r0
 800b89c:	4423      	add	r3, r4
 800b89e:	4943      	ldr	r1, [pc, #268]	; (800b9ac <LoRa_Send+0x154>)
 800b8a0:	461a      	mov	r2, r3
 800b8a2:	460b      	mov	r3, r1
 800b8a4:	cb03      	ldmia	r3!, {r0, r1}
 800b8a6:	6010      	str	r0, [r2, #0]
 800b8a8:	6051      	str	r1, [r2, #4]
 800b8aa:	781b      	ldrb	r3, [r3, #0]
 800b8ac:	7213      	strb	r3, [r2, #8]
		strncat(a->txbuff2SND,a->dest_address,strlen(a->dest_address));			//AT+SEND=1
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	f203 645c 	addw	r4, r3, #1628	; 0x65c
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	f103 0516 	add.w	r5, r3, #22
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	3316      	adds	r3, #22
 800b8be:	4618      	mov	r0, r3
 800b8c0:	f7f4 fc98 	bl	80001f4 <strlen>
 800b8c4:	4603      	mov	r3, r0
 800b8c6:	461a      	mov	r2, r3
 800b8c8:	4629      	mov	r1, r5
 800b8ca:	4620      	mov	r0, r4
 800b8cc:	f003 fa81 	bl	800edd2 <strncat>
		strncat(a->txbuff2SND,",",1);											//AT+SEND=1,
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	f203 645c 	addw	r4, r3, #1628	; 0x65c
 800b8d6:	4620      	mov	r0, r4
 800b8d8:	f7f4 fc8c 	bl	80001f4 <strlen>
 800b8dc:	4603      	mov	r3, r0
 800b8de:	4423      	add	r3, r4
 800b8e0:	4933      	ldr	r1, [pc, #204]	; (800b9b0 <LoRa_Send+0x158>)
 800b8e2:	461a      	mov	r2, r3
 800b8e4:	460b      	mov	r3, r1
 800b8e6:	881b      	ldrh	r3, [r3, #0]
 800b8e8:	8013      	strh	r3, [r2, #0]
		strncat(a->txbuff2SND,items,strlen(items));								//AT+SEND=1,4
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	f203 645c 	addw	r4, r3, #1628	; 0x65c
 800b8f0:	f107 0308 	add.w	r3, r7, #8
 800b8f4:	4618      	mov	r0, r3
 800b8f6:	f7f4 fc7d 	bl	80001f4 <strlen>
 800b8fa:	4602      	mov	r2, r0
 800b8fc:	f107 0308 	add.w	r3, r7, #8
 800b900:	4619      	mov	r1, r3
 800b902:	4620      	mov	r0, r4
 800b904:	f003 fa65 	bl	800edd2 <strncat>
		strncat(a->txbuff2SND,",",1);											//AT+SEND=1,4,
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	f203 645c 	addw	r4, r3, #1628	; 0x65c
 800b90e:	4620      	mov	r0, r4
 800b910:	f7f4 fc70 	bl	80001f4 <strlen>
 800b914:	4603      	mov	r3, r0
 800b916:	4423      	add	r3, r4
 800b918:	4925      	ldr	r1, [pc, #148]	; (800b9b0 <LoRa_Send+0x158>)
 800b91a:	461a      	mov	r2, r3
 800b91c:	460b      	mov	r3, r1
 800b91e:	881b      	ldrh	r3, [r3, #0]
 800b920:	8013      	strh	r3, [r2, #0]

		int la=strlen(a->txbuff2SND);
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	f203 635c 	addw	r3, r3, #1628	; 0x65c
 800b928:	4618      	mov	r0, r3
 800b92a:	f7f4 fc63 	bl	80001f4 <strlen>
 800b92e:	4603      	mov	r3, r0
 800b930:	617b      	str	r3, [r7, #20]
		int lb=la+a->txitems;
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	f8d3 37e0 	ldr.w	r3, [r3, #2016]	; 0x7e0
 800b938:	697a      	ldr	r2, [r7, #20]
 800b93a:	4413      	add	r3, r2
 800b93c:	60fb      	str	r3, [r7, #12]
		int lc=0;
 800b93e:	2300      	movs	r3, #0
 800b940:	613b      	str	r3, [r7, #16]
		while(la < lb )
 800b942:	e012      	b.n	800b96a <LoRa_Send+0x112>
		{
			a->txbuff2SND[la]=a->txbuff[lc];
 800b944:	687a      	ldr	r2, [r7, #4]
 800b946:	693b      	ldr	r3, [r7, #16]
 800b948:	4413      	add	r3, r2
 800b94a:	f203 43dc 	addw	r3, r3, #1244	; 0x4dc
 800b94e:	7819      	ldrb	r1, [r3, #0]
 800b950:	687a      	ldr	r2, [r7, #4]
 800b952:	697b      	ldr	r3, [r7, #20]
 800b954:	4413      	add	r3, r2
 800b956:	f203 635c 	addw	r3, r3, #1628	; 0x65c
 800b95a:	460a      	mov	r2, r1
 800b95c:	701a      	strb	r2, [r3, #0]
			la++;
 800b95e:	697b      	ldr	r3, [r7, #20]
 800b960:	3301      	adds	r3, #1
 800b962:	617b      	str	r3, [r7, #20]
			lc++;
 800b964:	693b      	ldr	r3, [r7, #16]
 800b966:	3301      	adds	r3, #1
 800b968:	613b      	str	r3, [r7, #16]
		while(la < lb )
 800b96a:	697a      	ldr	r2, [r7, #20]
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	429a      	cmp	r2, r3
 800b970:	dbe8      	blt.n	800b944 <LoRa_Send+0xec>
		}
		a->txbuff2SND[la++]='\r';
 800b972:	697b      	ldr	r3, [r7, #20]
 800b974:	1c5a      	adds	r2, r3, #1
 800b976:	617a      	str	r2, [r7, #20]
 800b978:	687a      	ldr	r2, [r7, #4]
 800b97a:	4413      	add	r3, r2
 800b97c:	220d      	movs	r2, #13
 800b97e:	f883 265c 	strb.w	r2, [r3, #1628]	; 0x65c
		a->txbuff2SND[la++]='\n';
 800b982:	697b      	ldr	r3, [r7, #20]
 800b984:	1c5a      	adds	r2, r3, #1
 800b986:	617a      	str	r2, [r7, #20]
 800b988:	687a      	ldr	r2, [r7, #4]
 800b98a:	4413      	add	r3, r2
 800b98c:	220a      	movs	r2, #10
 800b98e:	f883 265c 	strb.w	r2, [r3, #1628]	; 0x65c
		HAL_UART_Transmit_IT(SERIAL, a->txbuff2SND, la);
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	f203 635c 	addw	r3, r3, #1628	; 0x65c
 800b998:	697a      	ldr	r2, [r7, #20]
 800b99a:	b292      	uxth	r2, r2
 800b99c:	4619      	mov	r1, r3
 800b99e:	6838      	ldr	r0, [r7, #0]
 800b9a0:	f7f9 fef4 	bl	800578c <HAL_UART_Transmit_IT>
	}

}
 800b9a4:	4618      	mov	r0, r3
 800b9a6:	3718      	adds	r7, #24
 800b9a8:	46bd      	mov	sp, r7
 800b9aa:	bdb0      	pop	{r4, r5, r7, pc}
 800b9ac:	080104d4 	.word	0x080104d4
 800b9b0:	080104e0 	.word	0x080104e0

0800b9b4 <LoRa_reset_sndTIMER>:
		a->tmr_dly_en=1;
		a->tmr_dlyCNT=0;
 }

void LoRa_reset_sndTIMER(struct LoRa *a,int msec)
 {
 800b9b4:	b480      	push	{r7}
 800b9b6:	b083      	sub	sp, #12
 800b9b8:	af00      	add	r7, sp, #0
 800b9ba:	6078      	str	r0, [r7, #4]
 800b9bc:	6039      	str	r1, [r7, #0]
	 	a->tmr_dly_ON=0;
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	2200      	movs	r2, #0
 800b9c2:	f883 27ee 	strb.w	r2, [r3, #2030]	; 0x7ee
		a->tmr_dly=msec;
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	683a      	ldr	r2, [r7, #0]
 800b9ca:	f8c3 27f0 	str.w	r2, [r3, #2032]	; 0x7f0
		a->tmr_dly_en=0;
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	2200      	movs	r2, #0
 800b9d2:	f883 27ed 	strb.w	r2, [r3, #2029]	; 0x7ed
		a->tmr_dlyCNT=0;
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	2200      	movs	r2, #0
 800b9da:	f8c3 27f4 	str.w	r2, [r3, #2036]	; 0x7f4
 }
 800b9de:	bf00      	nop
 800b9e0:	370c      	adds	r7, #12
 800b9e2:	46bd      	mov	sp, r7
 800b9e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9e8:	4770      	bx	lr
	...

0800b9ec <LoRa_decode>:
		break;
	}
}

void LoRa_decode(struct LoRa *b)
 {
 800b9ec:	b580      	push	{r7, lr}
 800b9ee:	b086      	sub	sp, #24
 800b9f0:	af00      	add	r7, sp, #0
 800b9f2:	6078      	str	r0, [r7, #4]
	switch (Lora_idSTR(b))
 800b9f4:	6878      	ldr	r0, [r7, #4]
 800b9f6:	f000 fa25 	bl	800be44 <Lora_idSTR>
 800b9fa:	4603      	mov	r3, r0
 800b9fc:	2b10      	cmp	r3, #16
 800b9fe:	f200 820c 	bhi.w	800be1a <LoRa_decode+0x42e>
 800ba02:	a201      	add	r2, pc, #4	; (adr r2, 800ba08 <LoRa_decode+0x1c>)
 800ba04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba08:	0800ba4d 	.word	0x0800ba4d
 800ba0c:	0800bb25 	.word	0x0800bb25
 800ba10:	0800bd59 	.word	0x0800bd59
 800ba14:	0800bd63 	.word	0x0800bd63
 800ba18:	0800bd6d 	.word	0x0800bd6d
 800ba1c:	0800bd77 	.word	0x0800bd77
 800ba20:	0800bd81 	.word	0x0800bd81
 800ba24:	0800bd8b 	.word	0x0800bd8b
 800ba28:	0800bd95 	.word	0x0800bd95
 800ba2c:	0800bd9f 	.word	0x0800bd9f
 800ba30:	0800bda9 	.word	0x0800bda9
 800ba34:	0800bde9 	.word	0x0800bde9
 800ba38:	0800bdf3 	.word	0x0800bdf3
 800ba3c:	0800be07 	.word	0x0800be07
 800ba40:	0800bdfd 	.word	0x0800bdfd
 800ba44:	0800bd4f 	.word	0x0800bd4f
 800ba48:	0800be11 	.word	0x0800be11
	{
		case _OK:
		{
			switch(b->estado)
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	f893 37ec 	ldrb.w	r3, [r3, #2028]	; 0x7ec
 800ba52:	3b01      	subs	r3, #1
 800ba54:	2b13      	cmp	r3, #19
 800ba56:	d860      	bhi.n	800bb1a <LoRa_decode+0x12e>
 800ba58:	a201      	add	r2, pc, #4	; (adr r2, 800ba60 <LoRa_decode+0x74>)
 800ba5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba5e:	bf00      	nop
 800ba60:	0800bab1 	.word	0x0800bab1
 800ba64:	0800bb1b 	.word	0x0800bb1b
 800ba68:	0800bb1b 	.word	0x0800bb1b
 800ba6c:	0800bb1b 	.word	0x0800bb1b
 800ba70:	0800bb1b 	.word	0x0800bb1b
 800ba74:	0800bb1b 	.word	0x0800bb1b
 800ba78:	0800babb 	.word	0x0800babb
 800ba7c:	0800bac5 	.word	0x0800bac5
 800ba80:	0800bb1b 	.word	0x0800bb1b
 800ba84:	0800bacf 	.word	0x0800bacf
 800ba88:	0800bb1b 	.word	0x0800bb1b
 800ba8c:	0800bad9 	.word	0x0800bad9
 800ba90:	0800bb1b 	.word	0x0800bb1b
 800ba94:	0800bae3 	.word	0x0800bae3
 800ba98:	0800bb1b 	.word	0x0800bb1b
 800ba9c:	0800baed 	.word	0x0800baed
 800baa0:	0800bb1b 	.word	0x0800bb1b
 800baa4:	0800baf7 	.word	0x0800baf7
 800baa8:	0800bb1b 	.word	0x0800bb1b
 800baac:	0800bb01 	.word	0x0800bb01
			{
				case _AT_SENT:
					b->estado=_IDLE;
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	2200      	movs	r2, #0
 800bab4:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
					break;
 800bab8:	e02f      	b.n	800bb1a <LoRa_decode+0x12e>
				case _MODE_SENT:
					b->estado=_MODE_OK;
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	2206      	movs	r2, #6
 800babe:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
					break;
 800bac2:	e02a      	b.n	800bb1a <LoRa_decode+0x12e>
				case _PARAMETER_SENT:
					b->estado=_PARAMETER_OK;
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	2209      	movs	r2, #9
 800bac8:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
					break;
 800bacc:	e025      	b.n	800bb1a <LoRa_decode+0x12e>
				case _BAND_SENT:
					b->estado=_BAND_OK;
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	220b      	movs	r2, #11
 800bad2:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
					break;
 800bad6:	e020      	b.n	800bb1a <LoRa_decode+0x12e>
				case _ADDR_SENT:
					b->estado=_ADDR_OK;
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	220d      	movs	r2, #13
 800badc:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
					break;
 800bae0:	e01b      	b.n	800bb1a <LoRa_decode+0x12e>
				case _NETWORK_SENT:
					b->estado=_NETWORK_OK;
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	220f      	movs	r2, #15
 800bae6:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
					break;
 800baea:	e016      	b.n	800bb1a <LoRa_decode+0x12e>
				case _CPIN_SENT:
					b->estado=_CPIN_OK;
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	2211      	movs	r2, #17
 800baf0:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
					break;
 800baf4:	e011      	b.n	800bb1a <LoRa_decode+0x12e>
				case _CRFOP_SENT:
					b->estado=_CRFOP_OK;
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	2213      	movs	r2, #19
 800bafa:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
					break;
 800bafe:	e00c      	b.n	800bb1a <LoRa_decode+0x12e>
				case _SENT:
					{
						b->estado=_SENT_OK;
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	2215      	movs	r2, #21
 800bb04:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
						b->rxbuff[0]='\0';
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	2200      	movs	r2, #0
 800bb0c:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
						ITM0_Write("\r\nLora _SENT_OK\r\n",strlen("\r\nLora _SENT_OK\r\n"));
 800bb10:	2111      	movs	r1, #17
 800bb12:	48a8      	ldr	r0, [pc, #672]	; (800bdb4 <LoRa_decode+0x3c8>)
 800bb14:	f7f5 fd90 	bl	8001638 <ITM0_Write>
					}
					break;
 800bb18:	bf00      	nop

			}

			ITM0_Write("\r\nLora _OK\r\n",strlen("\r\nLora _OK\r\n"));
 800bb1a:	210c      	movs	r1, #12
 800bb1c:	48a6      	ldr	r0, [pc, #664]	; (800bdb8 <LoRa_decode+0x3cc>)
 800bb1e:	f7f5 fd8b 	bl	8001638 <ITM0_Write>
						//Clean rxbuff_hld
		}
			break;
 800bb22:	e17f      	b.n	800be24 <LoRa_decode+0x438>
		case _RCV:
		{
			ITM0_Write("\r\nLora _RCV\r\n",strlen("\r\nLora _RCV\r\n"));
 800bb24:	210d      	movs	r1, #13
 800bb26:	48a5      	ldr	r0, [pc, #660]	; (800bdbc <LoRa_decode+0x3d0>)
 800bb28:	f7f5 fd86 	bl	8001638 <ITM0_Write>
				b->estado=_DATO_RECIBIDO;
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	221a      	movs	r2, #26
 800bb30:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
				b->_data_available=1;
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	2201      	movs	r2, #1
 800bb38:	f883 2800 	strb.w	r2, [r3, #2048]	; 0x800
					int i=0;
 800bb3c:	2300      	movs	r3, #0
 800bb3e:	617b      	str	r3, [r7, #20]
					int j=0;
 800bb40:	2300      	movs	r3, #0
 800bb42:	613b      	str	r3, [r7, #16]
					int lngt=0;
 800bb44:	2300      	movs	r3, #0
 800bb46:	60fb      	str	r3, [r7, #12]
					while (b->rxbuff[i] != '=')
 800bb48:	e002      	b.n	800bb50 <LoRa_decode+0x164>
					{ i++;}
 800bb4a:	697b      	ldr	r3, [r7, #20]
 800bb4c:	3301      	adds	r3, #1
 800bb4e:	617b      	str	r3, [r7, #20]
					while (b->rxbuff[i] != '=')
 800bb50:	687a      	ldr	r2, [r7, #4]
 800bb52:	697b      	ldr	r3, [r7, #20]
 800bb54:	4413      	add	r3, r2
 800bb56:	3356      	adds	r3, #86	; 0x56
 800bb58:	781b      	ldrb	r3, [r3, #0]
 800bb5a:	2b3d      	cmp	r3, #61	; 0x3d
 800bb5c:	d1f5      	bne.n	800bb4a <LoRa_decode+0x15e>
					i++;
 800bb5e:	697b      	ldr	r3, [r7, #20]
 800bb60:	3301      	adds	r3, #1
 800bb62:	617b      	str	r3, [r7, #20]
					while (b->rxbuff[i]!= ',')
 800bb64:	e017      	b.n	800bb96 <LoRa_decode+0x1aa>
					{
						b->rxaddress[j]=b->rxbuff[i];			//Save the address
 800bb66:	687a      	ldr	r2, [r7, #4]
 800bb68:	697b      	ldr	r3, [r7, #20]
 800bb6a:	4413      	add	r3, r2
 800bb6c:	3356      	adds	r3, #86	; 0x56
 800bb6e:	7819      	ldrb	r1, [r3, #0]
 800bb70:	687a      	ldr	r2, [r7, #4]
 800bb72:	693b      	ldr	r3, [r7, #16]
 800bb74:	4413      	add	r3, r2
 800bb76:	3306      	adds	r3, #6
 800bb78:	460a      	mov	r2, r1
 800bb7a:	701a      	strb	r2, [r3, #0]
						i++;
 800bb7c:	697b      	ldr	r3, [r7, #20]
 800bb7e:	3301      	adds	r3, #1
 800bb80:	617b      	str	r3, [r7, #20]
						j++;
 800bb82:	693b      	ldr	r3, [r7, #16]
 800bb84:	3301      	adds	r3, #1
 800bb86:	613b      	str	r3, [r7, #16]
						if (j > 6)
 800bb88:	693b      	ldr	r3, [r7, #16]
 800bb8a:	2b06      	cmp	r3, #6
 800bb8c:	dd03      	ble.n	800bb96 <LoRa_decode+0x1aa>
						{
							Lora_rx_del(b);
 800bb8e:	6878      	ldr	r0, [r7, #4]
 800bb90:	f000 fbca 	bl	800c328 <Lora_rx_del>
							break;
 800bb94:	e006      	b.n	800bba4 <LoRa_decode+0x1b8>
					while (b->rxbuff[i]!= ',')
 800bb96:	687a      	ldr	r2, [r7, #4]
 800bb98:	697b      	ldr	r3, [r7, #20]
 800bb9a:	4413      	add	r3, r2
 800bb9c:	3356      	adds	r3, #86	; 0x56
 800bb9e:	781b      	ldrb	r3, [r3, #0]
 800bba0:	2b2c      	cmp	r3, #44	; 0x2c
 800bba2:	d1e0      	bne.n	800bb66 <LoRa_decode+0x17a>
						}
					}
					b->rxaddress[j]='\0';
 800bba4:	687a      	ldr	r2, [r7, #4]
 800bba6:	693b      	ldr	r3, [r7, #16]
 800bba8:	4413      	add	r3, r2
 800bbaa:	3306      	adds	r3, #6
 800bbac:	2200      	movs	r2, #0
 800bbae:	701a      	strb	r2, [r3, #0]
					j=0;
 800bbb0:	2300      	movs	r3, #0
 800bbb2:	613b      	str	r3, [r7, #16]
					i++;
 800bbb4:	697b      	ldr	r3, [r7, #20]
 800bbb6:	3301      	adds	r3, #1
 800bbb8:	617b      	str	r3, [r7, #20]
					while (b->rxbuff[i]!= ',')
 800bbba:	e017      	b.n	800bbec <LoRa_decode+0x200>
					{
						b->rx_items[j]=b->rxbuff[i];			//Save the qty of data
 800bbbc:	687a      	ldr	r2, [r7, #4]
 800bbbe:	697b      	ldr	r3, [r7, #20]
 800bbc0:	4413      	add	r3, r2
 800bbc2:	3356      	adds	r3, #86	; 0x56
 800bbc4:	7819      	ldrb	r1, [r3, #0]
 800bbc6:	687a      	ldr	r2, [r7, #4]
 800bbc8:	693b      	ldr	r3, [r7, #16]
 800bbca:	4413      	add	r3, r2
 800bbcc:	330c      	adds	r3, #12
 800bbce:	460a      	mov	r2, r1
 800bbd0:	701a      	strb	r2, [r3, #0]
						i++;
 800bbd2:	697b      	ldr	r3, [r7, #20]
 800bbd4:	3301      	adds	r3, #1
 800bbd6:	617b      	str	r3, [r7, #20]
						j++;
 800bbd8:	693b      	ldr	r3, [r7, #16]
 800bbda:	3301      	adds	r3, #1
 800bbdc:	613b      	str	r3, [r7, #16]
						if (j > 4)
 800bbde:	693b      	ldr	r3, [r7, #16]
 800bbe0:	2b04      	cmp	r3, #4
 800bbe2:	dd03      	ble.n	800bbec <LoRa_decode+0x200>
						{
							Lora_rx_del(b);
 800bbe4:	6878      	ldr	r0, [r7, #4]
 800bbe6:	f000 fb9f 	bl	800c328 <Lora_rx_del>
							break;
 800bbea:	e006      	b.n	800bbfa <LoRa_decode+0x20e>
					while (b->rxbuff[i]!= ',')
 800bbec:	687a      	ldr	r2, [r7, #4]
 800bbee:	697b      	ldr	r3, [r7, #20]
 800bbf0:	4413      	add	r3, r2
 800bbf2:	3356      	adds	r3, #86	; 0x56
 800bbf4:	781b      	ldrb	r3, [r3, #0]
 800bbf6:	2b2c      	cmp	r3, #44	; 0x2c
 800bbf8:	d1e0      	bne.n	800bbbc <LoRa_decode+0x1d0>
						}
					}
					b->rx_items[j]='\0';
 800bbfa:	687a      	ldr	r2, [r7, #4]
 800bbfc:	693b      	ldr	r3, [r7, #16]
 800bbfe:	4413      	add	r3, r2
 800bc00:	330c      	adds	r3, #12
 800bc02:	2200      	movs	r2, #0
 800bc04:	701a      	strb	r2, [r3, #0]
					j=0;
 800bc06:	2300      	movs	r3, #0
 800bc08:	613b      	str	r3, [r7, #16]
					i++;
 800bc0a:	697b      	ldr	r3, [r7, #20]
 800bc0c:	3301      	adds	r3, #1
 800bc0e:	617b      	str	r3, [r7, #20]
					lngt=atoi(b->rx_items,10);
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	330c      	adds	r3, #12
 800bc14:	210a      	movs	r1, #10
 800bc16:	4618      	mov	r0, r3
 800bc18:	f002 fed3 	bl	800e9c2 <atoi>
 800bc1c:	60f8      	str	r0, [r7, #12]
					//lngt=lngt+i;
					//while(lngt>i)   //Ahota busco leer lo datos recibid y luego verificar si ok
					while (b->rxbuff[i]!= ',')
 800bc1e:	e019      	b.n	800bc54 <LoRa_decode+0x268>
					{
						b->dataRCV[j]=b->rxbuff[i];			//Save the data
 800bc20:	687a      	ldr	r2, [r7, #4]
 800bc22:	697b      	ldr	r3, [r7, #20]
 800bc24:	4413      	add	r3, r2
 800bc26:	3356      	adds	r3, #86	; 0x56
 800bc28:	7819      	ldrb	r1, [r3, #0]
 800bc2a:	687a      	ldr	r2, [r7, #4]
 800bc2c:	693b      	ldr	r3, [r7, #16]
 800bc2e:	4413      	add	r3, r2
 800bc30:	f503 73eb 	add.w	r3, r3, #470	; 0x1d6
 800bc34:	460a      	mov	r2, r1
 800bc36:	701a      	strb	r2, [r3, #0]
						j++;
 800bc38:	693b      	ldr	r3, [r7, #16]
 800bc3a:	3301      	adds	r3, #1
 800bc3c:	613b      	str	r3, [r7, #16]
						i++;
 800bc3e:	697b      	ldr	r3, [r7, #20]
 800bc40:	3301      	adds	r3, #1
 800bc42:	617b      	str	r3, [r7, #20]
						if (j > lngt)
 800bc44:	693a      	ldr	r2, [r7, #16]
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	429a      	cmp	r2, r3
 800bc4a:	dd03      	ble.n	800bc54 <LoRa_decode+0x268>
						{
							Lora_rx_del(b);
 800bc4c:	6878      	ldr	r0, [r7, #4]
 800bc4e:	f000 fb6b 	bl	800c328 <Lora_rx_del>
							break;
 800bc52:	e006      	b.n	800bc62 <LoRa_decode+0x276>
					while (b->rxbuff[i]!= ',')
 800bc54:	687a      	ldr	r2, [r7, #4]
 800bc56:	697b      	ldr	r3, [r7, #20]
 800bc58:	4413      	add	r3, r2
 800bc5a:	3356      	adds	r3, #86	; 0x56
 800bc5c:	781b      	ldrb	r3, [r3, #0]
 800bc5e:	2b2c      	cmp	r3, #44	; 0x2c
 800bc60:	d1de      	bne.n	800bc20 <LoRa_decode+0x234>
						}
					}
					b->_n_dataRCV=j;							//Save amount of data received
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	693a      	ldr	r2, [r7, #16]
 800bc66:	f8c3 24d8 	str.w	r2, [r3, #1240]	; 0x4d8
					j=0;
 800bc6a:	2300      	movs	r3, #0
 800bc6c:	613b      	str	r3, [r7, #16]
					i++;
 800bc6e:	697b      	ldr	r3, [r7, #20]
 800bc70:	3301      	adds	r3, #1
 800bc72:	617b      	str	r3, [r7, #20]
					while (b->rxbuff[i]!= ',')
 800bc74:	e017      	b.n	800bca6 <LoRa_decode+0x2ba>
					{
						b->rx_convert[j]=b->rxbuff[i];			//save RSSI
 800bc76:	687a      	ldr	r2, [r7, #4]
 800bc78:	697b      	ldr	r3, [r7, #20]
 800bc7a:	4413      	add	r3, r2
 800bc7c:	3356      	adds	r3, #86	; 0x56
 800bc7e:	7819      	ldrb	r1, [r3, #0]
 800bc80:	687a      	ldr	r2, [r7, #4]
 800bc82:	693b      	ldr	r3, [r7, #16]
 800bc84:	4413      	add	r3, r2
 800bc86:	3310      	adds	r3, #16
 800bc88:	460a      	mov	r2, r1
 800bc8a:	701a      	strb	r2, [r3, #0]
						i++;
 800bc8c:	697b      	ldr	r3, [r7, #20]
 800bc8e:	3301      	adds	r3, #1
 800bc90:	617b      	str	r3, [r7, #20]
						j++;
 800bc92:	693b      	ldr	r3, [r7, #16]
 800bc94:	3301      	adds	r3, #1
 800bc96:	613b      	str	r3, [r7, #16]
						if (j > 5)
 800bc98:	693b      	ldr	r3, [r7, #16]
 800bc9a:	2b05      	cmp	r3, #5
 800bc9c:	dd03      	ble.n	800bca6 <LoRa_decode+0x2ba>
						{
							Lora_rx_del(b);
 800bc9e:	6878      	ldr	r0, [r7, #4]
 800bca0:	f000 fb42 	bl	800c328 <Lora_rx_del>
							break;
 800bca4:	e006      	b.n	800bcb4 <LoRa_decode+0x2c8>
					while (b->rxbuff[i]!= ',')
 800bca6:	687a      	ldr	r2, [r7, #4]
 800bca8:	697b      	ldr	r3, [r7, #20]
 800bcaa:	4413      	add	r3, r2
 800bcac:	3356      	adds	r3, #86	; 0x56
 800bcae:	781b      	ldrb	r3, [r3, #0]
 800bcb0:	2b2c      	cmp	r3, #44	; 0x2c
 800bcb2:	d1e0      	bne.n	800bc76 <LoRa_decode+0x28a>
						}
					}
					b->rxRSSI=atoi(b->rx_convert,10);
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	3310      	adds	r3, #16
 800bcb8:	210a      	movs	r1, #10
 800bcba:	4618      	mov	r0, r3
 800bcbc:	f002 fe81 	bl	800e9c2 <atoi>
 800bcc0:	4602      	mov	r2, r0
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	f8c3 27e4 	str.w	r2, [r3, #2020]	; 0x7e4
					b->rx_convert[j]='\0';
 800bcc8:	687a      	ldr	r2, [r7, #4]
 800bcca:	693b      	ldr	r3, [r7, #16]
 800bccc:	4413      	add	r3, r2
 800bcce:	3310      	adds	r3, #16
 800bcd0:	2200      	movs	r2, #0
 800bcd2:	701a      	strb	r2, [r3, #0]
					j=0;
 800bcd4:	2300      	movs	r3, #0
 800bcd6:	613b      	str	r3, [r7, #16]
					i++;
 800bcd8:	697b      	ldr	r3, [r7, #20]
 800bcda:	3301      	adds	r3, #1
 800bcdc:	617b      	str	r3, [r7, #20]
					while (b->rxbuff[i]!= '\r')
 800bcde:	e017      	b.n	800bd10 <LoRa_decode+0x324>
					{
						b->rx_convert[j]=b->rxbuff[i];			// Save SNR
 800bce0:	687a      	ldr	r2, [r7, #4]
 800bce2:	697b      	ldr	r3, [r7, #20]
 800bce4:	4413      	add	r3, r2
 800bce6:	3356      	adds	r3, #86	; 0x56
 800bce8:	7819      	ldrb	r1, [r3, #0]
 800bcea:	687a      	ldr	r2, [r7, #4]
 800bcec:	693b      	ldr	r3, [r7, #16]
 800bcee:	4413      	add	r3, r2
 800bcf0:	3310      	adds	r3, #16
 800bcf2:	460a      	mov	r2, r1
 800bcf4:	701a      	strb	r2, [r3, #0]
						i++;
 800bcf6:	697b      	ldr	r3, [r7, #20]
 800bcf8:	3301      	adds	r3, #1
 800bcfa:	617b      	str	r3, [r7, #20]
						j++;
 800bcfc:	693b      	ldr	r3, [r7, #16]
 800bcfe:	3301      	adds	r3, #1
 800bd00:	613b      	str	r3, [r7, #16]
						if (j > 5)
 800bd02:	693b      	ldr	r3, [r7, #16]
 800bd04:	2b05      	cmp	r3, #5
 800bd06:	dd03      	ble.n	800bd10 <LoRa_decode+0x324>
						{
							Lora_rx_del(b);
 800bd08:	6878      	ldr	r0, [r7, #4]
 800bd0a:	f000 fb0d 	bl	800c328 <Lora_rx_del>
							break;
 800bd0e:	e006      	b.n	800bd1e <LoRa_decode+0x332>
					while (b->rxbuff[i]!= '\r')
 800bd10:	687a      	ldr	r2, [r7, #4]
 800bd12:	697b      	ldr	r3, [r7, #20]
 800bd14:	4413      	add	r3, r2
 800bd16:	3356      	adds	r3, #86	; 0x56
 800bd18:	781b      	ldrb	r3, [r3, #0]
 800bd1a:	2b0d      	cmp	r3, #13
 800bd1c:	d1e0      	bne.n	800bce0 <LoRa_decode+0x2f4>
						}
					}

					b->rx_convert[j]='\0';
 800bd1e:	687a      	ldr	r2, [r7, #4]
 800bd20:	693b      	ldr	r3, [r7, #16]
 800bd22:	4413      	add	r3, r2
 800bd24:	3310      	adds	r3, #16
 800bd26:	2200      	movs	r2, #0
 800bd28:	701a      	strb	r2, [r3, #0]
					b->rxSNR=atoi(b->rx_convert,10);
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	3310      	adds	r3, #16
 800bd2e:	210a      	movs	r1, #10
 800bd30:	4618      	mov	r0, r3
 800bd32:	f002 fe46 	bl	800e9c2 <atoi>
 800bd36:	4602      	mov	r2, r0
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	f8c3 27e8 	str.w	r2, [r3, #2024]	; 0x7e8
					b->rx_convert[0]='\0';
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	2200      	movs	r2, #0
 800bd42:	741a      	strb	r2, [r3, #16]


			    //Timer de enviar data cuando antes se recibe
				//LoRa_set_sndTIMER(b, 3000);
				b->rxbuff[0]='\0';
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	2200      	movs	r2, #0
 800bd48:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
		}
			break;
 800bd4c:	e06a      	b.n	800be24 <LoRa_decode+0x438>
		case _ERR:
			ITM0_Write("\r\nLora _ERR\r\n",strlen("\r\nLora _ERR\r\n"));
 800bd4e:	210d      	movs	r1, #13
 800bd50:	481b      	ldr	r0, [pc, #108]	; (800bdc0 <LoRa_decode+0x3d4>)
 800bd52:	f7f5 fc71 	bl	8001638 <ITM0_Write>
			break;
 800bd56:	e065      	b.n	800be24 <LoRa_decode+0x438>
		case _RESET:
			ITM0_Write("\r\nLora _RESET\r\n",strlen("\r\nLora _RESET\r\n"));
 800bd58:	210f      	movs	r1, #15
 800bd5a:	481a      	ldr	r0, [pc, #104]	; (800bdc4 <LoRa_decode+0x3d8>)
 800bd5c:	f7f5 fc6c 	bl	8001638 <ITM0_Write>
			break;
 800bd60:	e060      	b.n	800be24 <LoRa_decode+0x438>
		case _READY:
			ITM0_Write("\r\nLora _READY\r\n",strlen("\r\nLora _READY\r\n"));
 800bd62:	210f      	movs	r1, #15
 800bd64:	4818      	ldr	r0, [pc, #96]	; (800bdc8 <LoRa_decode+0x3dc>)
 800bd66:	f7f5 fc67 	bl	8001638 <ITM0_Write>
			break;
 800bd6a:	e05b      	b.n	800be24 <LoRa_decode+0x438>
		case _MODE:
			ITM0_Write("\r\nLora _MODE\r\n",strlen("\r\nLora _MODE\r\n"));
 800bd6c:	210e      	movs	r1, #14
 800bd6e:	4817      	ldr	r0, [pc, #92]	; (800bdcc <LoRa_decode+0x3e0>)
 800bd70:	f7f5 fc62 	bl	8001638 <ITM0_Write>
			break;
 800bd74:	e056      	b.n	800be24 <LoRa_decode+0x438>
		case _IPR:
			ITM0_Write("\r\nLora _IPR\r\n",strlen("\r\nLora _IPR\r\n"));
 800bd76:	210d      	movs	r1, #13
 800bd78:	4815      	ldr	r0, [pc, #84]	; (800bdd0 <LoRa_decode+0x3e4>)
 800bd7a:	f7f5 fc5d 	bl	8001638 <ITM0_Write>
			break;
 800bd7e:	e051      	b.n	800be24 <LoRa_decode+0x438>
		case _PARAMETER:
			ITM0_Write("\r\nLora _PARAMETER\r\n",strlen("\r\nLora _PARAMETER\r\n"));
 800bd80:	2113      	movs	r1, #19
 800bd82:	4814      	ldr	r0, [pc, #80]	; (800bdd4 <LoRa_decode+0x3e8>)
 800bd84:	f7f5 fc58 	bl	8001638 <ITM0_Write>
			break;
 800bd88:	e04c      	b.n	800be24 <LoRa_decode+0x438>
		case _BAND:
			ITM0_Write("\r\nLora _BAND\r\n",strlen("\r\nLora _BAND\r\n"));
 800bd8a:	210e      	movs	r1, #14
 800bd8c:	4812      	ldr	r0, [pc, #72]	; (800bdd8 <LoRa_decode+0x3ec>)
 800bd8e:	f7f5 fc53 	bl	8001638 <ITM0_Write>
			break;
 800bd92:	e047      	b.n	800be24 <LoRa_decode+0x438>
		case _ADDRESS:
			ITM0_Write("\r\nLora _ADDRESS\r\n",strlen("\r\nLora _ADDRESS\r\n"));
 800bd94:	2111      	movs	r1, #17
 800bd96:	4811      	ldr	r0, [pc, #68]	; (800bddc <LoRa_decode+0x3f0>)
 800bd98:	f7f5 fc4e 	bl	8001638 <ITM0_Write>
			break;
 800bd9c:	e042      	b.n	800be24 <LoRa_decode+0x438>
		case _NETWORK:
			ITM0_Write("\r\nLora _NETWORK\r\n",strlen("\r\nLora _NETWORK\r\n"));
 800bd9e:	2111      	movs	r1, #17
 800bda0:	480f      	ldr	r0, [pc, #60]	; (800bde0 <LoRa_decode+0x3f4>)
 800bda2:	f7f5 fc49 	bl	8001638 <ITM0_Write>
			break;
 800bda6:	e03d      	b.n	800be24 <LoRa_decode+0x438>
		case _CPIN:
			ITM0_Write("\r\nLora _CPIN\r\n",strlen("\r\nLora _CPIN\r\n"));
 800bda8:	210e      	movs	r1, #14
 800bdaa:	480e      	ldr	r0, [pc, #56]	; (800bde4 <LoRa_decode+0x3f8>)
 800bdac:	f7f5 fc44 	bl	8001638 <ITM0_Write>
			break;
 800bdb0:	e038      	b.n	800be24 <LoRa_decode+0x438>
 800bdb2:	bf00      	nop
 800bdb4:	08010510 	.word	0x08010510
 800bdb8:	08010524 	.word	0x08010524
 800bdbc:	08010534 	.word	0x08010534
 800bdc0:	08010544 	.word	0x08010544
 800bdc4:	08010554 	.word	0x08010554
 800bdc8:	08010564 	.word	0x08010564
 800bdcc:	08010574 	.word	0x08010574
 800bdd0:	08010584 	.word	0x08010584
 800bdd4:	08010594 	.word	0x08010594
 800bdd8:	080105a8 	.word	0x080105a8
 800bddc:	080105b8 	.word	0x080105b8
 800bde0:	080105cc 	.word	0x080105cc
 800bde4:	080105e0 	.word	0x080105e0
		case _CRFOP:
			ITM0_Write("\r\nLora _CRFOP\r\n",strlen("\r\nLora _CRFOP\r\n"));
 800bde8:	210f      	movs	r1, #15
 800bdea:	4810      	ldr	r0, [pc, #64]	; (800be2c <LoRa_decode+0x440>)
 800bdec:	f7f5 fc24 	bl	8001638 <ITM0_Write>
			break;
 800bdf0:	e018      	b.n	800be24 <LoRa_decode+0x438>
		case _SEND:
			ITM0_Write("\r\nLora _SEND\r\n",strlen("\r\nLora _SEND\r\n"));
 800bdf2:	210e      	movs	r1, #14
 800bdf4:	480e      	ldr	r0, [pc, #56]	; (800be30 <LoRa_decode+0x444>)
 800bdf6:	f7f5 fc1f 	bl	8001638 <ITM0_Write>
			break;
 800bdfa:	e013      	b.n	800be24 <LoRa_decode+0x438>
		case _UID:
			ITM0_Write("\r\nLora _UID\r\n",strlen("\r\nLora _UID\r\n"));
 800bdfc:	210d      	movs	r1, #13
 800bdfe:	480d      	ldr	r0, [pc, #52]	; (800be34 <LoRa_decode+0x448>)
 800be00:	f7f5 fc1a 	bl	8001638 <ITM0_Write>
			break;
 800be04:	e00e      	b.n	800be24 <LoRa_decode+0x438>
		case _VER:
			ITM0_Write("\r\nLora _VER\r\n",strlen("\r\nLora _VER\r\n"));
 800be06:	210d      	movs	r1, #13
 800be08:	480b      	ldr	r0, [pc, #44]	; (800be38 <LoRa_decode+0x44c>)
 800be0a:	f7f5 fc15 	bl	8001638 <ITM0_Write>
			break;
 800be0e:	e009      	b.n	800be24 <LoRa_decode+0x438>
		case _ERR_RCV_OF:
			ITM0_Write("\r\nLora _ERR_RCV_OF\r\n",strlen("\r\nLora _ERR_RCV_OF\r\n"));
 800be10:	2114      	movs	r1, #20
 800be12:	480a      	ldr	r0, [pc, #40]	; (800be3c <LoRa_decode+0x450>)
 800be14:	f7f5 fc10 	bl	8001638 <ITM0_Write>
			break;
 800be18:	e004      	b.n	800be24 <LoRa_decode+0x438>
		default:
			ITM0_Write("\r\nLora default\r\n",strlen("\r\nLora default\r\n"));
 800be1a:	2110      	movs	r1, #16
 800be1c:	4808      	ldr	r0, [pc, #32]	; (800be40 <LoRa_decode+0x454>)
 800be1e:	f7f5 fc0b 	bl	8001638 <ITM0_Write>
			break;
 800be22:	bf00      	nop
	}
 }
 800be24:	bf00      	nop
 800be26:	3718      	adds	r7, #24
 800be28:	46bd      	mov	sp, r7
 800be2a:	bd80      	pop	{r7, pc}
 800be2c:	080105f0 	.word	0x080105f0
 800be30:	08010600 	.word	0x08010600
 800be34:	08010610 	.word	0x08010610
 800be38:	08010620 	.word	0x08010620
 800be3c:	08010630 	.word	0x08010630
 800be40:	08010648 	.word	0x08010648

0800be44 <Lora_idSTR>:
int Lora_idSTR(struct LoRa *a)
{		int f,g,h,i;
 800be44:	b580      	push	{r7, lr}
 800be46:	b090      	sub	sp, #64	; 0x40
 800be48:	af06      	add	r7, sp, #24
 800be4a:	6078      	str	r0, [r7, #4]
		if(a->rxitems > 270) return _ERR_RCV_OF;
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	f8d3 37dc 	ldr.w	r3, [r3, #2012]	; 0x7dc
 800be52:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800be56:	dd01      	ble.n	800be5c <Lora_idSTR+0x18>
 800be58:	2310      	movs	r3, #16
 800be5a:	e257      	b.n	800c30c <Lora_idSTR+0x4c8>
		char data[10];
		int ndata=0;
 800be5c:	2300      	movs	r3, #0
 800be5e:	60fb      	str	r3, [r7, #12]
		i=strlen("+OK=");
 800be60:	2304      	movs	r3, #4
 800be62:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+OK=",&i,data,&ndata,&g,&h,512, 0)==1) return _OK ;
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800be70:	f107 021c 	add.w	r2, r7, #28
 800be74:	2300      	movs	r3, #0
 800be76:	9305      	str	r3, [sp, #20]
 800be78:	f44f 7300 	mov.w	r3, #512	; 0x200
 800be7c:	9304      	str	r3, [sp, #16]
 800be7e:	f107 0320 	add.w	r3, r7, #32
 800be82:	9303      	str	r3, [sp, #12]
 800be84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800be88:	9302      	str	r3, [sp, #8]
 800be8a:	f107 030c 	add.w	r3, r7, #12
 800be8e:	9301      	str	r3, [sp, #4]
 800be90:	f107 0310 	add.w	r3, r7, #16
 800be94:	9300      	str	r3, [sp, #0]
 800be96:	4613      	mov	r3, r2
 800be98:	4ab7      	ldr	r2, [pc, #732]	; (800c178 <Lora_idSTR+0x334>)
 800be9a:	f002 f9cb 	bl	800e234 <FT_String_ND>
 800be9e:	4603      	mov	r3, r0
 800bea0:	2b01      	cmp	r3, #1
 800bea2:	d101      	bne.n	800bea8 <Lora_idSTR+0x64>
 800bea4:	2300      	movs	r3, #0
 800bea6:	e231      	b.n	800c30c <Lora_idSTR+0x4c8>
		i=strlen("+RCV=");
 800bea8:	2305      	movs	r3, #5
 800beaa:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+RCV=",&i,data,&ndata,&g,&h,512, 0)==1) return _RCV ;
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800beb8:	f107 021c 	add.w	r2, r7, #28
 800bebc:	2300      	movs	r3, #0
 800bebe:	9305      	str	r3, [sp, #20]
 800bec0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bec4:	9304      	str	r3, [sp, #16]
 800bec6:	f107 0320 	add.w	r3, r7, #32
 800beca:	9303      	str	r3, [sp, #12]
 800becc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bed0:	9302      	str	r3, [sp, #8]
 800bed2:	f107 030c 	add.w	r3, r7, #12
 800bed6:	9301      	str	r3, [sp, #4]
 800bed8:	f107 0310 	add.w	r3, r7, #16
 800bedc:	9300      	str	r3, [sp, #0]
 800bede:	4613      	mov	r3, r2
 800bee0:	4aa6      	ldr	r2, [pc, #664]	; (800c17c <Lora_idSTR+0x338>)
 800bee2:	f002 f9a7 	bl	800e234 <FT_String_ND>
 800bee6:	4603      	mov	r3, r0
 800bee8:	2b01      	cmp	r3, #1
 800beea:	d101      	bne.n	800bef0 <Lora_idSTR+0xac>
 800beec:	2301      	movs	r3, #1
 800beee:	e20d      	b.n	800c30c <Lora_idSTR+0x4c8>
		i=strlen("+ERR=");
 800bef0:	2305      	movs	r3, #5
 800bef2:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+ERR=",&i,data,&ndata,&g,&h,512, 0)==1) return _ERR ;
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800bf00:	f107 021c 	add.w	r2, r7, #28
 800bf04:	2300      	movs	r3, #0
 800bf06:	9305      	str	r3, [sp, #20]
 800bf08:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bf0c:	9304      	str	r3, [sp, #16]
 800bf0e:	f107 0320 	add.w	r3, r7, #32
 800bf12:	9303      	str	r3, [sp, #12]
 800bf14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bf18:	9302      	str	r3, [sp, #8]
 800bf1a:	f107 030c 	add.w	r3, r7, #12
 800bf1e:	9301      	str	r3, [sp, #4]
 800bf20:	f107 0310 	add.w	r3, r7, #16
 800bf24:	9300      	str	r3, [sp, #0]
 800bf26:	4613      	mov	r3, r2
 800bf28:	4a95      	ldr	r2, [pc, #596]	; (800c180 <Lora_idSTR+0x33c>)
 800bf2a:	f002 f983 	bl	800e234 <FT_String_ND>
 800bf2e:	4603      	mov	r3, r0
 800bf30:	2b01      	cmp	r3, #1
 800bf32:	d101      	bne.n	800bf38 <Lora_idSTR+0xf4>
 800bf34:	230f      	movs	r3, #15
 800bf36:	e1e9      	b.n	800c30c <Lora_idSTR+0x4c8>
		i=strlen("+RESET");
 800bf38:	2306      	movs	r3, #6
 800bf3a:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+RESET",&i,data,&ndata,&g,&h,512, 0)==1)return _RESET;
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800bf48:	f107 021c 	add.w	r2, r7, #28
 800bf4c:	2300      	movs	r3, #0
 800bf4e:	9305      	str	r3, [sp, #20]
 800bf50:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bf54:	9304      	str	r3, [sp, #16]
 800bf56:	f107 0320 	add.w	r3, r7, #32
 800bf5a:	9303      	str	r3, [sp, #12]
 800bf5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bf60:	9302      	str	r3, [sp, #8]
 800bf62:	f107 030c 	add.w	r3, r7, #12
 800bf66:	9301      	str	r3, [sp, #4]
 800bf68:	f107 0310 	add.w	r3, r7, #16
 800bf6c:	9300      	str	r3, [sp, #0]
 800bf6e:	4613      	mov	r3, r2
 800bf70:	4a84      	ldr	r2, [pc, #528]	; (800c184 <Lora_idSTR+0x340>)
 800bf72:	f002 f95f 	bl	800e234 <FT_String_ND>
 800bf76:	4603      	mov	r3, r0
 800bf78:	2b01      	cmp	r3, #1
 800bf7a:	d101      	bne.n	800bf80 <Lora_idSTR+0x13c>
 800bf7c:	2302      	movs	r3, #2
 800bf7e:	e1c5      	b.n	800c30c <Lora_idSTR+0x4c8>
		i=strlen("+READY");
 800bf80:	2306      	movs	r3, #6
 800bf82:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+READY",&i,data,&ndata,&g,&h,512, 0)==1) return _READY ;
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800bf90:	f107 021c 	add.w	r2, r7, #28
 800bf94:	2300      	movs	r3, #0
 800bf96:	9305      	str	r3, [sp, #20]
 800bf98:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bf9c:	9304      	str	r3, [sp, #16]
 800bf9e:	f107 0320 	add.w	r3, r7, #32
 800bfa2:	9303      	str	r3, [sp, #12]
 800bfa4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bfa8:	9302      	str	r3, [sp, #8]
 800bfaa:	f107 030c 	add.w	r3, r7, #12
 800bfae:	9301      	str	r3, [sp, #4]
 800bfb0:	f107 0310 	add.w	r3, r7, #16
 800bfb4:	9300      	str	r3, [sp, #0]
 800bfb6:	4613      	mov	r3, r2
 800bfb8:	4a73      	ldr	r2, [pc, #460]	; (800c188 <Lora_idSTR+0x344>)
 800bfba:	f002 f93b 	bl	800e234 <FT_String_ND>
 800bfbe:	4603      	mov	r3, r0
 800bfc0:	2b01      	cmp	r3, #1
 800bfc2:	d101      	bne.n	800bfc8 <Lora_idSTR+0x184>
 800bfc4:	2303      	movs	r3, #3
 800bfc6:	e1a1      	b.n	800c30c <Lora_idSTR+0x4c8>
		i=strlen("+MODE=");
 800bfc8:	2306      	movs	r3, #6
 800bfca:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+MODE=",&i,data,&ndata,&g,&h,512, 0)==1) return _MODE ;
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800bfd8:	f107 021c 	add.w	r2, r7, #28
 800bfdc:	2300      	movs	r3, #0
 800bfde:	9305      	str	r3, [sp, #20]
 800bfe0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bfe4:	9304      	str	r3, [sp, #16]
 800bfe6:	f107 0320 	add.w	r3, r7, #32
 800bfea:	9303      	str	r3, [sp, #12]
 800bfec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bff0:	9302      	str	r3, [sp, #8]
 800bff2:	f107 030c 	add.w	r3, r7, #12
 800bff6:	9301      	str	r3, [sp, #4]
 800bff8:	f107 0310 	add.w	r3, r7, #16
 800bffc:	9300      	str	r3, [sp, #0]
 800bffe:	4613      	mov	r3, r2
 800c000:	4a62      	ldr	r2, [pc, #392]	; (800c18c <Lora_idSTR+0x348>)
 800c002:	f002 f917 	bl	800e234 <FT_String_ND>
 800c006:	4603      	mov	r3, r0
 800c008:	2b01      	cmp	r3, #1
 800c00a:	d101      	bne.n	800c010 <Lora_idSTR+0x1cc>
 800c00c:	2304      	movs	r3, #4
 800c00e:	e17d      	b.n	800c30c <Lora_idSTR+0x4c8>
		i=strlen("+IPR=");
 800c010:	2305      	movs	r3, #5
 800c012:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+IPR=",&i,data,&ndata,&g,&h,512, 0)==1) return _IPR ;
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800c020:	f107 021c 	add.w	r2, r7, #28
 800c024:	2300      	movs	r3, #0
 800c026:	9305      	str	r3, [sp, #20]
 800c028:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c02c:	9304      	str	r3, [sp, #16]
 800c02e:	f107 0320 	add.w	r3, r7, #32
 800c032:	9303      	str	r3, [sp, #12]
 800c034:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c038:	9302      	str	r3, [sp, #8]
 800c03a:	f107 030c 	add.w	r3, r7, #12
 800c03e:	9301      	str	r3, [sp, #4]
 800c040:	f107 0310 	add.w	r3, r7, #16
 800c044:	9300      	str	r3, [sp, #0]
 800c046:	4613      	mov	r3, r2
 800c048:	4a51      	ldr	r2, [pc, #324]	; (800c190 <Lora_idSTR+0x34c>)
 800c04a:	f002 f8f3 	bl	800e234 <FT_String_ND>
 800c04e:	4603      	mov	r3, r0
 800c050:	2b01      	cmp	r3, #1
 800c052:	d101      	bne.n	800c058 <Lora_idSTR+0x214>
 800c054:	2305      	movs	r3, #5
 800c056:	e159      	b.n	800c30c <Lora_idSTR+0x4c8>
		i=strlen("+PARAMETER=");
 800c058:	230b      	movs	r3, #11
 800c05a:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+PARAMETER=",&i,data,&ndata,&g,&h,512, 0)==1) return _PARAMETER ;
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800c068:	f107 021c 	add.w	r2, r7, #28
 800c06c:	2300      	movs	r3, #0
 800c06e:	9305      	str	r3, [sp, #20]
 800c070:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c074:	9304      	str	r3, [sp, #16]
 800c076:	f107 0320 	add.w	r3, r7, #32
 800c07a:	9303      	str	r3, [sp, #12]
 800c07c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c080:	9302      	str	r3, [sp, #8]
 800c082:	f107 030c 	add.w	r3, r7, #12
 800c086:	9301      	str	r3, [sp, #4]
 800c088:	f107 0310 	add.w	r3, r7, #16
 800c08c:	9300      	str	r3, [sp, #0]
 800c08e:	4613      	mov	r3, r2
 800c090:	4a40      	ldr	r2, [pc, #256]	; (800c194 <Lora_idSTR+0x350>)
 800c092:	f002 f8cf 	bl	800e234 <FT_String_ND>
 800c096:	4603      	mov	r3, r0
 800c098:	2b01      	cmp	r3, #1
 800c09a:	d101      	bne.n	800c0a0 <Lora_idSTR+0x25c>
 800c09c:	2306      	movs	r3, #6
 800c09e:	e135      	b.n	800c30c <Lora_idSTR+0x4c8>
		i=strlen("+BAND=");
 800c0a0:	2306      	movs	r3, #6
 800c0a2:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+BAND=",&i,data,&ndata,&g,&h,512, 0)==1) return _BAND ;
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800c0b0:	f107 021c 	add.w	r2, r7, #28
 800c0b4:	2300      	movs	r3, #0
 800c0b6:	9305      	str	r3, [sp, #20]
 800c0b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c0bc:	9304      	str	r3, [sp, #16]
 800c0be:	f107 0320 	add.w	r3, r7, #32
 800c0c2:	9303      	str	r3, [sp, #12]
 800c0c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c0c8:	9302      	str	r3, [sp, #8]
 800c0ca:	f107 030c 	add.w	r3, r7, #12
 800c0ce:	9301      	str	r3, [sp, #4]
 800c0d0:	f107 0310 	add.w	r3, r7, #16
 800c0d4:	9300      	str	r3, [sp, #0]
 800c0d6:	4613      	mov	r3, r2
 800c0d8:	4a2f      	ldr	r2, [pc, #188]	; (800c198 <Lora_idSTR+0x354>)
 800c0da:	f002 f8ab 	bl	800e234 <FT_String_ND>
 800c0de:	4603      	mov	r3, r0
 800c0e0:	2b01      	cmp	r3, #1
 800c0e2:	d101      	bne.n	800c0e8 <Lora_idSTR+0x2a4>
 800c0e4:	2307      	movs	r3, #7
 800c0e6:	e111      	b.n	800c30c <Lora_idSTR+0x4c8>
		i=strlen("+ADDRESS=");
 800c0e8:	2309      	movs	r3, #9
 800c0ea:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+ADDRESS=",&i,data,&ndata,&g,&h,512, 0)==1) return _ADDRESS ;
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800c0f8:	f107 021c 	add.w	r2, r7, #28
 800c0fc:	2300      	movs	r3, #0
 800c0fe:	9305      	str	r3, [sp, #20]
 800c100:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c104:	9304      	str	r3, [sp, #16]
 800c106:	f107 0320 	add.w	r3, r7, #32
 800c10a:	9303      	str	r3, [sp, #12]
 800c10c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c110:	9302      	str	r3, [sp, #8]
 800c112:	f107 030c 	add.w	r3, r7, #12
 800c116:	9301      	str	r3, [sp, #4]
 800c118:	f107 0310 	add.w	r3, r7, #16
 800c11c:	9300      	str	r3, [sp, #0]
 800c11e:	4613      	mov	r3, r2
 800c120:	4a1e      	ldr	r2, [pc, #120]	; (800c19c <Lora_idSTR+0x358>)
 800c122:	f002 f887 	bl	800e234 <FT_String_ND>
 800c126:	4603      	mov	r3, r0
 800c128:	2b01      	cmp	r3, #1
 800c12a:	d101      	bne.n	800c130 <Lora_idSTR+0x2ec>
 800c12c:	2308      	movs	r3, #8
 800c12e:	e0ed      	b.n	800c30c <Lora_idSTR+0x4c8>
		i=strlen("+NETWORK=");
 800c130:	2309      	movs	r3, #9
 800c132:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+NETWORK=",&i,data,&ndata,&g,&h,512, 0)==1) return _NETWORK ;
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800c140:	f107 021c 	add.w	r2, r7, #28
 800c144:	2300      	movs	r3, #0
 800c146:	9305      	str	r3, [sp, #20]
 800c148:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c14c:	9304      	str	r3, [sp, #16]
 800c14e:	f107 0320 	add.w	r3, r7, #32
 800c152:	9303      	str	r3, [sp, #12]
 800c154:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c158:	9302      	str	r3, [sp, #8]
 800c15a:	f107 030c 	add.w	r3, r7, #12
 800c15e:	9301      	str	r3, [sp, #4]
 800c160:	f107 0310 	add.w	r3, r7, #16
 800c164:	9300      	str	r3, [sp, #0]
 800c166:	4613      	mov	r3, r2
 800c168:	4a0d      	ldr	r2, [pc, #52]	; (800c1a0 <Lora_idSTR+0x35c>)
 800c16a:	f002 f863 	bl	800e234 <FT_String_ND>
 800c16e:	4603      	mov	r3, r0
 800c170:	2b01      	cmp	r3, #1
 800c172:	d117      	bne.n	800c1a4 <Lora_idSTR+0x360>
 800c174:	2309      	movs	r3, #9
 800c176:	e0c9      	b.n	800c30c <Lora_idSTR+0x4c8>
 800c178:	0801065c 	.word	0x0801065c
 800c17c:	08010664 	.word	0x08010664
 800c180:	0801066c 	.word	0x0801066c
 800c184:	08010674 	.word	0x08010674
 800c188:	0801067c 	.word	0x0801067c
 800c18c:	08010684 	.word	0x08010684
 800c190:	0801068c 	.word	0x0801068c
 800c194:	08010694 	.word	0x08010694
 800c198:	080106a0 	.word	0x080106a0
 800c19c:	080106a8 	.word	0x080106a8
 800c1a0:	080106b4 	.word	0x080106b4
		i=strlen("+CPIN=");
 800c1a4:	2306      	movs	r3, #6
 800c1a6:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+CPIN=",&i,data,&ndata,&g,&h,512, 0)==1) return _CPIN ;
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800c1b4:	f107 021c 	add.w	r2, r7, #28
 800c1b8:	2300      	movs	r3, #0
 800c1ba:	9305      	str	r3, [sp, #20]
 800c1bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c1c0:	9304      	str	r3, [sp, #16]
 800c1c2:	f107 0320 	add.w	r3, r7, #32
 800c1c6:	9303      	str	r3, [sp, #12]
 800c1c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c1cc:	9302      	str	r3, [sp, #8]
 800c1ce:	f107 030c 	add.w	r3, r7, #12
 800c1d2:	9301      	str	r3, [sp, #4]
 800c1d4:	f107 0310 	add.w	r3, r7, #16
 800c1d8:	9300      	str	r3, [sp, #0]
 800c1da:	4613      	mov	r3, r2
 800c1dc:	4a4d      	ldr	r2, [pc, #308]	; (800c314 <Lora_idSTR+0x4d0>)
 800c1de:	f002 f829 	bl	800e234 <FT_String_ND>
 800c1e2:	4603      	mov	r3, r0
 800c1e4:	2b01      	cmp	r3, #1
 800c1e6:	d101      	bne.n	800c1ec <Lora_idSTR+0x3a8>
 800c1e8:	230a      	movs	r3, #10
 800c1ea:	e08f      	b.n	800c30c <Lora_idSTR+0x4c8>
		i=strlen("+CRFOP=");
 800c1ec:	2307      	movs	r3, #7
 800c1ee:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+CRFOP=",&i,data,&ndata,&g,&h,512, 0)==1) return _CRFOP ;
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800c1fc:	f107 021c 	add.w	r2, r7, #28
 800c200:	2300      	movs	r3, #0
 800c202:	9305      	str	r3, [sp, #20]
 800c204:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c208:	9304      	str	r3, [sp, #16]
 800c20a:	f107 0320 	add.w	r3, r7, #32
 800c20e:	9303      	str	r3, [sp, #12]
 800c210:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c214:	9302      	str	r3, [sp, #8]
 800c216:	f107 030c 	add.w	r3, r7, #12
 800c21a:	9301      	str	r3, [sp, #4]
 800c21c:	f107 0310 	add.w	r3, r7, #16
 800c220:	9300      	str	r3, [sp, #0]
 800c222:	4613      	mov	r3, r2
 800c224:	4a3c      	ldr	r2, [pc, #240]	; (800c318 <Lora_idSTR+0x4d4>)
 800c226:	f002 f805 	bl	800e234 <FT_String_ND>
 800c22a:	4603      	mov	r3, r0
 800c22c:	2b01      	cmp	r3, #1
 800c22e:	d101      	bne.n	800c234 <Lora_idSTR+0x3f0>
 800c230:	230b      	movs	r3, #11
 800c232:	e06b      	b.n	800c30c <Lora_idSTR+0x4c8>
		i=strlen("+SEND=");
 800c234:	2306      	movs	r3, #6
 800c236:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+SEND=",&i,data,&ndata,&g,&h,512, 0)==1) return _SEND ;
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800c244:	f107 021c 	add.w	r2, r7, #28
 800c248:	2300      	movs	r3, #0
 800c24a:	9305      	str	r3, [sp, #20]
 800c24c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c250:	9304      	str	r3, [sp, #16]
 800c252:	f107 0320 	add.w	r3, r7, #32
 800c256:	9303      	str	r3, [sp, #12]
 800c258:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c25c:	9302      	str	r3, [sp, #8]
 800c25e:	f107 030c 	add.w	r3, r7, #12
 800c262:	9301      	str	r3, [sp, #4]
 800c264:	f107 0310 	add.w	r3, r7, #16
 800c268:	9300      	str	r3, [sp, #0]
 800c26a:	4613      	mov	r3, r2
 800c26c:	4a2b      	ldr	r2, [pc, #172]	; (800c31c <Lora_idSTR+0x4d8>)
 800c26e:	f001 ffe1 	bl	800e234 <FT_String_ND>
 800c272:	4603      	mov	r3, r0
 800c274:	2b01      	cmp	r3, #1
 800c276:	d101      	bne.n	800c27c <Lora_idSTR+0x438>
 800c278:	230c      	movs	r3, #12
 800c27a:	e047      	b.n	800c30c <Lora_idSTR+0x4c8>
		i=strlen("+UID=");
 800c27c:	2305      	movs	r3, #5
 800c27e:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+UID=",&i,data,&ndata,&g,&h,512, 0)==1) return _UID ;
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800c28c:	f107 021c 	add.w	r2, r7, #28
 800c290:	2300      	movs	r3, #0
 800c292:	9305      	str	r3, [sp, #20]
 800c294:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c298:	9304      	str	r3, [sp, #16]
 800c29a:	f107 0320 	add.w	r3, r7, #32
 800c29e:	9303      	str	r3, [sp, #12]
 800c2a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c2a4:	9302      	str	r3, [sp, #8]
 800c2a6:	f107 030c 	add.w	r3, r7, #12
 800c2aa:	9301      	str	r3, [sp, #4]
 800c2ac:	f107 0310 	add.w	r3, r7, #16
 800c2b0:	9300      	str	r3, [sp, #0]
 800c2b2:	4613      	mov	r3, r2
 800c2b4:	4a1a      	ldr	r2, [pc, #104]	; (800c320 <Lora_idSTR+0x4dc>)
 800c2b6:	f001 ffbd 	bl	800e234 <FT_String_ND>
 800c2ba:	4603      	mov	r3, r0
 800c2bc:	2b01      	cmp	r3, #1
 800c2be:	d101      	bne.n	800c2c4 <Lora_idSTR+0x480>
 800c2c0:	230e      	movs	r3, #14
 800c2c2:	e023      	b.n	800c30c <Lora_idSTR+0x4c8>
		i=strlen("+VER=");
 800c2c4:	2305      	movs	r3, #5
 800c2c6:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+VER=",&i,data,&ndata,&g,&h,512, 0)==1) return _VER ;
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800c2d4:	f107 021c 	add.w	r2, r7, #28
 800c2d8:	2300      	movs	r3, #0
 800c2da:	9305      	str	r3, [sp, #20]
 800c2dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c2e0:	9304      	str	r3, [sp, #16]
 800c2e2:	f107 0320 	add.w	r3, r7, #32
 800c2e6:	9303      	str	r3, [sp, #12]
 800c2e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c2ec:	9302      	str	r3, [sp, #8]
 800c2ee:	f107 030c 	add.w	r3, r7, #12
 800c2f2:	9301      	str	r3, [sp, #4]
 800c2f4:	f107 0310 	add.w	r3, r7, #16
 800c2f8:	9300      	str	r3, [sp, #0]
 800c2fa:	4613      	mov	r3, r2
 800c2fc:	4a09      	ldr	r2, [pc, #36]	; (800c324 <Lora_idSTR+0x4e0>)
 800c2fe:	f001 ff99 	bl	800e234 <FT_String_ND>
 800c302:	4603      	mov	r3, r0
 800c304:	2b01      	cmp	r3, #1
 800c306:	d101      	bne.n	800c30c <Lora_idSTR+0x4c8>
 800c308:	230d      	movs	r3, #13
 800c30a:	e7ff      	b.n	800c30c <Lora_idSTR+0x4c8>
}
 800c30c:	4618      	mov	r0, r3
 800c30e:	3728      	adds	r7, #40	; 0x28
 800c310:	46bd      	mov	sp, r7
 800c312:	bd80      	pop	{r7, pc}
 800c314:	080106c0 	.word	0x080106c0
 800c318:	080106c8 	.word	0x080106c8
 800c31c:	080106d0 	.word	0x080106d0
 800c320:	080106d8 	.word	0x080106d8
 800c324:	080106e0 	.word	0x080106e0

0800c328 <Lora_rx_del>:
void Lora_rx_del(struct LoRa *a)
{
 800c328:	b480      	push	{r7}
 800c32a:	b083      	sub	sp, #12
 800c32c:	af00      	add	r7, sp, #0
 800c32e:	6078      	str	r0, [r7, #4]
	a->rxbuff[0]='\0';
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	2200      	movs	r2, #0
 800c334:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	a->rx_items[0]='\0';
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	2200      	movs	r2, #0
 800c33c:	731a      	strb	r2, [r3, #12]
	//a->dataRCV[0]='\0';
	a->rxRSSI=0;
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	2200      	movs	r2, #0
 800c342:	f8c3 27e4 	str.w	r2, [r3, #2020]	; 0x7e4
	a->rxSNR=0;
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	2200      	movs	r2, #0
 800c34a:	f8c3 27e8 	str.w	r2, [r3, #2024]	; 0x7e8
}
 800c34e:	bf00      	nop
 800c350:	370c      	adds	r7, #12
 800c352:	46bd      	mov	sp, r7
 800c354:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c358:	4770      	bx	lr
	...

0800c35c <ModBUS_Config>:
 *      Author: Marcelo
 */
#include "ModBUS_Chelo.h"

void ModBUS_Config(struct MBUS *m)
{
 800c35c:	b480      	push	{r7}
 800c35e:	b083      	sub	sp, #12
 800c360:	af00      	add	r7, sp, #0
 800c362:	6078      	str	r0, [r7, #4]
	m->_address=1;							//Canal  o direccion ModBUS
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	2201      	movs	r2, #1
 800c368:	701a      	strb	r2, [r3, #0]

	m->_mode=0;								//Defino modo de trabajo, cliente o servidor.
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	2200      	movs	r2, #0
 800c36e:	711a      	strb	r2, [r3, #4]
	m->_timeout=500;						//Timeout para la recepción de respuesta.
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800c376:	80da      	strh	r2, [r3, #6]

	m->_01_ReadCoils_EN=1;					//Habilito Funcion 1
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	2201      	movs	r2, #1
 800c37c:	729a      	strb	r2, [r3, #10]
	m->_01_ReadCoils_QTY=32;				//Defino cantidad de Coils disponibles en la funcion 1
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	2220      	movs	r2, #32
 800c382:	f883 2620 	strb.w	r2, [r3, #1568]	; 0x620
	m->_Coils=0xF0F0AF5A;
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	4a1c      	ldr	r2, [pc, #112]	; (800c3fc <ModBUS_Config+0xa0>)
 800c38a:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c

	m->_02_ReadDiscreteInputs_EN=1;			//Habilito la funcion 2
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	2201      	movs	r2, #1
 800c392:	72da      	strb	r2, [r3, #11]
	m->_02_ReadDiscreteInputs_QTY=32;		//Defino cantidad de Discrete Inputs disponibles en la funcion 2
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	2220      	movs	r2, #32
 800c398:	f883 2626 	strb.w	r2, [r3, #1574]	; 0x626
	m->_Inputs=0xA5FA0F0F;
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	4a18      	ldr	r2, [pc, #96]	; (800c400 <ModBUS_Config+0xa4>)
 800c3a0:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420

	m->_03_ReadHoldingRegisters_EN=1;		//Habilito la funcion 3
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	2201      	movs	r2, #1
 800c3a8:	731a      	strb	r2, [r3, #12]
	m->_03_ReadHoldingRegisters_QTY=16;		//Defino cantidad de registros disponibles en la funcion 3
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	2210      	movs	r2, #16
 800c3ae:	f883 262c 	strb.w	r2, [r3, #1580]	; 0x62c

	m->_04_ReadInputRegisters_EN=1;			//Habilito la funcion 4
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	2201      	movs	r2, #1
 800c3b6:	735a      	strb	r2, [r3, #13]
	m->_04_ReadInputRegisters_QTY=16;		//Defino cantidad de registros disponibles en la funcion 4
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	2210      	movs	r2, #16
 800c3bc:	f883 2632 	strb.w	r2, [r3, #1586]	; 0x632

	m->_05_WriteSingleCoil_EN=1;			//Habilito la funcion 5
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	2201      	movs	r2, #1
 800c3c4:	739a      	strb	r2, [r3, #14]
	m->_05_WriteSingleCoil_QTY=32;			//Defino cantidad de registros disponibles en la funcion 5
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	2220      	movs	r2, #32
 800c3ca:	f883 2638 	strb.w	r2, [r3, #1592]	; 0x638

	m->_06_WriteSingleRegister_EN=1;		//Habilito la funcion 06
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	2201      	movs	r2, #1
 800c3d2:	73da      	strb	r2, [r3, #15]

	m->_15_WriteMultipleCoils_EN=1;			//Habilito la funcion 15
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	2201      	movs	r2, #1
 800c3d8:	741a      	strb	r2, [r3, #16]
	m->_15_WriteMultipleCoils_QTY=32;		//Defino cantidad de registros disponibles en la funcion 5
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	2220      	movs	r2, #32
 800c3de:	f883 263e 	strb.w	r2, [r3, #1598]	; 0x63e

	m->_16_WriteMultipleRegisters_EN=1;		//Habilito la funcion 16
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	2201      	movs	r2, #1
 800c3e6:	745a      	strb	r2, [r3, #17]
	m->_16_WriteMultipleRegisters_QTY=32;	//Defino cantidad de registros disponibles en la funcion 5
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	2220      	movs	r2, #32
 800c3ec:	f883 264a 	strb.w	r2, [r3, #1610]	; 0x64a
}
 800c3f0:	bf00      	nop
 800c3f2:	370c      	adds	r7, #12
 800c3f4:	46bd      	mov	sp, r7
 800c3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3fa:	4770      	bx	lr
 800c3fc:	f0f0af5a 	.word	0xf0f0af5a
 800c400:	a5fa0f0f 	.word	0xa5fa0f0f

0800c404 <ModBUS_Check>:

int ModBUS_Check(char *a, int b)
{
 800c404:	b480      	push	{r7}
 800c406:	b083      	sub	sp, #12
 800c408:	af00      	add	r7, sp, #0
 800c40a:	6078      	str	r0, [r7, #4]
 800c40c:	6039      	str	r1, [r7, #0]
	//Identifico protocolo ModBus con a[2]+a[3]==0 y coherencia en los datos con a[5]+6==b
	if((a[5]+6==b)&&(a[2]+a[3]==0))
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	3305      	adds	r3, #5
 800c412:	781b      	ldrb	r3, [r3, #0]
 800c414:	3306      	adds	r3, #6
 800c416:	683a      	ldr	r2, [r7, #0]
 800c418:	429a      	cmp	r2, r3
 800c41a:	d10b      	bne.n	800c434 <ModBUS_Check+0x30>
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	3302      	adds	r3, #2
 800c420:	781b      	ldrb	r3, [r3, #0]
 800c422:	461a      	mov	r2, r3
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	3303      	adds	r3, #3
 800c428:	781b      	ldrb	r3, [r3, #0]
 800c42a:	4413      	add	r3, r2
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d101      	bne.n	800c434 <ModBUS_Check+0x30>
	{
		return(1);
 800c430:	2301      	movs	r3, #1
 800c432:	e000      	b.n	800c436 <ModBUS_Check+0x32>
	}
	else
	{
		return(0);
 800c434:	2300      	movs	r3, #0
	}
}
 800c436:	4618      	mov	r0, r3
 800c438:	370c      	adds	r7, #12
 800c43a:	46bd      	mov	sp, r7
 800c43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c440:	4770      	bx	lr

0800c442 <ModBUS_Check_tid>:

int ModBUS_Check_tid(struct MBUS *m2)
{
 800c442:	b480      	push	{r7}
 800c444:	b083      	sub	sp, #12
 800c446:	af00      	add	r7, sp, #0
 800c448:	6078      	str	r0, [r7, #4]

	if( (m2->_MBUS_2SND[0] == m2->_MBUS_RCVD[0])&&
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	f893 2218 	ldrb.w	r2, [r3, #536]	; 0x218
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	7c9b      	ldrb	r3, [r3, #18]
 800c454:	429a      	cmp	r2, r3
 800c456:	d11d      	bne.n	800c494 <ModBUS_Check_tid+0x52>
		(m2->_MBUS_2SND[1] == m2->_MBUS_RCVD[1])&&
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	f893 2219 	ldrb.w	r2, [r3, #537]	; 0x219
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	7cdb      	ldrb	r3, [r3, #19]
	if( (m2->_MBUS_2SND[0] == m2->_MBUS_RCVD[0])&&
 800c462:	429a      	cmp	r2, r3
 800c464:	d116      	bne.n	800c494 <ModBUS_Check_tid+0x52>
		(m2->_MBUS_2SND[2] == m2->_MBUS_RCVD[2])&&
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	f893 221a 	ldrb.w	r2, [r3, #538]	; 0x21a
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	7d1b      	ldrb	r3, [r3, #20]
		(m2->_MBUS_2SND[1] == m2->_MBUS_RCVD[1])&&
 800c470:	429a      	cmp	r2, r3
 800c472:	d10f      	bne.n	800c494 <ModBUS_Check_tid+0x52>
		(m2->_MBUS_2SND[3] == m2->_MBUS_RCVD[3])&&
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	f893 221b 	ldrb.w	r2, [r3, #539]	; 0x21b
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	7d5b      	ldrb	r3, [r3, #21]
		(m2->_MBUS_2SND[2] == m2->_MBUS_RCVD[2])&&
 800c47e:	429a      	cmp	r2, r3
 800c480:	d108      	bne.n	800c494 <ModBUS_Check_tid+0x52>
		(m2->_MBUS_2SND[7] == m2->_MBUS_RCVD[7]))
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	f893 221f 	ldrb.w	r2, [r3, #543]	; 0x21f
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	7e5b      	ldrb	r3, [r3, #25]
		(m2->_MBUS_2SND[3] == m2->_MBUS_RCVD[3])&&
 800c48c:	429a      	cmp	r2, r3
 800c48e:	d101      	bne.n	800c494 <ModBUS_Check_tid+0x52>
	{
		return(1);
 800c490:	2301      	movs	r3, #1
 800c492:	e000      	b.n	800c496 <ModBUS_Check_tid+0x54>
	}
	else
	{

		return(0);
 800c494:	2300      	movs	r3, #0
	}
}
 800c496:	4618      	mov	r0, r3
 800c498:	370c      	adds	r7, #12
 800c49a:	46bd      	mov	sp, r7
 800c49c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4a0:	4770      	bx	lr

0800c4a2 <ModBUS_F03_Assign>:

int ModBUS_F03_Assign(struct MBUS *m2, uint8_t address, uint16_t data)
{
 800c4a2:	b480      	push	{r7}
 800c4a4:	b085      	sub	sp, #20
 800c4a6:	af00      	add	r7, sp, #0
 800c4a8:	6078      	str	r0, [r7, #4]
 800c4aa:	460b      	mov	r3, r1
 800c4ac:	70fb      	strb	r3, [r7, #3]
 800c4ae:	4613      	mov	r3, r2
 800c4b0:	803b      	strh	r3, [r7, #0]

	uint8_t c=0;
 800c4b2:	2300      	movs	r3, #0
 800c4b4:	73fb      	strb	r3, [r7, #15]
	//	Analizo que el rango de direcciones sea el correcto
	if( (address) > m2->_03_ReadHoldingRegisters_QTY)
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	f893 362c 	ldrb.w	r3, [r3, #1580]	; 0x62c
 800c4bc:	78fa      	ldrb	r2, [r7, #3]
 800c4be:	429a      	cmp	r2, r3
 800c4c0:	d901      	bls.n	800c4c6 <ModBUS_F03_Assign+0x24>
	{
		return(1);
 800c4c2:	2301      	movs	r3, #1
 800c4c4:	e016      	b.n	800c4f4 <ModBUS_F03_Assign+0x52>
	}
	else
	{
		address=address*2;
 800c4c6:	78fb      	ldrb	r3, [r7, #3]
 800c4c8:	005b      	lsls	r3, r3, #1
 800c4ca:	70fb      	strb	r3, [r7, #3]
		m2->_Holding_Registers[(address)+1]=data;
 800c4cc:	78fb      	ldrb	r3, [r7, #3]
 800c4ce:	3301      	adds	r3, #1
 800c4d0:	883a      	ldrh	r2, [r7, #0]
 800c4d2:	b2d1      	uxtb	r1, r2
 800c4d4:	687a      	ldr	r2, [r7, #4]
 800c4d6:	4413      	add	r3, r2
 800c4d8:	460a      	mov	r2, r1
 800c4da:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
		c=data>>8;
 800c4de:	883b      	ldrh	r3, [r7, #0]
 800c4e0:	0a1b      	lsrs	r3, r3, #8
 800c4e2:	b29b      	uxth	r3, r3
 800c4e4:	73fb      	strb	r3, [r7, #15]
		m2->_Holding_Registers[(address)]=c;
 800c4e6:	78fb      	ldrb	r3, [r7, #3]
 800c4e8:	687a      	ldr	r2, [r7, #4]
 800c4ea:	4413      	add	r3, r2
 800c4ec:	7bfa      	ldrb	r2, [r7, #15]
 800c4ee:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424

		return(0);
 800c4f2:	2300      	movs	r3, #0
	}
}
 800c4f4:	4618      	mov	r0, r3
 800c4f6:	3714      	adds	r7, #20
 800c4f8:	46bd      	mov	sp, r7
 800c4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4fe:	4770      	bx	lr

0800c500 <ModBUS_F03_Read>:
		return(0);
	}
}

uint16_t ModBUS_F03_Read(struct MBUS *m2, uint8_t address)
{
 800c500:	b480      	push	{r7}
 800c502:	b085      	sub	sp, #20
 800c504:	af00      	add	r7, sp, #0
 800c506:	6078      	str	r0, [r7, #4]
 800c508:	460b      	mov	r3, r1
 800c50a:	70fb      	strb	r3, [r7, #3]
	uint16_t n=0;
 800c50c:	2300      	movs	r3, #0
 800c50e:	81fb      	strh	r3, [r7, #14]
	uint8_t c=0;
 800c510:	2300      	movs	r3, #0
 800c512:	737b      	strb	r3, [r7, #13]
	//	Analizo que el rango de direcciones sea el correcto
	if( (address) > m2->_03_ReadHoldingRegisters_QTY)
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	f893 362c 	ldrb.w	r3, [r3, #1580]	; 0x62c
 800c51a:	78fa      	ldrb	r2, [r7, #3]
 800c51c:	429a      	cmp	r2, r3
 800c51e:	d901      	bls.n	800c524 <ModBUS_F03_Read+0x24>
	{
		return(1);
 800c520:	2301      	movs	r3, #1
 800c522:	e016      	b.n	800c552 <ModBUS_F03_Read+0x52>
	}
	else
	{
		address=address*2;
 800c524:	78fb      	ldrb	r3, [r7, #3]
 800c526:	005b      	lsls	r3, r3, #1
 800c528:	70fb      	strb	r3, [r7, #3]
		n=m2->_Holding_Registers[(address)];
 800c52a:	78fb      	ldrb	r3, [r7, #3]
 800c52c:	687a      	ldr	r2, [r7, #4]
 800c52e:	4413      	add	r3, r2
 800c530:	f893 3424 	ldrb.w	r3, [r3, #1060]	; 0x424
 800c534:	81fb      	strh	r3, [r7, #14]
		n=n<<8;
 800c536:	89fb      	ldrh	r3, [r7, #14]
 800c538:	021b      	lsls	r3, r3, #8
 800c53a:	81fb      	strh	r3, [r7, #14]
		n|=m2->_Holding_Registers[(address)+1];
 800c53c:	78fb      	ldrb	r3, [r7, #3]
 800c53e:	3301      	adds	r3, #1
 800c540:	687a      	ldr	r2, [r7, #4]
 800c542:	4413      	add	r3, r2
 800c544:	f893 3424 	ldrb.w	r3, [r3, #1060]	; 0x424
 800c548:	b29a      	uxth	r2, r3
 800c54a:	89fb      	ldrh	r3, [r7, #14]
 800c54c:	4313      	orrs	r3, r2
 800c54e:	81fb      	strh	r3, [r7, #14]
		return(n);
 800c550:	89fb      	ldrh	r3, [r7, #14]
	}
}
 800c552:	4618      	mov	r0, r3
 800c554:	3714      	adds	r7, #20
 800c556:	46bd      	mov	sp, r7
 800c558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c55c:	4770      	bx	lr

0800c55e <ModBUS_F03_Request>:
		return(n);
	}
}

ModBUS_F03_Request(struct MBUS *m2, uint16_t addr , uint8_t qty)
{
 800c55e:	b480      	push	{r7}
 800c560:	b083      	sub	sp, #12
 800c562:	af00      	add	r7, sp, #0
 800c564:	6078      	str	r0, [r7, #4]
 800c566:	460b      	mov	r3, r1
 800c568:	807b      	strh	r3, [r7, #2]
 800c56a:	4613      	mov	r3, r2
 800c56c:	707b      	strb	r3, [r7, #1]
	// Se deberia asignar variable inremental para el transaction id
	m2->_MBUS_2SND[9]= addr && 0x0F;
 800c56e:	887b      	ldrh	r3, [r7, #2]
 800c570:	2b00      	cmp	r3, #0
 800c572:	bf14      	ite	ne
 800c574:	2301      	movne	r3, #1
 800c576:	2300      	moveq	r3, #0
 800c578:	b2db      	uxtb	r3, r3
 800c57a:	461a      	mov	r2, r3
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	f883 2221 	strb.w	r2, [r3, #545]	; 0x221
	addr&=0xF0;
 800c582:	887b      	ldrh	r3, [r7, #2]
 800c584:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c588:	807b      	strh	r3, [r7, #2]
	addr=addr>>8;
 800c58a:	887b      	ldrh	r3, [r7, #2]
 800c58c:	0a1b      	lsrs	r3, r3, #8
 800c58e:	807b      	strh	r3, [r7, #2]
	addr&=0x0F;
 800c590:	887b      	ldrh	r3, [r7, #2]
 800c592:	f003 030f 	and.w	r3, r3, #15
 800c596:	807b      	strh	r3, [r7, #2]

	m2->_MBUS_2SND[0]=0x00;
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	2200      	movs	r2, #0
 800c59c:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
	m2->_MBUS_2SND[1]=0x00;
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	2200      	movs	r2, #0
 800c5a4:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
	m2->_MBUS_2SND[2]=0x00;
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	2200      	movs	r2, #0
 800c5ac:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
	m2->_MBUS_2SND[3]=0x00;
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	2200      	movs	r2, #0
 800c5b4:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
	m2->_MBUS_2SND[4]=0x00;
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	2200      	movs	r2, #0
 800c5bc:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
	m2->_MBUS_2SND[5]=0x06;
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	2206      	movs	r2, #6
 800c5c4:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
	m2->_MBUS_2SND[6]=m2->_address;
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	781a      	ldrb	r2, [r3, #0]
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
	m2->_MBUS_2SND[7]=0x03;
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	2203      	movs	r2, #3
 800c5d6:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
	m2->_MBUS_2SND[8]=addr;
 800c5da:	887b      	ldrh	r3, [r7, #2]
 800c5dc:	b2da      	uxtb	r2, r3
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220

	m2->_MBUS_2SND[10]=0x00;
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	2200      	movs	r2, #0
 800c5e8:	f883 2222 	strb.w	r2, [r3, #546]	; 0x222
	m2->_MBUS_2SND[11]=qty;
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	787a      	ldrb	r2, [r7, #1]
 800c5f0:	f883 2223 	strb.w	r2, [r3, #547]	; 0x223
	m2->_n_MBUS_2SND=12;			//Conteo de bytes a transmitir
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	220c      	movs	r2, #12
 800c5f8:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

}
 800c5fc:	bf00      	nop
 800c5fe:	4618      	mov	r0, r3
 800c600:	370c      	adds	r7, #12
 800c602:	46bd      	mov	sp, r7
 800c604:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c608:	4770      	bx	lr
	...

0800c60c <ModBUS>:

int ModBUS(struct MBUS *m3)
{
 800c60c:	b580      	push	{r7, lr}
 800c60e:	b09c      	sub	sp, #112	; 0x70
 800c610:	af00      	add	r7, sp, #0
 800c612:	6078      	str	r0, [r7, #4]

	if(m3->_mode == SERVIDOR)
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	791b      	ldrb	r3, [r3, #4]
 800c618:	2b01      	cmp	r3, #1
 800c61a:	f041 813f 	bne.w	800d89c <ModBUS+0x1290>
	{
		if (ModBUS_Check(m3->_MBUS_RCVD,m3->_n_MBUS_RCVD))//if (m3->_n_MBUS_RCVD>=10)  //Garantizo longitud minima de telegram MBUS
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	f103 0212 	add.w	r2, r3, #18
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c62a:	4619      	mov	r1, r3
 800c62c:	4610      	mov	r0, r2
 800c62e:	f7ff fee9 	bl	800c404 <ModBUS_Check>
 800c632:	4603      	mov	r3, r0
 800c634:	2b00      	cmp	r3, #0
 800c636:	f001 812f 	beq.w	800d898 <ModBUS+0x128c>
		{
			switch(m3->_MBUS_RCVD[7])
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	7e5b      	ldrb	r3, [r3, #25]
 800c63e:	3b01      	subs	r3, #1
 800c640:	2b0f      	cmp	r3, #15
 800c642:	f201 80f3 	bhi.w	800d82c <ModBUS+0x1220>
 800c646:	a201      	add	r2, pc, #4	; (adr r2, 800c64c <ModBUS+0x40>)
 800c648:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c64c:	0800c68d 	.word	0x0800c68d
 800c650:	0800c8cd 	.word	0x0800c8cd
 800c654:	0800cb0d 	.word	0x0800cb0d
 800c658:	0800cd45 	.word	0x0800cd45
 800c65c:	0800cf7d 	.word	0x0800cf7d
 800c660:	0800d193 	.word	0x0800d193
 800c664:	0800d82d 	.word	0x0800d82d
 800c668:	0800d82d 	.word	0x0800d82d
 800c66c:	0800d82d 	.word	0x0800d82d
 800c670:	0800d82d 	.word	0x0800d82d
 800c674:	0800d82d 	.word	0x0800d82d
 800c678:	0800d82d 	.word	0x0800d82d
 800c67c:	0800d82d 	.word	0x0800d82d
 800c680:	0800d82d 	.word	0x0800d82d
 800c684:	0800d34f 	.word	0x0800d34f
 800c688:	0800d5df 	.word	0x0800d5df

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	7d9a      	ldrb	r2, [r3, #22]
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	7d5a      	ldrb	r2, [r3, #21]
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	7d1a      	ldrb	r2, [r3, #20]
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	7cda      	ldrb	r2, [r3, #19]
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	7c9a      	ldrb	r2, [r3, #18]
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

					int qty_reg=0;
 800c6be:	2300      	movs	r3, #0
 800c6c0:	617b      	str	r3, [r7, #20]
					if  ( m3->_01_ReadCoils_EN == 1 ) //Debe estar habilitado el código de funcion
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	7a9b      	ldrb	r3, [r3, #10]
 800c6c6:	2b01      	cmp	r3, #1
 800c6c8:	f040 80e6 	bne.w	800c898 <ModBUS+0x28c>
					{


							m3->_01_ReadCoils_StrtAddr = m3->_MBUS_RCVD[8];
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	7e9b      	ldrb	r3, [r3, #26]
 800c6d0:	b29a      	uxth	r2, r3
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	f8a3 2622 	strh.w	r2, [r3, #1570]	; 0x622
							m3->_01_ReadCoils_StrtAddr = m3->_01_ReadCoils_StrtAddr<<8;
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	f8b3 3622 	ldrh.w	r3, [r3, #1570]	; 0x622
 800c6de:	021b      	lsls	r3, r3, #8
 800c6e0:	b29a      	uxth	r2, r3
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	f8a3 2622 	strh.w	r2, [r3, #1570]	; 0x622
							m3->_01_ReadCoils_StrtAddr &= 0xFF00;
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	f8b3 3622 	ldrh.w	r3, [r3, #1570]	; 0x622
 800c6ee:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c6f2:	b29a      	uxth	r2, r3
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	f8a3 2622 	strh.w	r2, [r3, #1570]	; 0x622
							m3->_01_ReadCoils_StrtAddr |= m3->_MBUS_RCVD[9];
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	f8b3 2622 	ldrh.w	r2, [r3, #1570]	; 0x622
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	7edb      	ldrb	r3, [r3, #27]
 800c704:	b29b      	uxth	r3, r3
 800c706:	4313      	orrs	r3, r2
 800c708:	b29a      	uxth	r2, r3
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	f8a3 2622 	strh.w	r2, [r3, #1570]	; 0x622

							m3->_01_ReadCoils_QTYReg = m3->_MBUS_RCVD[10];
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	7f1b      	ldrb	r3, [r3, #28]
 800c714:	b29a      	uxth	r2, r3
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	f8a3 2624 	strh.w	r2, [r3, #1572]	; 0x624
							m3->_01_ReadCoils_QTYReg = m3->_01_ReadCoils_QTYReg<<8;
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	f8b3 3624 	ldrh.w	r3, [r3, #1572]	; 0x624
 800c722:	021b      	lsls	r3, r3, #8
 800c724:	b29a      	uxth	r2, r3
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	f8a3 2624 	strh.w	r2, [r3, #1572]	; 0x624
							m3->_01_ReadCoils_QTYReg &= 0xFF00;
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	f8b3 3624 	ldrh.w	r3, [r3, #1572]	; 0x624
 800c732:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c736:	b29a      	uxth	r2, r3
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	f8a3 2624 	strh.w	r2, [r3, #1572]	; 0x624
							m3->_01_ReadCoils_QTYReg |= m3->_MBUS_RCVD[11];
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	f8b3 2624 	ldrh.w	r2, [r3, #1572]	; 0x624
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	7f5b      	ldrb	r3, [r3, #29]
 800c748:	b29b      	uxth	r3, r3
 800c74a:	4313      	orrs	r3, r2
 800c74c:	b29a      	uxth	r2, r3
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	f8a3 2624 	strh.w	r2, [r3, #1572]	; 0x624



							if ( m3->_01_ReadCoils_QTYReg <=  m3->_01_ReadCoils_QTY) //Cdad pedida menor a igual que disponible
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	f8b3 2624 	ldrh.w	r2, [r3, #1572]	; 0x624
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	f893 3620 	ldrb.w	r3, [r3, #1568]	; 0x620
 800c760:	b29b      	uxth	r3, r3
 800c762:	429a      	cmp	r2, r3
 800c764:	d87e      	bhi.n	800c864 <ModBUS+0x258>
							{
								if ( (m3->_01_ReadCoils_StrtAddr + m3->_01_ReadCoils_QTYReg) <=  m3->_01_ReadCoils_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	f8b3 3622 	ldrh.w	r3, [r3, #1570]	; 0x622
 800c76c:	461a      	mov	r2, r3
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	f8b3 3624 	ldrh.w	r3, [r3, #1572]	; 0x624
 800c774:	4413      	add	r3, r2
 800c776:	687a      	ldr	r2, [r7, #4]
 800c778:	f892 2620 	ldrb.w	r2, [r2, #1568]	; 0x620
 800c77c:	4293      	cmp	r3, r2
 800c77e:	dc57      	bgt.n	800c830 <ModBUS+0x224>
								{
								int div=0, resto=0, bytes=0,pos=0;
 800c780:	2300      	movs	r3, #0
 800c782:	613b      	str	r3, [r7, #16]
 800c784:	2300      	movs	r3, #0
 800c786:	60fb      	str	r3, [r7, #12]
 800c788:	2300      	movs	r3, #0
 800c78a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c78c:	2300      	movs	r3, #0
 800c78e:	60bb      	str	r3, [r7, #8]
								uint32_t coils=0;
 800c790:	2300      	movs	r3, #0
 800c792:	66bb      	str	r3, [r7, #104]	; 0x68
									// Verificado el mensaje, se procesa.

									coils = (m3->_Coils >> m3->_01_ReadCoils_StrtAddr);
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 800c79a:	687a      	ldr	r2, [r7, #4]
 800c79c:	f8b2 2622 	ldrh.w	r2, [r2, #1570]	; 0x622
 800c7a0:	40d3      	lsrs	r3, r2
 800c7a2:	66bb      	str	r3, [r7, #104]	; 0x68
									//Debo determinar la cantidad de bytes a enviar

									div=m3->_01_ReadCoils_QTYReg/8;
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	f8b3 3624 	ldrh.w	r3, [r3, #1572]	; 0x624
 800c7aa:	08db      	lsrs	r3, r3, #3
 800c7ac:	b29b      	uxth	r3, r3
 800c7ae:	613b      	str	r3, [r7, #16]
									resto=m3->_01_ReadCoils_QTYReg%8;
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	f8b3 3624 	ldrh.w	r3, [r3, #1572]	; 0x624
 800c7b6:	f003 0307 	and.w	r3, r3, #7
 800c7ba:	60fb      	str	r3, [r7, #12]

									if(resto==0)
 800c7bc:	68fb      	ldr	r3, [r7, #12]
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	d102      	bne.n	800c7c8 <ModBUS+0x1bc>
									{
										bytes=div;
 800c7c2:	693b      	ldr	r3, [r7, #16]
 800c7c4:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c7c6:	e002      	b.n	800c7ce <ModBUS+0x1c2>
									}
									else
									{
										bytes=div+1;
 800c7c8:	693b      	ldr	r3, [r7, #16]
 800c7ca:	3301      	adds	r3, #1
 800c7cc:	66fb      	str	r3, [r7, #108]	; 0x6c
									}

									m3->_MBUS_2SND[8]=bytes;
 800c7ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c7d0:	b2da      	uxtb	r2, r3
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220


									while(bytes > 0)
 800c7d8:	e00e      	b.n	800c7f8 <ModBUS+0x1ec>
									{
										m3->_MBUS_2SND[8+bytes]=coils;
 800c7da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c7dc:	3308      	adds	r3, #8
 800c7de:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c7e0:	b2d1      	uxtb	r1, r2
 800c7e2:	687a      	ldr	r2, [r7, #4]
 800c7e4:	4413      	add	r3, r2
 800c7e6:	460a      	mov	r2, r1
 800c7e8:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
										coils=coils>>8;
 800c7ec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c7ee:	0a1b      	lsrs	r3, r3, #8
 800c7f0:	66bb      	str	r3, [r7, #104]	; 0x68
										bytes--;
 800c7f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c7f4:	3b01      	subs	r3, #1
 800c7f6:	66fb      	str	r3, [r7, #108]	; 0x6c
									while(bytes > 0)
 800c7f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	dced      	bgt.n	800c7da <ModBUS+0x1ce>
									}


									m3->_MBUS_2SND[7]=0x01;
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	2201      	movs	r2, #1
 800c802:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	2201      	movs	r2, #1
 800c80a:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=m3->_MBUS_2SND[8]+3; //Cdad de datos
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	f893 3220 	ldrb.w	r3, [r3, #544]	; 0x220
 800c814:	3303      	adds	r3, #3
 800c816:	b2da      	uxtb	r2, r3
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d

									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800c824:	1d9a      	adds	r2, r3, #6
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800c82c:	f001 b8d4 	b.w	800d9d8 <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x02;
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	2202      	movs	r2, #2
 800c834:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x81;
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	2281      	movs	r2, #129	; 0x81
 800c83c:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	2201      	movs	r2, #1
 800c844:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	2203      	movs	r2, #3
 800c84c:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800c856:	1d9a      	adds	r2, r3, #6
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
									return(2);//Error excepcion 02
 800c85e:	2302      	movs	r3, #2
 800c860:	f001 b8ba 	b.w	800d9d8 <ModBUS+0x13cc>
								m3->_MBUS_2SND[8]=0x03;
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	2203      	movs	r2, #3
 800c868:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
								m3->_MBUS_2SND[7]=0x81;
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	2281      	movs	r2, #129	; 0x81
 800c870:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
								m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	2201      	movs	r2, #1
 800c878:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
								m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	2203      	movs	r2, #3
 800c880:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
								m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800c88a:	1d9a      	adds	r2, r3, #6
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
								return(3);//Erroe excepcion 03
 800c892:	2303      	movs	r3, #3
 800c894:	f001 b8a0 	b.w	800d9d8 <ModBUS+0x13cc>
						m3->_MBUS_2SND[8]=0x01;
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	2201      	movs	r2, #1
 800c89c:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
						m3->_MBUS_2SND[7]=0x81;
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	2281      	movs	r2, #129	; 0x81
 800c8a4:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	2201      	movs	r2, #1
 800c8ac:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	2203      	movs	r2, #3
 800c8b4:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800c8be:	1d9a      	adds	r2, r3, #6
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
						return(1);//Error excepcion 01
 800c8c6:	2301      	movs	r3, #1
 800c8c8:	f001 b886 	b.w	800d9d8 <ModBUS+0x13cc>

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	7d9a      	ldrb	r2, [r3, #22]
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	7d5a      	ldrb	r2, [r3, #21]
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	7d1a      	ldrb	r2, [r3, #20]
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	7cda      	ldrb	r2, [r3, #19]
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	7c9a      	ldrb	r2, [r3, #18]
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

					int qty_reg=0;
 800c8fe:	2300      	movs	r3, #0
 800c900:	627b      	str	r3, [r7, #36]	; 0x24
					if  ( m3->_02_ReadDiscreteInputs_EN == 1 ) //Debe estar habilitado el código de funcion
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	7adb      	ldrb	r3, [r3, #11]
 800c906:	2b01      	cmp	r3, #1
 800c908:	f040 80e6 	bne.w	800cad8 <ModBUS+0x4cc>
					{


							m3->_02_ReadDiscreteInputs_StrtAddr = m3->_MBUS_RCVD[8];
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	7e9b      	ldrb	r3, [r3, #26]
 800c910:	b29a      	uxth	r2, r3
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	f8a3 2628 	strh.w	r2, [r3, #1576]	; 0x628
							m3->_02_ReadDiscreteInputs_StrtAddr = m3->_02_ReadDiscreteInputs_StrtAddr<<8;
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	f8b3 3628 	ldrh.w	r3, [r3, #1576]	; 0x628
 800c91e:	021b      	lsls	r3, r3, #8
 800c920:	b29a      	uxth	r2, r3
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	f8a3 2628 	strh.w	r2, [r3, #1576]	; 0x628
							m3->_02_ReadDiscreteInputs_StrtAddr &= 0xFF00;
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	f8b3 3628 	ldrh.w	r3, [r3, #1576]	; 0x628
 800c92e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c932:	b29a      	uxth	r2, r3
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	f8a3 2628 	strh.w	r2, [r3, #1576]	; 0x628
							m3->_02_ReadDiscreteInputs_StrtAddr |= m3->_MBUS_RCVD[9];
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	f8b3 2628 	ldrh.w	r2, [r3, #1576]	; 0x628
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	7edb      	ldrb	r3, [r3, #27]
 800c944:	b29b      	uxth	r3, r3
 800c946:	4313      	orrs	r3, r2
 800c948:	b29a      	uxth	r2, r3
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	f8a3 2628 	strh.w	r2, [r3, #1576]	; 0x628

							m3->_02_ReadDiscreteInputs_QTYReg = m3->_MBUS_RCVD[10];
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	7f1b      	ldrb	r3, [r3, #28]
 800c954:	b29a      	uxth	r2, r3
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	f8a3 262a 	strh.w	r2, [r3, #1578]	; 0x62a
							m3->_02_ReadDiscreteInputs_QTYReg = m3->_02_ReadDiscreteInputs_QTYReg<<8;
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	f8b3 362a 	ldrh.w	r3, [r3, #1578]	; 0x62a
 800c962:	021b      	lsls	r3, r3, #8
 800c964:	b29a      	uxth	r2, r3
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	f8a3 262a 	strh.w	r2, [r3, #1578]	; 0x62a
							m3->_02_ReadDiscreteInputs_QTYReg &= 0xFF00;
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	f8b3 362a 	ldrh.w	r3, [r3, #1578]	; 0x62a
 800c972:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c976:	b29a      	uxth	r2, r3
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	f8a3 262a 	strh.w	r2, [r3, #1578]	; 0x62a
							m3->_02_ReadDiscreteInputs_QTYReg |= m3->_MBUS_RCVD[11];
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	f8b3 262a 	ldrh.w	r2, [r3, #1578]	; 0x62a
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	7f5b      	ldrb	r3, [r3, #29]
 800c988:	b29b      	uxth	r3, r3
 800c98a:	4313      	orrs	r3, r2
 800c98c:	b29a      	uxth	r2, r3
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	f8a3 262a 	strh.w	r2, [r3, #1578]	; 0x62a



							if ( m3->_02_ReadDiscreteInputs_QTYReg <=  m3->_02_ReadDiscreteInputs_QTY) //Cdad pedida menor a igual que disponible
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	f8b3 262a 	ldrh.w	r2, [r3, #1578]	; 0x62a
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	f893 3626 	ldrb.w	r3, [r3, #1574]	; 0x626
 800c9a0:	b29b      	uxth	r3, r3
 800c9a2:	429a      	cmp	r2, r3
 800c9a4:	d87e      	bhi.n	800caa4 <ModBUS+0x498>
							{
								if ( (m3->_02_ReadDiscreteInputs_StrtAddr + m3->_02_ReadDiscreteInputs_QTYReg) <=  m3->_02_ReadDiscreteInputs_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	f8b3 3628 	ldrh.w	r3, [r3, #1576]	; 0x628
 800c9ac:	461a      	mov	r2, r3
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	f8b3 362a 	ldrh.w	r3, [r3, #1578]	; 0x62a
 800c9b4:	4413      	add	r3, r2
 800c9b6:	687a      	ldr	r2, [r7, #4]
 800c9b8:	f892 2626 	ldrb.w	r2, [r2, #1574]	; 0x626
 800c9bc:	4293      	cmp	r3, r2
 800c9be:	dc57      	bgt.n	800ca70 <ModBUS+0x464>
								{
								int div=0, resto=0, bytes=0,pos=0;
 800c9c0:	2300      	movs	r3, #0
 800c9c2:	623b      	str	r3, [r7, #32]
 800c9c4:	2300      	movs	r3, #0
 800c9c6:	61fb      	str	r3, [r7, #28]
 800c9c8:	2300      	movs	r3, #0
 800c9ca:	667b      	str	r3, [r7, #100]	; 0x64
 800c9cc:	2300      	movs	r3, #0
 800c9ce:	61bb      	str	r3, [r7, #24]
								uint32_t coils=0;
 800c9d0:	2300      	movs	r3, #0
 800c9d2:	663b      	str	r3, [r7, #96]	; 0x60
									// Verificado el mensaje, se procesa.

									coils = (m3->_Inputs >> m3->_02_ReadDiscreteInputs_StrtAddr);
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 800c9da:	687a      	ldr	r2, [r7, #4]
 800c9dc:	f8b2 2628 	ldrh.w	r2, [r2, #1576]	; 0x628
 800c9e0:	40d3      	lsrs	r3, r2
 800c9e2:	663b      	str	r3, [r7, #96]	; 0x60
									//Debo determinar la cantidad de bytes a enviar

									div=m3->_02_ReadDiscreteInputs_QTYReg/8;
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	f8b3 362a 	ldrh.w	r3, [r3, #1578]	; 0x62a
 800c9ea:	08db      	lsrs	r3, r3, #3
 800c9ec:	b29b      	uxth	r3, r3
 800c9ee:	623b      	str	r3, [r7, #32]
									resto=m3->_02_ReadDiscreteInputs_QTYReg%8;
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	f8b3 362a 	ldrh.w	r3, [r3, #1578]	; 0x62a
 800c9f6:	f003 0307 	and.w	r3, r3, #7
 800c9fa:	61fb      	str	r3, [r7, #28]

									if(resto==0)
 800c9fc:	69fb      	ldr	r3, [r7, #28]
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d102      	bne.n	800ca08 <ModBUS+0x3fc>
									{
										bytes=div;
 800ca02:	6a3b      	ldr	r3, [r7, #32]
 800ca04:	667b      	str	r3, [r7, #100]	; 0x64
 800ca06:	e002      	b.n	800ca0e <ModBUS+0x402>
									}
									else
									{
										bytes=div+1;
 800ca08:	6a3b      	ldr	r3, [r7, #32]
 800ca0a:	3301      	adds	r3, #1
 800ca0c:	667b      	str	r3, [r7, #100]	; 0x64
									}

									m3->_MBUS_2SND[8]=bytes;
 800ca0e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ca10:	b2da      	uxtb	r2, r3
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220


									while(bytes > 0)
 800ca18:	e00e      	b.n	800ca38 <ModBUS+0x42c>
									{
										m3->_MBUS_2SND[8+bytes]=coils;
 800ca1a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ca1c:	3308      	adds	r3, #8
 800ca1e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ca20:	b2d1      	uxtb	r1, r2
 800ca22:	687a      	ldr	r2, [r7, #4]
 800ca24:	4413      	add	r3, r2
 800ca26:	460a      	mov	r2, r1
 800ca28:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
										coils=coils>>8;
 800ca2c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ca2e:	0a1b      	lsrs	r3, r3, #8
 800ca30:	663b      	str	r3, [r7, #96]	; 0x60
										bytes--;
 800ca32:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ca34:	3b01      	subs	r3, #1
 800ca36:	667b      	str	r3, [r7, #100]	; 0x64
									while(bytes > 0)
 800ca38:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	dced      	bgt.n	800ca1a <ModBUS+0x40e>
									}


									m3->_MBUS_2SND[7]=0x02;
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	2202      	movs	r2, #2
 800ca42:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	2201      	movs	r2, #1
 800ca4a:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=m3->_MBUS_2SND[8]+3; //Cdad de datos
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	f893 3220 	ldrb.w	r3, [r3, #544]	; 0x220
 800ca54:	3303      	adds	r3, #3
 800ca56:	b2da      	uxtb	r2, r3
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d

									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800ca64:	1d9a      	adds	r2, r3, #6
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800ca6c:	f000 bfb4 	b.w	800d9d8 <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x02;
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	2202      	movs	r2, #2
 800ca74:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x82;
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	2282      	movs	r2, #130	; 0x82
 800ca7c:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	2201      	movs	r2, #1
 800ca84:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	2203      	movs	r2, #3
 800ca8c:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800ca96:	1d9a      	adds	r2, r3, #6
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
									return(2);//Error excepcion 02
 800ca9e:	2302      	movs	r3, #2
 800caa0:	f000 bf9a 	b.w	800d9d8 <ModBUS+0x13cc>
								m3->_MBUS_2SND[8]=0x03;
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	2203      	movs	r2, #3
 800caa8:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
								m3->_MBUS_2SND[7]=0x82;
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	2282      	movs	r2, #130	; 0x82
 800cab0:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
								m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	2201      	movs	r2, #1
 800cab8:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
								m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	2203      	movs	r2, #3
 800cac0:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
								m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800caca:	1d9a      	adds	r2, r3, #6
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
								return(3);//Erroe excepcion 03
 800cad2:	2303      	movs	r3, #3
 800cad4:	f000 bf80 	b.w	800d9d8 <ModBUS+0x13cc>
						m3->_MBUS_2SND[8]=0x01;
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	2201      	movs	r2, #1
 800cadc:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
						m3->_MBUS_2SND[7]=0x82;
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	2282      	movs	r2, #130	; 0x82
 800cae4:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	2201      	movs	r2, #1
 800caec:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	2203      	movs	r2, #3
 800caf4:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800cafe:	1d9a      	adds	r2, r3, #6
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
						return(1);//Error excepcion 01
 800cb06:	2301      	movs	r3, #1
 800cb08:	f000 bf66 	b.w	800d9d8 <ModBUS+0x13cc>

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	7d9a      	ldrb	r2, [r3, #22]
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	7d5a      	ldrb	r2, [r3, #21]
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	7d1a      	ldrb	r2, [r3, #20]
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	7cda      	ldrb	r2, [r3, #19]
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	7c9a      	ldrb	r2, [r3, #18]
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

					int qty_reg=0;
 800cb3e:	2300      	movs	r3, #0
 800cb40:	65fb      	str	r3, [r7, #92]	; 0x5c
					if  ( m3->_03_ReadHoldingRegisters_EN == 1 ) //Debe estar habilitado el código de funcion
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	7b1b      	ldrb	r3, [r3, #12]
 800cb46:	2b01      	cmp	r3, #1
 800cb48:	f040 80e2 	bne.w	800cd10 <ModBUS+0x704>
					{


							m3->_03_ReadHoldingRegisters_StrtAddr = m3->_MBUS_RCVD[8];
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	7e9b      	ldrb	r3, [r3, #26]
 800cb50:	b29a      	uxth	r2, r3
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	f8a3 262e 	strh.w	r2, [r3, #1582]	; 0x62e
							m3->_03_ReadHoldingRegisters_StrtAddr = m3->_03_ReadHoldingRegisters_StrtAddr<<8;
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	f8b3 362e 	ldrh.w	r3, [r3, #1582]	; 0x62e
 800cb5e:	021b      	lsls	r3, r3, #8
 800cb60:	b29a      	uxth	r2, r3
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	f8a3 262e 	strh.w	r2, [r3, #1582]	; 0x62e
							m3->_03_ReadHoldingRegisters_StrtAddr &= 0xFF00;
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	f8b3 362e 	ldrh.w	r3, [r3, #1582]	; 0x62e
 800cb6e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800cb72:	b29a      	uxth	r2, r3
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	f8a3 262e 	strh.w	r2, [r3, #1582]	; 0x62e
							m3->_03_ReadHoldingRegisters_StrtAddr |= m3->_MBUS_RCVD[9];
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	f8b3 262e 	ldrh.w	r2, [r3, #1582]	; 0x62e
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	7edb      	ldrb	r3, [r3, #27]
 800cb84:	b29b      	uxth	r3, r3
 800cb86:	4313      	orrs	r3, r2
 800cb88:	b29a      	uxth	r2, r3
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	f8a3 262e 	strh.w	r2, [r3, #1582]	; 0x62e

							m3->_03_ReadHoldingRegisters_QTYReg = m3->_MBUS_RCVD[10];
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	7f1b      	ldrb	r3, [r3, #28]
 800cb94:	b29a      	uxth	r2, r3
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	f8a3 2630 	strh.w	r2, [r3, #1584]	; 0x630
							m3->_03_ReadHoldingRegisters_QTYReg = m3->_03_ReadHoldingRegisters_QTYReg<<8;
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	f8b3 3630 	ldrh.w	r3, [r3, #1584]	; 0x630
 800cba2:	021b      	lsls	r3, r3, #8
 800cba4:	b29a      	uxth	r2, r3
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	f8a3 2630 	strh.w	r2, [r3, #1584]	; 0x630
							m3->_03_ReadHoldingRegisters_QTYReg &= 0xFF00;
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	f8b3 3630 	ldrh.w	r3, [r3, #1584]	; 0x630
 800cbb2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800cbb6:	b29a      	uxth	r2, r3
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	f8a3 2630 	strh.w	r2, [r3, #1584]	; 0x630
							m3->_03_ReadHoldingRegisters_QTYReg |= m3->_MBUS_RCVD[11];
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	f8b3 2630 	ldrh.w	r2, [r3, #1584]	; 0x630
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	7f5b      	ldrb	r3, [r3, #29]
 800cbc8:	b29b      	uxth	r3, r3
 800cbca:	4313      	orrs	r3, r2
 800cbcc:	b29a      	uxth	r2, r3
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	f8a3 2630 	strh.w	r2, [r3, #1584]	; 0x630



							if ( m3->_03_ReadHoldingRegisters_QTYReg <=  m3->_03_ReadHoldingRegisters_QTY) //Cdad pedida menor a igual que disponible
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	f8b3 2630 	ldrh.w	r2, [r3, #1584]	; 0x630
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	f893 362c 	ldrb.w	r3, [r3, #1580]	; 0x62c
 800cbe0:	b29b      	uxth	r3, r3
 800cbe2:	429a      	cmp	r2, r3
 800cbe4:	d87a      	bhi.n	800ccdc <ModBUS+0x6d0>
							{
								if ( (m3->_03_ReadHoldingRegisters_StrtAddr + m3->_03_ReadHoldingRegisters_QTYReg) <=  m3->_03_ReadHoldingRegisters_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	f8b3 362e 	ldrh.w	r3, [r3, #1582]	; 0x62e
 800cbec:	461a      	mov	r2, r3
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	f8b3 3630 	ldrh.w	r3, [r3, #1584]	; 0x630
 800cbf4:	4413      	add	r3, r2
 800cbf6:	687a      	ldr	r2, [r7, #4]
 800cbf8:	f892 262c 	ldrb.w	r2, [r2, #1580]	; 0x62c
 800cbfc:	4293      	cmp	r3, r2
 800cbfe:	dc53      	bgt.n	800cca8 <ModBUS+0x69c>
								{
								// Verificado el mensaje, se procesa.

									while(qty_reg < m3->_03_ReadHoldingRegisters_QTYReg)
 800cc00:	e029      	b.n	800cc56 <ModBUS+0x64a>
									{

									 m3->_MBUS_2SND[2*qty_reg + 9]=m3->_Holding_Registers[m3->_03_ReadHoldingRegisters_StrtAddr*2 + 2*qty_reg];
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	f8b3 362e 	ldrh.w	r3, [r3, #1582]	; 0x62e
 800cc08:	461a      	mov	r2, r3
 800cc0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cc0c:	4413      	add	r3, r2
 800cc0e:	005a      	lsls	r2, r3, #1
 800cc10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cc12:	005b      	lsls	r3, r3, #1
 800cc14:	3309      	adds	r3, #9
 800cc16:	6879      	ldr	r1, [r7, #4]
 800cc18:	440a      	add	r2, r1
 800cc1a:	f892 1424 	ldrb.w	r1, [r2, #1060]	; 0x424
 800cc1e:	687a      	ldr	r2, [r7, #4]
 800cc20:	4413      	add	r3, r2
 800cc22:	460a      	mov	r2, r1
 800cc24:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
									 m3->_MBUS_2SND[2*qty_reg + 10]=m3->_Holding_Registers[m3->_03_ReadHoldingRegisters_StrtAddr*2 + 2*qty_reg+1];
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	f8b3 362e 	ldrh.w	r3, [r3, #1582]	; 0x62e
 800cc2e:	461a      	mov	r2, r3
 800cc30:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cc32:	4413      	add	r3, r2
 800cc34:	005b      	lsls	r3, r3, #1
 800cc36:	1c5a      	adds	r2, r3, #1
 800cc38:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cc3a:	3305      	adds	r3, #5
 800cc3c:	005b      	lsls	r3, r3, #1
 800cc3e:	6879      	ldr	r1, [r7, #4]
 800cc40:	440a      	add	r2, r1
 800cc42:	f892 1424 	ldrb.w	r1, [r2, #1060]	; 0x424
 800cc46:	687a      	ldr	r2, [r7, #4]
 800cc48:	4413      	add	r3, r2
 800cc4a:	460a      	mov	r2, r1
 800cc4c:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

										qty_reg++; //Incremento la cantidad de registros
 800cc50:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cc52:	3301      	adds	r3, #1
 800cc54:	65fb      	str	r3, [r7, #92]	; 0x5c
									while(qty_reg < m3->_03_ReadHoldingRegisters_QTYReg)
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	f8b3 3630 	ldrh.w	r3, [r3, #1584]	; 0x630
 800cc5c:	461a      	mov	r2, r3
 800cc5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cc60:	4293      	cmp	r3, r2
 800cc62:	dbce      	blt.n	800cc02 <ModBUS+0x5f6>

									}

									m3->_MBUS_2SND[8]=m3->_03_ReadHoldingRegisters_QTYReg*2;
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	f8b3 3630 	ldrh.w	r3, [r3, #1584]	; 0x630
 800cc6a:	b2db      	uxtb	r3, r3
 800cc6c:	005b      	lsls	r3, r3, #1
 800cc6e:	b2da      	uxtb	r2, r3
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x03;
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	2203      	movs	r2, #3
 800cc7a:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	2201      	movs	r2, #1
 800cc82:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=m3->_MBUS_2SND[8]+3; //Cdad de datos
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	f893 3220 	ldrb.w	r3, [r3, #544]	; 0x220
 800cc8c:	3303      	adds	r3, #3
 800cc8e:	b2da      	uxtb	r2, r3
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d


									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800cc9c:	1d9a      	adds	r2, r3, #6
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800cca4:	f000 be98 	b.w	800d9d8 <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x02;
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	2202      	movs	r2, #2
 800ccac:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x83;
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	2283      	movs	r2, #131	; 0x83
 800ccb4:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	2201      	movs	r2, #1
 800ccbc:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	2203      	movs	r2, #3
 800ccc4:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800ccce:	1d9a      	adds	r2, r3, #6
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
									return(2);//Error excepcion 02
 800ccd6:	2302      	movs	r3, #2
 800ccd8:	f000 be7e 	b.w	800d9d8 <ModBUS+0x13cc>
								m3->_MBUS_2SND[8]=0x03;
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	2203      	movs	r2, #3
 800cce0:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
								m3->_MBUS_2SND[7]=0x83;
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	2283      	movs	r2, #131	; 0x83
 800cce8:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
								m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	2201      	movs	r2, #1
 800ccf0:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
								m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	2203      	movs	r2, #3
 800ccf8:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
								m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800cd02:	1d9a      	adds	r2, r3, #6
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
								return(3);//Erroe excepcion 03
 800cd0a:	2303      	movs	r3, #3
 800cd0c:	f000 be64 	b.w	800d9d8 <ModBUS+0x13cc>
						m3->_MBUS_2SND[8]=0x01;
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	2201      	movs	r2, #1
 800cd14:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
						m3->_MBUS_2SND[7]=0x83;
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	2283      	movs	r2, #131	; 0x83
 800cd1c:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	2201      	movs	r2, #1
 800cd24:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	2203      	movs	r2, #3
 800cd2c:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800cd36:	1d9a      	adds	r2, r3, #6
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
						return(1);//Error excepcion 01
 800cd3e:	2301      	movs	r3, #1
 800cd40:	f000 be4a 	b.w	800d9d8 <ModBUS+0x13cc>

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	7d9a      	ldrb	r2, [r3, #22]
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	7d5a      	ldrb	r2, [r3, #21]
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	7d1a      	ldrb	r2, [r3, #20]
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	7cda      	ldrb	r2, [r3, #19]
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	7c9a      	ldrb	r2, [r3, #18]
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

					int qty_reg=0;
 800cd76:	2300      	movs	r3, #0
 800cd78:	65bb      	str	r3, [r7, #88]	; 0x58
					if  ( m3->_04_ReadInputRegisters_EN == 1 ) //Debe estar habilitado el código de funcion
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	7b5b      	ldrb	r3, [r3, #13]
 800cd7e:	2b01      	cmp	r3, #1
 800cd80:	f040 80e2 	bne.w	800cf48 <ModBUS+0x93c>
					{


							m3->_04_ReadInputRegisters_StrtAddr = m3->_MBUS_RCVD[8];
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	7e9b      	ldrb	r3, [r3, #26]
 800cd88:	b29a      	uxth	r2, r3
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	f8a3 2634 	strh.w	r2, [r3, #1588]	; 0x634
							m3->_04_ReadInputRegisters_StrtAddr = m3->_04_ReadInputRegisters_StrtAddr<<8;
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	f8b3 3634 	ldrh.w	r3, [r3, #1588]	; 0x634
 800cd96:	021b      	lsls	r3, r3, #8
 800cd98:	b29a      	uxth	r2, r3
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	f8a3 2634 	strh.w	r2, [r3, #1588]	; 0x634
							m3->_04_ReadInputRegisters_StrtAddr &= 0xFF00;
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	f8b3 3634 	ldrh.w	r3, [r3, #1588]	; 0x634
 800cda6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800cdaa:	b29a      	uxth	r2, r3
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	f8a3 2634 	strh.w	r2, [r3, #1588]	; 0x634
							m3->_04_ReadInputRegisters_StrtAddr |= m3->_MBUS_RCVD[9];
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	f8b3 2634 	ldrh.w	r2, [r3, #1588]	; 0x634
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	7edb      	ldrb	r3, [r3, #27]
 800cdbc:	b29b      	uxth	r3, r3
 800cdbe:	4313      	orrs	r3, r2
 800cdc0:	b29a      	uxth	r2, r3
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	f8a3 2634 	strh.w	r2, [r3, #1588]	; 0x634

							m3->_04_ReadInputRegisters_QTYReg = m3->_MBUS_RCVD[10];
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	7f1b      	ldrb	r3, [r3, #28]
 800cdcc:	b29a      	uxth	r2, r3
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	f8a3 2636 	strh.w	r2, [r3, #1590]	; 0x636
							m3->_04_ReadInputRegisters_QTYReg = m3->_04_ReadInputRegisters_QTYReg<<8;
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	f8b3 3636 	ldrh.w	r3, [r3, #1590]	; 0x636
 800cdda:	021b      	lsls	r3, r3, #8
 800cddc:	b29a      	uxth	r2, r3
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	f8a3 2636 	strh.w	r2, [r3, #1590]	; 0x636
							m3->_04_ReadInputRegisters_QTYReg &= 0xFF00;
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	f8b3 3636 	ldrh.w	r3, [r3, #1590]	; 0x636
 800cdea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800cdee:	b29a      	uxth	r2, r3
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	f8a3 2636 	strh.w	r2, [r3, #1590]	; 0x636
							m3->_04_ReadInputRegisters_QTYReg |= m3->_MBUS_RCVD[11];
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	f8b3 2636 	ldrh.w	r2, [r3, #1590]	; 0x636
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	7f5b      	ldrb	r3, [r3, #29]
 800ce00:	b29b      	uxth	r3, r3
 800ce02:	4313      	orrs	r3, r2
 800ce04:	b29a      	uxth	r2, r3
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	f8a3 2636 	strh.w	r2, [r3, #1590]	; 0x636



							if ( m3->_04_ReadInputRegisters_QTYReg <=  m3->_04_ReadInputRegisters_QTY) //Cdad pedida menor a igual que disponible
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	f8b3 2636 	ldrh.w	r2, [r3, #1590]	; 0x636
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	f893 3632 	ldrb.w	r3, [r3, #1586]	; 0x632
 800ce18:	b29b      	uxth	r3, r3
 800ce1a:	429a      	cmp	r2, r3
 800ce1c:	d87a      	bhi.n	800cf14 <ModBUS+0x908>
							{
								if ( (m3->_04_ReadInputRegisters_StrtAddr + m3->_04_ReadInputRegisters_QTYReg) <=  m3->_04_ReadInputRegisters_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	f8b3 3634 	ldrh.w	r3, [r3, #1588]	; 0x634
 800ce24:	461a      	mov	r2, r3
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	f8b3 3636 	ldrh.w	r3, [r3, #1590]	; 0x636
 800ce2c:	4413      	add	r3, r2
 800ce2e:	687a      	ldr	r2, [r7, #4]
 800ce30:	f892 2632 	ldrb.w	r2, [r2, #1586]	; 0x632
 800ce34:	4293      	cmp	r3, r2
 800ce36:	dc53      	bgt.n	800cee0 <ModBUS+0x8d4>
								{
								// Verificado el mensaje, se procesa.

									while(qty_reg < m3->_04_ReadInputRegisters_QTYReg)
 800ce38:	e029      	b.n	800ce8e <ModBUS+0x882>
									{

									 m3->_MBUS_2SND[2*qty_reg + 9]=m3->_InputRegisters[m3->_04_ReadInputRegisters_StrtAddr*2 + 2*qty_reg];
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	f8b3 3634 	ldrh.w	r3, [r3, #1588]	; 0x634
 800ce40:	461a      	mov	r2, r3
 800ce42:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ce44:	4413      	add	r3, r2
 800ce46:	005a      	lsls	r2, r3, #1
 800ce48:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ce4a:	005b      	lsls	r3, r3, #1
 800ce4c:	3309      	adds	r3, #9
 800ce4e:	6879      	ldr	r1, [r7, #4]
 800ce50:	440a      	add	r2, r1
 800ce52:	f892 1522 	ldrb.w	r1, [r2, #1314]	; 0x522
 800ce56:	687a      	ldr	r2, [r7, #4]
 800ce58:	4413      	add	r3, r2
 800ce5a:	460a      	mov	r2, r1
 800ce5c:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
									 m3->_MBUS_2SND[2*qty_reg + 10]=m3->_InputRegisters[m3->_04_ReadInputRegisters_StrtAddr*2 + 2*qty_reg+1];
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	f8b3 3634 	ldrh.w	r3, [r3, #1588]	; 0x634
 800ce66:	461a      	mov	r2, r3
 800ce68:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ce6a:	4413      	add	r3, r2
 800ce6c:	005b      	lsls	r3, r3, #1
 800ce6e:	1c5a      	adds	r2, r3, #1
 800ce70:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ce72:	3305      	adds	r3, #5
 800ce74:	005b      	lsls	r3, r3, #1
 800ce76:	6879      	ldr	r1, [r7, #4]
 800ce78:	440a      	add	r2, r1
 800ce7a:	f892 1522 	ldrb.w	r1, [r2, #1314]	; 0x522
 800ce7e:	687a      	ldr	r2, [r7, #4]
 800ce80:	4413      	add	r3, r2
 800ce82:	460a      	mov	r2, r1
 800ce84:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

										qty_reg++; //Incremento la cantidad de registros
 800ce88:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ce8a:	3301      	adds	r3, #1
 800ce8c:	65bb      	str	r3, [r7, #88]	; 0x58
									while(qty_reg < m3->_04_ReadInputRegisters_QTYReg)
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	f8b3 3636 	ldrh.w	r3, [r3, #1590]	; 0x636
 800ce94:	461a      	mov	r2, r3
 800ce96:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ce98:	4293      	cmp	r3, r2
 800ce9a:	dbce      	blt.n	800ce3a <ModBUS+0x82e>

									}

									m3->_MBUS_2SND[8]=m3->_04_ReadInputRegisters_QTYReg*2;
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	f8b3 3636 	ldrh.w	r3, [r3, #1590]	; 0x636
 800cea2:	b2db      	uxtb	r3, r3
 800cea4:	005b      	lsls	r3, r3, #1
 800cea6:	b2da      	uxtb	r2, r3
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x04;
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	2204      	movs	r2, #4
 800ceb2:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	2201      	movs	r2, #1
 800ceba:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=m3->_MBUS_2SND[8]+3; //Cdad de datos
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	f893 3220 	ldrb.w	r3, [r3, #544]	; 0x220
 800cec4:	3303      	adds	r3, #3
 800cec6:	b2da      	uxtb	r2, r3
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d


									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800ced4:	1d9a      	adds	r2, r3, #6
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800cedc:	f000 bd7c 	b.w	800d9d8 <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x02;
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	2202      	movs	r2, #2
 800cee4:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x84;
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	2284      	movs	r2, #132	; 0x84
 800ceec:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	2201      	movs	r2, #1
 800cef4:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	2203      	movs	r2, #3
 800cefc:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800cf06:	1d9a      	adds	r2, r3, #6
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
									return(2);//Error excepcion 02
 800cf0e:	2302      	movs	r3, #2
 800cf10:	f000 bd62 	b.w	800d9d8 <ModBUS+0x13cc>
								m3->_MBUS_2SND[8]=0x03;
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	2203      	movs	r2, #3
 800cf18:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
								m3->_MBUS_2SND[7]=0x84;
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	2284      	movs	r2, #132	; 0x84
 800cf20:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
								m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	2201      	movs	r2, #1
 800cf28:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
								m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	2203      	movs	r2, #3
 800cf30:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
								m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800cf3a:	1d9a      	adds	r2, r3, #6
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
								return(3);//Erroe excepcion 03
 800cf42:	2303      	movs	r3, #3
 800cf44:	f000 bd48 	b.w	800d9d8 <ModBUS+0x13cc>
						m3->_MBUS_2SND[8]=0x01;
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	2201      	movs	r2, #1
 800cf4c:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
						m3->_MBUS_2SND[7]=0x84;
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	2284      	movs	r2, #132	; 0x84
 800cf54:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	2201      	movs	r2, #1
 800cf5c:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	2203      	movs	r2, #3
 800cf64:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800cf6e:	1d9a      	adds	r2, r3, #6
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
						return(1);//Error excepcion 01
 800cf76:	2301      	movs	r3, #1
 800cf78:	f000 bd2e 	b.w	800d9d8 <ModBUS+0x13cc>

								//-----------------------------------------------------//
								//		Para todos los casos se devuelve el mismo	   //
								//		encabezado de respuesta						   //
								//-----------------------------------------------------//
								m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	7d9a      	ldrb	r2, [r3, #22]
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
								m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	7d5a      	ldrb	r2, [r3, #21]
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
								m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	7d1a      	ldrb	r2, [r3, #20]
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
								m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	7cda      	ldrb	r2, [r3, #19]
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
								m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	7c9a      	ldrb	r2, [r3, #18]
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

								int qty_reg=0;
 800cfae:	2300      	movs	r3, #0
 800cfb0:	62bb      	str	r3, [r7, #40]	; 0x28
								if  ( m3->_05_WriteSingleCoil_EN == 1 ) //Debe estar habilitado el código de funcion
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	7b9b      	ldrb	r3, [r3, #14]
 800cfb6:	2b01      	cmp	r3, #1
 800cfb8:	f040 80d1 	bne.w	800d15e <ModBUS+0xb52>
								{


										m3->_05_WriteSingleCoil_StrtAddr = m3->_MBUS_RCVD[8];
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	7e9b      	ldrb	r3, [r3, #26]
 800cfc0:	b29a      	uxth	r2, r3
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	f8a3 263a 	strh.w	r2, [r3, #1594]	; 0x63a
										m3->_05_WriteSingleCoil_StrtAddr = m3->_05_WriteSingleCoil_StrtAddr<<8;
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	f8b3 363a 	ldrh.w	r3, [r3, #1594]	; 0x63a
 800cfce:	021b      	lsls	r3, r3, #8
 800cfd0:	b29a      	uxth	r2, r3
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	f8a3 263a 	strh.w	r2, [r3, #1594]	; 0x63a
										m3->_05_WriteSingleCoil_StrtAddr &= 0xFF00;
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	f8b3 363a 	ldrh.w	r3, [r3, #1594]	; 0x63a
 800cfde:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800cfe2:	b29a      	uxth	r2, r3
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	f8a3 263a 	strh.w	r2, [r3, #1594]	; 0x63a
										m3->_05_WriteSingleCoil_StrtAddr |= m3->_MBUS_RCVD[9];
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	f8b3 263a 	ldrh.w	r2, [r3, #1594]	; 0x63a
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	7edb      	ldrb	r3, [r3, #27]
 800cff4:	b29b      	uxth	r3, r3
 800cff6:	4313      	orrs	r3, r2
 800cff8:	b29a      	uxth	r2, r3
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	f8a3 263a 	strh.w	r2, [r3, #1594]	; 0x63a

										m3->_05_WriteSingleCoil_State = m3->_MBUS_RCVD[10];
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	7f1b      	ldrb	r3, [r3, #28]
 800d004:	b29a      	uxth	r2, r3
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	f8a3 263c 	strh.w	r2, [r3, #1596]	; 0x63c
										m3->_05_WriteSingleCoil_State = m3->_05_WriteSingleCoil_State<<8;
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	f8b3 363c 	ldrh.w	r3, [r3, #1596]	; 0x63c
 800d012:	021b      	lsls	r3, r3, #8
 800d014:	b29a      	uxth	r2, r3
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	f8a3 263c 	strh.w	r2, [r3, #1596]	; 0x63c
										m3->_05_WriteSingleCoil_State &= 0xFF00;
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	f8b3 363c 	ldrh.w	r3, [r3, #1596]	; 0x63c
 800d022:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d026:	b29a      	uxth	r2, r3
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	f8a3 263c 	strh.w	r2, [r3, #1596]	; 0x63c
										m3->_05_WriteSingleCoil_State |= m3->_MBUS_RCVD[11];
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	f8b3 263c 	ldrh.w	r2, [r3, #1596]	; 0x63c
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	7f5b      	ldrb	r3, [r3, #29]
 800d038:	b29b      	uxth	r3, r3
 800d03a:	4313      	orrs	r3, r2
 800d03c:	b29a      	uxth	r2, r3
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	f8a3 263c 	strh.w	r2, [r3, #1596]	; 0x63c



										if ( m3->_05_WriteSingleCoil_StrtAddr <=  (m3->_05_WriteSingleCoil_QTY-1)) //Cdad pedida menor a igual que disponible
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	f893 3638 	ldrb.w	r3, [r3, #1592]	; 0x638
 800d04a:	461a      	mov	r2, r3
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	f8b3 363a 	ldrh.w	r3, [r3, #1594]	; 0x63a
 800d052:	429a      	cmp	r2, r3
 800d054:	dd69      	ble.n	800d12a <ModBUS+0xb1e>
										{
											if ( (m3->_05_WriteSingleCoil_State == 0x0000)||(m3->_05_WriteSingleCoil_State == 0xFF00)) //Dirección inicial + cantidad menor a igual que disponible
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	f8b3 363c 	ldrh.w	r3, [r3, #1596]	; 0x63c
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	d005      	beq.n	800d06c <ModBUS+0xa60>
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	f8b3 363c 	ldrh.w	r3, [r3, #1596]	; 0x63c
 800d066:	f5b3 4f7f 	cmp.w	r3, #65280	; 0xff00
 800d06a:	d144      	bne.n	800d0f6 <ModBUS+0xaea>
											{
											// Verificado el mensaje, se procesa.

												if  (m3->_05_WriteSingleCoil_State == 0xFF00)
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	f8b3 363c 	ldrh.w	r3, [r3, #1596]	; 0x63c
 800d072:	f5b3 4f7f 	cmp.w	r3, #65280	; 0xff00
 800d076:	d10d      	bne.n	800d094 <ModBUS+0xa88>
												{
													m3->_Coils |= 1 << m3->_05_WriteSingleCoil_StrtAddr;
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 800d07e:	687a      	ldr	r2, [r7, #4]
 800d080:	f8b2 263a 	ldrh.w	r2, [r2, #1594]	; 0x63a
 800d084:	4611      	mov	r1, r2
 800d086:	2201      	movs	r2, #1
 800d088:	408a      	lsls	r2, r1
 800d08a:	431a      	orrs	r2, r3
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
 800d092:	e003      	b.n	800d09c <ModBUS+0xa90>
												}
												else
												{
													m3->_Coils &= 0 << m3->_05_WriteSingleCoil_StrtAddr;
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	2200      	movs	r2, #0
 800d098:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
												}

												m3->_MBUS_2SND[11]=m3->_MBUS_RCVD[11];
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	7f5a      	ldrb	r2, [r3, #29]
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	f883 2223 	strb.w	r2, [r3, #547]	; 0x223
												m3->_MBUS_2SND[10]=m3->_MBUS_RCVD[10];
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	7f1a      	ldrb	r2, [r3, #28]
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	f883 2222 	strb.w	r2, [r3, #546]	; 0x222
												m3->_MBUS_2SND[9]=m3->_MBUS_RCVD[9];
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	7eda      	ldrb	r2, [r3, #27]
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	f883 2221 	strb.w	r2, [r3, #545]	; 0x221
												m3->_MBUS_2SND[8]=m3->_MBUS_RCVD[8];
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	7e9a      	ldrb	r2, [r3, #26]
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
												m3->_MBUS_2SND[7]=0x05;
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	2205      	movs	r2, #5
 800d0c8:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
												m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	2201      	movs	r2, #1
 800d0d0:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
												m3->_MBUS_2SND[5]=m3->_MBUS_2SND[8]+6; //Cdad de datos
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	f893 3220 	ldrb.w	r3, [r3, #544]	; 0x220
 800d0da:	3306      	adds	r3, #6
 800d0dc:	b2da      	uxtb	r2, r3
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d


												m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800d0ea:	1d9a      	adds	r2, r3, #6
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
									return(1);//Error excepcion 01
								}
							}
				break;
 800d0f2:	f000 bc71 	b.w	800d9d8 <ModBUS+0x13cc>
												m3->_MBUS_2SND[8]=0x02;
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	2202      	movs	r2, #2
 800d0fa:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
												m3->_MBUS_2SND[7]=0x85;
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	2285      	movs	r2, #133	; 0x85
 800d102:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
												m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	2201      	movs	r2, #1
 800d10a:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
												m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	2203      	movs	r2, #3
 800d112:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
												m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800d11c:	1d9a      	adds	r2, r3, #6
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
												return(2);//Error excepcion 02
 800d124:	2302      	movs	r3, #2
 800d126:	f000 bc57 	b.w	800d9d8 <ModBUS+0x13cc>
											m3->_MBUS_2SND[8]=0x03;
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	2203      	movs	r2, #3
 800d12e:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
											m3->_MBUS_2SND[7]=0x85;
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	2285      	movs	r2, #133	; 0x85
 800d136:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
											m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	2201      	movs	r2, #1
 800d13e:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
											m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	2203      	movs	r2, #3
 800d146:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
											m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800d150:	1d9a      	adds	r2, r3, #6
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
											return(3);//Erroe excepcion 03
 800d158:	2303      	movs	r3, #3
 800d15a:	f000 bc3d 	b.w	800d9d8 <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x01;
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	2201      	movs	r2, #1
 800d162:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x85;
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	2285      	movs	r2, #133	; 0x85
 800d16a:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	2201      	movs	r2, #1
 800d172:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	2203      	movs	r2, #3
 800d17a:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800d184:	1d9a      	adds	r2, r3, #6
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
									return(1);//Error excepcion 01
 800d18c:	2301      	movs	r3, #1
 800d18e:	f000 bc23 	b.w	800d9d8 <ModBUS+0x13cc>

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	7d9a      	ldrb	r2, [r3, #22]
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	7d5a      	ldrb	r2, [r3, #21]
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	7d1a      	ldrb	r2, [r3, #20]
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	7cda      	ldrb	r2, [r3, #19]
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	7c9a      	ldrb	r2, [r3, #18]
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

					uint16_t qty_reg=0, start_address=0;
 800d1c4:	2300      	movs	r3, #0
 800d1c6:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800d1c8:	2300      	movs	r3, #0
 800d1ca:	85bb      	strh	r3, [r7, #44]	; 0x2c
					if  ( m3->_06_WriteSingleRegister_EN == 1 ) //Debe estar habilitado el código de funcion
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	7bdb      	ldrb	r3, [r3, #15]
 800d1d0:	2b01      	cmp	r3, #1
 800d1d2:	f040 80a3 	bne.w	800d31c <ModBUS+0xd10>
					{


							m3->_06_WriteSingleRegister_Addr = m3->_MBUS_RCVD[8];
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	7e9b      	ldrb	r3, [r3, #26]
 800d1da:	b29a      	uxth	r2, r3
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	f8a3 2646 	strh.w	r2, [r3, #1606]	; 0x646
							m3->_06_WriteSingleRegister_Addr = m3->_06_WriteSingleRegister_Addr<<8;
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	f8b3 3646 	ldrh.w	r3, [r3, #1606]	; 0x646
 800d1e8:	021b      	lsls	r3, r3, #8
 800d1ea:	b29a      	uxth	r2, r3
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	f8a3 2646 	strh.w	r2, [r3, #1606]	; 0x646
							m3->_06_WriteSingleRegister_Addr &= 0xFF00;
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	f8b3 3646 	ldrh.w	r3, [r3, #1606]	; 0x646
 800d1f8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d1fc:	b29a      	uxth	r2, r3
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	f8a3 2646 	strh.w	r2, [r3, #1606]	; 0x646
							m3->_06_WriteSingleRegister_Addr |= m3->_MBUS_RCVD[9];
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	f8b3 2646 	ldrh.w	r2, [r3, #1606]	; 0x646
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	7edb      	ldrb	r3, [r3, #27]
 800d20e:	b29b      	uxth	r3, r3
 800d210:	4313      	orrs	r3, r2
 800d212:	b29a      	uxth	r2, r3
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	f8a3 2646 	strh.w	r2, [r3, #1606]	; 0x646

							start_address=m3->_06_WriteSingleRegister_Addr;
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	f8b3 3646 	ldrh.w	r3, [r3, #1606]	; 0x646
 800d220:	85bb      	strh	r3, [r7, #44]	; 0x2c

							m3->_06_WriteSingleRegister_Value = m3->_MBUS_RCVD[10];
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	7f1b      	ldrb	r3, [r3, #28]
 800d226:	b29a      	uxth	r2, r3
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	f8a3 2648 	strh.w	r2, [r3, #1608]	; 0x648
							m3->_06_WriteSingleRegister_Value = m3->_06_WriteSingleRegister_Value<<8;
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	f8b3 3648 	ldrh.w	r3, [r3, #1608]	; 0x648
 800d234:	021b      	lsls	r3, r3, #8
 800d236:	b29a      	uxth	r2, r3
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	f8a3 2648 	strh.w	r2, [r3, #1608]	; 0x648
							m3->_06_WriteSingleRegister_Value &= 0xFF00;
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	f8b3 3648 	ldrh.w	r3, [r3, #1608]	; 0x648
 800d244:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d248:	b29a      	uxth	r2, r3
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	f8a3 2648 	strh.w	r2, [r3, #1608]	; 0x648
							m3->_06_WriteSingleRegister_Value |= m3->_MBUS_RCVD[11];
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	f8b3 2648 	ldrh.w	r2, [r3, #1608]	; 0x648
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	7f5b      	ldrb	r3, [r3, #29]
 800d25a:	b29b      	uxth	r3, r3
 800d25c:	4313      	orrs	r3, r2
 800d25e:	b29a      	uxth	r2, r3
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	f8a3 2648 	strh.w	r2, [r3, #1608]	; 0x648



							if ((m3->_06_WriteSingleRegister_Value <=  0xFFFF)&&(m3->_06_WriteSingleRegister_Value >=  0x0000)) //Cdad pedida menor a igual que disponible
							{
								if ( m3->_06_WriteSingleRegister_Addr  <=  m3->_06_WriteSingleRegister_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	f8b3 2646 	ldrh.w	r2, [r3, #1606]	; 0x646
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	f893 3644 	ldrb.w	r3, [r3, #1604]	; 0x644
 800d272:	b29b      	uxth	r3, r3
 800d274:	429a      	cmp	r2, r3
 800d276:	d838      	bhi.n	800d2ea <ModBUS+0xcde>
								{
								// Verificado el mensaje, se procesa.

										m3->_Holding_Registers[start_address] = m3->_MBUS_RCVD[10];
 800d278:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800d27a:	687a      	ldr	r2, [r7, #4]
 800d27c:	7f11      	ldrb	r1, [r2, #28]
 800d27e:	687a      	ldr	r2, [r7, #4]
 800d280:	4413      	add	r3, r2
 800d282:	460a      	mov	r2, r1
 800d284:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
										m3->_Holding_Registers[start_address + 1] = m3->_MBUS_RCVD[11];
 800d288:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800d28a:	3301      	adds	r3, #1
 800d28c:	687a      	ldr	r2, [r7, #4]
 800d28e:	7f51      	ldrb	r1, [r2, #29]
 800d290:	687a      	ldr	r2, [r7, #4]
 800d292:	4413      	add	r3, r2
 800d294:	460a      	mov	r2, r1
 800d296:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424


									m3->_MBUS_2SND[11]=m3->_MBUS_RCVD[11];
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	7f5a      	ldrb	r2, [r3, #29]
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	f883 2223 	strb.w	r2, [r3, #547]	; 0x223
									m3->_MBUS_2SND[10]=m3->_MBUS_RCVD[10];
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	7f1a      	ldrb	r2, [r3, #28]
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	f883 2222 	strb.w	r2, [r3, #546]	; 0x222
									m3->_MBUS_2SND[9]=m3->_MBUS_RCVD[9];
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	7eda      	ldrb	r2, [r3, #27]
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	f883 2221 	strb.w	r2, [r3, #545]	; 0x221
									m3->_MBUS_2SND[8]=m3->_MBUS_RCVD[8];
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	7e9a      	ldrb	r2, [r3, #26]
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x06;
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	2206      	movs	r2, #6
 800d2c6:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	2201      	movs	r2, #1
 800d2ce:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=0x06; //Cdad de datos
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	2206      	movs	r2, #6
 800d2d6:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d


									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800d2e0:	1d9a      	adds	r2, r3, #6
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800d2e8:	e376      	b.n	800d9d8 <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x02;
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	2202      	movs	r2, #2
 800d2ee:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x86;
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	2286      	movs	r2, #134	; 0x86
 800d2f6:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	2201      	movs	r2, #1
 800d2fe:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	2203      	movs	r2, #3
 800d306:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800d310:	1d9a      	adds	r2, r3, #6
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
									return(2);//Error excepcion 02
 800d318:	2302      	movs	r3, #2
 800d31a:	e35d      	b.n	800d9d8 <ModBUS+0x13cc>
						m3->_MBUS_2SND[8]=0x01;
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	2201      	movs	r2, #1
 800d320:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
						m3->_MBUS_2SND[7]=0x86;
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	2286      	movs	r2, #134	; 0x86
 800d328:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	2201      	movs	r2, #1
 800d330:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	2203      	movs	r2, #3
 800d338:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800d342:	1d9a      	adds	r2, r3, #6
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
						return(1);//Error excepcion 01
 800d34a:	2301      	movs	r3, #1
 800d34c:	e344      	b.n	800d9d8 <ModBUS+0x13cc>

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	7d9a      	ldrb	r2, [r3, #22]
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	7d5a      	ldrb	r2, [r3, #21]
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	7d1a      	ldrb	r2, [r3, #20]
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	7cda      	ldrb	r2, [r3, #19]
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	7c9a      	ldrb	r2, [r3, #18]
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

					int qty_reg=0;
 800d380:	2300      	movs	r3, #0
 800d382:	633b      	str	r3, [r7, #48]	; 0x30
					if  ( m3->_15_WriteMultipleCoils_EN == 1 ) //Debe estar habilitado el código de funcion
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	7c1b      	ldrb	r3, [r3, #16]
 800d388:	2b01      	cmp	r3, #1
 800d38a:	f040 810f 	bne.w	800d5ac <ModBUS+0xfa0>
					{


							m3->_15_WriteMultipleCoils_StrtAddr = m3->_MBUS_RCVD[8];
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	7e9b      	ldrb	r3, [r3, #26]
 800d392:	b29a      	uxth	r2, r3
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	f8a3 2640 	strh.w	r2, [r3, #1600]	; 0x640
							m3->_15_WriteMultipleCoils_StrtAddr = m3->_15_WriteMultipleCoils_StrtAddr<<8;
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	f8b3 3640 	ldrh.w	r3, [r3, #1600]	; 0x640
 800d3a0:	021b      	lsls	r3, r3, #8
 800d3a2:	b29a      	uxth	r2, r3
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	f8a3 2640 	strh.w	r2, [r3, #1600]	; 0x640
							m3->_15_WriteMultipleCoils_StrtAddr &= 0xFF00;
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	f8b3 3640 	ldrh.w	r3, [r3, #1600]	; 0x640
 800d3b0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d3b4:	b29a      	uxth	r2, r3
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	f8a3 2640 	strh.w	r2, [r3, #1600]	; 0x640
							m3->_15_WriteMultipleCoils_StrtAddr |= m3->_MBUS_RCVD[9];
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	f8b3 2640 	ldrh.w	r2, [r3, #1600]	; 0x640
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	7edb      	ldrb	r3, [r3, #27]
 800d3c6:	b29b      	uxth	r3, r3
 800d3c8:	4313      	orrs	r3, r2
 800d3ca:	b29a      	uxth	r2, r3
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	f8a3 2640 	strh.w	r2, [r3, #1600]	; 0x640

							m3->_15_WriteMultipleCoils_QTYReg = m3->_MBUS_RCVD[10];
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	7f1b      	ldrb	r3, [r3, #28]
 800d3d6:	b29a      	uxth	r2, r3
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	f8a3 2642 	strh.w	r2, [r3, #1602]	; 0x642
							m3->_15_WriteMultipleCoils_QTYReg = m3->_15_WriteMultipleCoils_QTYReg<<8;
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	f8b3 3642 	ldrh.w	r3, [r3, #1602]	; 0x642
 800d3e4:	021b      	lsls	r3, r3, #8
 800d3e6:	b29a      	uxth	r2, r3
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	f8a3 2642 	strh.w	r2, [r3, #1602]	; 0x642
							m3->_15_WriteMultipleCoils_QTYReg &= 0xFF00;
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	f8b3 3642 	ldrh.w	r3, [r3, #1602]	; 0x642
 800d3f4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d3f8:	b29a      	uxth	r2, r3
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	f8a3 2642 	strh.w	r2, [r3, #1602]	; 0x642
							m3->_15_WriteMultipleCoils_QTYReg |= m3->_MBUS_RCVD[11];
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	f8b3 2642 	ldrh.w	r2, [r3, #1602]	; 0x642
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	7f5b      	ldrb	r3, [r3, #29]
 800d40a:	b29b      	uxth	r3, r3
 800d40c:	4313      	orrs	r3, r2
 800d40e:	b29a      	uxth	r2, r3
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	f8a3 2642 	strh.w	r2, [r3, #1602]	; 0x642



							if ( m3->_15_WriteMultipleCoils_QTYReg <=  m3->_15_WriteMultipleCoils_QTY) //Cdad pedida menor a igual que disponible
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	f8b3 2642 	ldrh.w	r2, [r3, #1602]	; 0x642
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	f893 363e 	ldrb.w	r3, [r3, #1598]	; 0x63e
 800d422:	b29b      	uxth	r3, r3
 800d424:	429a      	cmp	r2, r3
 800d426:	f200 80a8 	bhi.w	800d57a <ModBUS+0xf6e>
							{
								if ( (m3->_15_WriteMultipleCoils_StrtAddr + m3->_15_WriteMultipleCoils_QTYReg) <=  m3->_15_WriteMultipleCoils_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	f8b3 3640 	ldrh.w	r3, [r3, #1600]	; 0x640
 800d430:	461a      	mov	r2, r3
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	f8b3 3642 	ldrh.w	r3, [r3, #1602]	; 0x642
 800d438:	4413      	add	r3, r2
 800d43a:	687a      	ldr	r2, [r7, #4]
 800d43c:	f892 263e 	ldrb.w	r2, [r2, #1598]	; 0x63e
 800d440:	4293      	cmp	r3, r2
 800d442:	f300 8081 	bgt.w	800d548 <ModBUS+0xf3c>
								{
								// Verificado el mensaje, se procesa.
								uint32_t data=0x00000000,cdad_bytes=0,cdad_datos=0, mascara=0x00000000;
 800d446:	2300      	movs	r3, #0
 800d448:	657b      	str	r3, [r7, #84]	; 0x54
 800d44a:	2300      	movs	r3, #0
 800d44c:	653b      	str	r3, [r7, #80]	; 0x50
 800d44e:	2300      	movs	r3, #0
 800d450:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d452:	2300      	movs	r3, #0
 800d454:	64bb      	str	r3, [r7, #72]	; 0x48

									cdad_bytes=m3->_MBUS_RCVD[12];
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	7f9b      	ldrb	r3, [r3, #30]
 800d45a:	653b      	str	r3, [r7, #80]	; 0x50


									while(cdad_bytes > 0)
 800d45c:	e00e      	b.n	800d47c <ModBUS+0xe70>
									{
										data=data<<8;
 800d45e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d460:	021b      	lsls	r3, r3, #8
 800d462:	657b      	str	r3, [r7, #84]	; 0x54
										data|=m3->_MBUS_RCVD[12+cdad_bytes];
 800d464:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d466:	330c      	adds	r3, #12
 800d468:	687a      	ldr	r2, [r7, #4]
 800d46a:	4413      	add	r3, r2
 800d46c:	7c9b      	ldrb	r3, [r3, #18]
 800d46e:	461a      	mov	r2, r3
 800d470:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d472:	4313      	orrs	r3, r2
 800d474:	657b      	str	r3, [r7, #84]	; 0x54
										cdad_bytes--;
 800d476:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d478:	3b01      	subs	r3, #1
 800d47a:	653b      	str	r3, [r7, #80]	; 0x50
									while(cdad_bytes > 0)
 800d47c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d47e:	2b00      	cmp	r3, #0
 800d480:	d1ed      	bne.n	800d45e <ModBUS+0xe52>
									}
									data=data << m3->_15_WriteMultipleCoils_StrtAddr; //Dejo los datos listo para la OR de Transferencia
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	f8b3 3640 	ldrh.w	r3, [r3, #1600]	; 0x640
 800d488:	461a      	mov	r2, r3
 800d48a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d48c:	4093      	lsls	r3, r2
 800d48e:	657b      	str	r3, [r7, #84]	; 0x54

									while (cdad_datos < m3->_15_WriteMultipleCoils_QTYReg)
 800d490:	e00f      	b.n	800d4b2 <ModBUS+0xea6>
									{
										mascara |= (1 << (m3->_15_WriteMultipleCoils_StrtAddr + cdad_datos));
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	f8b3 3640 	ldrh.w	r3, [r3, #1600]	; 0x640
 800d498:	461a      	mov	r2, r3
 800d49a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d49c:	4413      	add	r3, r2
 800d49e:	2201      	movs	r2, #1
 800d4a0:	fa02 f303 	lsl.w	r3, r2, r3
 800d4a4:	461a      	mov	r2, r3
 800d4a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d4a8:	4313      	orrs	r3, r2
 800d4aa:	64bb      	str	r3, [r7, #72]	; 0x48
										cdad_datos++;
 800d4ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d4ae:	3301      	adds	r3, #1
 800d4b0:	64fb      	str	r3, [r7, #76]	; 0x4c
									while (cdad_datos < m3->_15_WriteMultipleCoils_QTYReg)
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	f8b3 3642 	ldrh.w	r3, [r3, #1602]	; 0x642
 800d4b8:	461a      	mov	r2, r3
 800d4ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d4bc:	4293      	cmp	r3, r2
 800d4be:	d3e8      	bcc.n	800d492 <ModBUS+0xe86>
									}

									mascara = ~ mascara;
 800d4c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d4c2:	43db      	mvns	r3, r3
 800d4c4:	64bb      	str	r3, [r7, #72]	; 0x48

									m3->_Coils &= mascara;
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
 800d4cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d4ce:	401a      	ands	r2, r3
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c


									data &= ~mascara;
 800d4d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d4d8:	43db      	mvns	r3, r3
 800d4da:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d4dc:	4013      	ands	r3, r2
 800d4de:	657b      	str	r3, [r7, #84]	; 0x54

									m3->_Coils |= data;
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
 800d4e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d4e8:	431a      	orrs	r2, r3
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c

									m3->_MBUS_2SND[11]=m3->_MBUS_RCVD[11];
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	7f5a      	ldrb	r2, [r3, #29]
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	f883 2223 	strb.w	r2, [r3, #547]	; 0x223
									m3->_MBUS_2SND[10]=m3->_MBUS_RCVD[10];
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	7f1a      	ldrb	r2, [r3, #28]
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	f883 2222 	strb.w	r2, [r3, #546]	; 0x222
									m3->_MBUS_2SND[9]=m3->_MBUS_RCVD[9];
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	7eda      	ldrb	r2, [r3, #27]
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	f883 2221 	strb.w	r2, [r3, #545]	; 0x221
									m3->_MBUS_2SND[8]=m3->_MBUS_RCVD[8];
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	7e9a      	ldrb	r2, [r3, #26]
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x0F;
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	220f      	movs	r2, #15
 800d51c:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	2201      	movs	r2, #1
 800d524:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=m3->_MBUS_2SND[8]+6; //Cdad de datos
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	f893 3220 	ldrb.w	r3, [r3, #544]	; 0x220
 800d52e:	3306      	adds	r3, #6
 800d530:	b2da      	uxtb	r2, r3
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d


									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800d53e:	1d9a      	adds	r2, r3, #6
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800d546:	e247      	b.n	800d9d8 <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x02;
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	2202      	movs	r2, #2
 800d54c:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x8F;
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	228f      	movs	r2, #143	; 0x8f
 800d554:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	2201      	movs	r2, #1
 800d55c:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	2203      	movs	r2, #3
 800d564:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800d56e:	1d9a      	adds	r2, r3, #6
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
									return(2);//Error excepcion 02
 800d576:	2302      	movs	r3, #2
 800d578:	e22e      	b.n	800d9d8 <ModBUS+0x13cc>
								m3->_MBUS_2SND[8]=0x03;
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	2203      	movs	r2, #3
 800d57e:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
								m3->_MBUS_2SND[7]=0x8F;
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	228f      	movs	r2, #143	; 0x8f
 800d586:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
								m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	2201      	movs	r2, #1
 800d58e:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
								m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	2203      	movs	r2, #3
 800d596:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
								m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800d5a0:	1d9a      	adds	r2, r3, #6
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
								return(3);//Erroe excepcion 03
 800d5a8:	2303      	movs	r3, #3
 800d5aa:	e215      	b.n	800d9d8 <ModBUS+0x13cc>
						m3->_MBUS_2SND[8]=0x01;
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	2201      	movs	r2, #1
 800d5b0:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
						m3->_MBUS_2SND[7]=0x8F;
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	228f      	movs	r2, #143	; 0x8f
 800d5b8:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	2201      	movs	r2, #1
 800d5c0:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	2203      	movs	r2, #3
 800d5c8:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800d5d2:	1d9a      	adds	r2, r3, #6
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
						return(1);//Error excepcion 01
 800d5da:	2301      	movs	r3, #1
 800d5dc:	e1fc      	b.n	800d9d8 <ModBUS+0x13cc>

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	7d9a      	ldrb	r2, [r3, #22]
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	7d5a      	ldrb	r2, [r3, #21]
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	7d1a      	ldrb	r2, [r3, #20]
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	7cda      	ldrb	r2, [r3, #19]
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	7c9a      	ldrb	r2, [r3, #18]
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

					uint16_t qty_reg=0, start_address=0;
 800d610:	2300      	movs	r3, #0
 800d612:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800d616:	2300      	movs	r3, #0
 800d618:	86fb      	strh	r3, [r7, #54]	; 0x36
					if  ( m3->_16_WriteMultipleRegisters_EN == 1 ) //Debe estar habilitado el código de funcion
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	7c5b      	ldrb	r3, [r3, #17]
 800d61e:	2b01      	cmp	r3, #1
 800d620:	f040 80eb 	bne.w	800d7fa <ModBUS+0x11ee>
					{


							m3->_16_WriteMultipleRegisters_StrtAddr = m3->_MBUS_RCVD[8];
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	7e9b      	ldrb	r3, [r3, #26]
 800d628:	b29a      	uxth	r2, r3
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	f8a3 264c 	strh.w	r2, [r3, #1612]	; 0x64c
							m3->_16_WriteMultipleRegisters_StrtAddr = m3->_16_WriteMultipleRegisters_StrtAddr<<8;
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	f8b3 364c 	ldrh.w	r3, [r3, #1612]	; 0x64c
 800d636:	021b      	lsls	r3, r3, #8
 800d638:	b29a      	uxth	r2, r3
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	f8a3 264c 	strh.w	r2, [r3, #1612]	; 0x64c
							m3->_16_WriteMultipleRegisters_StrtAddr &= 0xFF00;
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	f8b3 364c 	ldrh.w	r3, [r3, #1612]	; 0x64c
 800d646:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d64a:	b29a      	uxth	r2, r3
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	f8a3 264c 	strh.w	r2, [r3, #1612]	; 0x64c
							m3->_16_WriteMultipleRegisters_StrtAddr |= m3->_MBUS_RCVD[9];
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	f8b3 264c 	ldrh.w	r2, [r3, #1612]	; 0x64c
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	7edb      	ldrb	r3, [r3, #27]
 800d65c:	b29b      	uxth	r3, r3
 800d65e:	4313      	orrs	r3, r2
 800d660:	b29a      	uxth	r2, r3
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	f8a3 264c 	strh.w	r2, [r3, #1612]	; 0x64c

							start_address= (2 * m3->_16_WriteMultipleRegisters_StrtAddr);
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	f8b3 364c 	ldrh.w	r3, [r3, #1612]	; 0x64c
 800d66e:	005b      	lsls	r3, r3, #1
 800d670:	86fb      	strh	r3, [r7, #54]	; 0x36

							m3->_16_WriteMultipleRegisters_QTYReg = m3->_MBUS_RCVD[10];
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	7f1b      	ldrb	r3, [r3, #28]
 800d676:	b29a      	uxth	r2, r3
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	f8a3 264e 	strh.w	r2, [r3, #1614]	; 0x64e
							m3->_16_WriteMultipleRegisters_QTYReg = m3->_16_WriteMultipleRegisters_QTYReg<<8;
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	f8b3 364e 	ldrh.w	r3, [r3, #1614]	; 0x64e
 800d684:	021b      	lsls	r3, r3, #8
 800d686:	b29a      	uxth	r2, r3
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	f8a3 264e 	strh.w	r2, [r3, #1614]	; 0x64e
							m3->_16_WriteMultipleRegisters_QTYReg &= 0xFF00;
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	f8b3 364e 	ldrh.w	r3, [r3, #1614]	; 0x64e
 800d694:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d698:	b29a      	uxth	r2, r3
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	f8a3 264e 	strh.w	r2, [r3, #1614]	; 0x64e
							m3->_16_WriteMultipleRegisters_QTYReg |= m3->_MBUS_RCVD[11];
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	f8b3 264e 	ldrh.w	r2, [r3, #1614]	; 0x64e
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	7f5b      	ldrb	r3, [r3, #29]
 800d6aa:	b29b      	uxth	r3, r3
 800d6ac:	4313      	orrs	r3, r2
 800d6ae:	b29a      	uxth	r2, r3
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	f8a3 264e 	strh.w	r2, [r3, #1614]	; 0x64e



							if ( m3->_16_WriteMultipleRegisters_QTYReg <=  m3->_16_WriteMultipleRegisters_QTY) //Cdad pedida menor a igual que disponible
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	f8b3 264e 	ldrh.w	r2, [r3, #1614]	; 0x64e
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	f893 364a 	ldrb.w	r3, [r3, #1610]	; 0x64a
 800d6c2:	b29b      	uxth	r3, r3
 800d6c4:	429a      	cmp	r2, r3
 800d6c6:	d87f      	bhi.n	800d7c8 <ModBUS+0x11bc>
							{
								if ( (m3->_16_WriteMultipleRegisters_StrtAddr + m3->_16_WriteMultipleRegisters_QTYReg) <=  m3->_16_WriteMultipleRegisters_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	f8b3 364c 	ldrh.w	r3, [r3, #1612]	; 0x64c
 800d6ce:	461a      	mov	r2, r3
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	f8b3 364e 	ldrh.w	r3, [r3, #1614]	; 0x64e
 800d6d6:	4413      	add	r3, r2
 800d6d8:	687a      	ldr	r2, [r7, #4]
 800d6da:	f892 264a 	ldrb.w	r2, [r2, #1610]	; 0x64a
 800d6de:	4293      	cmp	r3, r2
 800d6e0:	dc59      	bgt.n	800d796 <ModBUS+0x118a>
								{
								// Verificado el mensaje, se procesa.

									while(qty_reg < m3->_MBUS_RCVD[12])
 800d6e2:	e029      	b.n	800d738 <ModBUS+0x112c>
									{
										m3->_Holding_Registers[start_address + qty_reg] = m3->_MBUS_RCVD[13 + qty_reg];
 800d6e4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800d6e8:	f103 020d 	add.w	r2, r3, #13
 800d6ec:	8ef9      	ldrh	r1, [r7, #54]	; 0x36
 800d6ee:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800d6f2:	440b      	add	r3, r1
 800d6f4:	6879      	ldr	r1, [r7, #4]
 800d6f6:	440a      	add	r2, r1
 800d6f8:	7c91      	ldrb	r1, [r2, #18]
 800d6fa:	687a      	ldr	r2, [r7, #4]
 800d6fc:	4413      	add	r3, r2
 800d6fe:	460a      	mov	r2, r1
 800d700:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
										//Esto era para vectores de UINT16_T
										//m3->_Holding_Registers[start_address + qty_reg] = m3->_Holding_Registers[start_address + qty_reg]<<8;
										//m3->_Holding_Registers[start_address + qty_reg] &= 0xFF00;
										qty_reg++;
 800d704:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800d708:	3301      	adds	r3, #1
 800d70a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
										m3->_Holding_Registers[start_address + qty_reg] = m3->_MBUS_RCVD[13 + qty_reg];
 800d70e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800d712:	f103 020d 	add.w	r2, r3, #13
 800d716:	8ef9      	ldrh	r1, [r7, #54]	; 0x36
 800d718:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800d71c:	440b      	add	r3, r1
 800d71e:	6879      	ldr	r1, [r7, #4]
 800d720:	440a      	add	r2, r1
 800d722:	7c91      	ldrb	r1, [r2, #18]
 800d724:	687a      	ldr	r2, [r7, #4]
 800d726:	4413      	add	r3, r2
 800d728:	460a      	mov	r2, r1
 800d72a:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
										qty_reg++;
 800d72e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800d732:	3301      	adds	r3, #1
 800d734:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
									while(qty_reg < m3->_MBUS_RCVD[12])
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	7f9b      	ldrb	r3, [r3, #30]
 800d73c:	b29b      	uxth	r3, r3
 800d73e:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800d742:	429a      	cmp	r2, r3
 800d744:	d3ce      	bcc.n	800d6e4 <ModBUS+0x10d8>

									}
									m3->_MBUS_2SND[11]=m3->_MBUS_RCVD[11];
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	7f5a      	ldrb	r2, [r3, #29]
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	f883 2223 	strb.w	r2, [r3, #547]	; 0x223
									m3->_MBUS_2SND[10]=m3->_MBUS_RCVD[10];
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	7f1a      	ldrb	r2, [r3, #28]
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	f883 2222 	strb.w	r2, [r3, #546]	; 0x222
									m3->_MBUS_2SND[9]=m3->_MBUS_RCVD[9];
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	7eda      	ldrb	r2, [r3, #27]
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	f883 2221 	strb.w	r2, [r3, #545]	; 0x221
									m3->_MBUS_2SND[8]=m3->_MBUS_RCVD[8];
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	7e9a      	ldrb	r2, [r3, #26]
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x10;
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	2210      	movs	r2, #16
 800d772:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	2201      	movs	r2, #1
 800d77a:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=0x06; //Cdad de datos
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	2206      	movs	r2, #6
 800d782:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d


									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800d78c:	1d9a      	adds	r2, r3, #6
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800d794:	e120      	b.n	800d9d8 <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x02;
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	2202      	movs	r2, #2
 800d79a:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x90;
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	2290      	movs	r2, #144	; 0x90
 800d7a2:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	2201      	movs	r2, #1
 800d7aa:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	2203      	movs	r2, #3
 800d7b2:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800d7bc:	1d9a      	adds	r2, r3, #6
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
									return(2);//Error excepcion 02
 800d7c4:	2302      	movs	r3, #2
 800d7c6:	e107      	b.n	800d9d8 <ModBUS+0x13cc>
								m3->_MBUS_2SND[8]=0x03;
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	2203      	movs	r2, #3
 800d7cc:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
								m3->_MBUS_2SND[7]=0x90;
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	2290      	movs	r2, #144	; 0x90
 800d7d4:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
								m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	2201      	movs	r2, #1
 800d7dc:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
								m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	2203      	movs	r2, #3
 800d7e4:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
								m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800d7ee:	1d9a      	adds	r2, r3, #6
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
								return(3);//Erroe excepcion 03
 800d7f6:	2303      	movs	r3, #3
 800d7f8:	e0ee      	b.n	800d9d8 <ModBUS+0x13cc>
						m3->_MBUS_2SND[8]=0x01;
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	2201      	movs	r2, #1
 800d7fe:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
						m3->_MBUS_2SND[7]=0x90;
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	2290      	movs	r2, #144	; 0x90
 800d806:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	2201      	movs	r2, #1
 800d80e:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	2203      	movs	r2, #3
 800d816:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800d820:	1d9a      	adds	r2, r3, #6
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
						return(1);//Error excepcion 01
 800d828:	2301      	movs	r3, #1
 800d82a:	e0d5      	b.n	800d9d8 <ModBUS+0x13cc>
				{	// Comando no soportado
					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[8]=0x01;
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	2201      	movs	r2, #1
 800d830:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
					m3->_MBUS_2SND[7]=m3->_MBUS_RCVD[7] + 0x80;
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	7e5b      	ldrb	r3, [r3, #25]
 800d838:	3b80      	subs	r3, #128	; 0x80
 800d83a:	b2da      	uxtb	r2, r3
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
					m3->_MBUS_2SND[6]=m3->_MBUS_RCVD[6];
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	7e1a      	ldrb	r2, [r3, #24]
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
					m3->_MBUS_2SND[5]=0x03;
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	2203      	movs	r2, #3
 800d850:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	7d9a      	ldrb	r2, [r3, #22]
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	7d5a      	ldrb	r2, [r3, #21]
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	7d1a      	ldrb	r2, [r3, #20]
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	7cda      	ldrb	r2, [r3, #19]
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	7c9a      	ldrb	r2, [r3, #18]
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

					m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800d88c:	1d9a      	adds	r2, r3, #6
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
					return(1);
 800d894:	2301      	movs	r3, #1
 800d896:	e09f      	b.n	800d9d8 <ModBUS+0x13cc>


		}
		else
		{
			return(1);
 800d898:	2301      	movs	r3, #1
 800d89a:	e09d      	b.n	800d9d8 <ModBUS+0x13cc>
		}
	}
	else if (m3->_mode == CLIENTE)
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	791b      	ldrb	r3, [r3, #4]
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	f040 8099 	bne.w	800d9d8 <ModBUS+0x13cc>
	{
		if(ModBUS_Check(m3->_MBUS_RCVD,m3->_n_MBUS_RCVD))   //Verifico si el vector recibido es ModBUS
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	f103 0212 	add.w	r2, r3, #18
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800d8b2:	4619      	mov	r1, r3
 800d8b4:	4610      	mov	r0, r2
 800d8b6:	f7fe fda5 	bl	800c404 <ModBUS_Check>
 800d8ba:	4603      	mov	r3, r0
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	f000 808b 	beq.w	800d9d8 <ModBUS+0x13cc>
		{
			if(ModBUS_Check_tid(m3))
 800d8c2:	6878      	ldr	r0, [r7, #4]
 800d8c4:	f7fe fdbd 	bl	800c442 <ModBUS_Check_tid>
 800d8c8:	4603      	mov	r3, r0
 800d8ca:	2b00      	cmp	r3, #0
 800d8cc:	d04f      	beq.n	800d96e <ModBUS+0x1362>
			{

				switch (m3->_MBUS_RCVD[7])
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	7e5b      	ldrb	r3, [r3, #25]
 800d8d2:	2b03      	cmp	r3, #3
 800d8d4:	d143      	bne.n	800d95e <ModBUS+0x1352>
				{
					case 0x03: // Si el comando fue un ReadHoldingRegisters
					{
						uint16_t start_address = 0;
 800d8d6:	2300      	movs	r3, #0
 800d8d8:	87fb      	strh	r3, [r7, #62]	; 0x3e
						uint8_t qty=0;
 800d8da:	2300      	movs	r3, #0
 800d8dc:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

						start_address = m3->_MBUS_2SND[8];
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	f893 3220 	ldrb.w	r3, [r3, #544]	; 0x220
 800d8e6:	87fb      	strh	r3, [r7, #62]	; 0x3e
						start_address = start_address << 8 ;
 800d8e8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800d8ea:	021b      	lsls	r3, r3, #8
 800d8ec:	87fb      	strh	r3, [r7, #62]	; 0x3e
						start_address |= m3->_MBUS_2SND[9];
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	f893 3221 	ldrb.w	r3, [r3, #545]	; 0x221
 800d8f4:	b29a      	uxth	r2, r3
 800d8f6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800d8f8:	4313      	orrs	r3, r2
 800d8fa:	87fb      	strh	r3, [r7, #62]	; 0x3e

						qty = m3->_MBUS_2SND[11];
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	f893 3223 	ldrb.w	r3, [r3, #547]	; 0x223
 800d902:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

						for (int i=0;i< qty; i++)
 800d906:	2300      	movs	r3, #0
 800d908:	643b      	str	r3, [r7, #64]	; 0x40
 800d90a:	e022      	b.n	800d952 <ModBUS+0x1346>
						{
							m3->_Holding_Registers[(start_address*2)+(2*i)]=m3->_MBUS_RCVD[9+2*i];
 800d90c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d90e:	005b      	lsls	r3, r3, #1
 800d910:	f103 0209 	add.w	r2, r3, #9
 800d914:	8ff9      	ldrh	r1, [r7, #62]	; 0x3e
 800d916:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d918:	440b      	add	r3, r1
 800d91a:	005b      	lsls	r3, r3, #1
 800d91c:	6879      	ldr	r1, [r7, #4]
 800d91e:	440a      	add	r2, r1
 800d920:	7c91      	ldrb	r1, [r2, #18]
 800d922:	687a      	ldr	r2, [r7, #4]
 800d924:	4413      	add	r3, r2
 800d926:	460a      	mov	r2, r1
 800d928:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
							m3->_Holding_Registers[(start_address*2)+(2*i) + 1]=m3->_MBUS_RCVD[10+2*i];
 800d92c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d92e:	3305      	adds	r3, #5
 800d930:	005a      	lsls	r2, r3, #1
 800d932:	8ff9      	ldrh	r1, [r7, #62]	; 0x3e
 800d934:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d936:	440b      	add	r3, r1
 800d938:	005b      	lsls	r3, r3, #1
 800d93a:	3301      	adds	r3, #1
 800d93c:	6879      	ldr	r1, [r7, #4]
 800d93e:	440a      	add	r2, r1
 800d940:	7c91      	ldrb	r1, [r2, #18]
 800d942:	687a      	ldr	r2, [r7, #4]
 800d944:	4413      	add	r3, r2
 800d946:	460a      	mov	r2, r1
 800d948:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
						for (int i=0;i< qty; i++)
 800d94c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d94e:	3301      	adds	r3, #1
 800d950:	643b      	str	r3, [r7, #64]	; 0x40
 800d952:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800d956:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d958:	429a      	cmp	r2, r3
 800d95a:	dbd7      	blt.n	800d90c <ModBUS+0x1300>

						}


					}
					break;
 800d95c:	bf00      	nop
					}
				}



				int qty = m3->_MBUS_RCVD[5]-m3->_MBUS_RCVD[8];
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	7ddb      	ldrb	r3, [r3, #23]
 800d962:	461a      	mov	r2, r3
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	7e9b      	ldrb	r3, [r3, #26]
 800d968:	1ad3      	subs	r3, r2, r3
 800d96a:	63bb      	str	r3, [r7, #56]	; 0x38
 800d96c:	e034      	b.n	800d9d8 <ModBUS+0x13cc>

			}
			else
			{
				switch(m3->_MBUS_RCVD[7])
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	7e5b      	ldrb	r3, [r3, #25]
 800d972:	3b81      	subs	r3, #129	; 0x81
 800d974:	2b15      	cmp	r3, #21
 800d976:	d82f      	bhi.n	800d9d8 <ModBUS+0x13cc>
 800d978:	a201      	add	r2, pc, #4	; (adr r2, 800d980 <ModBUS+0x1374>)
 800d97a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d97e:	bf00      	nop
 800d980:	0800d9d9 	.word	0x0800d9d9
 800d984:	0800d9d9 	.word	0x0800d9d9
 800d988:	0800d9d9 	.word	0x0800d9d9
 800d98c:	0800d9d9 	.word	0x0800d9d9
 800d990:	0800d9d9 	.word	0x0800d9d9
 800d994:	0800d9d9 	.word	0x0800d9d9
 800d998:	0800d9d9 	.word	0x0800d9d9
 800d99c:	0800d9d9 	.word	0x0800d9d9
 800d9a0:	0800d9d9 	.word	0x0800d9d9
 800d9a4:	0800d9d9 	.word	0x0800d9d9
 800d9a8:	0800d9d9 	.word	0x0800d9d9
 800d9ac:	0800d9d9 	.word	0x0800d9d9
 800d9b0:	0800d9d9 	.word	0x0800d9d9
 800d9b4:	0800d9d9 	.word	0x0800d9d9
 800d9b8:	0800d9d9 	.word	0x0800d9d9
 800d9bc:	0800d9d9 	.word	0x0800d9d9
 800d9c0:	0800d9d9 	.word	0x0800d9d9
 800d9c4:	0800d9d9 	.word	0x0800d9d9
 800d9c8:	0800d9d9 	.word	0x0800d9d9
 800d9cc:	0800d9d9 	.word	0x0800d9d9
 800d9d0:	0800d9d9 	.word	0x0800d9d9
 800d9d4:	0800d9d9 	.word	0x0800d9d9
			}
		}
	}


}
 800d9d8:	4618      	mov	r0, r3
 800d9da:	3770      	adds	r7, #112	; 0x70
 800d9dc:	46bd      	mov	sp, r7
 800d9de:	bd80      	pop	{r7, pc}

0800d9e0 <SPI_ETH>:

#include "ETH_W5100.h"


uint8_t  SPI_ETH(struct  W5100_SPI * x )
{
 800d9e0:	b580      	push	{r7, lr}
 800d9e2:	b084      	sub	sp, #16
 800d9e4:	af02      	add	r7, sp, #8
 800d9e6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(x->NSS_PORT, x->NSS_PIN , GPIO_PIN_RESET);				// NSS LOW
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	6858      	ldr	r0, [r3, #4]
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	891b      	ldrh	r3, [r3, #8]
 800d9f0:	2200      	movs	r2, #0
 800d9f2:	4619      	mov	r1, r3
 800d9f4:	f7f5 fde6 	bl	80035c4 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(x->SPI, x->TX , x->RX, 4, 100);						//SPI COMM
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	6818      	ldr	r0, [r3, #0]
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	f103 0114 	add.w	r1, r3, #20
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	f103 0218 	add.w	r2, r3, #24
 800da08:	2364      	movs	r3, #100	; 0x64
 800da0a:	9300      	str	r3, [sp, #0]
 800da0c:	2304      	movs	r3, #4
 800da0e:	f7f6 faee 	bl	8003fee <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(x->NSS_PORT, x->NSS_PIN , GPIO_PIN_SET);			//NSS HIGH
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	6858      	ldr	r0, [r3, #4]
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	891b      	ldrh	r3, [r3, #8]
 800da1a:	2201      	movs	r2, #1
 800da1c:	4619      	mov	r1, r3
 800da1e:	f7f5 fdd1 	bl	80035c4 <HAL_GPIO_WritePin>
	return (x->RX[3]);
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	7edb      	ldrb	r3, [r3, #27]
}
 800da26:	4618      	mov	r0, r3
 800da28:	3708      	adds	r7, #8
 800da2a:	46bd      	mov	sp, r7
 800da2c:	bd80      	pop	{r7, pc}

0800da2e <SPI_ETH_REG>:

uint16_t SPI_ETH_REG(struct W5100_SPI * x, uint8_t addrh, uint8_t addrl, uint8_t op, uint8_t * data, uint8_t lnght)
{
 800da2e:	b580      	push	{r7, lr}
 800da30:	b086      	sub	sp, #24
 800da32:	af00      	add	r7, sp, #0
 800da34:	6078      	str	r0, [r7, #4]
 800da36:	4608      	mov	r0, r1
 800da38:	4611      	mov	r1, r2
 800da3a:	461a      	mov	r2, r3
 800da3c:	4603      	mov	r3, r0
 800da3e:	70fb      	strb	r3, [r7, #3]
 800da40:	460b      	mov	r3, r1
 800da42:	70bb      	strb	r3, [r7, #2]
 800da44:	4613      	mov	r3, r2
 800da46:	707b      	strb	r3, [r7, #1]
 uint16_t res=0;
 800da48:	2300      	movs	r3, #0
 800da4a:	82fb      	strh	r3, [r7, #22]

 x->TX[0]= op; //asigno lectura o escritura
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	787a      	ldrb	r2, [r7, #1]
 800da50:	751a      	strb	r2, [r3, #20]
 x->TX[1]= addrh;
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	78fa      	ldrb	r2, [r7, #3]
 800da56:	755a      	strb	r2, [r3, #21]
 x->TX[2]= addrl;
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	78ba      	ldrb	r2, [r7, #2]
 800da5c:	759a      	strb	r2, [r3, #22]
 x->TX[3]=0x00;
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	2200      	movs	r2, #0
 800da62:	75da      	strb	r2, [r3, #23]
 if(op == SPI_WRITE)
 800da64:	787b      	ldrb	r3, [r7, #1]
 800da66:	2bf0      	cmp	r3, #240	; 0xf0
 800da68:	d11d      	bne.n	800daa6 <SPI_ETH_REG+0x78>
 {
	 for(int i=0; i<(lnght); i++)
 800da6a:	2300      	movs	r3, #0
 800da6c:	613b      	str	r3, [r7, #16]
 800da6e:	e013      	b.n	800da98 <SPI_ETH_REG+0x6a>
	 {
		x->TX[3]=data[i];
 800da70:	693b      	ldr	r3, [r7, #16]
 800da72:	6a3a      	ldr	r2, [r7, #32]
 800da74:	4413      	add	r3, r2
 800da76:	781a      	ldrb	r2, [r3, #0]
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	75da      	strb	r2, [r3, #23]
		res=SPI_ETH(x);
 800da7c:	6878      	ldr	r0, [r7, #4]
 800da7e:	f7ff ffaf 	bl	800d9e0 <SPI_ETH>
 800da82:	4603      	mov	r3, r0
 800da84:	82fb      	strh	r3, [r7, #22]
		x->TX[2]++;
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	7d9b      	ldrb	r3, [r3, #22]
 800da8a:	3301      	adds	r3, #1
 800da8c:	b2da      	uxtb	r2, r3
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	759a      	strb	r2, [r3, #22]
	 for(int i=0; i<(lnght); i++)
 800da92:	693b      	ldr	r3, [r7, #16]
 800da94:	3301      	adds	r3, #1
 800da96:	613b      	str	r3, [r7, #16]
 800da98:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800da9c:	693a      	ldr	r2, [r7, #16]
 800da9e:	429a      	cmp	r2, r3
 800daa0:	dbe6      	blt.n	800da70 <SPI_ETH_REG+0x42>
	 }
	 return(res);
 800daa2:	8afb      	ldrh	r3, [r7, #22]
 800daa4:	e037      	b.n	800db16 <SPI_ETH_REG+0xe8>
 }
	 if(op == SPI_READ)
 800daa6:	787b      	ldrb	r3, [r7, #1]
 800daa8:	2b0f      	cmp	r3, #15
 800daaa:	d134      	bne.n	800db16 <SPI_ETH_REG+0xe8>
	 {
		 x->TX[3]=0x00;
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	2200      	movs	r2, #0
 800dab0:	75da      	strb	r2, [r3, #23]
		 if (lnght==2)
 800dab2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800dab6:	2b02      	cmp	r3, #2
 800dab8:	d120      	bne.n	800dafc <SPI_ETH_REG+0xce>
		{
		for(int i=0; i<(lnght); i++)
 800daba:	2300      	movs	r3, #0
 800dabc:	60fb      	str	r3, [r7, #12]
 800dabe:	e016      	b.n	800daee <SPI_ETH_REG+0xc0>
			{
			res|=SPI_ETH(x);
 800dac0:	6878      	ldr	r0, [r7, #4]
 800dac2:	f7ff ff8d 	bl	800d9e0 <SPI_ETH>
 800dac6:	4603      	mov	r3, r0
 800dac8:	b29a      	uxth	r2, r3
 800daca:	8afb      	ldrh	r3, [r7, #22]
 800dacc:	4313      	orrs	r3, r2
 800dace:	82fb      	strh	r3, [r7, #22]
			x->TX[2]++;
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	7d9b      	ldrb	r3, [r3, #22]
 800dad4:	3301      	adds	r3, #1
 800dad6:	b2da      	uxtb	r2, r3
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	759a      	strb	r2, [r3, #22]
			if (i==0)res=res<<8;
 800dadc:	68fb      	ldr	r3, [r7, #12]
 800dade:	2b00      	cmp	r3, #0
 800dae0:	d102      	bne.n	800dae8 <SPI_ETH_REG+0xba>
 800dae2:	8afb      	ldrh	r3, [r7, #22]
 800dae4:	021b      	lsls	r3, r3, #8
 800dae6:	82fb      	strh	r3, [r7, #22]
		for(int i=0; i<(lnght); i++)
 800dae8:	68fb      	ldr	r3, [r7, #12]
 800daea:	3301      	adds	r3, #1
 800daec:	60fb      	str	r3, [r7, #12]
 800daee:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800daf2:	68fa      	ldr	r2, [r7, #12]
 800daf4:	429a      	cmp	r2, r3
 800daf6:	dbe3      	blt.n	800dac0 <SPI_ETH_REG+0x92>
			}
		 return(res);
 800daf8:	8afb      	ldrh	r3, [r7, #22]
 800dafa:	e00c      	b.n	800db16 <SPI_ETH_REG+0xe8>
		}else
		{
			res=SPI_ETH(x);
 800dafc:	6878      	ldr	r0, [r7, #4]
 800dafe:	f7ff ff6f 	bl	800d9e0 <SPI_ETH>
 800db02:	4603      	mov	r3, r0
 800db04:	82fb      	strh	r3, [r7, #22]
			x->TX[2]++;
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	7d9b      	ldrb	r3, [r3, #22]
 800db0a:	3301      	adds	r3, #1
 800db0c:	b2da      	uxtb	r2, r3
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	759a      	strb	r2, [r3, #22]
			return(res);
 800db12:	8afb      	ldrh	r3, [r7, #22]
 800db14:	e7ff      	b.n	800db16 <SPI_ETH_REG+0xe8>
		}
 	 }
}
 800db16:	4618      	mov	r0, r3
 800db18:	3718      	adds	r7, #24
 800db1a:	46bd      	mov	sp, r7
 800db1c:	bd80      	pop	{r7, pc}

0800db1e <SPI_ETH_WR_REG_16>:

uint16_t SPI_ETH_WR_REG_16(struct W5100_SPI * x, uint16_t addr, uint16_t  data)
{
 800db1e:	b580      	push	{r7, lr}
 800db20:	b086      	sub	sp, #24
 800db22:	af00      	add	r7, sp, #0
 800db24:	6078      	str	r0, [r7, #4]
 800db26:	460b      	mov	r3, r1
 800db28:	807b      	strh	r3, [r7, #2]
 800db2a:	4613      	mov	r3, r2
 800db2c:	803b      	strh	r3, [r7, #0]
 uint16_t res=0;
 800db2e:	2300      	movs	r3, #0
 800db30:	82fb      	strh	r3, [r7, #22]
 uint8_t num[2];

 x->TX[0]= SPI_WRITE; //asigno lectura o escritura
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	22f0      	movs	r2, #240	; 0xf0
 800db36:	751a      	strb	r2, [r3, #20]

 num[1] = data & 0x00FF ;
 800db38:	883b      	ldrh	r3, [r7, #0]
 800db3a:	b2db      	uxtb	r3, r3
 800db3c:	737b      	strb	r3, [r7, #13]
 num[0] = (data & 0xFF00)>>8 ;
 800db3e:	883b      	ldrh	r3, [r7, #0]
 800db40:	0a1b      	lsrs	r3, r3, #8
 800db42:	b29b      	uxth	r3, r3
 800db44:	b2db      	uxtb	r3, r3
 800db46:	733b      	strb	r3, [r7, #12]

	 for(int i=0; i<(2); i++)
 800db48:	2300      	movs	r3, #0
 800db4a:	613b      	str	r3, [r7, #16]
 800db4c:	e01b      	b.n	800db86 <SPI_ETH_WR_REG_16+0x68>
	 {
		x->TX[2]= addr & 0x00FF;
 800db4e:	887b      	ldrh	r3, [r7, #2]
 800db50:	b2da      	uxtb	r2, r3
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	759a      	strb	r2, [r3, #22]
		x->TX[1]=(addr & 0xFF00)>>8;
 800db56:	887b      	ldrh	r3, [r7, #2]
 800db58:	0a1b      	lsrs	r3, r3, #8
 800db5a:	b29b      	uxth	r3, r3
 800db5c:	b2da      	uxtb	r2, r3
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	755a      	strb	r2, [r3, #21]
		addr++;
 800db62:	887b      	ldrh	r3, [r7, #2]
 800db64:	3301      	adds	r3, #1
 800db66:	807b      	strh	r3, [r7, #2]
		x->TX[3]=num[i];
 800db68:	f107 020c 	add.w	r2, r7, #12
 800db6c:	693b      	ldr	r3, [r7, #16]
 800db6e:	4413      	add	r3, r2
 800db70:	781a      	ldrb	r2, [r3, #0]
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	75da      	strb	r2, [r3, #23]
		res=SPI_ETH(x);
 800db76:	6878      	ldr	r0, [r7, #4]
 800db78:	f7ff ff32 	bl	800d9e0 <SPI_ETH>
 800db7c:	4603      	mov	r3, r0
 800db7e:	82fb      	strh	r3, [r7, #22]
	 for(int i=0; i<(2); i++)
 800db80:	693b      	ldr	r3, [r7, #16]
 800db82:	3301      	adds	r3, #1
 800db84:	613b      	str	r3, [r7, #16]
 800db86:	693b      	ldr	r3, [r7, #16]
 800db88:	2b01      	cmp	r3, #1
 800db8a:	dde0      	ble.n	800db4e <SPI_ETH_WR_REG_16+0x30>
	 }
	 return(res);
 800db8c:	8afb      	ldrh	r3, [r7, #22]
}
 800db8e:	4618      	mov	r0, r3
 800db90:	3718      	adds	r7, #24
 800db92:	46bd      	mov	sp, r7
 800db94:	bd80      	pop	{r7, pc}

0800db96 <SPI_ETH_RD_RCV_REG_16>:
	return(1);
	}
}

uint16_t SPI_ETH_RD_RCV_REG_16(struct W5100_SPI * x, uint16_t addr, uint8_t * data, uint16_t offset, uint16_t lnght )
{
 800db96:	b590      	push	{r4, r7, lr}
 800db98:	b087      	sub	sp, #28
 800db9a:	af00      	add	r7, sp, #0
 800db9c:	60f8      	str	r0, [r7, #12]
 800db9e:	607a      	str	r2, [r7, #4]
 800dba0:	461a      	mov	r2, r3
 800dba2:	460b      	mov	r3, r1
 800dba4:	817b      	strh	r3, [r7, #10]
 800dba6:	4613      	mov	r3, r2
 800dba8:	813b      	strh	r3, [r7, #8]
	x->TX[0]=0x0F; //read operation
 800dbaa:	68fb      	ldr	r3, [r7, #12]
 800dbac:	220f      	movs	r2, #15
 800dbae:	751a      	strb	r2, [r3, #20]
	if(lnght < 2048)
 800dbb0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800dbb2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800dbb6:	d226      	bcs.n	800dc06 <SPI_ETH_RD_RCV_REG_16+0x70>
	{
			x->TX[3]=0x00;
 800dbb8:	68fb      	ldr	r3, [r7, #12]
 800dbba:	2200      	movs	r2, #0
 800dbbc:	75da      	strb	r2, [r3, #23]
			for(int i=0; i<(lnght); i++)
 800dbbe:	2300      	movs	r3, #0
 800dbc0:	617b      	str	r3, [r7, #20]
 800dbc2:	e01a      	b.n	800dbfa <SPI_ETH_RD_RCV_REG_16+0x64>
				{
				x->TX[2] = addr & 0x00FF;
 800dbc4:	897b      	ldrh	r3, [r7, #10]
 800dbc6:	b2da      	uxtb	r2, r3
 800dbc8:	68fb      	ldr	r3, [r7, #12]
 800dbca:	759a      	strb	r2, [r3, #22]
				x->TX[1] = (addr & 0xFF00)>>8;
 800dbcc:	897b      	ldrh	r3, [r7, #10]
 800dbce:	0a1b      	lsrs	r3, r3, #8
 800dbd0:	b29b      	uxth	r3, r3
 800dbd2:	b2da      	uxtb	r2, r3
 800dbd4:	68fb      	ldr	r3, [r7, #12]
 800dbd6:	755a      	strb	r2, [r3, #21]
				data[i+offset]=SPI_ETH(x);
 800dbd8:	893a      	ldrh	r2, [r7, #8]
 800dbda:	697b      	ldr	r3, [r7, #20]
 800dbdc:	4413      	add	r3, r2
 800dbde:	461a      	mov	r2, r3
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	189c      	adds	r4, r3, r2
 800dbe4:	68f8      	ldr	r0, [r7, #12]
 800dbe6:	f7ff fefb 	bl	800d9e0 <SPI_ETH>
 800dbea:	4603      	mov	r3, r0
 800dbec:	7023      	strb	r3, [r4, #0]
				addr++;
 800dbee:	897b      	ldrh	r3, [r7, #10]
 800dbf0:	3301      	adds	r3, #1
 800dbf2:	817b      	strh	r3, [r7, #10]
			for(int i=0; i<(lnght); i++)
 800dbf4:	697b      	ldr	r3, [r7, #20]
 800dbf6:	3301      	adds	r3, #1
 800dbf8:	617b      	str	r3, [r7, #20]
 800dbfa:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800dbfc:	697a      	ldr	r2, [r7, #20]
 800dbfe:	429a      	cmp	r2, r3
 800dc00:	dbe0      	blt.n	800dbc4 <SPI_ETH_RD_RCV_REG_16+0x2e>
				}
		return (0); //Retorno la dirección del puntero a la memoria
 800dc02:	2300      	movs	r3, #0
 800dc04:	e000      	b.n	800dc08 <SPI_ETH_RD_RCV_REG_16+0x72>
	}
	else
	{
	return(1);
 800dc06:	2301      	movs	r3, #1
	}
}
 800dc08:	4618      	mov	r0, r3
 800dc0a:	371c      	adds	r7, #28
 800dc0c:	46bd      	mov	sp, r7
 800dc0e:	bd90      	pop	{r4, r7, pc}

0800dc10 <SPI_ETH_WR_TX_REG_16>:

uint16_t SPI_ETH_WR_TX_REG_16(struct W5100_SPI * x, uint16_t addr, uint8_t * data, uint16_t offset, uint16_t lnght )
{
 800dc10:	b580      	push	{r7, lr}
 800dc12:	b086      	sub	sp, #24
 800dc14:	af00      	add	r7, sp, #0
 800dc16:	60f8      	str	r0, [r7, #12]
 800dc18:	607a      	str	r2, [r7, #4]
 800dc1a:	461a      	mov	r2, r3
 800dc1c:	460b      	mov	r3, r1
 800dc1e:	817b      	strh	r3, [r7, #10]
 800dc20:	4613      	mov	r3, r2
 800dc22:	813b      	strh	r3, [r7, #8]
	x->TX[0]=0xF0; //write operation
 800dc24:	68fb      	ldr	r3, [r7, #12]
 800dc26:	22f0      	movs	r2, #240	; 0xf0
 800dc28:	751a      	strb	r2, [r3, #20]
	if(lnght < 2048)
 800dc2a:	8c3b      	ldrh	r3, [r7, #32]
 800dc2c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800dc30:	d223      	bcs.n	800dc7a <SPI_ETH_WR_TX_REG_16+0x6a>
	{

			for(int i=0; i<(lnght); i++)
 800dc32:	2300      	movs	r3, #0
 800dc34:	617b      	str	r3, [r7, #20]
 800dc36:	e01a      	b.n	800dc6e <SPI_ETH_WR_TX_REG_16+0x5e>
				{
				x->TX[2] = addr & 0x00FF;
 800dc38:	897b      	ldrh	r3, [r7, #10]
 800dc3a:	b2da      	uxtb	r2, r3
 800dc3c:	68fb      	ldr	r3, [r7, #12]
 800dc3e:	759a      	strb	r2, [r3, #22]
				x->TX[1] = (addr & 0xFF00)>>8;
 800dc40:	897b      	ldrh	r3, [r7, #10]
 800dc42:	0a1b      	lsrs	r3, r3, #8
 800dc44:	b29b      	uxth	r3, r3
 800dc46:	b2da      	uxtb	r2, r3
 800dc48:	68fb      	ldr	r3, [r7, #12]
 800dc4a:	755a      	strb	r2, [r3, #21]
				x->TX[3]= x->data[i+offset];
 800dc4c:	893a      	ldrh	r2, [r7, #8]
 800dc4e:	697b      	ldr	r3, [r7, #20]
 800dc50:	4413      	add	r3, r2
 800dc52:	68fa      	ldr	r2, [r7, #12]
 800dc54:	4413      	add	r3, r2
 800dc56:	7f1a      	ldrb	r2, [r3, #28]
 800dc58:	68fb      	ldr	r3, [r7, #12]
 800dc5a:	75da      	strb	r2, [r3, #23]
				SPI_ETH(x);
 800dc5c:	68f8      	ldr	r0, [r7, #12]
 800dc5e:	f7ff febf 	bl	800d9e0 <SPI_ETH>
				addr++;
 800dc62:	897b      	ldrh	r3, [r7, #10]
 800dc64:	3301      	adds	r3, #1
 800dc66:	817b      	strh	r3, [r7, #10]
			for(int i=0; i<(lnght); i++)
 800dc68:	697b      	ldr	r3, [r7, #20]
 800dc6a:	3301      	adds	r3, #1
 800dc6c:	617b      	str	r3, [r7, #20]
 800dc6e:	8c3b      	ldrh	r3, [r7, #32]
 800dc70:	697a      	ldr	r2, [r7, #20]
 800dc72:	429a      	cmp	r2, r3
 800dc74:	dbe0      	blt.n	800dc38 <SPI_ETH_WR_TX_REG_16+0x28>
				}
		return (0); //Retorno la dirección del puntero a la memoria
 800dc76:	2300      	movs	r3, #0
 800dc78:	e000      	b.n	800dc7c <SPI_ETH_WR_TX_REG_16+0x6c>
	}
	else
	{
	return(1);
 800dc7a:	2301      	movs	r3, #1
	}
}
 800dc7c:	4618      	mov	r0, r3
 800dc7e:	3718      	adds	r7, #24
 800dc80:	46bd      	mov	sp, r7
 800dc82:	bd80      	pop	{r7, pc}

0800dc84 <eth_wr_SOCKET_CMD>:

eth_wr_SOCKET_CMD(struct  W5100_SPI * y, uint8_t s, uint8_t z)
{
 800dc84:	b580      	push	{r7, lr}
 800dc86:	b082      	sub	sp, #8
 800dc88:	af00      	add	r7, sp, #0
 800dc8a:	6078      	str	r0, [r7, #4]
 800dc8c:	460b      	mov	r3, r1
 800dc8e:	70fb      	strb	r3, [r7, #3]
 800dc90:	4613      	mov	r3, r2
 800dc92:	70bb      	strb	r3, [r7, #2]
	y->TX[0]= SPI_WRITE ;
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	22f0      	movs	r2, #240	; 0xf0
 800dc98:	751a      	strb	r2, [r3, #20]
	y->TX[1]= S0_CR_ADDR_BASEH + s;
 800dc9a:	78fb      	ldrb	r3, [r7, #3]
 800dc9c:	3304      	adds	r3, #4
 800dc9e:	b2da      	uxtb	r2, r3
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	755a      	strb	r2, [r3, #21]
	y->TX[2]= S0_CR_ADDR_BASEL ;
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	2201      	movs	r2, #1
 800dca8:	759a      	strb	r2, [r3, #22]
	y->TX[3]= z ;		//Lo carga en la info a enviar
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	78ba      	ldrb	r2, [r7, #2]
 800dcae:	75da      	strb	r2, [r3, #23]
	SPI_ETH(y);
 800dcb0:	6878      	ldr	r0, [r7, #4]
 800dcb2:	f7ff fe95 	bl	800d9e0 <SPI_ETH>
}
 800dcb6:	bf00      	nop
 800dcb8:	4618      	mov	r0, r3
 800dcba:	3708      	adds	r7, #8
 800dcbc:	46bd      	mov	sp, r7
 800dcbe:	bd80      	pop	{r7, pc}

0800dcc0 <eth_wr_SOCKET_MODE>:

eth_wr_SOCKET_MODE(struct  W5100_SPI * y, uint8_t s, uint8_t z)
{
 800dcc0:	b580      	push	{r7, lr}
 800dcc2:	b082      	sub	sp, #8
 800dcc4:	af00      	add	r7, sp, #0
 800dcc6:	6078      	str	r0, [r7, #4]
 800dcc8:	460b      	mov	r3, r1
 800dcca:	70fb      	strb	r3, [r7, #3]
 800dccc:	4613      	mov	r3, r2
 800dcce:	70bb      	strb	r3, [r7, #2]
	y->TX[0]= SPI_WRITE ;
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	22f0      	movs	r2, #240	; 0xf0
 800dcd4:	751a      	strb	r2, [r3, #20]
	y->TX[1]= S0_MR_ADDR_BASEH + s;
 800dcd6:	78fb      	ldrb	r3, [r7, #3]
 800dcd8:	3304      	adds	r3, #4
 800dcda:	b2da      	uxtb	r2, r3
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	755a      	strb	r2, [r3, #21]
	y->TX[2]= S0_MR_ADDR_BASEL ;
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	2200      	movs	r2, #0
 800dce4:	759a      	strb	r2, [r3, #22]
	y->TX[3]= z ;		//Lo carga en la info a enviar
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	78ba      	ldrb	r2, [r7, #2]
 800dcea:	75da      	strb	r2, [r3, #23]
	SPI_ETH(y);
 800dcec:	6878      	ldr	r0, [r7, #4]
 800dcee:	f7ff fe77 	bl	800d9e0 <SPI_ETH>
}
 800dcf2:	bf00      	nop
 800dcf4:	4618      	mov	r0, r3
 800dcf6:	3708      	adds	r7, #8
 800dcf8:	46bd      	mov	sp, r7
 800dcfa:	bd80      	pop	{r7, pc}

0800dcfc <eth_init>:


uint8_t eth_init(struct W5100_SPI * ETH)
{
 800dcfc:	b580      	push	{r7, lr}
 800dcfe:	b084      	sub	sp, #16
 800dd00:	af02      	add	r7, sp, #8
 800dd02:	6078      	str	r0, [r7, #4]
	 SPI_ETH_REG(ETH, GAR_ADDR_BASEH,GAR_ADDR_BASEL,SPI_WRITE, ETH->GAR,4);													//same for server and client
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dd0a:	331c      	adds	r3, #28
 800dd0c:	2204      	movs	r2, #4
 800dd0e:	9201      	str	r2, [sp, #4]
 800dd10:	9300      	str	r3, [sp, #0]
 800dd12:	23f0      	movs	r3, #240	; 0xf0
 800dd14:	2201      	movs	r2, #1
 800dd16:	2100      	movs	r1, #0
 800dd18:	6878      	ldr	r0, [r7, #4]
 800dd1a:	f7ff fe88 	bl	800da2e <SPI_ETH_REG>
	 // ITM0_Write("\r\nETH-W5100-GATEWAY SET\r\n",strlen("\r\nETH-W5100-GATEWAY SET\r\n"));									//same for server and client
	 SPI_ETH_REG(ETH, SUBR_ADDR_BASEH,SUBR_ADDR_BASEL,SPI_WRITE, ETH->SUBR,4);												//same for server and client
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800dd24:	2204      	movs	r2, #4
 800dd26:	9201      	str	r2, [sp, #4]
 800dd28:	9300      	str	r3, [sp, #0]
 800dd2a:	23f0      	movs	r3, #240	; 0xf0
 800dd2c:	2205      	movs	r2, #5
 800dd2e:	2100      	movs	r1, #0
 800dd30:	6878      	ldr	r0, [r7, #4]
 800dd32:	f7ff fe7c 	bl	800da2e <SPI_ETH_REG>
	 //ITM0_Write("\r\nETH-W5100-SUBNET SET\r\n",strlen("\r\nETH-W5100-SUBNET SET"));											//same for server and client
	 SPI_ETH_REG(ETH, SHAR_ADDR_BASEH,SHAR_ADDR_BASEL,SPI_WRITE, ETH->SHAR,6);												//same for server and client
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800dd3c:	3304      	adds	r3, #4
 800dd3e:	2206      	movs	r2, #6
 800dd40:	9201      	str	r2, [sp, #4]
 800dd42:	9300      	str	r3, [sp, #0]
 800dd44:	23f0      	movs	r3, #240	; 0xf0
 800dd46:	2209      	movs	r2, #9
 800dd48:	2100      	movs	r1, #0
 800dd4a:	6878      	ldr	r0, [r7, #4]
 800dd4c:	f7ff fe6f 	bl	800da2e <SPI_ETH_REG>
	 //ITM0_Write("\r\nETH-W5100-MAC SET\r\n",strlen("\r\nETH-W5100-MAC SET"));												//same for server and client
	 SPI_ETH_REG(ETH, SIPR_ADDR_BASEH,SIPR_ADDR_BASEL,SPI_WRITE, ETH->SIPR,4);												//same for server and client
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800dd56:	330a      	adds	r3, #10
 800dd58:	2204      	movs	r2, #4
 800dd5a:	9201      	str	r2, [sp, #4]
 800dd5c:	9300      	str	r3, [sp, #0]
 800dd5e:	23f0      	movs	r3, #240	; 0xf0
 800dd60:	220f      	movs	r2, #15
 800dd62:	2100      	movs	r1, #0
 800dd64:	6878      	ldr	r0, [r7, #4]
 800dd66:	f7ff fe62 	bl	800da2e <SPI_ETH_REG>
	 //ITM0_Write("\r\nETH-W5100-IP SET\r\n",strlen("\r\nETH-W5100-IP SET"));													//same for server and client
	 SPI_ETH_REG(ETH, RMSR_ADDR_BASEH,RMSR_ADDR_BASEL,SPI_WRITE, &ETH->RMSR,1);												//same for server and client
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800dd70:	330e      	adds	r3, #14
 800dd72:	2201      	movs	r2, #1
 800dd74:	9201      	str	r2, [sp, #4]
 800dd76:	9300      	str	r3, [sp, #0]
 800dd78:	23f0      	movs	r3, #240	; 0xf0
 800dd7a:	221a      	movs	r2, #26
 800dd7c:	2100      	movs	r1, #0
 800dd7e:	6878      	ldr	r0, [r7, #4]
 800dd80:	f7ff fe55 	bl	800da2e <SPI_ETH_REG>
	 //ITM0_Write("\r\nETH-W5100-DEFINE SOCKET RX MEMORY 2K\r\n",strlen("\r\nETH-W5100-DEFINE SOCKET RX MEMORY 2K\r\n")); 	//same for server and client
	 SPI_ETH_REG(ETH, TMSR_ADDR_BASEH,TMSR_ADDR_BASEL,SPI_WRITE, &ETH->TMSR,1);												//same for server and client
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800dd8a:	330f      	adds	r3, #15
 800dd8c:	2201      	movs	r2, #1
 800dd8e:	9201      	str	r2, [sp, #4]
 800dd90:	9300      	str	r3, [sp, #0]
 800dd92:	23f0      	movs	r3, #240	; 0xf0
 800dd94:	221b      	movs	r2, #27
 800dd96:	2100      	movs	r1, #0
 800dd98:	6878      	ldr	r0, [r7, #4]
 800dd9a:	f7ff fe48 	bl	800da2e <SPI_ETH_REG>
	 //ITM0_Write("\r\nETH-W5100-DEFINE SOCKET TX MEMORY 2K\r\n",strlen("\r\nETH-W5100-DEFINE SOCKET TX MEMORY 2K\r\n"));		//same for server and client

}
 800dd9e:	bf00      	nop
 800dda0:	4618      	mov	r0, r3
 800dda2:	3708      	adds	r7, #8
 800dda4:	46bd      	mov	sp, r7
 800dda6:	bd80      	pop	{r7, pc}

0800dda8 <eth_socket_init>:

uint8_t eth_socket_init(struct W5100_SPI * ETH, uint8_t socket)
{
 800dda8:	b580      	push	{r7, lr}
 800ddaa:	b084      	sub	sp, #16
 800ddac:	af02      	add	r7, sp, #8
 800ddae:	6078      	str	r0, [r7, #4]
 800ddb0:	460b      	mov	r3, r1
 800ddb2:	70fb      	strb	r3, [r7, #3]
	 eth_wr_SOCKET_MODE(ETH,socket, MODE_TCP);																				//same for server and client
 800ddb4:	78fb      	ldrb	r3, [r7, #3]
 800ddb6:	2201      	movs	r2, #1
 800ddb8:	4619      	mov	r1, r3
 800ddba:	6878      	ldr	r0, [r7, #4]
 800ddbc:	f7ff ff80 	bl	800dcc0 <eth_wr_SOCKET_MODE>
	 //ITM0_Write("\r\nETH-W5100-SOCK0 TCP SET\r\n",strlen("\r\nETH-W5100-SOCK0 TCP SET"));									//same for server and client
	 SPI_ETH_REG(ETH, S0_PORT_ADDR_BASELH,S0_PORT_ADDR_BASELL,SPI_WRITE, ETH->S0_PORT,2);									//same for server and client
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800ddc6:	331a      	adds	r3, #26
 800ddc8:	2202      	movs	r2, #2
 800ddca:	9201      	str	r2, [sp, #4]
 800ddcc:	9300      	str	r3, [sp, #0]
 800ddce:	23f0      	movs	r3, #240	; 0xf0
 800ddd0:	2204      	movs	r2, #4
 800ddd2:	2104      	movs	r1, #4
 800ddd4:	6878      	ldr	r0, [r7, #4]
 800ddd6:	f7ff fe2a 	bl	800da2e <SPI_ETH_REG>

	 //ITM0_Write("\r\nETH-W5100-SOCK0 TCP REMOTE IP TO CONNECT\r\n",strlen("\r\nETH-W5100-SOCK0 TCP REMOTE IP TO CONNECT\r\n"));									// client
	 SPI_ETH_REG(ETH, 0x04,0x0C,SPI_WRITE, ETH->S0_DIPR,4);									// client
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800dde0:	331c      	adds	r3, #28
 800dde2:	2204      	movs	r2, #4
 800dde4:	9201      	str	r2, [sp, #4]
 800dde6:	9300      	str	r3, [sp, #0]
 800dde8:	23f0      	movs	r3, #240	; 0xf0
 800ddea:	220c      	movs	r2, #12
 800ddec:	2104      	movs	r1, #4
 800ddee:	6878      	ldr	r0, [r7, #4]
 800ddf0:	f7ff fe1d 	bl	800da2e <SPI_ETH_REG>
	 //ITM0_Write("\r\nETH-W5100-SOCK0 TCP REMOTE PORT TO CONNECT\r\n",strlen("\r\nETH-W5100-SOCK0 TCP REMOTE PORT TO CONNECT\r\n"));									// client
	 SPI_ETH_REG(ETH, 0x04,0x10,SPI_WRITE, ETH->S0_DPORT,2);									// client
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800ddfa:	2202      	movs	r2, #2
 800ddfc:	9201      	str	r2, [sp, #4]
 800ddfe:	9300      	str	r3, [sp, #0]
 800de00:	23f0      	movs	r3, #240	; 0xf0
 800de02:	2210      	movs	r2, #16
 800de04:	2104      	movs	r1, #4
 800de06:	6878      	ldr	r0, [r7, #4]
 800de08:	f7ff fe11 	bl	800da2e <SPI_ETH_REG>


	 //ITM0_Write("\r\nETH-W5100-SOCK0 TCP PORT SET\r\n",strlen("\r\nETH-W5100-SOCK0 TCP PORT SET\r\n"));						//same for server and client
	 eth_wr_SOCKET_CMD(ETH,socket, OPEN);																					//same for server and client
 800de0c:	78fb      	ldrb	r3, [r7, #3]
 800de0e:	2201      	movs	r2, #1
 800de10:	4619      	mov	r1, r3
 800de12:	6878      	ldr	r0, [r7, #4]
 800de14:	f7ff ff36 	bl	800dc84 <eth_wr_SOCKET_CMD>
	 //ITM0_Write("\r\nETH-W5100-OPEN SOCKET\r\n",strlen("\r\nETH-W5100-OPEN SOCKET\r\n"));									//same for server and client

	 if(ETH->S0_ENserver == 1)
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800de1e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800de22:	2b01      	cmp	r3, #1
 800de24:	d106      	bne.n	800de34 <eth_socket_init+0x8c>
	 {
		 eth_wr_SOCKET_CMD(ETH,socket, LISTEN);																				//only for server
 800de26:	78fb      	ldrb	r3, [r7, #3]
 800de28:	2202      	movs	r2, #2
 800de2a:	4619      	mov	r1, r3
 800de2c:	6878      	ldr	r0, [r7, #4]
 800de2e:	f7ff ff29 	bl	800dc84 <eth_wr_SOCKET_CMD>
 800de32:	e009      	b.n	800de48 <eth_socket_init+0xa0>
		 //ITM0_Write("\r\nETH-W5100-LISTEN SOCKET\r\n",strlen("\r\nETH-W5100-LISTEN SOCKET\r\n"));							//only for server
	 }
	 else
	 {

		 	 eth_wr_SOCKET_CMD(ETH,socket, CONNECT);																				//only for server
 800de34:	78fb      	ldrb	r3, [r7, #3]
 800de36:	2204      	movs	r2, #4
 800de38:	4619      	mov	r1, r3
 800de3a:	6878      	ldr	r0, [r7, #4]
 800de3c:	f7ff ff22 	bl	800dc84 <eth_wr_SOCKET_CMD>
			 ITM0_Write("\r\nETH-W5100-CONNECT\r\n",strlen("\r\nETH-W5100-CONNECT\r\n"));											//only fir server
 800de40:	2115      	movs	r1, #21
 800de42:	4804      	ldr	r0, [pc, #16]	; (800de54 <eth_socket_init+0xac>)
 800de44:	f7f3 fbf8 	bl	8001638 <ITM0_Write>
	 }
}
 800de48:	bf00      	nop
 800de4a:	4618      	mov	r0, r3
 800de4c:	3708      	adds	r7, #8
 800de4e:	46bd      	mov	sp, r7
 800de50:	bd80      	pop	{r7, pc}
 800de52:	bf00      	nop
 800de54:	080106e8 	.word	0x080106e8

0800de58 <eth_rd_SOCKET_STAT>:

uint8_t eth_rd_SOCKET_STAT(struct  W5100_SPI * y, uint8_t socket)
{
 800de58:	b580      	push	{r7, lr}
 800de5a:	b082      	sub	sp, #8
 800de5c:	af00      	add	r7, sp, #0
 800de5e:	6078      	str	r0, [r7, #4]
 800de60:	460b      	mov	r3, r1
 800de62:	70fb      	strb	r3, [r7, #3]
	y->TX[0]= SPI_READ;
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	220f      	movs	r2, #15
 800de68:	751a      	strb	r2, [r3, #20]
	y->TX[1]=  S0_SR_ADDR_BASEH + socket;
 800de6a:	78fb      	ldrb	r3, [r7, #3]
 800de6c:	3304      	adds	r3, #4
 800de6e:	b2da      	uxtb	r2, r3
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	755a      	strb	r2, [r3, #21]
	y->TX[2]=  S0_SR_ADDR_BASEL ;
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	2203      	movs	r2, #3
 800de78:	759a      	strb	r2, [r3, #22]
	y->TX[3]= 0 ;		//Lo carga en la info a enviar
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	2200      	movs	r2, #0
 800de7e:	75da      	strb	r2, [r3, #23]
	SPI_ETH(y);
 800de80:	6878      	ldr	r0, [r7, #4]
 800de82:	f7ff fdad 	bl	800d9e0 <SPI_ETH>
	return(y->RX[3]);
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	7edb      	ldrb	r3, [r3, #27]
}
 800de8a:	4618      	mov	r0, r3
 800de8c:	3708      	adds	r7, #8
 800de8e:	46bd      	mov	sp, r7
 800de90:	bd80      	pop	{r7, pc}

0800de92 <eth_rd_SOCKET_CMD>:

uint8_t eth_rd_SOCKET_CMD(struct  W5100_SPI * y, uint8_t socket)
{
 800de92:	b580      	push	{r7, lr}
 800de94:	b082      	sub	sp, #8
 800de96:	af00      	add	r7, sp, #0
 800de98:	6078      	str	r0, [r7, #4]
 800de9a:	460b      	mov	r3, r1
 800de9c:	70fb      	strb	r3, [r7, #3]
	y->TX[0]= SPI_READ;
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	220f      	movs	r2, #15
 800dea2:	751a      	strb	r2, [r3, #20]
	y->TX[1]=  S0_CR_ADDR_BASEH + socket;
 800dea4:	78fb      	ldrb	r3, [r7, #3]
 800dea6:	3304      	adds	r3, #4
 800dea8:	b2da      	uxtb	r2, r3
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	755a      	strb	r2, [r3, #21]
	y->TX[2]=  S0_CR_ADDR_BASEL ;
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	2201      	movs	r2, #1
 800deb2:	759a      	strb	r2, [r3, #22]
	y->TX[3]= 0 ;		//Lo carga en la info a enviar
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	2200      	movs	r2, #0
 800deb8:	75da      	strb	r2, [r3, #23]
	SPI_ETH(y);
 800deba:	6878      	ldr	r0, [r7, #4]
 800debc:	f7ff fd90 	bl	800d9e0 <SPI_ETH>
	return(y->RX[3]);
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	7edb      	ldrb	r3, [r3, #27]
}
 800dec4:	4618      	mov	r0, r3
 800dec6:	3708      	adds	r7, #8
 800dec8:	46bd      	mov	sp, r7
 800deca:	bd80      	pop	{r7, pc}

0800decc <eth_rd_SOCKET_DATA>:

uint16_t  eth_rd_SOCKET_DATA(struct W5100_SPI * ETH, uint8_t socket, uint16_t * mem_pointer, uint16_t sizedata)
{
 800decc:	b580      	push	{r7, lr}
 800dece:	b08c      	sub	sp, #48	; 0x30
 800ded0:	af02      	add	r7, sp, #8
 800ded2:	60f8      	str	r0, [r7, #12]
 800ded4:	607a      	str	r2, [r7, #4]
 800ded6:	461a      	mov	r2, r3
 800ded8:	460b      	mov	r3, r1
 800deda:	72fb      	strb	r3, [r7, #11]
 800dedc:	4613      	mov	r3, r2
 800dede:	813b      	strh	r3, [r7, #8]
	uint16_t S0_bf_rcv_offset=0,
 800dee0:	2300      	movs	r3, #0
 800dee2:	847b      	strh	r3, [r7, #34]	; 0x22
			 left_size=0,
 800dee4:	2300      	movs	r3, #0
 800dee6:	843b      	strh	r3, [r7, #32]
			 upper_size=0,
 800dee8:	2300      	movs	r3, #0
 800deea:	83fb      	strh	r3, [r7, #30]
			 destination_addr=0,
 800deec:	2300      	movs	r3, #0
 800deee:	83bb      	strh	r3, [r7, #28]
			 S0_RX_RD=0,
 800def0:	2300      	movs	r3, #0
 800def2:	837b      	strh	r3, [r7, #26]
			 S0_get_offset=0,
 800def4:	2300      	movs	r3, #0
 800def6:	833b      	strh	r3, [r7, #24]
			 S0_get_start_address=0,
 800def8:	2300      	movs	r3, #0
 800defa:	82fb      	strh	r3, [r7, #22]
			 S0_mem_pointer=0,
 800defc:	2300      	movs	r3, #0
 800defe:	82bb      	strh	r3, [r7, #20]
			 RX_MASK=0,
 800df00:	2300      	movs	r3, #0
 800df02:	84fb      	strh	r3, [r7, #38]	; 0x26
			 RX_BASE=0;
 800df04:	2300      	movs	r3, #0
 800df06:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint8_t spi_Data[2];

	switch (socket)
 800df08:	7afb      	ldrb	r3, [r7, #11]
 800df0a:	2b03      	cmp	r3, #3
 800df0c:	d83e      	bhi.n	800df8c <eth_rd_SOCKET_DATA+0xc0>
 800df0e:	a201      	add	r2, pc, #4	; (adr r2, 800df14 <eth_rd_SOCKET_DATA+0x48>)
 800df10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df14:	0800df25 	.word	0x0800df25
 800df18:	0800df3f 	.word	0x0800df3f
 800df1c:	0800df59 	.word	0x0800df59
 800df20:	0800df73 	.word	0x0800df73
	{
		case 0 :
		{
			RX_MASK=ETH->gS0_RX_MASK;
 800df24:	68fb      	ldr	r3, [r7, #12]
 800df26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800df2a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800df2e:	84fb      	strh	r3, [r7, #38]	; 0x26
			RX_BASE=ETH->gS0_RX_BASE;
 800df30:	68fb      	ldr	r3, [r7, #12]
 800df32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800df36:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800df3a:	84bb      	strh	r3, [r7, #36]	; 0x24
		}
		break;
 800df3c:	e033      	b.n	800dfa6 <eth_rd_SOCKET_DATA+0xda>
		case 1 :
		{
			RX_MASK=ETH->gS1_RX_MASK;
 800df3e:	68fb      	ldr	r3, [r7, #12]
 800df40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800df44:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 800df48:	84fb      	strh	r3, [r7, #38]	; 0x26
			RX_BASE=ETH->gS1_RX_BASE;
 800df4a:	68fb      	ldr	r3, [r7, #12]
 800df4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800df50:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800df54:	84bb      	strh	r3, [r7, #36]	; 0x24
		}
		break;
 800df56:	e026      	b.n	800dfa6 <eth_rd_SOCKET_DATA+0xda>
		case 2 :
		{
			RX_MASK=ETH->gS2_RX_MASK;
 800df58:	68fb      	ldr	r3, [r7, #12]
 800df5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800df5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800df62:	84fb      	strh	r3, [r7, #38]	; 0x26
			RX_BASE=ETH->gS2_RX_BASE;
 800df64:	68fb      	ldr	r3, [r7, #12]
 800df66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800df6a:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 800df6e:	84bb      	strh	r3, [r7, #36]	; 0x24
		}
		break;
 800df70:	e019      	b.n	800dfa6 <eth_rd_SOCKET_DATA+0xda>
		case 3 :
		{
			RX_MASK=ETH->gS3_RX_MASK;
 800df72:	68fb      	ldr	r3, [r7, #12]
 800df74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800df78:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800df7c:	84fb      	strh	r3, [r7, #38]	; 0x26
			RX_BASE=ETH->gS3_RX_BASE;
 800df7e:	68fb      	ldr	r3, [r7, #12]
 800df80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800df84:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800df88:	84bb      	strh	r3, [r7, #36]	; 0x24
		}
		break;
 800df8a:	e00c      	b.n	800dfa6 <eth_rd_SOCKET_DATA+0xda>
		default :
		{
			RX_MASK=ETH->gS0_RX_MASK;
 800df8c:	68fb      	ldr	r3, [r7, #12]
 800df8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800df92:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800df96:	84fb      	strh	r3, [r7, #38]	; 0x26
			RX_BASE=ETH->gS0_RX_BASE;
 800df98:	68fb      	ldr	r3, [r7, #12]
 800df9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800df9e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800dfa2:	84bb      	strh	r3, [r7, #36]	; 0x24
		}
		break;
 800dfa4:	bf00      	nop
	}

	S0_RX_RD = SPI_ETH_REG(ETH, S0_RX_RD_ADDR_BASEHH + socket ,S0_RX_RD_ADDR_BASEHL ,SPI_READ, spi_Data,2);
 800dfa6:	7afb      	ldrb	r3, [r7, #11]
 800dfa8:	3304      	adds	r3, #4
 800dfaa:	b2d9      	uxtb	r1, r3
 800dfac:	2302      	movs	r3, #2
 800dfae:	9301      	str	r3, [sp, #4]
 800dfb0:	f107 0310 	add.w	r3, r7, #16
 800dfb4:	9300      	str	r3, [sp, #0]
 800dfb6:	230f      	movs	r3, #15
 800dfb8:	2228      	movs	r2, #40	; 0x28
 800dfba:	68f8      	ldr	r0, [r7, #12]
 800dfbc:	f7ff fd37 	bl	800da2e <SPI_ETH_REG>
 800dfc0:	4603      	mov	r3, r0
 800dfc2:	837b      	strh	r3, [r7, #26]
	S0_get_offset = S0_RX_RD & RX_MASK;
 800dfc4:	8b7a      	ldrh	r2, [r7, #26]
 800dfc6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800dfc8:	4013      	ands	r3, r2
 800dfca:	833b      	strh	r3, [r7, #24]
	S0_get_start_address  = RX_BASE + S0_get_offset;
 800dfcc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800dfce:	8b3b      	ldrh	r3, [r7, #24]
 800dfd0:	4413      	add	r3, r2
 800dfd2:	82fb      	strh	r3, [r7, #22]
	if((S0_get_offset  + sizedata )>(RX_MASK + 1))
 800dfd4:	8b3a      	ldrh	r2, [r7, #24]
 800dfd6:	893b      	ldrh	r3, [r7, #8]
 800dfd8:	441a      	add	r2, r3
 800dfda:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800dfdc:	3301      	adds	r3, #1
 800dfde:	429a      	cmp	r2, r3
 800dfe0:	dd2c      	ble.n	800e03c <eth_rd_SOCKET_DATA+0x170>
		{
			upper_size = (RX_MASK + 1) - S0_get_offset ;
 800dfe2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800dfe4:	8b3b      	ldrh	r3, [r7, #24]
 800dfe6:	1ad3      	subs	r3, r2, r3
 800dfe8:	b29b      	uxth	r3, r3
 800dfea:	3301      	adds	r3, #1
 800dfec:	83fb      	strh	r3, [r7, #30]
			SPI_ETH_RD_RCV_REG_16(ETH , S0_get_start_address , ETH->data , S0_bf_rcv_offset, upper_size);
 800dfee:	68fb      	ldr	r3, [r7, #12]
 800dff0:	f103 021c 	add.w	r2, r3, #28
 800dff4:	8c78      	ldrh	r0, [r7, #34]	; 0x22
 800dff6:	8af9      	ldrh	r1, [r7, #22]
 800dff8:	8bfb      	ldrh	r3, [r7, #30]
 800dffa:	9300      	str	r3, [sp, #0]
 800dffc:	4603      	mov	r3, r0
 800dffe:	68f8      	ldr	r0, [r7, #12]
 800e000:	f7ff fdc9 	bl	800db96 <SPI_ETH_RD_RCV_REG_16>
			destination_addr+=upper_size;
 800e004:	8bba      	ldrh	r2, [r7, #28]
 800e006:	8bfb      	ldrh	r3, [r7, #30]
 800e008:	4413      	add	r3, r2
 800e00a:	83bb      	strh	r3, [r7, #28]
			left_size=sizedata-upper_size;
 800e00c:	893a      	ldrh	r2, [r7, #8]
 800e00e:	8bfb      	ldrh	r3, [r7, #30]
 800e010:	1ad3      	subs	r3, r2, r3
 800e012:	843b      	strh	r3, [r7, #32]
			S0_bf_rcv_offset=upper_size;
 800e014:	8bfb      	ldrh	r3, [r7, #30]
 800e016:	847b      	strh	r3, [r7, #34]	; 0x22
			SPI_ETH_RD_RCV_REG_16(ETH , RX_BASE , ETH->data , S0_bf_rcv_offset, left_size);
 800e018:	68fb      	ldr	r3, [r7, #12]
 800e01a:	f103 021c 	add.w	r2, r3, #28
 800e01e:	8c78      	ldrh	r0, [r7, #34]	; 0x22
 800e020:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 800e022:	8c3b      	ldrh	r3, [r7, #32]
 800e024:	9300      	str	r3, [sp, #0]
 800e026:	4603      	mov	r3, r0
 800e028:	68f8      	ldr	r0, [r7, #12]
 800e02a:	f7ff fdb4 	bl	800db96 <SPI_ETH_RD_RCV_REG_16>
			*mem_pointer=S0_RX_RD + sizedata;
 800e02e:	8b7a      	ldrh	r2, [r7, #26]
 800e030:	893b      	ldrh	r3, [r7, #8]
 800e032:	4413      	add	r3, r2
 800e034:	b29a      	uxth	r2, r3
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	801a      	strh	r2, [r3, #0]
 800e03a:	e010      	b.n	800e05e <eth_rd_SOCKET_DATA+0x192>
		}
		else
			{
				SPI_ETH_RD_RCV_REG_16(ETH , S0_get_start_address , ETH->data , S0_bf_rcv_offset, sizedata);
 800e03c:	68fb      	ldr	r3, [r7, #12]
 800e03e:	f103 021c 	add.w	r2, r3, #28
 800e042:	8c78      	ldrh	r0, [r7, #34]	; 0x22
 800e044:	8af9      	ldrh	r1, [r7, #22]
 800e046:	893b      	ldrh	r3, [r7, #8]
 800e048:	9300      	str	r3, [sp, #0]
 800e04a:	4603      	mov	r3, r0
 800e04c:	68f8      	ldr	r0, [r7, #12]
 800e04e:	f7ff fda2 	bl	800db96 <SPI_ETH_RD_RCV_REG_16>
				*mem_pointer=S0_RX_RD + sizedata;
 800e052:	8b7a      	ldrh	r2, [r7, #26]
 800e054:	893b      	ldrh	r3, [r7, #8]
 800e056:	4413      	add	r3, r2
 800e058:	b29a      	uxth	r2, r3
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	801a      	strh	r2, [r3, #0]
			}
	return(mem_pointer);
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	b29b      	uxth	r3, r3
}
 800e062:	4618      	mov	r0, r3
 800e064:	3728      	adds	r7, #40	; 0x28
 800e066:	46bd      	mov	sp, r7
 800e068:	bd80      	pop	{r7, pc}
 800e06a:	bf00      	nop

0800e06c <eth_wr_SOCKET_DATA>:

uint16_t eth_wr_SOCKET_DATA(struct W5100_SPI * ETH, uint8_t socket, uint16_t * mem_pointer, uint16_t send_size)
{
 800e06c:	b580      	push	{r7, lr}
 800e06e:	b08c      	sub	sp, #48	; 0x30
 800e070:	af02      	add	r7, sp, #8
 800e072:	60f8      	str	r0, [r7, #12]
 800e074:	607a      	str	r2, [r7, #4]
 800e076:	461a      	mov	r2, r3
 800e078:	460b      	mov	r3, r1
 800e07a:	72fb      	strb	r3, [r7, #11]
 800e07c:	4613      	mov	r3, r2
 800e07e:	813b      	strh	r3, [r7, #8]
	uint16_t S0_bf_rcv_offset=0,
 800e080:	2300      	movs	r3, #0
 800e082:	843b      	strh	r3, [r7, #32]
			 left_size=0,
 800e084:	2300      	movs	r3, #0
 800e086:	83fb      	strh	r3, [r7, #30]
			 upper_size=0,
 800e088:	2300      	movs	r3, #0
 800e08a:	83bb      	strh	r3, [r7, #28]
			 source_addr=0,
 800e08c:	2300      	movs	r3, #0
 800e08e:	837b      	strh	r3, [r7, #26]
			 Sn_TX_WR=0,
 800e090:	2300      	movs	r3, #0
 800e092:	833b      	strh	r3, [r7, #24]
			 get_offset=0,
 800e094:	2300      	movs	r3, #0
 800e096:	82fb      	strh	r3, [r7, #22]
			 get_free_size=0,
 800e098:	2300      	movs	r3, #0
 800e09a:	84fb      	strh	r3, [r7, #38]	; 0x26
			 get_start_address=0,
 800e09c:	2300      	movs	r3, #0
 800e09e:	82bb      	strh	r3, [r7, #20]
			 S0_mem_pointer=0,
 800e0a0:	2300      	movs	r3, #0
 800e0a2:	827b      	strh	r3, [r7, #18]
			 TX_MASK=0,
 800e0a4:	2300      	movs	r3, #0
 800e0a6:	84bb      	strh	r3, [r7, #36]	; 0x24
			 TX_BASE=0;
 800e0a8:	2300      	movs	r3, #0
 800e0aa:	847b      	strh	r3, [r7, #34]	; 0x22
	uint8_t spi_Data[2];

	switch (socket)
 800e0ac:	7afb      	ldrb	r3, [r7, #11]
 800e0ae:	2b03      	cmp	r3, #3
 800e0b0:	d83e      	bhi.n	800e130 <eth_wr_SOCKET_DATA+0xc4>
 800e0b2:	a201      	add	r2, pc, #4	; (adr r2, 800e0b8 <eth_wr_SOCKET_DATA+0x4c>)
 800e0b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e0b8:	0800e0c9 	.word	0x0800e0c9
 800e0bc:	0800e0e3 	.word	0x0800e0e3
 800e0c0:	0800e0fd 	.word	0x0800e0fd
 800e0c4:	0800e117 	.word	0x0800e117
	{
		case 0 :
		{
			TX_MASK=ETH->gS0_TX_MASK;
 800e0c8:	68fb      	ldr	r3, [r7, #12]
 800e0ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e0ce:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800e0d2:	84bb      	strh	r3, [r7, #36]	; 0x24
			TX_BASE=ETH->gS0_TX_BASE;
 800e0d4:	68fb      	ldr	r3, [r7, #12]
 800e0d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e0da:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800e0de:	847b      	strh	r3, [r7, #34]	; 0x22
		}
		break;
 800e0e0:	e033      	b.n	800e14a <eth_wr_SOCKET_DATA+0xde>
		case 1 :
		{
			TX_MASK=ETH->gS1_TX_MASK;
 800e0e2:	68fb      	ldr	r3, [r7, #12]
 800e0e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e0e8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e0ec:	84bb      	strh	r3, [r7, #36]	; 0x24
			TX_BASE=ETH->gS1_TX_BASE;
 800e0ee:	68fb      	ldr	r3, [r7, #12]
 800e0f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e0f4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800e0f8:	847b      	strh	r3, [r7, #34]	; 0x22
		}
		break;
 800e0fa:	e026      	b.n	800e14a <eth_wr_SOCKET_DATA+0xde>
		case 2 :
		{
			TX_MASK=ETH->gS2_TX_MASK;
 800e0fc:	68fb      	ldr	r3, [r7, #12]
 800e0fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e102:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e106:	84bb      	strh	r3, [r7, #36]	; 0x24
			TX_BASE=ETH->gS2_TX_BASE;
 800e108:	68fb      	ldr	r3, [r7, #12]
 800e10a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e10e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e112:	847b      	strh	r3, [r7, #34]	; 0x22
		}
		break;
 800e114:	e019      	b.n	800e14a <eth_wr_SOCKET_DATA+0xde>
		case 3 :
		{
			TX_MASK=ETH->gS3_TX_MASK;
 800e116:	68fb      	ldr	r3, [r7, #12]
 800e118:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e11c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800e120:	84bb      	strh	r3, [r7, #36]	; 0x24
			TX_BASE=ETH->gS3_TX_BASE;
 800e122:	68fb      	ldr	r3, [r7, #12]
 800e124:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e128:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e12c:	847b      	strh	r3, [r7, #34]	; 0x22
		}
		break;
 800e12e:	e00c      	b.n	800e14a <eth_wr_SOCKET_DATA+0xde>
		default :
		{
			TX_MASK=ETH->gS0_TX_MASK;
 800e130:	68fb      	ldr	r3, [r7, #12]
 800e132:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e136:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800e13a:	84bb      	strh	r3, [r7, #36]	; 0x24
			TX_BASE=ETH->gS0_TX_BASE;
 800e13c:	68fb      	ldr	r3, [r7, #12]
 800e13e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e142:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800e146:	847b      	strh	r3, [r7, #34]	; 0x22
		}
		break;
 800e148:	bf00      	nop
	}

	while(get_free_size<send_size)
 800e14a:	e00e      	b.n	800e16a <eth_wr_SOCKET_DATA+0xfe>
			{
				get_free_size=SPI_ETH_REG(ETH, 0x04 + socket, 0x20 ,SPI_READ, spi_Data,2); //Leo registro S0_TX_FSR	=   0x420,
 800e14c:	7afb      	ldrb	r3, [r7, #11]
 800e14e:	3304      	adds	r3, #4
 800e150:	b2d9      	uxtb	r1, r3
 800e152:	2302      	movs	r3, #2
 800e154:	9301      	str	r3, [sp, #4]
 800e156:	f107 0310 	add.w	r3, r7, #16
 800e15a:	9300      	str	r3, [sp, #0]
 800e15c:	230f      	movs	r3, #15
 800e15e:	2220      	movs	r2, #32
 800e160:	68f8      	ldr	r0, [r7, #12]
 800e162:	f7ff fc64 	bl	800da2e <SPI_ETH_REG>
 800e166:	4603      	mov	r3, r0
 800e168:	84fb      	strh	r3, [r7, #38]	; 0x26
	while(get_free_size<send_size)
 800e16a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800e16c:	893b      	ldrh	r3, [r7, #8]
 800e16e:	429a      	cmp	r2, r3
 800e170:	d3ec      	bcc.n	800e14c <eth_wr_SOCKET_DATA+0xe0>
			}
				Sn_TX_WR = SPI_ETH_REG(ETH, 0x04 + socket,0x24 ,SPI_READ, spi_Data,2); // S0_TX_RD =   0x424,
 800e172:	7afb      	ldrb	r3, [r7, #11]
 800e174:	3304      	adds	r3, #4
 800e176:	b2d9      	uxtb	r1, r3
 800e178:	2302      	movs	r3, #2
 800e17a:	9301      	str	r3, [sp, #4]
 800e17c:	f107 0310 	add.w	r3, r7, #16
 800e180:	9300      	str	r3, [sp, #0]
 800e182:	230f      	movs	r3, #15
 800e184:	2224      	movs	r2, #36	; 0x24
 800e186:	68f8      	ldr	r0, [r7, #12]
 800e188:	f7ff fc51 	bl	800da2e <SPI_ETH_REG>
 800e18c:	4603      	mov	r3, r0
 800e18e:	833b      	strh	r3, [r7, #24]
				get_offset= Sn_TX_WR & TX_MASK;
 800e190:	8b3a      	ldrh	r2, [r7, #24]
 800e192:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e194:	4013      	ands	r3, r2
 800e196:	82fb      	strh	r3, [r7, #22]
				get_start_address=TX_BASE + get_offset;
 800e198:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800e19a:	8afb      	ldrh	r3, [r7, #22]
 800e19c:	4413      	add	r3, r2
 800e19e:	82bb      	strh	r3, [r7, #20]

				if((get_offset + send_size)>(TX_MASK + 1))
 800e1a0:	8afa      	ldrh	r2, [r7, #22]
 800e1a2:	893b      	ldrh	r3, [r7, #8]
 800e1a4:	441a      	add	r2, r3
 800e1a6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e1a8:	3301      	adds	r3, #1
 800e1aa:	429a      	cmp	r2, r3
 800e1ac:	dd2c      	ble.n	800e208 <eth_wr_SOCKET_DATA+0x19c>
					{
						upper_size=( TX_MASK + 1) - get_offset;
 800e1ae:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e1b0:	8afb      	ldrh	r3, [r7, #22]
 800e1b2:	1ad3      	subs	r3, r2, r3
 800e1b4:	b29b      	uxth	r3, r3
 800e1b6:	3301      	adds	r3, #1
 800e1b8:	83bb      	strh	r3, [r7, #28]
						SPI_ETH_WR_TX_REG_16(ETH , get_start_address , ETH->data , S0_bf_rcv_offset, upper_size);
 800e1ba:	68fb      	ldr	r3, [r7, #12]
 800e1bc:	f103 021c 	add.w	r2, r3, #28
 800e1c0:	8c38      	ldrh	r0, [r7, #32]
 800e1c2:	8ab9      	ldrh	r1, [r7, #20]
 800e1c4:	8bbb      	ldrh	r3, [r7, #28]
 800e1c6:	9300      	str	r3, [sp, #0]
 800e1c8:	4603      	mov	r3, r0
 800e1ca:	68f8      	ldr	r0, [r7, #12]
 800e1cc:	f7ff fd20 	bl	800dc10 <SPI_ETH_WR_TX_REG_16>
						source_addr+=upper_size;
 800e1d0:	8b7a      	ldrh	r2, [r7, #26]
 800e1d2:	8bbb      	ldrh	r3, [r7, #28]
 800e1d4:	4413      	add	r3, r2
 800e1d6:	837b      	strh	r3, [r7, #26]
						left_size=send_size-upper_size;
 800e1d8:	893a      	ldrh	r2, [r7, #8]
 800e1da:	8bbb      	ldrh	r3, [r7, #28]
 800e1dc:	1ad3      	subs	r3, r2, r3
 800e1de:	83fb      	strh	r3, [r7, #30]
						S0_bf_rcv_offset=upper_size;
 800e1e0:	8bbb      	ldrh	r3, [r7, #28]
 800e1e2:	843b      	strh	r3, [r7, #32]
						SPI_ETH_WR_TX_REG_16(ETH , TX_BASE , ETH->data , S0_bf_rcv_offset, left_size);
 800e1e4:	68fb      	ldr	r3, [r7, #12]
 800e1e6:	f103 021c 	add.w	r2, r3, #28
 800e1ea:	8c38      	ldrh	r0, [r7, #32]
 800e1ec:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 800e1ee:	8bfb      	ldrh	r3, [r7, #30]
 800e1f0:	9300      	str	r3, [sp, #0]
 800e1f2:	4603      	mov	r3, r0
 800e1f4:	68f8      	ldr	r0, [r7, #12]
 800e1f6:	f7ff fd0b 	bl	800dc10 <SPI_ETH_WR_TX_REG_16>
						*mem_pointer=Sn_TX_WR + send_size;
 800e1fa:	8b3a      	ldrh	r2, [r7, #24]
 800e1fc:	893b      	ldrh	r3, [r7, #8]
 800e1fe:	4413      	add	r3, r2
 800e200:	b29a      	uxth	r2, r3
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	801a      	strh	r2, [r3, #0]
 800e206:	e010      	b.n	800e22a <eth_wr_SOCKET_DATA+0x1be>
					}
				else
					{
					SPI_ETH_WR_TX_REG_16(ETH , get_start_address , ETH->data , S0_bf_rcv_offset, send_size);
 800e208:	68fb      	ldr	r3, [r7, #12]
 800e20a:	f103 021c 	add.w	r2, r3, #28
 800e20e:	8c38      	ldrh	r0, [r7, #32]
 800e210:	8ab9      	ldrh	r1, [r7, #20]
 800e212:	893b      	ldrh	r3, [r7, #8]
 800e214:	9300      	str	r3, [sp, #0]
 800e216:	4603      	mov	r3, r0
 800e218:	68f8      	ldr	r0, [r7, #12]
 800e21a:	f7ff fcf9 	bl	800dc10 <SPI_ETH_WR_TX_REG_16>
					*mem_pointer=Sn_TX_WR + send_size;
 800e21e:	8b3a      	ldrh	r2, [r7, #24]
 800e220:	893b      	ldrh	r3, [r7, #8]
 800e222:	4413      	add	r3, r2
 800e224:	b29a      	uxth	r2, r3
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	801a      	strh	r2, [r3, #0]
					}

}
 800e22a:	bf00      	nop
 800e22c:	4618      	mov	r0, r3
 800e22e:	3728      	adds	r7, #40	; 0x28
 800e230:	46bd      	mov	sp, r7
 800e232:	bd80      	pop	{r7, pc}

0800e234 <FT_String_ND>:
				return(2);
			}
}

int FT_String_ND( unsigned char * a, int *an, unsigned char * b, int *bn, unsigned char * c,int *cn, int *ubicacion, int *idcom, int of, int tf)
{
 800e234:	b580      	push	{r7, lr}
 800e236:	b090      	sub	sp, #64	; 0x40
 800e238:	af00      	add	r7, sp, #0
 800e23a:	60f8      	str	r0, [r7, #12]
 800e23c:	60b9      	str	r1, [r7, #8]
 800e23e:	607a      	str	r2, [r7, #4]
 800e240:	603b      	str	r3, [r7, #0]
	int n=0,n2=0,n3=0,n4=0,n5=0, lnga=0, lngb=0,lngd=0,lnge=0,h=0,estado=0,cliente=0;
 800e242:	2300      	movs	r3, #0
 800e244:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e246:	2300      	movs	r3, #0
 800e248:	63bb      	str	r3, [r7, #56]	; 0x38
 800e24a:	2300      	movs	r3, #0
 800e24c:	637b      	str	r3, [r7, #52]	; 0x34
 800e24e:	2300      	movs	r3, #0
 800e250:	633b      	str	r3, [r7, #48]	; 0x30
 800e252:	2300      	movs	r3, #0
 800e254:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e256:	2300      	movs	r3, #0
 800e258:	61fb      	str	r3, [r7, #28]
 800e25a:	2300      	movs	r3, #0
 800e25c:	61bb      	str	r3, [r7, #24]
 800e25e:	2300      	movs	r3, #0
 800e260:	62bb      	str	r3, [r7, #40]	; 0x28
 800e262:	2300      	movs	r3, #0
 800e264:	627b      	str	r3, [r7, #36]	; 0x24
 800e266:	2300      	movs	r3, #0
 800e268:	617b      	str	r3, [r7, #20]
 800e26a:	2300      	movs	r3, #0
 800e26c:	623b      	str	r3, [r7, #32]
 800e26e:	2300      	movs	r3, #0
 800e270:	613b      	str	r3, [r7, #16]

	lnga=*an;
 800e272:	68bb      	ldr	r3, [r7, #8]
 800e274:	681b      	ldr	r3, [r3, #0]
 800e276:	61fb      	str	r3, [r7, #28]
	lngb=*bn;
 800e278:	683b      	ldr	r3, [r7, #0]
 800e27a:	681b      	ldr	r3, [r3, #0]
 800e27c:	61bb      	str	r3, [r7, #24]
			if (lnga>=lngb) //Solo buscao si la cadena a buscar es menor a la que la contiene
 800e27e:	69fa      	ldr	r2, [r7, #28]
 800e280:	69bb      	ldr	r3, [r7, #24]
 800e282:	429a      	cmp	r2, r3
 800e284:	f2c0 8315 	blt.w	800e8b2 <FT_String_ND+0x67e>
			{
				//Debo preguntar por el primer caracter, recorro hasta encontrar el primero, si no lo encuentro me voy
				do{
						n2=0;
 800e288:	2300      	movs	r3, #0
 800e28a:	63bb      	str	r3, [r7, #56]	; 0x38
							while(a[n]!= b[n2])
 800e28c:	e00c      	b.n	800e2a8 <FT_String_ND+0x74>
							{
								n++;
 800e28e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e290:	3301      	adds	r3, #1
 800e292:	63fb      	str	r3, [r7, #60]	; 0x3c
								if(n+lngb>(lnga+1))
 800e294:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e296:	69bb      	ldr	r3, [r7, #24]
 800e298:	441a      	add	r2, r3
 800e29a:	69fb      	ldr	r3, [r7, #28]
 800e29c:	3301      	adds	r3, #1
 800e29e:	429a      	cmp	r2, r3
 800e2a0:	dd02      	ble.n	800e2a8 <FT_String_ND+0x74>
								{
									estado=0;
 800e2a2:	2300      	movs	r3, #0
 800e2a4:	623b      	str	r3, [r7, #32]
									break;
 800e2a6:	e009      	b.n	800e2bc <FT_String_ND+0x88>
							while(a[n]!= b[n2])
 800e2a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e2aa:	68fa      	ldr	r2, [r7, #12]
 800e2ac:	4413      	add	r3, r2
 800e2ae:	781a      	ldrb	r2, [r3, #0]
 800e2b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2b2:	6879      	ldr	r1, [r7, #4]
 800e2b4:	440b      	add	r3, r1
 800e2b6:	781b      	ldrb	r3, [r3, #0]
 800e2b8:	429a      	cmp	r2, r3
 800e2ba:	d1e8      	bne.n	800e28e <FT_String_ND+0x5a>
								}//return(0); //No esta el string
							}

							do
							{   //Aca el primero ya es igual
							 n++;
 800e2bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e2be:	3301      	adds	r3, #1
 800e2c0:	63fb      	str	r3, [r7, #60]	; 0x3c

							 n2++;
 800e2c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2c4:	3301      	adds	r3, #1
 800e2c6:	63bb      	str	r3, [r7, #56]	; 0x38
							 if(n2==lngb)				//Si pasé poracá recorriendo todo el vector ya se que lo contiene
 800e2c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e2ca:	69bb      	ldr	r3, [r7, #24]
 800e2cc:	429a      	cmp	r2, r3
 800e2ce:	d108      	bne.n	800e2e2 <FT_String_ND+0xae>
									{
									*ubicacion=n-lngb+1;
 800e2d0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e2d2:	69bb      	ldr	r3, [r7, #24]
 800e2d4:	1ad3      	subs	r3, r2, r3
 800e2d6:	1c5a      	adds	r2, r3, #1
 800e2d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e2da:	601a      	str	r2, [r3, #0]
									estado=1;
 800e2dc:	2301      	movs	r3, #1
 800e2de:	623b      	str	r3, [r7, #32]
									break;
 800e2e0:	e010      	b.n	800e304 <FT_String_ND+0xd0>
									//if (tf==0) return(1);	//Si solo pido buscar salgo ahora
									}		//Esta el string if(n2>=lngb-1) return(1);

							 if(n2>lngb)//if((a[n]=='\0')||(n2>lngb))	//Si finaliz� el vector o bien ya reviso mas caracteres que los que contiene el vector
 800e2e2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e2e4:	69bb      	ldr	r3, [r7, #24]
 800e2e6:	429a      	cmp	r2, r3
 800e2e8:	dd02      	ble.n	800e2f0 <FT_String_ND+0xbc>
									 {
									 estado=0;
 800e2ea:	2300      	movs	r3, #0
 800e2ec:	623b      	str	r3, [r7, #32]
									 break;
 800e2ee:	e009      	b.n	800e304 <FT_String_ND+0xd0>
									 //return(0);//if(n+lngb>=lnga) return(0);//No esta el string
									 }
							}while(a[n]== b[n2]);
 800e2f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e2f2:	68fa      	ldr	r2, [r7, #12]
 800e2f4:	4413      	add	r3, r2
 800e2f6:	781a      	ldrb	r2, [r3, #0]
 800e2f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2fa:	6879      	ldr	r1, [r7, #4]
 800e2fc:	440b      	add	r3, r1
 800e2fe:	781b      	ldrb	r3, [r3, #0]
 800e300:	429a      	cmp	r2, r3
 800e302:	d0db      	beq.n	800e2bc <FT_String_ND+0x88>

					}	while((n+(lngb-1)<=(lnga-1))&&(estado!=1));	//while(n+lngb<=lnga);
 800e304:	69bb      	ldr	r3, [r7, #24]
 800e306:	1e5a      	subs	r2, r3, #1
 800e308:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e30a:	4413      	add	r3, r2
 800e30c:	69fa      	ldr	r2, [r7, #28]
 800e30e:	429a      	cmp	r2, r3
 800e310:	dd02      	ble.n	800e318 <FT_String_ND+0xe4>
 800e312:	6a3b      	ldr	r3, [r7, #32]
 800e314:	2b01      	cmp	r3, #1
 800e316:	d1b7      	bne.n	800e288 <FT_String_ND+0x54>

					if (tf==0) 					//Si solo pido buscar
 800e318:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	d101      	bne.n	800e322 <FT_String_ND+0xee>
					{return(estado);			//Agregado para no dejar valor si solo quiero buscar
 800e31e:	6a3b      	ldr	r3, [r7, #32]
 800e320:	e2c8      	b.n	800e8b4 <FT_String_ND+0x680>
					}
					else
					{								//Si quiero eliminar lo encontrado
						if((tf==1)&&(estado==1))//------------------------------Si la voy a eliminar tiene que estar
 800e322:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e324:	2b01      	cmp	r3, #1
 800e326:	d12c      	bne.n	800e382 <FT_String_ND+0x14e>
 800e328:	6a3b      	ldr	r3, [r7, #32]
 800e32a:	2b01      	cmp	r3, #1
 800e32c:	d129      	bne.n	800e382 <FT_String_ND+0x14e>
							/*while (a[*ubicacion+n2+n3]!='\0')
									{
										a[*ubicacion+n3]=a[*ubicacion+lngb+n3];
										n3++;
									}*/
							while ((*ubicacion+n2+n3)<=lnga)
 800e32e:	e014      	b.n	800e35a <FT_String_ND+0x126>
									{
										a[*ubicacion+n3-1]=a[*ubicacion+lngb+n3-1];
 800e330:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e332:	681a      	ldr	r2, [r3, #0]
 800e334:	69bb      	ldr	r3, [r7, #24]
 800e336:	441a      	add	r2, r3
 800e338:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e33a:	4413      	add	r3, r2
 800e33c:	3b01      	subs	r3, #1
 800e33e:	68fa      	ldr	r2, [r7, #12]
 800e340:	441a      	add	r2, r3
 800e342:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e344:	6819      	ldr	r1, [r3, #0]
 800e346:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e348:	440b      	add	r3, r1
 800e34a:	3b01      	subs	r3, #1
 800e34c:	68f9      	ldr	r1, [r7, #12]
 800e34e:	440b      	add	r3, r1
 800e350:	7812      	ldrb	r2, [r2, #0]
 800e352:	701a      	strb	r2, [r3, #0]
										n3++;
 800e354:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e356:	3301      	adds	r3, #1
 800e358:	637b      	str	r3, [r7, #52]	; 0x34
							while ((*ubicacion+n2+n3)<=lnga)
 800e35a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e35c:	681a      	ldr	r2, [r3, #0]
 800e35e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e360:	441a      	add	r2, r3
 800e362:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e364:	4413      	add	r3, r2
 800e366:	69fa      	ldr	r2, [r7, #28]
 800e368:	429a      	cmp	r2, r3
 800e36a:	dae1      	bge.n	800e330 <FT_String_ND+0xfc>
									}

							//a[*ubicacion+n3-1]='\0';	//Identifico finalizacion del vector
							*an=*ubicacion+n3-1;		//Largo del vector
 800e36c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e36e:	681a      	ldr	r2, [r3, #0]
 800e370:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e372:	4413      	add	r3, r2
 800e374:	1e5a      	subs	r2, r3, #1
 800e376:	68bb      	ldr	r3, [r7, #8]
 800e378:	601a      	str	r2, [r3, #0]
							estado=3;
 800e37a:	2303      	movs	r3, #3
 800e37c:	623b      	str	r3, [r7, #32]
							return(estado);
 800e37e:	6a3b      	ldr	r3, [r7, #32]
 800e380:	e298      	b.n	800e8b4 <FT_String_ND+0x680>
						}
						//------------------------------------------------------------------------------------
						//---DECODIFICACION DE IPD, EXTRACCI�N DE CADENA PRINCIPAL Y COPIA A CADENA SECUNDARIA
						//------------------------------------------------------------------------------------
						if((tf==2)&&(estado==1))
 800e382:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e384:	2b02      	cmp	r3, #2
 800e386:	f040 80be 	bne.w	800e506 <FT_String_ND+0x2d2>
 800e38a:	6a3b      	ldr	r3, [r7, #32]
 800e38c:	2b01      	cmp	r3, #1
 800e38e:	f040 80ba 	bne.w	800e506 <FT_String_ND+0x2d2>
						{
							while((n-lngb+n4)<=lnga)//---------------Copio a partir del IPD al vector tok que es el c.
 800e392:	e012      	b.n	800e3ba <FT_String_ND+0x186>
							{						 // n quedó en la ultima posicion del vector b
								c[n4]=a[n-lngb+n4];
 800e394:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e396:	69bb      	ldr	r3, [r7, #24]
 800e398:	1ad2      	subs	r2, r2, r3
 800e39a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e39c:	4413      	add	r3, r2
 800e39e:	461a      	mov	r2, r3
 800e3a0:	68fb      	ldr	r3, [r7, #12]
 800e3a2:	441a      	add	r2, r3
 800e3a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3a6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800e3a8:	440b      	add	r3, r1
 800e3aa:	7812      	ldrb	r2, [r2, #0]
 800e3ac:	701a      	strb	r2, [r3, #0]
								n4++;
 800e3ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3b0:	3301      	adds	r3, #1
 800e3b2:	633b      	str	r3, [r7, #48]	; 0x30
								*cn=n4;
 800e3b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e3b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e3b8:	601a      	str	r2, [r3, #0]
							while((n-lngb+n4)<=lnga)//---------------Copio a partir del IPD al vector tok que es el c.
 800e3ba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e3bc:	69bb      	ldr	r3, [r7, #24]
 800e3be:	1ad2      	subs	r2, r2, r3
 800e3c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3c2:	4413      	add	r3, r2
 800e3c4:	69fa      	ldr	r2, [r7, #28]
 800e3c6:	429a      	cmp	r2, r3
 800e3c8:	dae4      	bge.n	800e394 <FT_String_ND+0x160>
							}
							strtok(c,",:");
 800e3ca:	499d      	ldr	r1, [pc, #628]	; (800e640 <FT_String_ND+0x40c>)
 800e3cc:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800e3ce:	f000 fd13 	bl	800edf8 <strtok>
							lngd= atoi(strtok(NULL,",: "));
 800e3d2:	499c      	ldr	r1, [pc, #624]	; (800e644 <FT_String_ND+0x410>)
 800e3d4:	2000      	movs	r0, #0
 800e3d6:	f000 fd0f 	bl	800edf8 <strtok>
 800e3da:	4603      	mov	r3, r0
 800e3dc:	4618      	mov	r0, r3
 800e3de:	f000 faf0 	bl	800e9c2 <atoi>
 800e3e2:	62b8      	str	r0, [r7, #40]	; 0x28
							if(lngd>=of-1)
 800e3e4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e3e6:	3b01      	subs	r3, #1
 800e3e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e3ea:	429a      	cmp	r2, r3
 800e3ec:	db02      	blt.n	800e3f4 <FT_String_ND+0x1c0>
							{
								lngd=of-1;
 800e3ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e3f0:	3b01      	subs	r3, #1
 800e3f2:	62bb      	str	r3, [r7, #40]	; 0x28
							}
							c[6]=',';//------------------------------Reconstruyo vector
 800e3f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e3f6:	3306      	adds	r3, #6
 800e3f8:	222c      	movs	r2, #44	; 0x2c
 800e3fa:	701a      	strb	r2, [r3, #0]
									if (lngd < 10)
 800e3fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3fe:	2b09      	cmp	r3, #9
 800e400:	dc0d      	bgt.n	800e41e <FT_String_ND+0x1ea>
											{
												c[8]=':';
 800e402:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e404:	3308      	adds	r3, #8
 800e406:	223a      	movs	r2, #58	; 0x3a
 800e408:	701a      	strb	r2, [r3, #0]
												c[8+lngd+1]='\0';
 800e40a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e40c:	3309      	adds	r3, #9
 800e40e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e410:	4413      	add	r3, r2
 800e412:	2200      	movs	r2, #0
 800e414:	701a      	strb	r2, [r3, #0]
												lnge=9+lngd;
 800e416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e418:	3309      	adds	r3, #9
 800e41a:	627b      	str	r3, [r7, #36]	; 0x24
 800e41c:	e021      	b.n	800e462 <FT_String_ND+0x22e>
											}
											else{
														if (lngd< 100)
 800e41e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e420:	2b63      	cmp	r3, #99	; 0x63
 800e422:	dc0d      	bgt.n	800e440 <FT_String_ND+0x20c>
														{
															c[9]=':';
 800e424:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e426:	3309      	adds	r3, #9
 800e428:	223a      	movs	r2, #58	; 0x3a
 800e42a:	701a      	strb	r2, [r3, #0]
															c[9+lngd+1]='\0';
 800e42c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e42e:	330a      	adds	r3, #10
 800e430:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e432:	4413      	add	r3, r2
 800e434:	2200      	movs	r2, #0
 800e436:	701a      	strb	r2, [r3, #0]
															lnge=10+lngd;
 800e438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e43a:	330a      	adds	r3, #10
 800e43c:	627b      	str	r3, [r7, #36]	; 0x24
 800e43e:	e010      	b.n	800e462 <FT_String_ND+0x22e>
														}
														else
														{
														if (lngd < 1000)
 800e440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e442:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e446:	da0c      	bge.n	800e462 <FT_String_ND+0x22e>
														{
															c[10]=':';
 800e448:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e44a:	330a      	adds	r3, #10
 800e44c:	223a      	movs	r2, #58	; 0x3a
 800e44e:	701a      	strb	r2, [r3, #0]
															c[10+lngd+1]='\0';
 800e450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e452:	330b      	adds	r3, #11
 800e454:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e456:	4413      	add	r3, r2
 800e458:	2200      	movs	r2, #0
 800e45a:	701a      	strb	r2, [r3, #0]
															lnge=11+lngd;
 800e45c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e45e:	330b      	adds	r3, #11
 800e460:	627b      	str	r3, [r7, #36]	; 0x24
														}
														}
													}
												//------------------------------Vector reconstruido
							  //------------------------------Extraccion del vector en el original
							*cn=lnge;
 800e462:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e464:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e466:	601a      	str	r2, [r3, #0]
							n4=0;
 800e468:	2300      	movs	r3, #0
 800e46a:	633b      	str	r3, [r7, #48]	; 0x30
							while((n-lngb+lnge+n4)<=lnga)//while(a[n-lngb+lnge+n4]!='\0')//---------------Copio a partir del IPD al vector tok.
 800e46c:	e016      	b.n	800e49c <FT_String_ND+0x268>
							{
								a[n-lngb+n4]=a[n-lngb+lnge+n4];
 800e46e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e470:	69bb      	ldr	r3, [r7, #24]
 800e472:	1ad2      	subs	r2, r2, r3
 800e474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e476:	441a      	add	r2, r3
 800e478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e47a:	4413      	add	r3, r2
 800e47c:	461a      	mov	r2, r3
 800e47e:	68fb      	ldr	r3, [r7, #12]
 800e480:	441a      	add	r2, r3
 800e482:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e484:	69bb      	ldr	r3, [r7, #24]
 800e486:	1ac9      	subs	r1, r1, r3
 800e488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e48a:	440b      	add	r3, r1
 800e48c:	4619      	mov	r1, r3
 800e48e:	68fb      	ldr	r3, [r7, #12]
 800e490:	440b      	add	r3, r1
 800e492:	7812      	ldrb	r2, [r2, #0]
 800e494:	701a      	strb	r2, [r3, #0]
								n4++;
 800e496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e498:	3301      	adds	r3, #1
 800e49a:	633b      	str	r3, [r7, #48]	; 0x30
							while((n-lngb+lnge+n4)<=lnga)//while(a[n-lngb+lnge+n4]!='\0')//---------------Copio a partir del IPD al vector tok.
 800e49c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e49e:	69bb      	ldr	r3, [r7, #24]
 800e4a0:	1ad2      	subs	r2, r2, r3
 800e4a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4a4:	441a      	add	r2, r3
 800e4a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4a8:	4413      	add	r3, r2
 800e4aa:	69fa      	ldr	r2, [r7, #28]
 800e4ac:	429a      	cmp	r2, r3
 800e4ae:	dade      	bge.n	800e46e <FT_String_ND+0x23a>
							}
							*an=n+n4-lngb-1;
 800e4b0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e4b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4b4:	441a      	add	r2, r3
 800e4b6:	69bb      	ldr	r3, [r7, #24]
 800e4b8:	1ad3      	subs	r3, r2, r3
 800e4ba:	1e5a      	subs	r2, r3, #1
 800e4bc:	68bb      	ldr	r3, [r7, #8]
 800e4be:	601a      	str	r2, [r3, #0]
							a[n-lngb+lnge+n4]='\0';
 800e4c0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e4c2:	69bb      	ldr	r3, [r7, #24]
 800e4c4:	1ad2      	subs	r2, r2, r3
 800e4c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4c8:	441a      	add	r2, r3
 800e4ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4cc:	4413      	add	r3, r2
 800e4ce:	461a      	mov	r2, r3
 800e4d0:	68fb      	ldr	r3, [r7, #12]
 800e4d2:	4413      	add	r3, r2
 800e4d4:	2200      	movs	r2, #0
 800e4d6:	701a      	strb	r2, [r3, #0]
							a[n-lngb+n4]='\0';
 800e4d8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e4da:	69bb      	ldr	r3, [r7, #24]
 800e4dc:	1ad2      	subs	r2, r2, r3
 800e4de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4e0:	4413      	add	r3, r2
 800e4e2:	461a      	mov	r2, r3
 800e4e4:	68fb      	ldr	r3, [r7, #12]
 800e4e6:	4413      	add	r3, r2
 800e4e8:	2200      	movs	r2, #0
 800e4ea:	701a      	strb	r2, [r3, #0]
							if((n-lngb)==(lnge+n4)) a[0]='\0';
 800e4ec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e4ee:	69bb      	ldr	r3, [r7, #24]
 800e4f0:	1ad2      	subs	r2, r2, r3
 800e4f2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e4f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4f6:	440b      	add	r3, r1
 800e4f8:	429a      	cmp	r2, r3
 800e4fa:	d102      	bne.n	800e502 <FT_String_ND+0x2ce>
 800e4fc:	68fb      	ldr	r3, [r7, #12]
 800e4fe:	2200      	movs	r2, #0
 800e500:	701a      	strb	r2, [r3, #0]
							estado=3;
 800e502:	2303      	movs	r3, #3
 800e504:	623b      	str	r3, [r7, #32]

						}
						//------------------------------------------------------------------------------------
						//---EXTRACCI�N DE CADENA PRINCIPAL Y COPIA A CADENA SECUNDARIA-----------------------
						//------------------------------------------------------------------------------------
						if((tf==3)&&(estado==1))
 800e506:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e508:	2b03      	cmp	r3, #3
 800e50a:	d146      	bne.n	800e59a <FT_String_ND+0x366>
 800e50c:	6a3b      	ldr	r3, [r7, #32]
 800e50e:	2b01      	cmp	r3, #1
 800e510:	d143      	bne.n	800e59a <FT_String_ND+0x366>
						{
						n3=0;
 800e512:	2300      	movs	r3, #0
 800e514:	637b      	str	r3, [r7, #52]	; 0x34
						while (n3<lngb)//---------------Copio la info a extraer
 800e516:	e00e      	b.n	800e536 <FT_String_ND+0x302>
									{
										c[n3]=a[*ubicacion+n3-1];
 800e518:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e51a:	681a      	ldr	r2, [r3, #0]
 800e51c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e51e:	4413      	add	r3, r2
 800e520:	3b01      	subs	r3, #1
 800e522:	68fa      	ldr	r2, [r7, #12]
 800e524:	441a      	add	r2, r3
 800e526:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e528:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800e52a:	440b      	add	r3, r1
 800e52c:	7812      	ldrb	r2, [r2, #0]
 800e52e:	701a      	strb	r2, [r3, #0]
										n3++;
 800e530:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e532:	3301      	adds	r3, #1
 800e534:	637b      	str	r3, [r7, #52]	; 0x34
						while (n3<lngb)//---------------Copio la info a extraer
 800e536:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e538:	69bb      	ldr	r3, [r7, #24]
 800e53a:	429a      	cmp	r2, r3
 800e53c:	dbec      	blt.n	800e518 <FT_String_ND+0x2e4>
									}
									//c[n3]='\0';//---------------Finalizo el vector extra�do
						n5=0;
 800e53e:	2300      	movs	r3, #0
 800e540:	62fb      	str	r3, [r7, #44]	; 0x2c
						while ((*ubicacion+lngb+n5)<=*an)
 800e542:	e014      	b.n	800e56e <FT_String_ND+0x33a>
									{
										a[*ubicacion+n5-1]=a[*ubicacion+lngb+n5-1];
 800e544:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e546:	681a      	ldr	r2, [r3, #0]
 800e548:	69bb      	ldr	r3, [r7, #24]
 800e54a:	441a      	add	r2, r3
 800e54c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e54e:	4413      	add	r3, r2
 800e550:	3b01      	subs	r3, #1
 800e552:	68fa      	ldr	r2, [r7, #12]
 800e554:	441a      	add	r2, r3
 800e556:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e558:	6819      	ldr	r1, [r3, #0]
 800e55a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e55c:	440b      	add	r3, r1
 800e55e:	3b01      	subs	r3, #1
 800e560:	68f9      	ldr	r1, [r7, #12]
 800e562:	440b      	add	r3, r1
 800e564:	7812      	ldrb	r2, [r2, #0]
 800e566:	701a      	strb	r2, [r3, #0]
										n5++;
 800e568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e56a:	3301      	adds	r3, #1
 800e56c:	62fb      	str	r3, [r7, #44]	; 0x2c
						while ((*ubicacion+lngb+n5)<=*an)
 800e56e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e570:	681a      	ldr	r2, [r3, #0]
 800e572:	69bb      	ldr	r3, [r7, #24]
 800e574:	441a      	add	r2, r3
 800e576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e578:	441a      	add	r2, r3
 800e57a:	68bb      	ldr	r3, [r7, #8]
 800e57c:	681b      	ldr	r3, [r3, #0]
 800e57e:	429a      	cmp	r2, r3
 800e580:	dde0      	ble.n	800e544 <FT_String_ND+0x310>
									}
							//a[*ubicacion+n3]='\0';	//Identifico finalizacion del vector
						    *an=*ubicacion+n5-1;
 800e582:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e584:	681a      	ldr	r2, [r3, #0]
 800e586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e588:	4413      	add	r3, r2
 800e58a:	1e5a      	subs	r2, r3, #1
 800e58c:	68bb      	ldr	r3, [r7, #8]
 800e58e:	601a      	str	r2, [r3, #0]
							*cn=n3;
 800e590:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e592:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e594:	601a      	str	r2, [r3, #0]
							estado=3;
 800e596:	2303      	movs	r3, #3
 800e598:	623b      	str	r3, [r7, #32]
						}
						//------------------------------------------------------------------------------------
						//---DECODIFICACION DE IPD, EXTRACCI�N DE CADENA PRINCIPAL COPIA A CADENA SECUNDARIA DE
						//--- LOS DATOS CON EVALUACION DE INTEGRIDAD DE LOS MISMOS 4 DATOS OK 5 DATOS NO OK
						//------------------------------------------------------------------------------------
						if((tf==4)&&(estado==1))
 800e59a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e59c:	2b04      	cmp	r3, #4
 800e59e:	f040 80bd 	bne.w	800e71c <FT_String_ND+0x4e8>
 800e5a2:	6a3b      	ldr	r3, [r7, #32]
 800e5a4:	2b01      	cmp	r3, #1
 800e5a6:	f040 80b9 	bne.w	800e71c <FT_String_ND+0x4e8>
						{
							while((n-lngb+n4)<=lnga)//---------------Copio a partir del IPD al vector tok que es el c.
 800e5aa:	e012      	b.n	800e5d2 <FT_String_ND+0x39e>
							{						 // n quedó en la ultima posicion del vector b
								c[n4]=a[n-lngb+n4];
 800e5ac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e5ae:	69bb      	ldr	r3, [r7, #24]
 800e5b0:	1ad2      	subs	r2, r2, r3
 800e5b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5b4:	4413      	add	r3, r2
 800e5b6:	461a      	mov	r2, r3
 800e5b8:	68fb      	ldr	r3, [r7, #12]
 800e5ba:	441a      	add	r2, r3
 800e5bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5be:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800e5c0:	440b      	add	r3, r1
 800e5c2:	7812      	ldrb	r2, [r2, #0]
 800e5c4:	701a      	strb	r2, [r3, #0]
								n4++;
 800e5c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5c8:	3301      	adds	r3, #1
 800e5ca:	633b      	str	r3, [r7, #48]	; 0x30
								*cn=n4;  //lonitud del vector tok + el /r/n+IPD,XX:
 800e5cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e5ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e5d0:	601a      	str	r2, [r3, #0]
							while((n-lngb+n4)<=lnga)//---------------Copio a partir del IPD al vector tok que es el c.
 800e5d2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e5d4:	69bb      	ldr	r3, [r7, #24]
 800e5d6:	1ad2      	subs	r2, r2, r3
 800e5d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5da:	4413      	add	r3, r2
 800e5dc:	69fa      	ldr	r2, [r7, #28]
 800e5de:	429a      	cmp	r2, r3
 800e5e0:	dae4      	bge.n	800e5ac <FT_String_ND+0x378>
							}
							strtok(c,",:"); //En teoria no afecta el vector
 800e5e2:	4917      	ldr	r1, [pc, #92]	; (800e640 <FT_String_ND+0x40c>)
 800e5e4:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800e5e6:	f000 fc07 	bl	800edf8 <strtok>
							lngd= atoi(strtok(NULL,",: ")); //Datos informados de +IPD,XX: no deberia afectar el vector
 800e5ea:	4916      	ldr	r1, [pc, #88]	; (800e644 <FT_String_ND+0x410>)
 800e5ec:	2000      	movs	r0, #0
 800e5ee:	f000 fc03 	bl	800edf8 <strtok>
 800e5f2:	4603      	mov	r3, r0
 800e5f4:	4618      	mov	r0, r3
 800e5f6:	f000 f9e4 	bl	800e9c2 <atoi>
 800e5fa:	62b8      	str	r0, [r7, #40]	; 0x28

							if(lngd>=of-1)//if(lngd>=of-1)
 800e5fc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e5fe:	3b01      	subs	r3, #1
 800e600:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e602:	429a      	cmp	r2, r3
 800e604:	db02      	blt.n	800e60c <FT_String_ND+0x3d8>
							{
								lngd=of-1;
 800e606:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e608:	3b01      	subs	r3, #1
 800e60a:	62bb      	str	r3, [r7, #40]	; 0x28
							}
							c[6]=',';//------------------------------Reconstruyo vector
 800e60c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e60e:	3306      	adds	r3, #6
 800e610:	222c      	movs	r2, #44	; 0x2c
 800e612:	701a      	strb	r2, [r3, #0]
									if (lngd < 10)
 800e614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e616:	2b09      	cmp	r3, #9
 800e618:	dc07      	bgt.n	800e62a <FT_String_ND+0x3f6>
											{
												c[8]=':';
 800e61a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e61c:	3308      	adds	r3, #8
 800e61e:	223a      	movs	r2, #58	; 0x3a
 800e620:	701a      	strb	r2, [r3, #0]
												//c[8+lngd+1]='\0';
												lnge=9+lngd;
 800e622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e624:	3309      	adds	r3, #9
 800e626:	627b      	str	r3, [r7, #36]	; 0x24
 800e628:	e019      	b.n	800e65e <FT_String_ND+0x42a>
											}
											else{
														if (lngd< 100)
 800e62a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e62c:	2b63      	cmp	r3, #99	; 0x63
 800e62e:	dc0b      	bgt.n	800e648 <FT_String_ND+0x414>
														{
															c[9]=':';
 800e630:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e632:	3309      	adds	r3, #9
 800e634:	223a      	movs	r2, #58	; 0x3a
 800e636:	701a      	strb	r2, [r3, #0]
															//c[9+lngd+1]='\0';
															lnge=10+lngd;
 800e638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e63a:	330a      	adds	r3, #10
 800e63c:	627b      	str	r3, [r7, #36]	; 0x24
 800e63e:	e00e      	b.n	800e65e <FT_String_ND+0x42a>
 800e640:	08010700 	.word	0x08010700
 800e644:	08010704 	.word	0x08010704
														}
														else
														{
														if (lngd < 1000)
 800e648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e64a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e64e:	da06      	bge.n	800e65e <FT_String_ND+0x42a>
														{
															c[10]=':';
 800e650:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e652:	330a      	adds	r3, #10
 800e654:	223a      	movs	r2, #58	; 0x3a
 800e656:	701a      	strb	r2, [r3, #0]
															//c[10+lngd+1]='\0';
															lnge=11+lngd;
 800e658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e65a:	330b      	adds	r3, #11
 800e65c:	627b      	str	r3, [r7, #36]	; 0x24
														}
														}
													}
												//------------------------------Vector reconstruido
							  //------------------------------Extraccion del vector en el original
							*cn=lnge; //Longitud del vecto TOK completo
 800e65e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e660:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e662:	601a      	str	r2, [r3, #0]
							n4=0;
 800e664:	2300      	movs	r3, #0
 800e666:	633b      	str	r3, [r7, #48]	; 0x30
							while((n-lngb+lnge+n4)<=lnga)//while(a[n-lngb+lnge+n4]!='\0')//---------------Copio a partir del IPD al vector tok.
 800e668:	e016      	b.n	800e698 <FT_String_ND+0x464>
							{
								a[n-lngb+n4]=a[n-lngb+lnge+n4];
 800e66a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e66c:	69bb      	ldr	r3, [r7, #24]
 800e66e:	1ad2      	subs	r2, r2, r3
 800e670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e672:	441a      	add	r2, r3
 800e674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e676:	4413      	add	r3, r2
 800e678:	461a      	mov	r2, r3
 800e67a:	68fb      	ldr	r3, [r7, #12]
 800e67c:	441a      	add	r2, r3
 800e67e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e680:	69bb      	ldr	r3, [r7, #24]
 800e682:	1ac9      	subs	r1, r1, r3
 800e684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e686:	440b      	add	r3, r1
 800e688:	4619      	mov	r1, r3
 800e68a:	68fb      	ldr	r3, [r7, #12]
 800e68c:	440b      	add	r3, r1
 800e68e:	7812      	ldrb	r2, [r2, #0]
 800e690:	701a      	strb	r2, [r3, #0]
								n4++;
 800e692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e694:	3301      	adds	r3, #1
 800e696:	633b      	str	r3, [r7, #48]	; 0x30
							while((n-lngb+lnge+n4)<=lnga)//while(a[n-lngb+lnge+n4]!='\0')//---------------Copio a partir del IPD al vector tok.
 800e698:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e69a:	69bb      	ldr	r3, [r7, #24]
 800e69c:	1ad2      	subs	r2, r2, r3
 800e69e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6a0:	441a      	add	r2, r3
 800e6a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6a4:	4413      	add	r3, r2
 800e6a6:	69fa      	ldr	r2, [r7, #28]
 800e6a8:	429a      	cmp	r2, r3
 800e6aa:	dade      	bge.n	800e66a <FT_String_ND+0x436>
							}
							*an=n+n4-lngb-1; //longitud del vector A
 800e6ac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e6ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6b0:	441a      	add	r2, r3
 800e6b2:	69bb      	ldr	r3, [r7, #24]
 800e6b4:	1ad3      	subs	r3, r2, r3
 800e6b6:	1e5a      	subs	r2, r3, #1
 800e6b8:	68bb      	ldr	r3, [r7, #8]
 800e6ba:	601a      	str	r2, [r3, #0]
							n5=0;
 800e6bc:	2300      	movs	r3, #0
 800e6be:	62fb      	str	r3, [r7, #44]	; 0x2c
							while((lnge-lngd+n5)<*cn)
 800e6c0:	e00f      	b.n	800e6e2 <FT_String_ND+0x4ae>
							{
								c[n5]=c[(lnge-lngd+n5)];
 800e6c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e6c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6c6:	1ad2      	subs	r2, r2, r3
 800e6c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6ca:	4413      	add	r3, r2
 800e6cc:	461a      	mov	r2, r3
 800e6ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e6d0:	441a      	add	r2, r3
 800e6d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6d4:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800e6d6:	440b      	add	r3, r1
 800e6d8:	7812      	ldrb	r2, [r2, #0]
 800e6da:	701a      	strb	r2, [r3, #0]
								n5++;
 800e6dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6de:	3301      	adds	r3, #1
 800e6e0:	62fb      	str	r3, [r7, #44]	; 0x2c
							while((lnge-lngd+n5)<*cn)
 800e6e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e6e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6e6:	1ad2      	subs	r2, r2, r3
 800e6e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6ea:	441a      	add	r2, r3
 800e6ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e6ee:	681b      	ldr	r3, [r3, #0]
 800e6f0:	429a      	cmp	r2, r3
 800e6f2:	dbe6      	blt.n	800e6c2 <FT_String_ND+0x48e>
							}
							*cn=n5; //Nueva longitud del vector con datos extaidos
 800e6f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e6f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e6f8:	601a      	str	r2, [r3, #0]

							if((*cn+lnge-lngd+*an)==lnga)
 800e6fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e6fc:	681a      	ldr	r2, [r3, #0]
 800e6fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e700:	441a      	add	r2, r3
 800e702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e704:	1ad2      	subs	r2, r2, r3
 800e706:	68bb      	ldr	r3, [r7, #8]
 800e708:	681b      	ldr	r3, [r3, #0]
 800e70a:	4413      	add	r3, r2
 800e70c:	69fa      	ldr	r2, [r7, #28]
 800e70e:	429a      	cmp	r2, r3
 800e710:	d102      	bne.n	800e718 <FT_String_ND+0x4e4>
							{
								estado=4;
 800e712:	2304      	movs	r3, #4
 800e714:	623b      	str	r3, [r7, #32]
 800e716:	e001      	b.n	800e71c <FT_String_ND+0x4e8>

							}
							else
							{
								estado=5;
 800e718:	2305      	movs	r3, #5
 800e71a:	623b      	str	r3, [r7, #32]
						//--------------------------------    MODO SERVIDOR    -------------------------------
						//---DECODIFICACION DE IPD, EXTRACCI�N DE CADENA PRINCIPAL COPIA A CADENA SECUNDARIA DE
						//--- LOS DATOS CON EVALUACION DE INTEGRIDAD DE LOS MISMOS 4 DATOS OK 5 DATOS NO OK
						//------------------- SOLO VALIDO PARA CLIENTES DE 0 A 9     -------------------------
						//------------------------------------------------------------------------------------
						if((tf==5)&&(estado==1))
 800e71c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e71e:	2b05      	cmp	r3, #5
 800e720:	f040 80c5 	bne.w	800e8ae <FT_String_ND+0x67a>
 800e724:	6a3b      	ldr	r3, [r7, #32]
 800e726:	2b01      	cmp	r3, #1
 800e728:	f040 80c1 	bne.w	800e8ae <FT_String_ND+0x67a>
						{
							while((n-lngb+n4)<=lnga)//---------------Copio a partir del IPD al vector tok que es el c.
 800e72c:	e012      	b.n	800e754 <FT_String_ND+0x520>
							{						 // n quedó en la ultima posicion del vector b
								c[n4]=a[n-lngb+n4];
 800e72e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e730:	69bb      	ldr	r3, [r7, #24]
 800e732:	1ad2      	subs	r2, r2, r3
 800e734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e736:	4413      	add	r3, r2
 800e738:	461a      	mov	r2, r3
 800e73a:	68fb      	ldr	r3, [r7, #12]
 800e73c:	441a      	add	r2, r3
 800e73e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e740:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800e742:	440b      	add	r3, r1
 800e744:	7812      	ldrb	r2, [r2, #0]
 800e746:	701a      	strb	r2, [r3, #0]
								n4++;
 800e748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e74a:	3301      	adds	r3, #1
 800e74c:	633b      	str	r3, [r7, #48]	; 0x30
								*cn=n4;  //lonitud del vector tok + el /r/n+IPD,XXX:
 800e74e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e750:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e752:	601a      	str	r2, [r3, #0]
							while((n-lngb+n4)<=lnga)//---------------Copio a partir del IPD al vector tok que es el c.
 800e754:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e756:	69bb      	ldr	r3, [r7, #24]
 800e758:	1ad2      	subs	r2, r2, r3
 800e75a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e75c:	4413      	add	r3, r2
 800e75e:	69fa      	ldr	r2, [r7, #28]
 800e760:	429a      	cmp	r2, r3
 800e762:	dae4      	bge.n	800e72e <FT_String_ND+0x4fa>
							}
							strtok(c,",:"); //En teoria no afecta el vector
 800e764:	4955      	ldr	r1, [pc, #340]	; (800e8bc <FT_String_ND+0x688>)
 800e766:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800e768:	f000 fb46 	bl	800edf8 <strtok>
							cliente= atoi(strtok(NULL,",: ")); //Clieng del cual se reciben los datos
 800e76c:	4954      	ldr	r1, [pc, #336]	; (800e8c0 <FT_String_ND+0x68c>)
 800e76e:	2000      	movs	r0, #0
 800e770:	f000 fb42 	bl	800edf8 <strtok>
 800e774:	4603      	mov	r3, r0
 800e776:	4618      	mov	r0, r3
 800e778:	f000 f923 	bl	800e9c2 <atoi>
 800e77c:	6138      	str	r0, [r7, #16]
							lngd= atoi(strtok(NULL,",: ")); //Datos informados de +IPD,XX: no deberia afectar el vector
 800e77e:	4950      	ldr	r1, [pc, #320]	; (800e8c0 <FT_String_ND+0x68c>)
 800e780:	2000      	movs	r0, #0
 800e782:	f000 fb39 	bl	800edf8 <strtok>
 800e786:	4603      	mov	r3, r0
 800e788:	4618      	mov	r0, r3
 800e78a:	f000 f91a 	bl	800e9c2 <atoi>
 800e78e:	62b8      	str	r0, [r7, #40]	; 0x28
							if(lngd>=of-1)
 800e790:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e792:	3b01      	subs	r3, #1
 800e794:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e796:	429a      	cmp	r2, r3
 800e798:	db02      	blt.n	800e7a0 <FT_String_ND+0x56c>
							{
								lngd=of-1;
 800e79a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e79c:	3b01      	subs	r3, #1
 800e79e:	62bb      	str	r3, [r7, #40]	; 0x28
							}
							c[6]=',';//------------------------------Reconstruyo vector
 800e7a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e7a2:	3306      	adds	r3, #6
 800e7a4:	222c      	movs	r2, #44	; 0x2c
 800e7a6:	701a      	strb	r2, [r3, #0]
									if (lngd < 10)
 800e7a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7aa:	2b09      	cmp	r3, #9
 800e7ac:	dc07      	bgt.n	800e7be <FT_String_ND+0x58a>
											{
												c[10]=':';
 800e7ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e7b0:	330a      	adds	r3, #10
 800e7b2:	223a      	movs	r2, #58	; 0x3a
 800e7b4:	701a      	strb	r2, [r3, #0]
												//c[8+lngd+1]='\0';
												lnge=11+lngd;
 800e7b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7b8:	330b      	adds	r3, #11
 800e7ba:	627b      	str	r3, [r7, #36]	; 0x24
 800e7bc:	e015      	b.n	800e7ea <FT_String_ND+0x5b6>
											}
											else{
														if (lngd< 100)
 800e7be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7c0:	2b63      	cmp	r3, #99	; 0x63
 800e7c2:	dc07      	bgt.n	800e7d4 <FT_String_ND+0x5a0>
														{
															c[11]=':';
 800e7c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e7c6:	330b      	adds	r3, #11
 800e7c8:	223a      	movs	r2, #58	; 0x3a
 800e7ca:	701a      	strb	r2, [r3, #0]
															//c[9+lngd+1]='\0';
															lnge=12+lngd;
 800e7cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7ce:	330c      	adds	r3, #12
 800e7d0:	627b      	str	r3, [r7, #36]	; 0x24
 800e7d2:	e00a      	b.n	800e7ea <FT_String_ND+0x5b6>
														}
														else
														{
														if (lngd < 1000)
 800e7d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e7da:	da06      	bge.n	800e7ea <FT_String_ND+0x5b6>
														{
															c[12]=':';
 800e7dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e7de:	330c      	adds	r3, #12
 800e7e0:	223a      	movs	r2, #58	; 0x3a
 800e7e2:	701a      	strb	r2, [r3, #0]
															//c[10+lngd+1]='\0';
															lnge=13+lngd;
 800e7e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7e6:	330d      	adds	r3, #13
 800e7e8:	627b      	str	r3, [r7, #36]	; 0x24
														}
														}
													}
												//------------------------------Vector reconstruido
							  //------------------------------Extraccion del vector en el original
							*cn=lnge; //Longitud del vecto TOK completo
 800e7ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e7ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e7ee:	601a      	str	r2, [r3, #0]
							n4=0;
 800e7f0:	2300      	movs	r3, #0
 800e7f2:	633b      	str	r3, [r7, #48]	; 0x30
							while((n-lngb+lnge+n4)<=lnga)//while(a[n-lngb+lnge+n4]!='\0')//---------------Copio a partir del IPD al vector tok.
 800e7f4:	e016      	b.n	800e824 <FT_String_ND+0x5f0>
							{
								a[n-lngb+n4]=a[n-lngb+lnge+n4];
 800e7f6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e7f8:	69bb      	ldr	r3, [r7, #24]
 800e7fa:	1ad2      	subs	r2, r2, r3
 800e7fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7fe:	441a      	add	r2, r3
 800e800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e802:	4413      	add	r3, r2
 800e804:	461a      	mov	r2, r3
 800e806:	68fb      	ldr	r3, [r7, #12]
 800e808:	441a      	add	r2, r3
 800e80a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e80c:	69bb      	ldr	r3, [r7, #24]
 800e80e:	1ac9      	subs	r1, r1, r3
 800e810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e812:	440b      	add	r3, r1
 800e814:	4619      	mov	r1, r3
 800e816:	68fb      	ldr	r3, [r7, #12]
 800e818:	440b      	add	r3, r1
 800e81a:	7812      	ldrb	r2, [r2, #0]
 800e81c:	701a      	strb	r2, [r3, #0]
								n4++;
 800e81e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e820:	3301      	adds	r3, #1
 800e822:	633b      	str	r3, [r7, #48]	; 0x30
							while((n-lngb+lnge+n4)<=lnga)//while(a[n-lngb+lnge+n4]!='\0')//---------------Copio a partir del IPD al vector tok.
 800e824:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e826:	69bb      	ldr	r3, [r7, #24]
 800e828:	1ad2      	subs	r2, r2, r3
 800e82a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e82c:	441a      	add	r2, r3
 800e82e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e830:	4413      	add	r3, r2
 800e832:	69fa      	ldr	r2, [r7, #28]
 800e834:	429a      	cmp	r2, r3
 800e836:	dade      	bge.n	800e7f6 <FT_String_ND+0x5c2>
							}
							*an=n+n4-lngb-1; //longitud del vector A
 800e838:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e83a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e83c:	441a      	add	r2, r3
 800e83e:	69bb      	ldr	r3, [r7, #24]
 800e840:	1ad3      	subs	r3, r2, r3
 800e842:	1e5a      	subs	r2, r3, #1
 800e844:	68bb      	ldr	r3, [r7, #8]
 800e846:	601a      	str	r2, [r3, #0]
							n5=0;
 800e848:	2300      	movs	r3, #0
 800e84a:	62fb      	str	r3, [r7, #44]	; 0x2c
							while((lnge-lngd+n5)<*cn)
 800e84c:	e00f      	b.n	800e86e <FT_String_ND+0x63a>
							{
								c[n5]=c[(lnge-lngd+n5)];
 800e84e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e852:	1ad2      	subs	r2, r2, r3
 800e854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e856:	4413      	add	r3, r2
 800e858:	461a      	mov	r2, r3
 800e85a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e85c:	441a      	add	r2, r3
 800e85e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e860:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800e862:	440b      	add	r3, r1
 800e864:	7812      	ldrb	r2, [r2, #0]
 800e866:	701a      	strb	r2, [r3, #0]
								n5++;
 800e868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e86a:	3301      	adds	r3, #1
 800e86c:	62fb      	str	r3, [r7, #44]	; 0x2c
							while((lnge-lngd+n5)<*cn)
 800e86e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e872:	1ad2      	subs	r2, r2, r3
 800e874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e876:	441a      	add	r2, r3
 800e878:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e87a:	681b      	ldr	r3, [r3, #0]
 800e87c:	429a      	cmp	r2, r3
 800e87e:	dbe6      	blt.n	800e84e <FT_String_ND+0x61a>
							}
							*cn=n5; //Nueva longitud del vector con datos extaidos
 800e880:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e882:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e884:	601a      	str	r2, [r3, #0]

							if((*cn+lnge-lngd+*an)==lnga)
 800e886:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e888:	681a      	ldr	r2, [r3, #0]
 800e88a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e88c:	441a      	add	r2, r3
 800e88e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e890:	1ad2      	subs	r2, r2, r3
 800e892:	68bb      	ldr	r3, [r7, #8]
 800e894:	681b      	ldr	r3, [r3, #0]
 800e896:	4413      	add	r3, r2
 800e898:	69fa      	ldr	r2, [r7, #28]
 800e89a:	429a      	cmp	r2, r3
 800e89c:	d105      	bne.n	800e8aa <FT_String_ND+0x676>
							{
								estado=4;
 800e89e:	2304      	movs	r3, #4
 800e8a0:	623b      	str	r3, [r7, #32]
								*idcom=cliente;
 800e8a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e8a4:	693a      	ldr	r2, [r7, #16]
 800e8a6:	601a      	str	r2, [r3, #0]
 800e8a8:	e001      	b.n	800e8ae <FT_String_ND+0x67a>
							}
							else
							{
								estado=5;
 800e8aa:	2305      	movs	r3, #5
 800e8ac:	623b      	str	r3, [r7, #32]
							//a[n-lngb+n4]='\0';
							//if((n-lngb)==(lnge+n4)) a[0]='\0';
							//estado=3;

						}
						return(estado);
 800e8ae:	6a3b      	ldr	r3, [r7, #32]
 800e8b0:	e000      	b.n	800e8b4 <FT_String_ND+0x680>
					}
			}
			else
			{
				return(2);
 800e8b2:	2302      	movs	r3, #2
			}
}
 800e8b4:	4618      	mov	r0, r3
 800e8b6:	3740      	adds	r7, #64	; 0x40
 800e8b8:	46bd      	mov	sp, r7
 800e8ba:	bd80      	pop	{r7, pc}
 800e8bc:	08010700 	.word	0x08010700
 800e8c0:	08010704 	.word	0x08010704

0800e8c4 <INTOA>:


int INTOA( int a,  unsigned char *v1)
{
 800e8c4:	b580      	push	{r7, lr}
 800e8c6:	b088      	sub	sp, #32
 800e8c8:	af00      	add	r7, sp, #0
 800e8ca:	6078      	str	r0, [r7, #4]
 800e8cc:	6039      	str	r1, [r7, #0]
char origbuff[20]="0";	
 800e8ce:	2330      	movs	r3, #48	; 0x30
 800e8d0:	60bb      	str	r3, [r7, #8]
 800e8d2:	f107 030c 	add.w	r3, r7, #12
 800e8d6:	2200      	movs	r2, #0
 800e8d8:	601a      	str	r2, [r3, #0]
 800e8da:	605a      	str	r2, [r3, #4]
 800e8dc:	609a      	str	r2, [r3, #8]
 800e8de:	60da      	str	r2, [r3, #12]
int i=0;	
 800e8e0:	2300      	movs	r3, #0
 800e8e2:	61fb      	str	r3, [r7, #28]
	
		sprintf(origbuff,"%i",a);	
 800e8e4:	f107 0308 	add.w	r3, r7, #8
 800e8e8:	687a      	ldr	r2, [r7, #4]
 800e8ea:	490f      	ldr	r1, [pc, #60]	; (800e928 <INTOA+0x64>)
 800e8ec:	4618      	mov	r0, r3
 800e8ee:	f000 fa05 	bl	800ecfc <siprintf>
		while(i<=strlen(origbuff))
 800e8f2:	e00b      	b.n	800e90c <INTOA+0x48>
		{			
		*v1++=(unsigned char)origbuff[i];
 800e8f4:	683b      	ldr	r3, [r7, #0]
 800e8f6:	1c5a      	adds	r2, r3, #1
 800e8f8:	603a      	str	r2, [r7, #0]
 800e8fa:	f107 0108 	add.w	r1, r7, #8
 800e8fe:	69fa      	ldr	r2, [r7, #28]
 800e900:	440a      	add	r2, r1
 800e902:	7812      	ldrb	r2, [r2, #0]
 800e904:	701a      	strb	r2, [r3, #0]
		i++;
 800e906:	69fb      	ldr	r3, [r7, #28]
 800e908:	3301      	adds	r3, #1
 800e90a:	61fb      	str	r3, [r7, #28]
		while(i<=strlen(origbuff))
 800e90c:	f107 0308 	add.w	r3, r7, #8
 800e910:	4618      	mov	r0, r3
 800e912:	f7f1 fc6f 	bl	80001f4 <strlen>
 800e916:	4602      	mov	r2, r0
 800e918:	69fb      	ldr	r3, [r7, #28]
 800e91a:	429a      	cmp	r2, r3
 800e91c:	d2ea      	bcs.n	800e8f4 <INTOA+0x30>
		}
		return(i);
 800e91e:	69fb      	ldr	r3, [r7, #28]
}
 800e920:	4618      	mov	r0, r3
 800e922:	3720      	adds	r7, #32
 800e924:	46bd      	mov	sp, r7
 800e926:	bd80      	pop	{r7, pc}
 800e928:	08010708 	.word	0x08010708

0800e92c <CopiaVector>:
					 c|=(b);
	return (c);
}

int CopiaVector( char *a, char *b, int c, int d,char *e)
{
 800e92c:	b580      	push	{r7, lr}
 800e92e:	b088      	sub	sp, #32
 800e930:	af00      	add	r7, sp, #0
 800e932:	60f8      	str	r0, [r7, #12]
 800e934:	60b9      	str	r1, [r7, #8]
 800e936:	607a      	str	r2, [r7, #4]
 800e938:	603b      	str	r3, [r7, #0]
int x =0;
 800e93a:	2300      	movs	r3, #0
 800e93c:	61bb      	str	r3, [r7, #24]
char j[]="\0";  //Vector
 800e93e:	2300      	movs	r3, #0
 800e940:	823b      	strh	r3, [r7, #16]
char *f=&j;		//Puntero tipo char que aloja las direcciones de memoria del vector j
 800e942:	f107 0310 	add.w	r3, r7, #16
 800e946:	617b      	str	r3, [r7, #20]
if (c==0) x=strlen(b);
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	2b00      	cmp	r3, #0
 800e94c:	d105      	bne.n	800e95a <CopiaVector+0x2e>
 800e94e:	68b8      	ldr	r0, [r7, #8]
 800e950:	f7f1 fc50 	bl	80001f4 <strlen>
 800e954:	4603      	mov	r3, r0
 800e956:	61bb      	str	r3, [r7, #24]
 800e958:	e02e      	b.n	800e9b8 <CopiaVector+0x8c>
else
	{
		x=c;
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	61bb      	str	r3, [r7, #24]
		if (x>1024)// OJO SOLO HTTP if (x>128) (x>512)
 800e95e:	69bb      	ldr	r3, [r7, #24]
 800e960:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e964:	dd01      	ble.n	800e96a <CopiaVector+0x3e>
			{
				return(1);
 800e966:	2301      	movs	r3, #1
 800e968:	e027      	b.n	800e9ba <CopiaVector+0x8e>
			}
		else
			{
				int p=0;
 800e96a:	2300      	movs	r3, #0
 800e96c:	61fb      	str	r3, [r7, #28]
				while(p<x)
 800e96e:	e00a      	b.n	800e986 <CopiaVector+0x5a>
				{
					*a++=*b++;
 800e970:	68ba      	ldr	r2, [r7, #8]
 800e972:	1c53      	adds	r3, r2, #1
 800e974:	60bb      	str	r3, [r7, #8]
 800e976:	68fb      	ldr	r3, [r7, #12]
 800e978:	1c59      	adds	r1, r3, #1
 800e97a:	60f9      	str	r1, [r7, #12]
 800e97c:	7812      	ldrb	r2, [r2, #0]
 800e97e:	701a      	strb	r2, [r3, #0]
					p++;
 800e980:	69fb      	ldr	r3, [r7, #28]
 800e982:	3301      	adds	r3, #1
 800e984:	61fb      	str	r3, [r7, #28]
				while(p<x)
 800e986:	69fa      	ldr	r2, [r7, #28]
 800e988:	69bb      	ldr	r3, [r7, #24]
 800e98a:	429a      	cmp	r2, r3
 800e98c:	dbf0      	blt.n	800e970 <CopiaVector+0x44>
				}
				if (d==1)
 800e98e:	683b      	ldr	r3, [r7, #0]
 800e990:	2b01      	cmp	r3, #1
 800e992:	d111      	bne.n	800e9b8 <CopiaVector+0x8c>
				{
				  p=c;
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	61fb      	str	r3, [r7, #28]
				  while (p<c+1)//512)// OJO SOLO HTTP while (p<128)
 800e998:	e008      	b.n	800e9ac <CopiaVector+0x80>
				  {
					  *a++=*f;//*a++=*e; //Lo que está en la memoria de f vaya a la memoria de a
 800e99a:	68fb      	ldr	r3, [r7, #12]
 800e99c:	1c5a      	adds	r2, r3, #1
 800e99e:	60fa      	str	r2, [r7, #12]
 800e9a0:	697a      	ldr	r2, [r7, #20]
 800e9a2:	7812      	ldrb	r2, [r2, #0]
 800e9a4:	701a      	strb	r2, [r3, #0]
					  p++;
 800e9a6:	69fb      	ldr	r3, [r7, #28]
 800e9a8:	3301      	adds	r3, #1
 800e9aa:	61fb      	str	r3, [r7, #28]
				  while (p<c+1)//512)// OJO SOLO HTTP while (p<128)
 800e9ac:	687a      	ldr	r2, [r7, #4]
 800e9ae:	69fb      	ldr	r3, [r7, #28]
 800e9b0:	429a      	cmp	r2, r3
 800e9b2:	daf2      	bge.n	800e99a <CopiaVector+0x6e>
				  }
				return (0);
 800e9b4:	2300      	movs	r3, #0
 800e9b6:	e000      	b.n	800e9ba <CopiaVector+0x8e>
				}
			}
	}
return (1);
 800e9b8:	2301      	movs	r3, #1
}
 800e9ba:	4618      	mov	r0, r3
 800e9bc:	3720      	adds	r7, #32
 800e9be:	46bd      	mov	sp, r7
 800e9c0:	bd80      	pop	{r7, pc}

0800e9c2 <atoi>:
 800e9c2:	220a      	movs	r2, #10
 800e9c4:	2100      	movs	r1, #0
 800e9c6:	f000 b89d 	b.w	800eb04 <strtol>

0800e9ca <__itoa>:
 800e9ca:	1e93      	subs	r3, r2, #2
 800e9cc:	2b22      	cmp	r3, #34	; 0x22
 800e9ce:	b510      	push	{r4, lr}
 800e9d0:	460c      	mov	r4, r1
 800e9d2:	d904      	bls.n	800e9de <__itoa+0x14>
 800e9d4:	2300      	movs	r3, #0
 800e9d6:	700b      	strb	r3, [r1, #0]
 800e9d8:	461c      	mov	r4, r3
 800e9da:	4620      	mov	r0, r4
 800e9dc:	bd10      	pop	{r4, pc}
 800e9de:	2a0a      	cmp	r2, #10
 800e9e0:	d109      	bne.n	800e9f6 <__itoa+0x2c>
 800e9e2:	2800      	cmp	r0, #0
 800e9e4:	da07      	bge.n	800e9f6 <__itoa+0x2c>
 800e9e6:	232d      	movs	r3, #45	; 0x2d
 800e9e8:	700b      	strb	r3, [r1, #0]
 800e9ea:	4240      	negs	r0, r0
 800e9ec:	2101      	movs	r1, #1
 800e9ee:	4421      	add	r1, r4
 800e9f0:	f000 f892 	bl	800eb18 <__utoa>
 800e9f4:	e7f1      	b.n	800e9da <__itoa+0x10>
 800e9f6:	2100      	movs	r1, #0
 800e9f8:	e7f9      	b.n	800e9ee <__itoa+0x24>

0800e9fa <itoa>:
 800e9fa:	f7ff bfe6 	b.w	800e9ca <__itoa>
	...

0800ea00 <_strtol_l.constprop.0>:
 800ea00:	2b01      	cmp	r3, #1
 800ea02:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ea06:	d001      	beq.n	800ea0c <_strtol_l.constprop.0+0xc>
 800ea08:	2b24      	cmp	r3, #36	; 0x24
 800ea0a:	d906      	bls.n	800ea1a <_strtol_l.constprop.0+0x1a>
 800ea0c:	f000 fa96 	bl	800ef3c <__errno>
 800ea10:	2316      	movs	r3, #22
 800ea12:	6003      	str	r3, [r0, #0]
 800ea14:	2000      	movs	r0, #0
 800ea16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ea1a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800eb00 <_strtol_l.constprop.0+0x100>
 800ea1e:	460d      	mov	r5, r1
 800ea20:	462e      	mov	r6, r5
 800ea22:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ea26:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800ea2a:	f017 0708 	ands.w	r7, r7, #8
 800ea2e:	d1f7      	bne.n	800ea20 <_strtol_l.constprop.0+0x20>
 800ea30:	2c2d      	cmp	r4, #45	; 0x2d
 800ea32:	d132      	bne.n	800ea9a <_strtol_l.constprop.0+0x9a>
 800ea34:	782c      	ldrb	r4, [r5, #0]
 800ea36:	2701      	movs	r7, #1
 800ea38:	1cb5      	adds	r5, r6, #2
 800ea3a:	2b00      	cmp	r3, #0
 800ea3c:	d05b      	beq.n	800eaf6 <_strtol_l.constprop.0+0xf6>
 800ea3e:	2b10      	cmp	r3, #16
 800ea40:	d109      	bne.n	800ea56 <_strtol_l.constprop.0+0x56>
 800ea42:	2c30      	cmp	r4, #48	; 0x30
 800ea44:	d107      	bne.n	800ea56 <_strtol_l.constprop.0+0x56>
 800ea46:	782c      	ldrb	r4, [r5, #0]
 800ea48:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800ea4c:	2c58      	cmp	r4, #88	; 0x58
 800ea4e:	d14d      	bne.n	800eaec <_strtol_l.constprop.0+0xec>
 800ea50:	786c      	ldrb	r4, [r5, #1]
 800ea52:	2310      	movs	r3, #16
 800ea54:	3502      	adds	r5, #2
 800ea56:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800ea5a:	f108 38ff 	add.w	r8, r8, #4294967295
 800ea5e:	f04f 0e00 	mov.w	lr, #0
 800ea62:	fbb8 f9f3 	udiv	r9, r8, r3
 800ea66:	4676      	mov	r6, lr
 800ea68:	fb03 8a19 	mls	sl, r3, r9, r8
 800ea6c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800ea70:	f1bc 0f09 	cmp.w	ip, #9
 800ea74:	d816      	bhi.n	800eaa4 <_strtol_l.constprop.0+0xa4>
 800ea76:	4664      	mov	r4, ip
 800ea78:	42a3      	cmp	r3, r4
 800ea7a:	dd24      	ble.n	800eac6 <_strtol_l.constprop.0+0xc6>
 800ea7c:	f1be 3fff 	cmp.w	lr, #4294967295
 800ea80:	d008      	beq.n	800ea94 <_strtol_l.constprop.0+0x94>
 800ea82:	45b1      	cmp	r9, r6
 800ea84:	d31c      	bcc.n	800eac0 <_strtol_l.constprop.0+0xc0>
 800ea86:	d101      	bne.n	800ea8c <_strtol_l.constprop.0+0x8c>
 800ea88:	45a2      	cmp	sl, r4
 800ea8a:	db19      	blt.n	800eac0 <_strtol_l.constprop.0+0xc0>
 800ea8c:	fb06 4603 	mla	r6, r6, r3, r4
 800ea90:	f04f 0e01 	mov.w	lr, #1
 800ea94:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ea98:	e7e8      	b.n	800ea6c <_strtol_l.constprop.0+0x6c>
 800ea9a:	2c2b      	cmp	r4, #43	; 0x2b
 800ea9c:	bf04      	itt	eq
 800ea9e:	782c      	ldrbeq	r4, [r5, #0]
 800eaa0:	1cb5      	addeq	r5, r6, #2
 800eaa2:	e7ca      	b.n	800ea3a <_strtol_l.constprop.0+0x3a>
 800eaa4:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800eaa8:	f1bc 0f19 	cmp.w	ip, #25
 800eaac:	d801      	bhi.n	800eab2 <_strtol_l.constprop.0+0xb2>
 800eaae:	3c37      	subs	r4, #55	; 0x37
 800eab0:	e7e2      	b.n	800ea78 <_strtol_l.constprop.0+0x78>
 800eab2:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800eab6:	f1bc 0f19 	cmp.w	ip, #25
 800eaba:	d804      	bhi.n	800eac6 <_strtol_l.constprop.0+0xc6>
 800eabc:	3c57      	subs	r4, #87	; 0x57
 800eabe:	e7db      	b.n	800ea78 <_strtol_l.constprop.0+0x78>
 800eac0:	f04f 3eff 	mov.w	lr, #4294967295
 800eac4:	e7e6      	b.n	800ea94 <_strtol_l.constprop.0+0x94>
 800eac6:	f1be 3fff 	cmp.w	lr, #4294967295
 800eaca:	d105      	bne.n	800ead8 <_strtol_l.constprop.0+0xd8>
 800eacc:	2322      	movs	r3, #34	; 0x22
 800eace:	6003      	str	r3, [r0, #0]
 800ead0:	4646      	mov	r6, r8
 800ead2:	b942      	cbnz	r2, 800eae6 <_strtol_l.constprop.0+0xe6>
 800ead4:	4630      	mov	r0, r6
 800ead6:	e79e      	b.n	800ea16 <_strtol_l.constprop.0+0x16>
 800ead8:	b107      	cbz	r7, 800eadc <_strtol_l.constprop.0+0xdc>
 800eada:	4276      	negs	r6, r6
 800eadc:	2a00      	cmp	r2, #0
 800eade:	d0f9      	beq.n	800ead4 <_strtol_l.constprop.0+0xd4>
 800eae0:	f1be 0f00 	cmp.w	lr, #0
 800eae4:	d000      	beq.n	800eae8 <_strtol_l.constprop.0+0xe8>
 800eae6:	1e69      	subs	r1, r5, #1
 800eae8:	6011      	str	r1, [r2, #0]
 800eaea:	e7f3      	b.n	800ead4 <_strtol_l.constprop.0+0xd4>
 800eaec:	2430      	movs	r4, #48	; 0x30
 800eaee:	2b00      	cmp	r3, #0
 800eaf0:	d1b1      	bne.n	800ea56 <_strtol_l.constprop.0+0x56>
 800eaf2:	2308      	movs	r3, #8
 800eaf4:	e7af      	b.n	800ea56 <_strtol_l.constprop.0+0x56>
 800eaf6:	2c30      	cmp	r4, #48	; 0x30
 800eaf8:	d0a5      	beq.n	800ea46 <_strtol_l.constprop.0+0x46>
 800eafa:	230a      	movs	r3, #10
 800eafc:	e7ab      	b.n	800ea56 <_strtol_l.constprop.0+0x56>
 800eafe:	bf00      	nop
 800eb00:	0801074a 	.word	0x0801074a

0800eb04 <strtol>:
 800eb04:	4613      	mov	r3, r2
 800eb06:	460a      	mov	r2, r1
 800eb08:	4601      	mov	r1, r0
 800eb0a:	4802      	ldr	r0, [pc, #8]	; (800eb14 <strtol+0x10>)
 800eb0c:	6800      	ldr	r0, [r0, #0]
 800eb0e:	f7ff bf77 	b.w	800ea00 <_strtol_l.constprop.0>
 800eb12:	bf00      	nop
 800eb14:	20000174 	.word	0x20000174

0800eb18 <__utoa>:
 800eb18:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eb1a:	4c1f      	ldr	r4, [pc, #124]	; (800eb98 <__utoa+0x80>)
 800eb1c:	b08b      	sub	sp, #44	; 0x2c
 800eb1e:	4605      	mov	r5, r0
 800eb20:	460b      	mov	r3, r1
 800eb22:	466e      	mov	r6, sp
 800eb24:	f104 0c20 	add.w	ip, r4, #32
 800eb28:	6820      	ldr	r0, [r4, #0]
 800eb2a:	6861      	ldr	r1, [r4, #4]
 800eb2c:	4637      	mov	r7, r6
 800eb2e:	c703      	stmia	r7!, {r0, r1}
 800eb30:	3408      	adds	r4, #8
 800eb32:	4564      	cmp	r4, ip
 800eb34:	463e      	mov	r6, r7
 800eb36:	d1f7      	bne.n	800eb28 <__utoa+0x10>
 800eb38:	7921      	ldrb	r1, [r4, #4]
 800eb3a:	7139      	strb	r1, [r7, #4]
 800eb3c:	1e91      	subs	r1, r2, #2
 800eb3e:	6820      	ldr	r0, [r4, #0]
 800eb40:	6038      	str	r0, [r7, #0]
 800eb42:	2922      	cmp	r1, #34	; 0x22
 800eb44:	f04f 0100 	mov.w	r1, #0
 800eb48:	d904      	bls.n	800eb54 <__utoa+0x3c>
 800eb4a:	7019      	strb	r1, [r3, #0]
 800eb4c:	460b      	mov	r3, r1
 800eb4e:	4618      	mov	r0, r3
 800eb50:	b00b      	add	sp, #44	; 0x2c
 800eb52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eb54:	1e58      	subs	r0, r3, #1
 800eb56:	4684      	mov	ip, r0
 800eb58:	fbb5 f7f2 	udiv	r7, r5, r2
 800eb5c:	fb02 5617 	mls	r6, r2, r7, r5
 800eb60:	3628      	adds	r6, #40	; 0x28
 800eb62:	446e      	add	r6, sp
 800eb64:	460c      	mov	r4, r1
 800eb66:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800eb6a:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800eb6e:	462e      	mov	r6, r5
 800eb70:	42b2      	cmp	r2, r6
 800eb72:	f101 0101 	add.w	r1, r1, #1
 800eb76:	463d      	mov	r5, r7
 800eb78:	d9ee      	bls.n	800eb58 <__utoa+0x40>
 800eb7a:	2200      	movs	r2, #0
 800eb7c:	545a      	strb	r2, [r3, r1]
 800eb7e:	1919      	adds	r1, r3, r4
 800eb80:	1aa5      	subs	r5, r4, r2
 800eb82:	42aa      	cmp	r2, r5
 800eb84:	dae3      	bge.n	800eb4e <__utoa+0x36>
 800eb86:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800eb8a:	780e      	ldrb	r6, [r1, #0]
 800eb8c:	7006      	strb	r6, [r0, #0]
 800eb8e:	3201      	adds	r2, #1
 800eb90:	f801 5901 	strb.w	r5, [r1], #-1
 800eb94:	e7f4      	b.n	800eb80 <__utoa+0x68>
 800eb96:	bf00      	nop
 800eb98:	08010724 	.word	0x08010724

0800eb9c <std>:
 800eb9c:	2300      	movs	r3, #0
 800eb9e:	b510      	push	{r4, lr}
 800eba0:	4604      	mov	r4, r0
 800eba2:	e9c0 3300 	strd	r3, r3, [r0]
 800eba6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ebaa:	6083      	str	r3, [r0, #8]
 800ebac:	8181      	strh	r1, [r0, #12]
 800ebae:	6643      	str	r3, [r0, #100]	; 0x64
 800ebb0:	81c2      	strh	r2, [r0, #14]
 800ebb2:	6183      	str	r3, [r0, #24]
 800ebb4:	4619      	mov	r1, r3
 800ebb6:	2208      	movs	r2, #8
 800ebb8:	305c      	adds	r0, #92	; 0x5c
 800ebba:	f000 f902 	bl	800edc2 <memset>
 800ebbe:	4b05      	ldr	r3, [pc, #20]	; (800ebd4 <std+0x38>)
 800ebc0:	6263      	str	r3, [r4, #36]	; 0x24
 800ebc2:	4b05      	ldr	r3, [pc, #20]	; (800ebd8 <std+0x3c>)
 800ebc4:	62a3      	str	r3, [r4, #40]	; 0x28
 800ebc6:	4b05      	ldr	r3, [pc, #20]	; (800ebdc <std+0x40>)
 800ebc8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ebca:	4b05      	ldr	r3, [pc, #20]	; (800ebe0 <std+0x44>)
 800ebcc:	6224      	str	r4, [r4, #32]
 800ebce:	6323      	str	r3, [r4, #48]	; 0x30
 800ebd0:	bd10      	pop	{r4, pc}
 800ebd2:	bf00      	nop
 800ebd4:	0800ed3d 	.word	0x0800ed3d
 800ebd8:	0800ed5f 	.word	0x0800ed5f
 800ebdc:	0800ed97 	.word	0x0800ed97
 800ebe0:	0800edbb 	.word	0x0800edbb

0800ebe4 <stdio_exit_handler>:
 800ebe4:	4a02      	ldr	r2, [pc, #8]	; (800ebf0 <stdio_exit_handler+0xc>)
 800ebe6:	4903      	ldr	r1, [pc, #12]	; (800ebf4 <stdio_exit_handler+0x10>)
 800ebe8:	4803      	ldr	r0, [pc, #12]	; (800ebf8 <stdio_exit_handler+0x14>)
 800ebea:	f000 b869 	b.w	800ecc0 <_fwalk_sglue>
 800ebee:	bf00      	nop
 800ebf0:	2000011c 	.word	0x2000011c
 800ebf4:	0800f8bd 	.word	0x0800f8bd
 800ebf8:	20000128 	.word	0x20000128

0800ebfc <cleanup_stdio>:
 800ebfc:	6841      	ldr	r1, [r0, #4]
 800ebfe:	4b0c      	ldr	r3, [pc, #48]	; (800ec30 <cleanup_stdio+0x34>)
 800ec00:	4299      	cmp	r1, r3
 800ec02:	b510      	push	{r4, lr}
 800ec04:	4604      	mov	r4, r0
 800ec06:	d001      	beq.n	800ec0c <cleanup_stdio+0x10>
 800ec08:	f000 fe58 	bl	800f8bc <_fflush_r>
 800ec0c:	68a1      	ldr	r1, [r4, #8]
 800ec0e:	4b09      	ldr	r3, [pc, #36]	; (800ec34 <cleanup_stdio+0x38>)
 800ec10:	4299      	cmp	r1, r3
 800ec12:	d002      	beq.n	800ec1a <cleanup_stdio+0x1e>
 800ec14:	4620      	mov	r0, r4
 800ec16:	f000 fe51 	bl	800f8bc <_fflush_r>
 800ec1a:	68e1      	ldr	r1, [r4, #12]
 800ec1c:	4b06      	ldr	r3, [pc, #24]	; (800ec38 <cleanup_stdio+0x3c>)
 800ec1e:	4299      	cmp	r1, r3
 800ec20:	d004      	beq.n	800ec2c <cleanup_stdio+0x30>
 800ec22:	4620      	mov	r0, r4
 800ec24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ec28:	f000 be48 	b.w	800f8bc <_fflush_r>
 800ec2c:	bd10      	pop	{r4, pc}
 800ec2e:	bf00      	nop
 800ec30:	20004474 	.word	0x20004474
 800ec34:	200044dc 	.word	0x200044dc
 800ec38:	20004544 	.word	0x20004544

0800ec3c <global_stdio_init.part.0>:
 800ec3c:	b510      	push	{r4, lr}
 800ec3e:	4b0b      	ldr	r3, [pc, #44]	; (800ec6c <global_stdio_init.part.0+0x30>)
 800ec40:	4c0b      	ldr	r4, [pc, #44]	; (800ec70 <global_stdio_init.part.0+0x34>)
 800ec42:	4a0c      	ldr	r2, [pc, #48]	; (800ec74 <global_stdio_init.part.0+0x38>)
 800ec44:	601a      	str	r2, [r3, #0]
 800ec46:	4620      	mov	r0, r4
 800ec48:	2200      	movs	r2, #0
 800ec4a:	2104      	movs	r1, #4
 800ec4c:	f7ff ffa6 	bl	800eb9c <std>
 800ec50:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800ec54:	2201      	movs	r2, #1
 800ec56:	2109      	movs	r1, #9
 800ec58:	f7ff ffa0 	bl	800eb9c <std>
 800ec5c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800ec60:	2202      	movs	r2, #2
 800ec62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ec66:	2112      	movs	r1, #18
 800ec68:	f7ff bf98 	b.w	800eb9c <std>
 800ec6c:	200045ac 	.word	0x200045ac
 800ec70:	20004474 	.word	0x20004474
 800ec74:	0800ebe5 	.word	0x0800ebe5

0800ec78 <__sfp_lock_acquire>:
 800ec78:	4801      	ldr	r0, [pc, #4]	; (800ec80 <__sfp_lock_acquire+0x8>)
 800ec7a:	f000 b989 	b.w	800ef90 <__retarget_lock_acquire_recursive>
 800ec7e:	bf00      	nop
 800ec80:	200045b5 	.word	0x200045b5

0800ec84 <__sfp_lock_release>:
 800ec84:	4801      	ldr	r0, [pc, #4]	; (800ec8c <__sfp_lock_release+0x8>)
 800ec86:	f000 b984 	b.w	800ef92 <__retarget_lock_release_recursive>
 800ec8a:	bf00      	nop
 800ec8c:	200045b5 	.word	0x200045b5

0800ec90 <__sinit>:
 800ec90:	b510      	push	{r4, lr}
 800ec92:	4604      	mov	r4, r0
 800ec94:	f7ff fff0 	bl	800ec78 <__sfp_lock_acquire>
 800ec98:	6a23      	ldr	r3, [r4, #32]
 800ec9a:	b11b      	cbz	r3, 800eca4 <__sinit+0x14>
 800ec9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800eca0:	f7ff bff0 	b.w	800ec84 <__sfp_lock_release>
 800eca4:	4b04      	ldr	r3, [pc, #16]	; (800ecb8 <__sinit+0x28>)
 800eca6:	6223      	str	r3, [r4, #32]
 800eca8:	4b04      	ldr	r3, [pc, #16]	; (800ecbc <__sinit+0x2c>)
 800ecaa:	681b      	ldr	r3, [r3, #0]
 800ecac:	2b00      	cmp	r3, #0
 800ecae:	d1f5      	bne.n	800ec9c <__sinit+0xc>
 800ecb0:	f7ff ffc4 	bl	800ec3c <global_stdio_init.part.0>
 800ecb4:	e7f2      	b.n	800ec9c <__sinit+0xc>
 800ecb6:	bf00      	nop
 800ecb8:	0800ebfd 	.word	0x0800ebfd
 800ecbc:	200045ac 	.word	0x200045ac

0800ecc0 <_fwalk_sglue>:
 800ecc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ecc4:	4607      	mov	r7, r0
 800ecc6:	4688      	mov	r8, r1
 800ecc8:	4614      	mov	r4, r2
 800ecca:	2600      	movs	r6, #0
 800eccc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ecd0:	f1b9 0901 	subs.w	r9, r9, #1
 800ecd4:	d505      	bpl.n	800ece2 <_fwalk_sglue+0x22>
 800ecd6:	6824      	ldr	r4, [r4, #0]
 800ecd8:	2c00      	cmp	r4, #0
 800ecda:	d1f7      	bne.n	800eccc <_fwalk_sglue+0xc>
 800ecdc:	4630      	mov	r0, r6
 800ecde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ece2:	89ab      	ldrh	r3, [r5, #12]
 800ece4:	2b01      	cmp	r3, #1
 800ece6:	d907      	bls.n	800ecf8 <_fwalk_sglue+0x38>
 800ece8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ecec:	3301      	adds	r3, #1
 800ecee:	d003      	beq.n	800ecf8 <_fwalk_sglue+0x38>
 800ecf0:	4629      	mov	r1, r5
 800ecf2:	4638      	mov	r0, r7
 800ecf4:	47c0      	blx	r8
 800ecf6:	4306      	orrs	r6, r0
 800ecf8:	3568      	adds	r5, #104	; 0x68
 800ecfa:	e7e9      	b.n	800ecd0 <_fwalk_sglue+0x10>

0800ecfc <siprintf>:
 800ecfc:	b40e      	push	{r1, r2, r3}
 800ecfe:	b500      	push	{lr}
 800ed00:	b09c      	sub	sp, #112	; 0x70
 800ed02:	ab1d      	add	r3, sp, #116	; 0x74
 800ed04:	9002      	str	r0, [sp, #8]
 800ed06:	9006      	str	r0, [sp, #24]
 800ed08:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ed0c:	4809      	ldr	r0, [pc, #36]	; (800ed34 <siprintf+0x38>)
 800ed0e:	9107      	str	r1, [sp, #28]
 800ed10:	9104      	str	r1, [sp, #16]
 800ed12:	4909      	ldr	r1, [pc, #36]	; (800ed38 <siprintf+0x3c>)
 800ed14:	f853 2b04 	ldr.w	r2, [r3], #4
 800ed18:	9105      	str	r1, [sp, #20]
 800ed1a:	6800      	ldr	r0, [r0, #0]
 800ed1c:	9301      	str	r3, [sp, #4]
 800ed1e:	a902      	add	r1, sp, #8
 800ed20:	f000 fab8 	bl	800f294 <_svfiprintf_r>
 800ed24:	9b02      	ldr	r3, [sp, #8]
 800ed26:	2200      	movs	r2, #0
 800ed28:	701a      	strb	r2, [r3, #0]
 800ed2a:	b01c      	add	sp, #112	; 0x70
 800ed2c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ed30:	b003      	add	sp, #12
 800ed32:	4770      	bx	lr
 800ed34:	20000174 	.word	0x20000174
 800ed38:	ffff0208 	.word	0xffff0208

0800ed3c <__sread>:
 800ed3c:	b510      	push	{r4, lr}
 800ed3e:	460c      	mov	r4, r1
 800ed40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ed44:	f000 f8d6 	bl	800eef4 <_read_r>
 800ed48:	2800      	cmp	r0, #0
 800ed4a:	bfab      	itete	ge
 800ed4c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ed4e:	89a3      	ldrhlt	r3, [r4, #12]
 800ed50:	181b      	addge	r3, r3, r0
 800ed52:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ed56:	bfac      	ite	ge
 800ed58:	6563      	strge	r3, [r4, #84]	; 0x54
 800ed5a:	81a3      	strhlt	r3, [r4, #12]
 800ed5c:	bd10      	pop	{r4, pc}

0800ed5e <__swrite>:
 800ed5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ed62:	461f      	mov	r7, r3
 800ed64:	898b      	ldrh	r3, [r1, #12]
 800ed66:	05db      	lsls	r3, r3, #23
 800ed68:	4605      	mov	r5, r0
 800ed6a:	460c      	mov	r4, r1
 800ed6c:	4616      	mov	r6, r2
 800ed6e:	d505      	bpl.n	800ed7c <__swrite+0x1e>
 800ed70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ed74:	2302      	movs	r3, #2
 800ed76:	2200      	movs	r2, #0
 800ed78:	f000 f8aa 	bl	800eed0 <_lseek_r>
 800ed7c:	89a3      	ldrh	r3, [r4, #12]
 800ed7e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ed82:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ed86:	81a3      	strh	r3, [r4, #12]
 800ed88:	4632      	mov	r2, r6
 800ed8a:	463b      	mov	r3, r7
 800ed8c:	4628      	mov	r0, r5
 800ed8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ed92:	f000 b8c1 	b.w	800ef18 <_write_r>

0800ed96 <__sseek>:
 800ed96:	b510      	push	{r4, lr}
 800ed98:	460c      	mov	r4, r1
 800ed9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ed9e:	f000 f897 	bl	800eed0 <_lseek_r>
 800eda2:	1c43      	adds	r3, r0, #1
 800eda4:	89a3      	ldrh	r3, [r4, #12]
 800eda6:	bf15      	itete	ne
 800eda8:	6560      	strne	r0, [r4, #84]	; 0x54
 800edaa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800edae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800edb2:	81a3      	strheq	r3, [r4, #12]
 800edb4:	bf18      	it	ne
 800edb6:	81a3      	strhne	r3, [r4, #12]
 800edb8:	bd10      	pop	{r4, pc}

0800edba <__sclose>:
 800edba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800edbe:	f000 b877 	b.w	800eeb0 <_close_r>

0800edc2 <memset>:
 800edc2:	4402      	add	r2, r0
 800edc4:	4603      	mov	r3, r0
 800edc6:	4293      	cmp	r3, r2
 800edc8:	d100      	bne.n	800edcc <memset+0xa>
 800edca:	4770      	bx	lr
 800edcc:	f803 1b01 	strb.w	r1, [r3], #1
 800edd0:	e7f9      	b.n	800edc6 <memset+0x4>

0800edd2 <strncat>:
 800edd2:	b530      	push	{r4, r5, lr}
 800edd4:	4604      	mov	r4, r0
 800edd6:	7825      	ldrb	r5, [r4, #0]
 800edd8:	4623      	mov	r3, r4
 800edda:	3401      	adds	r4, #1
 800eddc:	2d00      	cmp	r5, #0
 800edde:	d1fa      	bne.n	800edd6 <strncat+0x4>
 800ede0:	3a01      	subs	r2, #1
 800ede2:	d304      	bcc.n	800edee <strncat+0x1c>
 800ede4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ede8:	f803 4b01 	strb.w	r4, [r3], #1
 800edec:	b904      	cbnz	r4, 800edf0 <strncat+0x1e>
 800edee:	bd30      	pop	{r4, r5, pc}
 800edf0:	2a00      	cmp	r2, #0
 800edf2:	d1f5      	bne.n	800ede0 <strncat+0xe>
 800edf4:	701a      	strb	r2, [r3, #0]
 800edf6:	e7f3      	b.n	800ede0 <strncat+0xe>

0800edf8 <strtok>:
 800edf8:	4b16      	ldr	r3, [pc, #88]	; (800ee54 <strtok+0x5c>)
 800edfa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800edfc:	681e      	ldr	r6, [r3, #0]
 800edfe:	6c74      	ldr	r4, [r6, #68]	; 0x44
 800ee00:	4605      	mov	r5, r0
 800ee02:	b9fc      	cbnz	r4, 800ee44 <strtok+0x4c>
 800ee04:	2050      	movs	r0, #80	; 0x50
 800ee06:	9101      	str	r1, [sp, #4]
 800ee08:	f000 f936 	bl	800f078 <malloc>
 800ee0c:	9901      	ldr	r1, [sp, #4]
 800ee0e:	6470      	str	r0, [r6, #68]	; 0x44
 800ee10:	4602      	mov	r2, r0
 800ee12:	b920      	cbnz	r0, 800ee1e <strtok+0x26>
 800ee14:	4b10      	ldr	r3, [pc, #64]	; (800ee58 <strtok+0x60>)
 800ee16:	4811      	ldr	r0, [pc, #68]	; (800ee5c <strtok+0x64>)
 800ee18:	215b      	movs	r1, #91	; 0x5b
 800ee1a:	f000 f8c3 	bl	800efa4 <__assert_func>
 800ee1e:	e9c0 4400 	strd	r4, r4, [r0]
 800ee22:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800ee26:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800ee2a:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800ee2e:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800ee32:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800ee36:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800ee3a:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800ee3e:	6184      	str	r4, [r0, #24]
 800ee40:	7704      	strb	r4, [r0, #28]
 800ee42:	6244      	str	r4, [r0, #36]	; 0x24
 800ee44:	6c72      	ldr	r2, [r6, #68]	; 0x44
 800ee46:	2301      	movs	r3, #1
 800ee48:	4628      	mov	r0, r5
 800ee4a:	b002      	add	sp, #8
 800ee4c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ee50:	f000 b806 	b.w	800ee60 <__strtok_r>
 800ee54:	20000174 	.word	0x20000174
 800ee58:	0801084a 	.word	0x0801084a
 800ee5c:	08010861 	.word	0x08010861

0800ee60 <__strtok_r>:
 800ee60:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ee62:	b908      	cbnz	r0, 800ee68 <__strtok_r+0x8>
 800ee64:	6810      	ldr	r0, [r2, #0]
 800ee66:	b188      	cbz	r0, 800ee8c <__strtok_r+0x2c>
 800ee68:	4604      	mov	r4, r0
 800ee6a:	4620      	mov	r0, r4
 800ee6c:	f814 5b01 	ldrb.w	r5, [r4], #1
 800ee70:	460f      	mov	r7, r1
 800ee72:	f817 6b01 	ldrb.w	r6, [r7], #1
 800ee76:	b91e      	cbnz	r6, 800ee80 <__strtok_r+0x20>
 800ee78:	b965      	cbnz	r5, 800ee94 <__strtok_r+0x34>
 800ee7a:	6015      	str	r5, [r2, #0]
 800ee7c:	4628      	mov	r0, r5
 800ee7e:	e005      	b.n	800ee8c <__strtok_r+0x2c>
 800ee80:	42b5      	cmp	r5, r6
 800ee82:	d1f6      	bne.n	800ee72 <__strtok_r+0x12>
 800ee84:	2b00      	cmp	r3, #0
 800ee86:	d1f0      	bne.n	800ee6a <__strtok_r+0xa>
 800ee88:	6014      	str	r4, [r2, #0]
 800ee8a:	7003      	strb	r3, [r0, #0]
 800ee8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ee8e:	461c      	mov	r4, r3
 800ee90:	e00c      	b.n	800eeac <__strtok_r+0x4c>
 800ee92:	b915      	cbnz	r5, 800ee9a <__strtok_r+0x3a>
 800ee94:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ee98:	460e      	mov	r6, r1
 800ee9a:	f816 5b01 	ldrb.w	r5, [r6], #1
 800ee9e:	42ab      	cmp	r3, r5
 800eea0:	d1f7      	bne.n	800ee92 <__strtok_r+0x32>
 800eea2:	2b00      	cmp	r3, #0
 800eea4:	d0f3      	beq.n	800ee8e <__strtok_r+0x2e>
 800eea6:	2300      	movs	r3, #0
 800eea8:	f804 3c01 	strb.w	r3, [r4, #-1]
 800eeac:	6014      	str	r4, [r2, #0]
 800eeae:	e7ed      	b.n	800ee8c <__strtok_r+0x2c>

0800eeb0 <_close_r>:
 800eeb0:	b538      	push	{r3, r4, r5, lr}
 800eeb2:	4d06      	ldr	r5, [pc, #24]	; (800eecc <_close_r+0x1c>)
 800eeb4:	2300      	movs	r3, #0
 800eeb6:	4604      	mov	r4, r0
 800eeb8:	4608      	mov	r0, r1
 800eeba:	602b      	str	r3, [r5, #0]
 800eebc:	f7f3 fe07 	bl	8002ace <_close>
 800eec0:	1c43      	adds	r3, r0, #1
 800eec2:	d102      	bne.n	800eeca <_close_r+0x1a>
 800eec4:	682b      	ldr	r3, [r5, #0]
 800eec6:	b103      	cbz	r3, 800eeca <_close_r+0x1a>
 800eec8:	6023      	str	r3, [r4, #0]
 800eeca:	bd38      	pop	{r3, r4, r5, pc}
 800eecc:	200045b0 	.word	0x200045b0

0800eed0 <_lseek_r>:
 800eed0:	b538      	push	{r3, r4, r5, lr}
 800eed2:	4d07      	ldr	r5, [pc, #28]	; (800eef0 <_lseek_r+0x20>)
 800eed4:	4604      	mov	r4, r0
 800eed6:	4608      	mov	r0, r1
 800eed8:	4611      	mov	r1, r2
 800eeda:	2200      	movs	r2, #0
 800eedc:	602a      	str	r2, [r5, #0]
 800eede:	461a      	mov	r2, r3
 800eee0:	f7f3 fe1c 	bl	8002b1c <_lseek>
 800eee4:	1c43      	adds	r3, r0, #1
 800eee6:	d102      	bne.n	800eeee <_lseek_r+0x1e>
 800eee8:	682b      	ldr	r3, [r5, #0]
 800eeea:	b103      	cbz	r3, 800eeee <_lseek_r+0x1e>
 800eeec:	6023      	str	r3, [r4, #0]
 800eeee:	bd38      	pop	{r3, r4, r5, pc}
 800eef0:	200045b0 	.word	0x200045b0

0800eef4 <_read_r>:
 800eef4:	b538      	push	{r3, r4, r5, lr}
 800eef6:	4d07      	ldr	r5, [pc, #28]	; (800ef14 <_read_r+0x20>)
 800eef8:	4604      	mov	r4, r0
 800eefa:	4608      	mov	r0, r1
 800eefc:	4611      	mov	r1, r2
 800eefe:	2200      	movs	r2, #0
 800ef00:	602a      	str	r2, [r5, #0]
 800ef02:	461a      	mov	r2, r3
 800ef04:	f7f3 fdaa 	bl	8002a5c <_read>
 800ef08:	1c43      	adds	r3, r0, #1
 800ef0a:	d102      	bne.n	800ef12 <_read_r+0x1e>
 800ef0c:	682b      	ldr	r3, [r5, #0]
 800ef0e:	b103      	cbz	r3, 800ef12 <_read_r+0x1e>
 800ef10:	6023      	str	r3, [r4, #0]
 800ef12:	bd38      	pop	{r3, r4, r5, pc}
 800ef14:	200045b0 	.word	0x200045b0

0800ef18 <_write_r>:
 800ef18:	b538      	push	{r3, r4, r5, lr}
 800ef1a:	4d07      	ldr	r5, [pc, #28]	; (800ef38 <_write_r+0x20>)
 800ef1c:	4604      	mov	r4, r0
 800ef1e:	4608      	mov	r0, r1
 800ef20:	4611      	mov	r1, r2
 800ef22:	2200      	movs	r2, #0
 800ef24:	602a      	str	r2, [r5, #0]
 800ef26:	461a      	mov	r2, r3
 800ef28:	f7f3 fdb5 	bl	8002a96 <_write>
 800ef2c:	1c43      	adds	r3, r0, #1
 800ef2e:	d102      	bne.n	800ef36 <_write_r+0x1e>
 800ef30:	682b      	ldr	r3, [r5, #0]
 800ef32:	b103      	cbz	r3, 800ef36 <_write_r+0x1e>
 800ef34:	6023      	str	r3, [r4, #0]
 800ef36:	bd38      	pop	{r3, r4, r5, pc}
 800ef38:	200045b0 	.word	0x200045b0

0800ef3c <__errno>:
 800ef3c:	4b01      	ldr	r3, [pc, #4]	; (800ef44 <__errno+0x8>)
 800ef3e:	6818      	ldr	r0, [r3, #0]
 800ef40:	4770      	bx	lr
 800ef42:	bf00      	nop
 800ef44:	20000174 	.word	0x20000174

0800ef48 <__libc_init_array>:
 800ef48:	b570      	push	{r4, r5, r6, lr}
 800ef4a:	4d0d      	ldr	r5, [pc, #52]	; (800ef80 <__libc_init_array+0x38>)
 800ef4c:	4c0d      	ldr	r4, [pc, #52]	; (800ef84 <__libc_init_array+0x3c>)
 800ef4e:	1b64      	subs	r4, r4, r5
 800ef50:	10a4      	asrs	r4, r4, #2
 800ef52:	2600      	movs	r6, #0
 800ef54:	42a6      	cmp	r6, r4
 800ef56:	d109      	bne.n	800ef6c <__libc_init_array+0x24>
 800ef58:	4d0b      	ldr	r5, [pc, #44]	; (800ef88 <__libc_init_array+0x40>)
 800ef5a:	4c0c      	ldr	r4, [pc, #48]	; (800ef8c <__libc_init_array+0x44>)
 800ef5c:	f001 f800 	bl	800ff60 <_init>
 800ef60:	1b64      	subs	r4, r4, r5
 800ef62:	10a4      	asrs	r4, r4, #2
 800ef64:	2600      	movs	r6, #0
 800ef66:	42a6      	cmp	r6, r4
 800ef68:	d105      	bne.n	800ef76 <__libc_init_array+0x2e>
 800ef6a:	bd70      	pop	{r4, r5, r6, pc}
 800ef6c:	f855 3b04 	ldr.w	r3, [r5], #4
 800ef70:	4798      	blx	r3
 800ef72:	3601      	adds	r6, #1
 800ef74:	e7ee      	b.n	800ef54 <__libc_init_array+0xc>
 800ef76:	f855 3b04 	ldr.w	r3, [r5], #4
 800ef7a:	4798      	blx	r3
 800ef7c:	3601      	adds	r6, #1
 800ef7e:	e7f2      	b.n	800ef66 <__libc_init_array+0x1e>
 800ef80:	08010934 	.word	0x08010934
 800ef84:	08010934 	.word	0x08010934
 800ef88:	08010934 	.word	0x08010934
 800ef8c:	08010938 	.word	0x08010938

0800ef90 <__retarget_lock_acquire_recursive>:
 800ef90:	4770      	bx	lr

0800ef92 <__retarget_lock_release_recursive>:
 800ef92:	4770      	bx	lr

0800ef94 <strcpy>:
 800ef94:	4603      	mov	r3, r0
 800ef96:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ef9a:	f803 2b01 	strb.w	r2, [r3], #1
 800ef9e:	2a00      	cmp	r2, #0
 800efa0:	d1f9      	bne.n	800ef96 <strcpy+0x2>
 800efa2:	4770      	bx	lr

0800efa4 <__assert_func>:
 800efa4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800efa6:	4614      	mov	r4, r2
 800efa8:	461a      	mov	r2, r3
 800efaa:	4b09      	ldr	r3, [pc, #36]	; (800efd0 <__assert_func+0x2c>)
 800efac:	681b      	ldr	r3, [r3, #0]
 800efae:	4605      	mov	r5, r0
 800efb0:	68d8      	ldr	r0, [r3, #12]
 800efb2:	b14c      	cbz	r4, 800efc8 <__assert_func+0x24>
 800efb4:	4b07      	ldr	r3, [pc, #28]	; (800efd4 <__assert_func+0x30>)
 800efb6:	9100      	str	r1, [sp, #0]
 800efb8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800efbc:	4906      	ldr	r1, [pc, #24]	; (800efd8 <__assert_func+0x34>)
 800efbe:	462b      	mov	r3, r5
 800efc0:	f000 fca4 	bl	800f90c <fiprintf>
 800efc4:	f000 fcec 	bl	800f9a0 <abort>
 800efc8:	4b04      	ldr	r3, [pc, #16]	; (800efdc <__assert_func+0x38>)
 800efca:	461c      	mov	r4, r3
 800efcc:	e7f3      	b.n	800efb6 <__assert_func+0x12>
 800efce:	bf00      	nop
 800efd0:	20000174 	.word	0x20000174
 800efd4:	080108bb 	.word	0x080108bb
 800efd8:	080108c8 	.word	0x080108c8
 800efdc:	080108f6 	.word	0x080108f6

0800efe0 <_free_r>:
 800efe0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800efe2:	2900      	cmp	r1, #0
 800efe4:	d044      	beq.n	800f070 <_free_r+0x90>
 800efe6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800efea:	9001      	str	r0, [sp, #4]
 800efec:	2b00      	cmp	r3, #0
 800efee:	f1a1 0404 	sub.w	r4, r1, #4
 800eff2:	bfb8      	it	lt
 800eff4:	18e4      	addlt	r4, r4, r3
 800eff6:	f000 f8e7 	bl	800f1c8 <__malloc_lock>
 800effa:	4a1e      	ldr	r2, [pc, #120]	; (800f074 <_free_r+0x94>)
 800effc:	9801      	ldr	r0, [sp, #4]
 800effe:	6813      	ldr	r3, [r2, #0]
 800f000:	b933      	cbnz	r3, 800f010 <_free_r+0x30>
 800f002:	6063      	str	r3, [r4, #4]
 800f004:	6014      	str	r4, [r2, #0]
 800f006:	b003      	add	sp, #12
 800f008:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f00c:	f000 b8e2 	b.w	800f1d4 <__malloc_unlock>
 800f010:	42a3      	cmp	r3, r4
 800f012:	d908      	bls.n	800f026 <_free_r+0x46>
 800f014:	6825      	ldr	r5, [r4, #0]
 800f016:	1961      	adds	r1, r4, r5
 800f018:	428b      	cmp	r3, r1
 800f01a:	bf01      	itttt	eq
 800f01c:	6819      	ldreq	r1, [r3, #0]
 800f01e:	685b      	ldreq	r3, [r3, #4]
 800f020:	1949      	addeq	r1, r1, r5
 800f022:	6021      	streq	r1, [r4, #0]
 800f024:	e7ed      	b.n	800f002 <_free_r+0x22>
 800f026:	461a      	mov	r2, r3
 800f028:	685b      	ldr	r3, [r3, #4]
 800f02a:	b10b      	cbz	r3, 800f030 <_free_r+0x50>
 800f02c:	42a3      	cmp	r3, r4
 800f02e:	d9fa      	bls.n	800f026 <_free_r+0x46>
 800f030:	6811      	ldr	r1, [r2, #0]
 800f032:	1855      	adds	r5, r2, r1
 800f034:	42a5      	cmp	r5, r4
 800f036:	d10b      	bne.n	800f050 <_free_r+0x70>
 800f038:	6824      	ldr	r4, [r4, #0]
 800f03a:	4421      	add	r1, r4
 800f03c:	1854      	adds	r4, r2, r1
 800f03e:	42a3      	cmp	r3, r4
 800f040:	6011      	str	r1, [r2, #0]
 800f042:	d1e0      	bne.n	800f006 <_free_r+0x26>
 800f044:	681c      	ldr	r4, [r3, #0]
 800f046:	685b      	ldr	r3, [r3, #4]
 800f048:	6053      	str	r3, [r2, #4]
 800f04a:	440c      	add	r4, r1
 800f04c:	6014      	str	r4, [r2, #0]
 800f04e:	e7da      	b.n	800f006 <_free_r+0x26>
 800f050:	d902      	bls.n	800f058 <_free_r+0x78>
 800f052:	230c      	movs	r3, #12
 800f054:	6003      	str	r3, [r0, #0]
 800f056:	e7d6      	b.n	800f006 <_free_r+0x26>
 800f058:	6825      	ldr	r5, [r4, #0]
 800f05a:	1961      	adds	r1, r4, r5
 800f05c:	428b      	cmp	r3, r1
 800f05e:	bf04      	itt	eq
 800f060:	6819      	ldreq	r1, [r3, #0]
 800f062:	685b      	ldreq	r3, [r3, #4]
 800f064:	6063      	str	r3, [r4, #4]
 800f066:	bf04      	itt	eq
 800f068:	1949      	addeq	r1, r1, r5
 800f06a:	6021      	streq	r1, [r4, #0]
 800f06c:	6054      	str	r4, [r2, #4]
 800f06e:	e7ca      	b.n	800f006 <_free_r+0x26>
 800f070:	b003      	add	sp, #12
 800f072:	bd30      	pop	{r4, r5, pc}
 800f074:	200045b8 	.word	0x200045b8

0800f078 <malloc>:
 800f078:	4b02      	ldr	r3, [pc, #8]	; (800f084 <malloc+0xc>)
 800f07a:	4601      	mov	r1, r0
 800f07c:	6818      	ldr	r0, [r3, #0]
 800f07e:	f000 b823 	b.w	800f0c8 <_malloc_r>
 800f082:	bf00      	nop
 800f084:	20000174 	.word	0x20000174

0800f088 <sbrk_aligned>:
 800f088:	b570      	push	{r4, r5, r6, lr}
 800f08a:	4e0e      	ldr	r6, [pc, #56]	; (800f0c4 <sbrk_aligned+0x3c>)
 800f08c:	460c      	mov	r4, r1
 800f08e:	6831      	ldr	r1, [r6, #0]
 800f090:	4605      	mov	r5, r0
 800f092:	b911      	cbnz	r1, 800f09a <sbrk_aligned+0x12>
 800f094:	f000 fc66 	bl	800f964 <_sbrk_r>
 800f098:	6030      	str	r0, [r6, #0]
 800f09a:	4621      	mov	r1, r4
 800f09c:	4628      	mov	r0, r5
 800f09e:	f000 fc61 	bl	800f964 <_sbrk_r>
 800f0a2:	1c43      	adds	r3, r0, #1
 800f0a4:	d00a      	beq.n	800f0bc <sbrk_aligned+0x34>
 800f0a6:	1cc4      	adds	r4, r0, #3
 800f0a8:	f024 0403 	bic.w	r4, r4, #3
 800f0ac:	42a0      	cmp	r0, r4
 800f0ae:	d007      	beq.n	800f0c0 <sbrk_aligned+0x38>
 800f0b0:	1a21      	subs	r1, r4, r0
 800f0b2:	4628      	mov	r0, r5
 800f0b4:	f000 fc56 	bl	800f964 <_sbrk_r>
 800f0b8:	3001      	adds	r0, #1
 800f0ba:	d101      	bne.n	800f0c0 <sbrk_aligned+0x38>
 800f0bc:	f04f 34ff 	mov.w	r4, #4294967295
 800f0c0:	4620      	mov	r0, r4
 800f0c2:	bd70      	pop	{r4, r5, r6, pc}
 800f0c4:	200045bc 	.word	0x200045bc

0800f0c8 <_malloc_r>:
 800f0c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f0cc:	1ccd      	adds	r5, r1, #3
 800f0ce:	f025 0503 	bic.w	r5, r5, #3
 800f0d2:	3508      	adds	r5, #8
 800f0d4:	2d0c      	cmp	r5, #12
 800f0d6:	bf38      	it	cc
 800f0d8:	250c      	movcc	r5, #12
 800f0da:	2d00      	cmp	r5, #0
 800f0dc:	4607      	mov	r7, r0
 800f0de:	db01      	blt.n	800f0e4 <_malloc_r+0x1c>
 800f0e0:	42a9      	cmp	r1, r5
 800f0e2:	d905      	bls.n	800f0f0 <_malloc_r+0x28>
 800f0e4:	230c      	movs	r3, #12
 800f0e6:	603b      	str	r3, [r7, #0]
 800f0e8:	2600      	movs	r6, #0
 800f0ea:	4630      	mov	r0, r6
 800f0ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f0f0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800f1c4 <_malloc_r+0xfc>
 800f0f4:	f000 f868 	bl	800f1c8 <__malloc_lock>
 800f0f8:	f8d8 3000 	ldr.w	r3, [r8]
 800f0fc:	461c      	mov	r4, r3
 800f0fe:	bb5c      	cbnz	r4, 800f158 <_malloc_r+0x90>
 800f100:	4629      	mov	r1, r5
 800f102:	4638      	mov	r0, r7
 800f104:	f7ff ffc0 	bl	800f088 <sbrk_aligned>
 800f108:	1c43      	adds	r3, r0, #1
 800f10a:	4604      	mov	r4, r0
 800f10c:	d155      	bne.n	800f1ba <_malloc_r+0xf2>
 800f10e:	f8d8 4000 	ldr.w	r4, [r8]
 800f112:	4626      	mov	r6, r4
 800f114:	2e00      	cmp	r6, #0
 800f116:	d145      	bne.n	800f1a4 <_malloc_r+0xdc>
 800f118:	2c00      	cmp	r4, #0
 800f11a:	d048      	beq.n	800f1ae <_malloc_r+0xe6>
 800f11c:	6823      	ldr	r3, [r4, #0]
 800f11e:	4631      	mov	r1, r6
 800f120:	4638      	mov	r0, r7
 800f122:	eb04 0903 	add.w	r9, r4, r3
 800f126:	f000 fc1d 	bl	800f964 <_sbrk_r>
 800f12a:	4581      	cmp	r9, r0
 800f12c:	d13f      	bne.n	800f1ae <_malloc_r+0xe6>
 800f12e:	6821      	ldr	r1, [r4, #0]
 800f130:	1a6d      	subs	r5, r5, r1
 800f132:	4629      	mov	r1, r5
 800f134:	4638      	mov	r0, r7
 800f136:	f7ff ffa7 	bl	800f088 <sbrk_aligned>
 800f13a:	3001      	adds	r0, #1
 800f13c:	d037      	beq.n	800f1ae <_malloc_r+0xe6>
 800f13e:	6823      	ldr	r3, [r4, #0]
 800f140:	442b      	add	r3, r5
 800f142:	6023      	str	r3, [r4, #0]
 800f144:	f8d8 3000 	ldr.w	r3, [r8]
 800f148:	2b00      	cmp	r3, #0
 800f14a:	d038      	beq.n	800f1be <_malloc_r+0xf6>
 800f14c:	685a      	ldr	r2, [r3, #4]
 800f14e:	42a2      	cmp	r2, r4
 800f150:	d12b      	bne.n	800f1aa <_malloc_r+0xe2>
 800f152:	2200      	movs	r2, #0
 800f154:	605a      	str	r2, [r3, #4]
 800f156:	e00f      	b.n	800f178 <_malloc_r+0xb0>
 800f158:	6822      	ldr	r2, [r4, #0]
 800f15a:	1b52      	subs	r2, r2, r5
 800f15c:	d41f      	bmi.n	800f19e <_malloc_r+0xd6>
 800f15e:	2a0b      	cmp	r2, #11
 800f160:	d917      	bls.n	800f192 <_malloc_r+0xca>
 800f162:	1961      	adds	r1, r4, r5
 800f164:	42a3      	cmp	r3, r4
 800f166:	6025      	str	r5, [r4, #0]
 800f168:	bf18      	it	ne
 800f16a:	6059      	strne	r1, [r3, #4]
 800f16c:	6863      	ldr	r3, [r4, #4]
 800f16e:	bf08      	it	eq
 800f170:	f8c8 1000 	streq.w	r1, [r8]
 800f174:	5162      	str	r2, [r4, r5]
 800f176:	604b      	str	r3, [r1, #4]
 800f178:	4638      	mov	r0, r7
 800f17a:	f104 060b 	add.w	r6, r4, #11
 800f17e:	f000 f829 	bl	800f1d4 <__malloc_unlock>
 800f182:	f026 0607 	bic.w	r6, r6, #7
 800f186:	1d23      	adds	r3, r4, #4
 800f188:	1af2      	subs	r2, r6, r3
 800f18a:	d0ae      	beq.n	800f0ea <_malloc_r+0x22>
 800f18c:	1b9b      	subs	r3, r3, r6
 800f18e:	50a3      	str	r3, [r4, r2]
 800f190:	e7ab      	b.n	800f0ea <_malloc_r+0x22>
 800f192:	42a3      	cmp	r3, r4
 800f194:	6862      	ldr	r2, [r4, #4]
 800f196:	d1dd      	bne.n	800f154 <_malloc_r+0x8c>
 800f198:	f8c8 2000 	str.w	r2, [r8]
 800f19c:	e7ec      	b.n	800f178 <_malloc_r+0xb0>
 800f19e:	4623      	mov	r3, r4
 800f1a0:	6864      	ldr	r4, [r4, #4]
 800f1a2:	e7ac      	b.n	800f0fe <_malloc_r+0x36>
 800f1a4:	4634      	mov	r4, r6
 800f1a6:	6876      	ldr	r6, [r6, #4]
 800f1a8:	e7b4      	b.n	800f114 <_malloc_r+0x4c>
 800f1aa:	4613      	mov	r3, r2
 800f1ac:	e7cc      	b.n	800f148 <_malloc_r+0x80>
 800f1ae:	230c      	movs	r3, #12
 800f1b0:	603b      	str	r3, [r7, #0]
 800f1b2:	4638      	mov	r0, r7
 800f1b4:	f000 f80e 	bl	800f1d4 <__malloc_unlock>
 800f1b8:	e797      	b.n	800f0ea <_malloc_r+0x22>
 800f1ba:	6025      	str	r5, [r4, #0]
 800f1bc:	e7dc      	b.n	800f178 <_malloc_r+0xb0>
 800f1be:	605b      	str	r3, [r3, #4]
 800f1c0:	deff      	udf	#255	; 0xff
 800f1c2:	bf00      	nop
 800f1c4:	200045b8 	.word	0x200045b8

0800f1c8 <__malloc_lock>:
 800f1c8:	4801      	ldr	r0, [pc, #4]	; (800f1d0 <__malloc_lock+0x8>)
 800f1ca:	f7ff bee1 	b.w	800ef90 <__retarget_lock_acquire_recursive>
 800f1ce:	bf00      	nop
 800f1d0:	200045b4 	.word	0x200045b4

0800f1d4 <__malloc_unlock>:
 800f1d4:	4801      	ldr	r0, [pc, #4]	; (800f1dc <__malloc_unlock+0x8>)
 800f1d6:	f7ff bedc 	b.w	800ef92 <__retarget_lock_release_recursive>
 800f1da:	bf00      	nop
 800f1dc:	200045b4 	.word	0x200045b4

0800f1e0 <__ssputs_r>:
 800f1e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f1e4:	688e      	ldr	r6, [r1, #8]
 800f1e6:	461f      	mov	r7, r3
 800f1e8:	42be      	cmp	r6, r7
 800f1ea:	680b      	ldr	r3, [r1, #0]
 800f1ec:	4682      	mov	sl, r0
 800f1ee:	460c      	mov	r4, r1
 800f1f0:	4690      	mov	r8, r2
 800f1f2:	d82c      	bhi.n	800f24e <__ssputs_r+0x6e>
 800f1f4:	898a      	ldrh	r2, [r1, #12]
 800f1f6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f1fa:	d026      	beq.n	800f24a <__ssputs_r+0x6a>
 800f1fc:	6965      	ldr	r5, [r4, #20]
 800f1fe:	6909      	ldr	r1, [r1, #16]
 800f200:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f204:	eba3 0901 	sub.w	r9, r3, r1
 800f208:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f20c:	1c7b      	adds	r3, r7, #1
 800f20e:	444b      	add	r3, r9
 800f210:	106d      	asrs	r5, r5, #1
 800f212:	429d      	cmp	r5, r3
 800f214:	bf38      	it	cc
 800f216:	461d      	movcc	r5, r3
 800f218:	0553      	lsls	r3, r2, #21
 800f21a:	d527      	bpl.n	800f26c <__ssputs_r+0x8c>
 800f21c:	4629      	mov	r1, r5
 800f21e:	f7ff ff53 	bl	800f0c8 <_malloc_r>
 800f222:	4606      	mov	r6, r0
 800f224:	b360      	cbz	r0, 800f280 <__ssputs_r+0xa0>
 800f226:	6921      	ldr	r1, [r4, #16]
 800f228:	464a      	mov	r2, r9
 800f22a:	f000 fbab 	bl	800f984 <memcpy>
 800f22e:	89a3      	ldrh	r3, [r4, #12]
 800f230:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f234:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f238:	81a3      	strh	r3, [r4, #12]
 800f23a:	6126      	str	r6, [r4, #16]
 800f23c:	6165      	str	r5, [r4, #20]
 800f23e:	444e      	add	r6, r9
 800f240:	eba5 0509 	sub.w	r5, r5, r9
 800f244:	6026      	str	r6, [r4, #0]
 800f246:	60a5      	str	r5, [r4, #8]
 800f248:	463e      	mov	r6, r7
 800f24a:	42be      	cmp	r6, r7
 800f24c:	d900      	bls.n	800f250 <__ssputs_r+0x70>
 800f24e:	463e      	mov	r6, r7
 800f250:	6820      	ldr	r0, [r4, #0]
 800f252:	4632      	mov	r2, r6
 800f254:	4641      	mov	r1, r8
 800f256:	f000 fb6b 	bl	800f930 <memmove>
 800f25a:	68a3      	ldr	r3, [r4, #8]
 800f25c:	1b9b      	subs	r3, r3, r6
 800f25e:	60a3      	str	r3, [r4, #8]
 800f260:	6823      	ldr	r3, [r4, #0]
 800f262:	4433      	add	r3, r6
 800f264:	6023      	str	r3, [r4, #0]
 800f266:	2000      	movs	r0, #0
 800f268:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f26c:	462a      	mov	r2, r5
 800f26e:	f000 fb9e 	bl	800f9ae <_realloc_r>
 800f272:	4606      	mov	r6, r0
 800f274:	2800      	cmp	r0, #0
 800f276:	d1e0      	bne.n	800f23a <__ssputs_r+0x5a>
 800f278:	6921      	ldr	r1, [r4, #16]
 800f27a:	4650      	mov	r0, sl
 800f27c:	f7ff feb0 	bl	800efe0 <_free_r>
 800f280:	230c      	movs	r3, #12
 800f282:	f8ca 3000 	str.w	r3, [sl]
 800f286:	89a3      	ldrh	r3, [r4, #12]
 800f288:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f28c:	81a3      	strh	r3, [r4, #12]
 800f28e:	f04f 30ff 	mov.w	r0, #4294967295
 800f292:	e7e9      	b.n	800f268 <__ssputs_r+0x88>

0800f294 <_svfiprintf_r>:
 800f294:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f298:	4698      	mov	r8, r3
 800f29a:	898b      	ldrh	r3, [r1, #12]
 800f29c:	061b      	lsls	r3, r3, #24
 800f29e:	b09d      	sub	sp, #116	; 0x74
 800f2a0:	4607      	mov	r7, r0
 800f2a2:	460d      	mov	r5, r1
 800f2a4:	4614      	mov	r4, r2
 800f2a6:	d50e      	bpl.n	800f2c6 <_svfiprintf_r+0x32>
 800f2a8:	690b      	ldr	r3, [r1, #16]
 800f2aa:	b963      	cbnz	r3, 800f2c6 <_svfiprintf_r+0x32>
 800f2ac:	2140      	movs	r1, #64	; 0x40
 800f2ae:	f7ff ff0b 	bl	800f0c8 <_malloc_r>
 800f2b2:	6028      	str	r0, [r5, #0]
 800f2b4:	6128      	str	r0, [r5, #16]
 800f2b6:	b920      	cbnz	r0, 800f2c2 <_svfiprintf_r+0x2e>
 800f2b8:	230c      	movs	r3, #12
 800f2ba:	603b      	str	r3, [r7, #0]
 800f2bc:	f04f 30ff 	mov.w	r0, #4294967295
 800f2c0:	e0d0      	b.n	800f464 <_svfiprintf_r+0x1d0>
 800f2c2:	2340      	movs	r3, #64	; 0x40
 800f2c4:	616b      	str	r3, [r5, #20]
 800f2c6:	2300      	movs	r3, #0
 800f2c8:	9309      	str	r3, [sp, #36]	; 0x24
 800f2ca:	2320      	movs	r3, #32
 800f2cc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f2d0:	f8cd 800c 	str.w	r8, [sp, #12]
 800f2d4:	2330      	movs	r3, #48	; 0x30
 800f2d6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800f47c <_svfiprintf_r+0x1e8>
 800f2da:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f2de:	f04f 0901 	mov.w	r9, #1
 800f2e2:	4623      	mov	r3, r4
 800f2e4:	469a      	mov	sl, r3
 800f2e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f2ea:	b10a      	cbz	r2, 800f2f0 <_svfiprintf_r+0x5c>
 800f2ec:	2a25      	cmp	r2, #37	; 0x25
 800f2ee:	d1f9      	bne.n	800f2e4 <_svfiprintf_r+0x50>
 800f2f0:	ebba 0b04 	subs.w	fp, sl, r4
 800f2f4:	d00b      	beq.n	800f30e <_svfiprintf_r+0x7a>
 800f2f6:	465b      	mov	r3, fp
 800f2f8:	4622      	mov	r2, r4
 800f2fa:	4629      	mov	r1, r5
 800f2fc:	4638      	mov	r0, r7
 800f2fe:	f7ff ff6f 	bl	800f1e0 <__ssputs_r>
 800f302:	3001      	adds	r0, #1
 800f304:	f000 80a9 	beq.w	800f45a <_svfiprintf_r+0x1c6>
 800f308:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f30a:	445a      	add	r2, fp
 800f30c:	9209      	str	r2, [sp, #36]	; 0x24
 800f30e:	f89a 3000 	ldrb.w	r3, [sl]
 800f312:	2b00      	cmp	r3, #0
 800f314:	f000 80a1 	beq.w	800f45a <_svfiprintf_r+0x1c6>
 800f318:	2300      	movs	r3, #0
 800f31a:	f04f 32ff 	mov.w	r2, #4294967295
 800f31e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f322:	f10a 0a01 	add.w	sl, sl, #1
 800f326:	9304      	str	r3, [sp, #16]
 800f328:	9307      	str	r3, [sp, #28]
 800f32a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f32e:	931a      	str	r3, [sp, #104]	; 0x68
 800f330:	4654      	mov	r4, sl
 800f332:	2205      	movs	r2, #5
 800f334:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f338:	4850      	ldr	r0, [pc, #320]	; (800f47c <_svfiprintf_r+0x1e8>)
 800f33a:	f7f0 ff69 	bl	8000210 <memchr>
 800f33e:	9a04      	ldr	r2, [sp, #16]
 800f340:	b9d8      	cbnz	r0, 800f37a <_svfiprintf_r+0xe6>
 800f342:	06d0      	lsls	r0, r2, #27
 800f344:	bf44      	itt	mi
 800f346:	2320      	movmi	r3, #32
 800f348:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f34c:	0711      	lsls	r1, r2, #28
 800f34e:	bf44      	itt	mi
 800f350:	232b      	movmi	r3, #43	; 0x2b
 800f352:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f356:	f89a 3000 	ldrb.w	r3, [sl]
 800f35a:	2b2a      	cmp	r3, #42	; 0x2a
 800f35c:	d015      	beq.n	800f38a <_svfiprintf_r+0xf6>
 800f35e:	9a07      	ldr	r2, [sp, #28]
 800f360:	4654      	mov	r4, sl
 800f362:	2000      	movs	r0, #0
 800f364:	f04f 0c0a 	mov.w	ip, #10
 800f368:	4621      	mov	r1, r4
 800f36a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f36e:	3b30      	subs	r3, #48	; 0x30
 800f370:	2b09      	cmp	r3, #9
 800f372:	d94d      	bls.n	800f410 <_svfiprintf_r+0x17c>
 800f374:	b1b0      	cbz	r0, 800f3a4 <_svfiprintf_r+0x110>
 800f376:	9207      	str	r2, [sp, #28]
 800f378:	e014      	b.n	800f3a4 <_svfiprintf_r+0x110>
 800f37a:	eba0 0308 	sub.w	r3, r0, r8
 800f37e:	fa09 f303 	lsl.w	r3, r9, r3
 800f382:	4313      	orrs	r3, r2
 800f384:	9304      	str	r3, [sp, #16]
 800f386:	46a2      	mov	sl, r4
 800f388:	e7d2      	b.n	800f330 <_svfiprintf_r+0x9c>
 800f38a:	9b03      	ldr	r3, [sp, #12]
 800f38c:	1d19      	adds	r1, r3, #4
 800f38e:	681b      	ldr	r3, [r3, #0]
 800f390:	9103      	str	r1, [sp, #12]
 800f392:	2b00      	cmp	r3, #0
 800f394:	bfbb      	ittet	lt
 800f396:	425b      	neglt	r3, r3
 800f398:	f042 0202 	orrlt.w	r2, r2, #2
 800f39c:	9307      	strge	r3, [sp, #28]
 800f39e:	9307      	strlt	r3, [sp, #28]
 800f3a0:	bfb8      	it	lt
 800f3a2:	9204      	strlt	r2, [sp, #16]
 800f3a4:	7823      	ldrb	r3, [r4, #0]
 800f3a6:	2b2e      	cmp	r3, #46	; 0x2e
 800f3a8:	d10c      	bne.n	800f3c4 <_svfiprintf_r+0x130>
 800f3aa:	7863      	ldrb	r3, [r4, #1]
 800f3ac:	2b2a      	cmp	r3, #42	; 0x2a
 800f3ae:	d134      	bne.n	800f41a <_svfiprintf_r+0x186>
 800f3b0:	9b03      	ldr	r3, [sp, #12]
 800f3b2:	1d1a      	adds	r2, r3, #4
 800f3b4:	681b      	ldr	r3, [r3, #0]
 800f3b6:	9203      	str	r2, [sp, #12]
 800f3b8:	2b00      	cmp	r3, #0
 800f3ba:	bfb8      	it	lt
 800f3bc:	f04f 33ff 	movlt.w	r3, #4294967295
 800f3c0:	3402      	adds	r4, #2
 800f3c2:	9305      	str	r3, [sp, #20]
 800f3c4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800f48c <_svfiprintf_r+0x1f8>
 800f3c8:	7821      	ldrb	r1, [r4, #0]
 800f3ca:	2203      	movs	r2, #3
 800f3cc:	4650      	mov	r0, sl
 800f3ce:	f7f0 ff1f 	bl	8000210 <memchr>
 800f3d2:	b138      	cbz	r0, 800f3e4 <_svfiprintf_r+0x150>
 800f3d4:	9b04      	ldr	r3, [sp, #16]
 800f3d6:	eba0 000a 	sub.w	r0, r0, sl
 800f3da:	2240      	movs	r2, #64	; 0x40
 800f3dc:	4082      	lsls	r2, r0
 800f3de:	4313      	orrs	r3, r2
 800f3e0:	3401      	adds	r4, #1
 800f3e2:	9304      	str	r3, [sp, #16]
 800f3e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f3e8:	4825      	ldr	r0, [pc, #148]	; (800f480 <_svfiprintf_r+0x1ec>)
 800f3ea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f3ee:	2206      	movs	r2, #6
 800f3f0:	f7f0 ff0e 	bl	8000210 <memchr>
 800f3f4:	2800      	cmp	r0, #0
 800f3f6:	d038      	beq.n	800f46a <_svfiprintf_r+0x1d6>
 800f3f8:	4b22      	ldr	r3, [pc, #136]	; (800f484 <_svfiprintf_r+0x1f0>)
 800f3fa:	bb1b      	cbnz	r3, 800f444 <_svfiprintf_r+0x1b0>
 800f3fc:	9b03      	ldr	r3, [sp, #12]
 800f3fe:	3307      	adds	r3, #7
 800f400:	f023 0307 	bic.w	r3, r3, #7
 800f404:	3308      	adds	r3, #8
 800f406:	9303      	str	r3, [sp, #12]
 800f408:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f40a:	4433      	add	r3, r6
 800f40c:	9309      	str	r3, [sp, #36]	; 0x24
 800f40e:	e768      	b.n	800f2e2 <_svfiprintf_r+0x4e>
 800f410:	fb0c 3202 	mla	r2, ip, r2, r3
 800f414:	460c      	mov	r4, r1
 800f416:	2001      	movs	r0, #1
 800f418:	e7a6      	b.n	800f368 <_svfiprintf_r+0xd4>
 800f41a:	2300      	movs	r3, #0
 800f41c:	3401      	adds	r4, #1
 800f41e:	9305      	str	r3, [sp, #20]
 800f420:	4619      	mov	r1, r3
 800f422:	f04f 0c0a 	mov.w	ip, #10
 800f426:	4620      	mov	r0, r4
 800f428:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f42c:	3a30      	subs	r2, #48	; 0x30
 800f42e:	2a09      	cmp	r2, #9
 800f430:	d903      	bls.n	800f43a <_svfiprintf_r+0x1a6>
 800f432:	2b00      	cmp	r3, #0
 800f434:	d0c6      	beq.n	800f3c4 <_svfiprintf_r+0x130>
 800f436:	9105      	str	r1, [sp, #20]
 800f438:	e7c4      	b.n	800f3c4 <_svfiprintf_r+0x130>
 800f43a:	fb0c 2101 	mla	r1, ip, r1, r2
 800f43e:	4604      	mov	r4, r0
 800f440:	2301      	movs	r3, #1
 800f442:	e7f0      	b.n	800f426 <_svfiprintf_r+0x192>
 800f444:	ab03      	add	r3, sp, #12
 800f446:	9300      	str	r3, [sp, #0]
 800f448:	462a      	mov	r2, r5
 800f44a:	4b0f      	ldr	r3, [pc, #60]	; (800f488 <_svfiprintf_r+0x1f4>)
 800f44c:	a904      	add	r1, sp, #16
 800f44e:	4638      	mov	r0, r7
 800f450:	f3af 8000 	nop.w
 800f454:	1c42      	adds	r2, r0, #1
 800f456:	4606      	mov	r6, r0
 800f458:	d1d6      	bne.n	800f408 <_svfiprintf_r+0x174>
 800f45a:	89ab      	ldrh	r3, [r5, #12]
 800f45c:	065b      	lsls	r3, r3, #25
 800f45e:	f53f af2d 	bmi.w	800f2bc <_svfiprintf_r+0x28>
 800f462:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f464:	b01d      	add	sp, #116	; 0x74
 800f466:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f46a:	ab03      	add	r3, sp, #12
 800f46c:	9300      	str	r3, [sp, #0]
 800f46e:	462a      	mov	r2, r5
 800f470:	4b05      	ldr	r3, [pc, #20]	; (800f488 <_svfiprintf_r+0x1f4>)
 800f472:	a904      	add	r1, sp, #16
 800f474:	4638      	mov	r0, r7
 800f476:	f000 f879 	bl	800f56c <_printf_i>
 800f47a:	e7eb      	b.n	800f454 <_svfiprintf_r+0x1c0>
 800f47c:	080108f7 	.word	0x080108f7
 800f480:	08010901 	.word	0x08010901
 800f484:	00000000 	.word	0x00000000
 800f488:	0800f1e1 	.word	0x0800f1e1
 800f48c:	080108fd 	.word	0x080108fd

0800f490 <_printf_common>:
 800f490:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f494:	4616      	mov	r6, r2
 800f496:	4699      	mov	r9, r3
 800f498:	688a      	ldr	r2, [r1, #8]
 800f49a:	690b      	ldr	r3, [r1, #16]
 800f49c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f4a0:	4293      	cmp	r3, r2
 800f4a2:	bfb8      	it	lt
 800f4a4:	4613      	movlt	r3, r2
 800f4a6:	6033      	str	r3, [r6, #0]
 800f4a8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f4ac:	4607      	mov	r7, r0
 800f4ae:	460c      	mov	r4, r1
 800f4b0:	b10a      	cbz	r2, 800f4b6 <_printf_common+0x26>
 800f4b2:	3301      	adds	r3, #1
 800f4b4:	6033      	str	r3, [r6, #0]
 800f4b6:	6823      	ldr	r3, [r4, #0]
 800f4b8:	0699      	lsls	r1, r3, #26
 800f4ba:	bf42      	ittt	mi
 800f4bc:	6833      	ldrmi	r3, [r6, #0]
 800f4be:	3302      	addmi	r3, #2
 800f4c0:	6033      	strmi	r3, [r6, #0]
 800f4c2:	6825      	ldr	r5, [r4, #0]
 800f4c4:	f015 0506 	ands.w	r5, r5, #6
 800f4c8:	d106      	bne.n	800f4d8 <_printf_common+0x48>
 800f4ca:	f104 0a19 	add.w	sl, r4, #25
 800f4ce:	68e3      	ldr	r3, [r4, #12]
 800f4d0:	6832      	ldr	r2, [r6, #0]
 800f4d2:	1a9b      	subs	r3, r3, r2
 800f4d4:	42ab      	cmp	r3, r5
 800f4d6:	dc26      	bgt.n	800f526 <_printf_common+0x96>
 800f4d8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f4dc:	1e13      	subs	r3, r2, #0
 800f4de:	6822      	ldr	r2, [r4, #0]
 800f4e0:	bf18      	it	ne
 800f4e2:	2301      	movne	r3, #1
 800f4e4:	0692      	lsls	r2, r2, #26
 800f4e6:	d42b      	bmi.n	800f540 <_printf_common+0xb0>
 800f4e8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f4ec:	4649      	mov	r1, r9
 800f4ee:	4638      	mov	r0, r7
 800f4f0:	47c0      	blx	r8
 800f4f2:	3001      	adds	r0, #1
 800f4f4:	d01e      	beq.n	800f534 <_printf_common+0xa4>
 800f4f6:	6823      	ldr	r3, [r4, #0]
 800f4f8:	6922      	ldr	r2, [r4, #16]
 800f4fa:	f003 0306 	and.w	r3, r3, #6
 800f4fe:	2b04      	cmp	r3, #4
 800f500:	bf02      	ittt	eq
 800f502:	68e5      	ldreq	r5, [r4, #12]
 800f504:	6833      	ldreq	r3, [r6, #0]
 800f506:	1aed      	subeq	r5, r5, r3
 800f508:	68a3      	ldr	r3, [r4, #8]
 800f50a:	bf0c      	ite	eq
 800f50c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f510:	2500      	movne	r5, #0
 800f512:	4293      	cmp	r3, r2
 800f514:	bfc4      	itt	gt
 800f516:	1a9b      	subgt	r3, r3, r2
 800f518:	18ed      	addgt	r5, r5, r3
 800f51a:	2600      	movs	r6, #0
 800f51c:	341a      	adds	r4, #26
 800f51e:	42b5      	cmp	r5, r6
 800f520:	d11a      	bne.n	800f558 <_printf_common+0xc8>
 800f522:	2000      	movs	r0, #0
 800f524:	e008      	b.n	800f538 <_printf_common+0xa8>
 800f526:	2301      	movs	r3, #1
 800f528:	4652      	mov	r2, sl
 800f52a:	4649      	mov	r1, r9
 800f52c:	4638      	mov	r0, r7
 800f52e:	47c0      	blx	r8
 800f530:	3001      	adds	r0, #1
 800f532:	d103      	bne.n	800f53c <_printf_common+0xac>
 800f534:	f04f 30ff 	mov.w	r0, #4294967295
 800f538:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f53c:	3501      	adds	r5, #1
 800f53e:	e7c6      	b.n	800f4ce <_printf_common+0x3e>
 800f540:	18e1      	adds	r1, r4, r3
 800f542:	1c5a      	adds	r2, r3, #1
 800f544:	2030      	movs	r0, #48	; 0x30
 800f546:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f54a:	4422      	add	r2, r4
 800f54c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f550:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f554:	3302      	adds	r3, #2
 800f556:	e7c7      	b.n	800f4e8 <_printf_common+0x58>
 800f558:	2301      	movs	r3, #1
 800f55a:	4622      	mov	r2, r4
 800f55c:	4649      	mov	r1, r9
 800f55e:	4638      	mov	r0, r7
 800f560:	47c0      	blx	r8
 800f562:	3001      	adds	r0, #1
 800f564:	d0e6      	beq.n	800f534 <_printf_common+0xa4>
 800f566:	3601      	adds	r6, #1
 800f568:	e7d9      	b.n	800f51e <_printf_common+0x8e>
	...

0800f56c <_printf_i>:
 800f56c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f570:	7e0f      	ldrb	r7, [r1, #24]
 800f572:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f574:	2f78      	cmp	r7, #120	; 0x78
 800f576:	4691      	mov	r9, r2
 800f578:	4680      	mov	r8, r0
 800f57a:	460c      	mov	r4, r1
 800f57c:	469a      	mov	sl, r3
 800f57e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800f582:	d807      	bhi.n	800f594 <_printf_i+0x28>
 800f584:	2f62      	cmp	r7, #98	; 0x62
 800f586:	d80a      	bhi.n	800f59e <_printf_i+0x32>
 800f588:	2f00      	cmp	r7, #0
 800f58a:	f000 80d4 	beq.w	800f736 <_printf_i+0x1ca>
 800f58e:	2f58      	cmp	r7, #88	; 0x58
 800f590:	f000 80c0 	beq.w	800f714 <_printf_i+0x1a8>
 800f594:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f598:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f59c:	e03a      	b.n	800f614 <_printf_i+0xa8>
 800f59e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f5a2:	2b15      	cmp	r3, #21
 800f5a4:	d8f6      	bhi.n	800f594 <_printf_i+0x28>
 800f5a6:	a101      	add	r1, pc, #4	; (adr r1, 800f5ac <_printf_i+0x40>)
 800f5a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f5ac:	0800f605 	.word	0x0800f605
 800f5b0:	0800f619 	.word	0x0800f619
 800f5b4:	0800f595 	.word	0x0800f595
 800f5b8:	0800f595 	.word	0x0800f595
 800f5bc:	0800f595 	.word	0x0800f595
 800f5c0:	0800f595 	.word	0x0800f595
 800f5c4:	0800f619 	.word	0x0800f619
 800f5c8:	0800f595 	.word	0x0800f595
 800f5cc:	0800f595 	.word	0x0800f595
 800f5d0:	0800f595 	.word	0x0800f595
 800f5d4:	0800f595 	.word	0x0800f595
 800f5d8:	0800f71d 	.word	0x0800f71d
 800f5dc:	0800f645 	.word	0x0800f645
 800f5e0:	0800f6d7 	.word	0x0800f6d7
 800f5e4:	0800f595 	.word	0x0800f595
 800f5e8:	0800f595 	.word	0x0800f595
 800f5ec:	0800f73f 	.word	0x0800f73f
 800f5f0:	0800f595 	.word	0x0800f595
 800f5f4:	0800f645 	.word	0x0800f645
 800f5f8:	0800f595 	.word	0x0800f595
 800f5fc:	0800f595 	.word	0x0800f595
 800f600:	0800f6df 	.word	0x0800f6df
 800f604:	682b      	ldr	r3, [r5, #0]
 800f606:	1d1a      	adds	r2, r3, #4
 800f608:	681b      	ldr	r3, [r3, #0]
 800f60a:	602a      	str	r2, [r5, #0]
 800f60c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f610:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f614:	2301      	movs	r3, #1
 800f616:	e09f      	b.n	800f758 <_printf_i+0x1ec>
 800f618:	6820      	ldr	r0, [r4, #0]
 800f61a:	682b      	ldr	r3, [r5, #0]
 800f61c:	0607      	lsls	r7, r0, #24
 800f61e:	f103 0104 	add.w	r1, r3, #4
 800f622:	6029      	str	r1, [r5, #0]
 800f624:	d501      	bpl.n	800f62a <_printf_i+0xbe>
 800f626:	681e      	ldr	r6, [r3, #0]
 800f628:	e003      	b.n	800f632 <_printf_i+0xc6>
 800f62a:	0646      	lsls	r6, r0, #25
 800f62c:	d5fb      	bpl.n	800f626 <_printf_i+0xba>
 800f62e:	f9b3 6000 	ldrsh.w	r6, [r3]
 800f632:	2e00      	cmp	r6, #0
 800f634:	da03      	bge.n	800f63e <_printf_i+0xd2>
 800f636:	232d      	movs	r3, #45	; 0x2d
 800f638:	4276      	negs	r6, r6
 800f63a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f63e:	485a      	ldr	r0, [pc, #360]	; (800f7a8 <_printf_i+0x23c>)
 800f640:	230a      	movs	r3, #10
 800f642:	e012      	b.n	800f66a <_printf_i+0xfe>
 800f644:	682b      	ldr	r3, [r5, #0]
 800f646:	6820      	ldr	r0, [r4, #0]
 800f648:	1d19      	adds	r1, r3, #4
 800f64a:	6029      	str	r1, [r5, #0]
 800f64c:	0605      	lsls	r5, r0, #24
 800f64e:	d501      	bpl.n	800f654 <_printf_i+0xe8>
 800f650:	681e      	ldr	r6, [r3, #0]
 800f652:	e002      	b.n	800f65a <_printf_i+0xee>
 800f654:	0641      	lsls	r1, r0, #25
 800f656:	d5fb      	bpl.n	800f650 <_printf_i+0xe4>
 800f658:	881e      	ldrh	r6, [r3, #0]
 800f65a:	4853      	ldr	r0, [pc, #332]	; (800f7a8 <_printf_i+0x23c>)
 800f65c:	2f6f      	cmp	r7, #111	; 0x6f
 800f65e:	bf0c      	ite	eq
 800f660:	2308      	moveq	r3, #8
 800f662:	230a      	movne	r3, #10
 800f664:	2100      	movs	r1, #0
 800f666:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f66a:	6865      	ldr	r5, [r4, #4]
 800f66c:	60a5      	str	r5, [r4, #8]
 800f66e:	2d00      	cmp	r5, #0
 800f670:	bfa2      	ittt	ge
 800f672:	6821      	ldrge	r1, [r4, #0]
 800f674:	f021 0104 	bicge.w	r1, r1, #4
 800f678:	6021      	strge	r1, [r4, #0]
 800f67a:	b90e      	cbnz	r6, 800f680 <_printf_i+0x114>
 800f67c:	2d00      	cmp	r5, #0
 800f67e:	d04b      	beq.n	800f718 <_printf_i+0x1ac>
 800f680:	4615      	mov	r5, r2
 800f682:	fbb6 f1f3 	udiv	r1, r6, r3
 800f686:	fb03 6711 	mls	r7, r3, r1, r6
 800f68a:	5dc7      	ldrb	r7, [r0, r7]
 800f68c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800f690:	4637      	mov	r7, r6
 800f692:	42bb      	cmp	r3, r7
 800f694:	460e      	mov	r6, r1
 800f696:	d9f4      	bls.n	800f682 <_printf_i+0x116>
 800f698:	2b08      	cmp	r3, #8
 800f69a:	d10b      	bne.n	800f6b4 <_printf_i+0x148>
 800f69c:	6823      	ldr	r3, [r4, #0]
 800f69e:	07de      	lsls	r6, r3, #31
 800f6a0:	d508      	bpl.n	800f6b4 <_printf_i+0x148>
 800f6a2:	6923      	ldr	r3, [r4, #16]
 800f6a4:	6861      	ldr	r1, [r4, #4]
 800f6a6:	4299      	cmp	r1, r3
 800f6a8:	bfde      	ittt	le
 800f6aa:	2330      	movle	r3, #48	; 0x30
 800f6ac:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f6b0:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f6b4:	1b52      	subs	r2, r2, r5
 800f6b6:	6122      	str	r2, [r4, #16]
 800f6b8:	f8cd a000 	str.w	sl, [sp]
 800f6bc:	464b      	mov	r3, r9
 800f6be:	aa03      	add	r2, sp, #12
 800f6c0:	4621      	mov	r1, r4
 800f6c2:	4640      	mov	r0, r8
 800f6c4:	f7ff fee4 	bl	800f490 <_printf_common>
 800f6c8:	3001      	adds	r0, #1
 800f6ca:	d14a      	bne.n	800f762 <_printf_i+0x1f6>
 800f6cc:	f04f 30ff 	mov.w	r0, #4294967295
 800f6d0:	b004      	add	sp, #16
 800f6d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f6d6:	6823      	ldr	r3, [r4, #0]
 800f6d8:	f043 0320 	orr.w	r3, r3, #32
 800f6dc:	6023      	str	r3, [r4, #0]
 800f6de:	4833      	ldr	r0, [pc, #204]	; (800f7ac <_printf_i+0x240>)
 800f6e0:	2778      	movs	r7, #120	; 0x78
 800f6e2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800f6e6:	6823      	ldr	r3, [r4, #0]
 800f6e8:	6829      	ldr	r1, [r5, #0]
 800f6ea:	061f      	lsls	r7, r3, #24
 800f6ec:	f851 6b04 	ldr.w	r6, [r1], #4
 800f6f0:	d402      	bmi.n	800f6f8 <_printf_i+0x18c>
 800f6f2:	065f      	lsls	r7, r3, #25
 800f6f4:	bf48      	it	mi
 800f6f6:	b2b6      	uxthmi	r6, r6
 800f6f8:	07df      	lsls	r7, r3, #31
 800f6fa:	bf48      	it	mi
 800f6fc:	f043 0320 	orrmi.w	r3, r3, #32
 800f700:	6029      	str	r1, [r5, #0]
 800f702:	bf48      	it	mi
 800f704:	6023      	strmi	r3, [r4, #0]
 800f706:	b91e      	cbnz	r6, 800f710 <_printf_i+0x1a4>
 800f708:	6823      	ldr	r3, [r4, #0]
 800f70a:	f023 0320 	bic.w	r3, r3, #32
 800f70e:	6023      	str	r3, [r4, #0]
 800f710:	2310      	movs	r3, #16
 800f712:	e7a7      	b.n	800f664 <_printf_i+0xf8>
 800f714:	4824      	ldr	r0, [pc, #144]	; (800f7a8 <_printf_i+0x23c>)
 800f716:	e7e4      	b.n	800f6e2 <_printf_i+0x176>
 800f718:	4615      	mov	r5, r2
 800f71a:	e7bd      	b.n	800f698 <_printf_i+0x12c>
 800f71c:	682b      	ldr	r3, [r5, #0]
 800f71e:	6826      	ldr	r6, [r4, #0]
 800f720:	6961      	ldr	r1, [r4, #20]
 800f722:	1d18      	adds	r0, r3, #4
 800f724:	6028      	str	r0, [r5, #0]
 800f726:	0635      	lsls	r5, r6, #24
 800f728:	681b      	ldr	r3, [r3, #0]
 800f72a:	d501      	bpl.n	800f730 <_printf_i+0x1c4>
 800f72c:	6019      	str	r1, [r3, #0]
 800f72e:	e002      	b.n	800f736 <_printf_i+0x1ca>
 800f730:	0670      	lsls	r0, r6, #25
 800f732:	d5fb      	bpl.n	800f72c <_printf_i+0x1c0>
 800f734:	8019      	strh	r1, [r3, #0]
 800f736:	2300      	movs	r3, #0
 800f738:	6123      	str	r3, [r4, #16]
 800f73a:	4615      	mov	r5, r2
 800f73c:	e7bc      	b.n	800f6b8 <_printf_i+0x14c>
 800f73e:	682b      	ldr	r3, [r5, #0]
 800f740:	1d1a      	adds	r2, r3, #4
 800f742:	602a      	str	r2, [r5, #0]
 800f744:	681d      	ldr	r5, [r3, #0]
 800f746:	6862      	ldr	r2, [r4, #4]
 800f748:	2100      	movs	r1, #0
 800f74a:	4628      	mov	r0, r5
 800f74c:	f7f0 fd60 	bl	8000210 <memchr>
 800f750:	b108      	cbz	r0, 800f756 <_printf_i+0x1ea>
 800f752:	1b40      	subs	r0, r0, r5
 800f754:	6060      	str	r0, [r4, #4]
 800f756:	6863      	ldr	r3, [r4, #4]
 800f758:	6123      	str	r3, [r4, #16]
 800f75a:	2300      	movs	r3, #0
 800f75c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f760:	e7aa      	b.n	800f6b8 <_printf_i+0x14c>
 800f762:	6923      	ldr	r3, [r4, #16]
 800f764:	462a      	mov	r2, r5
 800f766:	4649      	mov	r1, r9
 800f768:	4640      	mov	r0, r8
 800f76a:	47d0      	blx	sl
 800f76c:	3001      	adds	r0, #1
 800f76e:	d0ad      	beq.n	800f6cc <_printf_i+0x160>
 800f770:	6823      	ldr	r3, [r4, #0]
 800f772:	079b      	lsls	r3, r3, #30
 800f774:	d413      	bmi.n	800f79e <_printf_i+0x232>
 800f776:	68e0      	ldr	r0, [r4, #12]
 800f778:	9b03      	ldr	r3, [sp, #12]
 800f77a:	4298      	cmp	r0, r3
 800f77c:	bfb8      	it	lt
 800f77e:	4618      	movlt	r0, r3
 800f780:	e7a6      	b.n	800f6d0 <_printf_i+0x164>
 800f782:	2301      	movs	r3, #1
 800f784:	4632      	mov	r2, r6
 800f786:	4649      	mov	r1, r9
 800f788:	4640      	mov	r0, r8
 800f78a:	47d0      	blx	sl
 800f78c:	3001      	adds	r0, #1
 800f78e:	d09d      	beq.n	800f6cc <_printf_i+0x160>
 800f790:	3501      	adds	r5, #1
 800f792:	68e3      	ldr	r3, [r4, #12]
 800f794:	9903      	ldr	r1, [sp, #12]
 800f796:	1a5b      	subs	r3, r3, r1
 800f798:	42ab      	cmp	r3, r5
 800f79a:	dcf2      	bgt.n	800f782 <_printf_i+0x216>
 800f79c:	e7eb      	b.n	800f776 <_printf_i+0x20a>
 800f79e:	2500      	movs	r5, #0
 800f7a0:	f104 0619 	add.w	r6, r4, #25
 800f7a4:	e7f5      	b.n	800f792 <_printf_i+0x226>
 800f7a6:	bf00      	nop
 800f7a8:	08010908 	.word	0x08010908
 800f7ac:	08010919 	.word	0x08010919

0800f7b0 <__sflush_r>:
 800f7b0:	898a      	ldrh	r2, [r1, #12]
 800f7b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f7b6:	4605      	mov	r5, r0
 800f7b8:	0710      	lsls	r0, r2, #28
 800f7ba:	460c      	mov	r4, r1
 800f7bc:	d458      	bmi.n	800f870 <__sflush_r+0xc0>
 800f7be:	684b      	ldr	r3, [r1, #4]
 800f7c0:	2b00      	cmp	r3, #0
 800f7c2:	dc05      	bgt.n	800f7d0 <__sflush_r+0x20>
 800f7c4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f7c6:	2b00      	cmp	r3, #0
 800f7c8:	dc02      	bgt.n	800f7d0 <__sflush_r+0x20>
 800f7ca:	2000      	movs	r0, #0
 800f7cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f7d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f7d2:	2e00      	cmp	r6, #0
 800f7d4:	d0f9      	beq.n	800f7ca <__sflush_r+0x1a>
 800f7d6:	2300      	movs	r3, #0
 800f7d8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f7dc:	682f      	ldr	r7, [r5, #0]
 800f7de:	6a21      	ldr	r1, [r4, #32]
 800f7e0:	602b      	str	r3, [r5, #0]
 800f7e2:	d032      	beq.n	800f84a <__sflush_r+0x9a>
 800f7e4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f7e6:	89a3      	ldrh	r3, [r4, #12]
 800f7e8:	075a      	lsls	r2, r3, #29
 800f7ea:	d505      	bpl.n	800f7f8 <__sflush_r+0x48>
 800f7ec:	6863      	ldr	r3, [r4, #4]
 800f7ee:	1ac0      	subs	r0, r0, r3
 800f7f0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f7f2:	b10b      	cbz	r3, 800f7f8 <__sflush_r+0x48>
 800f7f4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f7f6:	1ac0      	subs	r0, r0, r3
 800f7f8:	2300      	movs	r3, #0
 800f7fa:	4602      	mov	r2, r0
 800f7fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f7fe:	6a21      	ldr	r1, [r4, #32]
 800f800:	4628      	mov	r0, r5
 800f802:	47b0      	blx	r6
 800f804:	1c43      	adds	r3, r0, #1
 800f806:	89a3      	ldrh	r3, [r4, #12]
 800f808:	d106      	bne.n	800f818 <__sflush_r+0x68>
 800f80a:	6829      	ldr	r1, [r5, #0]
 800f80c:	291d      	cmp	r1, #29
 800f80e:	d82b      	bhi.n	800f868 <__sflush_r+0xb8>
 800f810:	4a29      	ldr	r2, [pc, #164]	; (800f8b8 <__sflush_r+0x108>)
 800f812:	410a      	asrs	r2, r1
 800f814:	07d6      	lsls	r6, r2, #31
 800f816:	d427      	bmi.n	800f868 <__sflush_r+0xb8>
 800f818:	2200      	movs	r2, #0
 800f81a:	6062      	str	r2, [r4, #4]
 800f81c:	04d9      	lsls	r1, r3, #19
 800f81e:	6922      	ldr	r2, [r4, #16]
 800f820:	6022      	str	r2, [r4, #0]
 800f822:	d504      	bpl.n	800f82e <__sflush_r+0x7e>
 800f824:	1c42      	adds	r2, r0, #1
 800f826:	d101      	bne.n	800f82c <__sflush_r+0x7c>
 800f828:	682b      	ldr	r3, [r5, #0]
 800f82a:	b903      	cbnz	r3, 800f82e <__sflush_r+0x7e>
 800f82c:	6560      	str	r0, [r4, #84]	; 0x54
 800f82e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f830:	602f      	str	r7, [r5, #0]
 800f832:	2900      	cmp	r1, #0
 800f834:	d0c9      	beq.n	800f7ca <__sflush_r+0x1a>
 800f836:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f83a:	4299      	cmp	r1, r3
 800f83c:	d002      	beq.n	800f844 <__sflush_r+0x94>
 800f83e:	4628      	mov	r0, r5
 800f840:	f7ff fbce 	bl	800efe0 <_free_r>
 800f844:	2000      	movs	r0, #0
 800f846:	6360      	str	r0, [r4, #52]	; 0x34
 800f848:	e7c0      	b.n	800f7cc <__sflush_r+0x1c>
 800f84a:	2301      	movs	r3, #1
 800f84c:	4628      	mov	r0, r5
 800f84e:	47b0      	blx	r6
 800f850:	1c41      	adds	r1, r0, #1
 800f852:	d1c8      	bne.n	800f7e6 <__sflush_r+0x36>
 800f854:	682b      	ldr	r3, [r5, #0]
 800f856:	2b00      	cmp	r3, #0
 800f858:	d0c5      	beq.n	800f7e6 <__sflush_r+0x36>
 800f85a:	2b1d      	cmp	r3, #29
 800f85c:	d001      	beq.n	800f862 <__sflush_r+0xb2>
 800f85e:	2b16      	cmp	r3, #22
 800f860:	d101      	bne.n	800f866 <__sflush_r+0xb6>
 800f862:	602f      	str	r7, [r5, #0]
 800f864:	e7b1      	b.n	800f7ca <__sflush_r+0x1a>
 800f866:	89a3      	ldrh	r3, [r4, #12]
 800f868:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f86c:	81a3      	strh	r3, [r4, #12]
 800f86e:	e7ad      	b.n	800f7cc <__sflush_r+0x1c>
 800f870:	690f      	ldr	r7, [r1, #16]
 800f872:	2f00      	cmp	r7, #0
 800f874:	d0a9      	beq.n	800f7ca <__sflush_r+0x1a>
 800f876:	0793      	lsls	r3, r2, #30
 800f878:	680e      	ldr	r6, [r1, #0]
 800f87a:	bf08      	it	eq
 800f87c:	694b      	ldreq	r3, [r1, #20]
 800f87e:	600f      	str	r7, [r1, #0]
 800f880:	bf18      	it	ne
 800f882:	2300      	movne	r3, #0
 800f884:	eba6 0807 	sub.w	r8, r6, r7
 800f888:	608b      	str	r3, [r1, #8]
 800f88a:	f1b8 0f00 	cmp.w	r8, #0
 800f88e:	dd9c      	ble.n	800f7ca <__sflush_r+0x1a>
 800f890:	6a21      	ldr	r1, [r4, #32]
 800f892:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f894:	4643      	mov	r3, r8
 800f896:	463a      	mov	r2, r7
 800f898:	4628      	mov	r0, r5
 800f89a:	47b0      	blx	r6
 800f89c:	2800      	cmp	r0, #0
 800f89e:	dc06      	bgt.n	800f8ae <__sflush_r+0xfe>
 800f8a0:	89a3      	ldrh	r3, [r4, #12]
 800f8a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f8a6:	81a3      	strh	r3, [r4, #12]
 800f8a8:	f04f 30ff 	mov.w	r0, #4294967295
 800f8ac:	e78e      	b.n	800f7cc <__sflush_r+0x1c>
 800f8ae:	4407      	add	r7, r0
 800f8b0:	eba8 0800 	sub.w	r8, r8, r0
 800f8b4:	e7e9      	b.n	800f88a <__sflush_r+0xda>
 800f8b6:	bf00      	nop
 800f8b8:	dfbffffe 	.word	0xdfbffffe

0800f8bc <_fflush_r>:
 800f8bc:	b538      	push	{r3, r4, r5, lr}
 800f8be:	690b      	ldr	r3, [r1, #16]
 800f8c0:	4605      	mov	r5, r0
 800f8c2:	460c      	mov	r4, r1
 800f8c4:	b913      	cbnz	r3, 800f8cc <_fflush_r+0x10>
 800f8c6:	2500      	movs	r5, #0
 800f8c8:	4628      	mov	r0, r5
 800f8ca:	bd38      	pop	{r3, r4, r5, pc}
 800f8cc:	b118      	cbz	r0, 800f8d6 <_fflush_r+0x1a>
 800f8ce:	6a03      	ldr	r3, [r0, #32]
 800f8d0:	b90b      	cbnz	r3, 800f8d6 <_fflush_r+0x1a>
 800f8d2:	f7ff f9dd 	bl	800ec90 <__sinit>
 800f8d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f8da:	2b00      	cmp	r3, #0
 800f8dc:	d0f3      	beq.n	800f8c6 <_fflush_r+0xa>
 800f8de:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f8e0:	07d0      	lsls	r0, r2, #31
 800f8e2:	d404      	bmi.n	800f8ee <_fflush_r+0x32>
 800f8e4:	0599      	lsls	r1, r3, #22
 800f8e6:	d402      	bmi.n	800f8ee <_fflush_r+0x32>
 800f8e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f8ea:	f7ff fb51 	bl	800ef90 <__retarget_lock_acquire_recursive>
 800f8ee:	4628      	mov	r0, r5
 800f8f0:	4621      	mov	r1, r4
 800f8f2:	f7ff ff5d 	bl	800f7b0 <__sflush_r>
 800f8f6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f8f8:	07da      	lsls	r2, r3, #31
 800f8fa:	4605      	mov	r5, r0
 800f8fc:	d4e4      	bmi.n	800f8c8 <_fflush_r+0xc>
 800f8fe:	89a3      	ldrh	r3, [r4, #12]
 800f900:	059b      	lsls	r3, r3, #22
 800f902:	d4e1      	bmi.n	800f8c8 <_fflush_r+0xc>
 800f904:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f906:	f7ff fb44 	bl	800ef92 <__retarget_lock_release_recursive>
 800f90a:	e7dd      	b.n	800f8c8 <_fflush_r+0xc>

0800f90c <fiprintf>:
 800f90c:	b40e      	push	{r1, r2, r3}
 800f90e:	b503      	push	{r0, r1, lr}
 800f910:	4601      	mov	r1, r0
 800f912:	ab03      	add	r3, sp, #12
 800f914:	4805      	ldr	r0, [pc, #20]	; (800f92c <fiprintf+0x20>)
 800f916:	f853 2b04 	ldr.w	r2, [r3], #4
 800f91a:	6800      	ldr	r0, [r0, #0]
 800f91c:	9301      	str	r3, [sp, #4]
 800f91e:	f000 f89f 	bl	800fa60 <_vfiprintf_r>
 800f922:	b002      	add	sp, #8
 800f924:	f85d eb04 	ldr.w	lr, [sp], #4
 800f928:	b003      	add	sp, #12
 800f92a:	4770      	bx	lr
 800f92c:	20000174 	.word	0x20000174

0800f930 <memmove>:
 800f930:	4288      	cmp	r0, r1
 800f932:	b510      	push	{r4, lr}
 800f934:	eb01 0402 	add.w	r4, r1, r2
 800f938:	d902      	bls.n	800f940 <memmove+0x10>
 800f93a:	4284      	cmp	r4, r0
 800f93c:	4623      	mov	r3, r4
 800f93e:	d807      	bhi.n	800f950 <memmove+0x20>
 800f940:	1e43      	subs	r3, r0, #1
 800f942:	42a1      	cmp	r1, r4
 800f944:	d008      	beq.n	800f958 <memmove+0x28>
 800f946:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f94a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f94e:	e7f8      	b.n	800f942 <memmove+0x12>
 800f950:	4402      	add	r2, r0
 800f952:	4601      	mov	r1, r0
 800f954:	428a      	cmp	r2, r1
 800f956:	d100      	bne.n	800f95a <memmove+0x2a>
 800f958:	bd10      	pop	{r4, pc}
 800f95a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f95e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f962:	e7f7      	b.n	800f954 <memmove+0x24>

0800f964 <_sbrk_r>:
 800f964:	b538      	push	{r3, r4, r5, lr}
 800f966:	4d06      	ldr	r5, [pc, #24]	; (800f980 <_sbrk_r+0x1c>)
 800f968:	2300      	movs	r3, #0
 800f96a:	4604      	mov	r4, r0
 800f96c:	4608      	mov	r0, r1
 800f96e:	602b      	str	r3, [r5, #0]
 800f970:	f7f3 f8e2 	bl	8002b38 <_sbrk>
 800f974:	1c43      	adds	r3, r0, #1
 800f976:	d102      	bne.n	800f97e <_sbrk_r+0x1a>
 800f978:	682b      	ldr	r3, [r5, #0]
 800f97a:	b103      	cbz	r3, 800f97e <_sbrk_r+0x1a>
 800f97c:	6023      	str	r3, [r4, #0]
 800f97e:	bd38      	pop	{r3, r4, r5, pc}
 800f980:	200045b0 	.word	0x200045b0

0800f984 <memcpy>:
 800f984:	440a      	add	r2, r1
 800f986:	4291      	cmp	r1, r2
 800f988:	f100 33ff 	add.w	r3, r0, #4294967295
 800f98c:	d100      	bne.n	800f990 <memcpy+0xc>
 800f98e:	4770      	bx	lr
 800f990:	b510      	push	{r4, lr}
 800f992:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f996:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f99a:	4291      	cmp	r1, r2
 800f99c:	d1f9      	bne.n	800f992 <memcpy+0xe>
 800f99e:	bd10      	pop	{r4, pc}

0800f9a0 <abort>:
 800f9a0:	b508      	push	{r3, lr}
 800f9a2:	2006      	movs	r0, #6
 800f9a4:	f000 fa34 	bl	800fe10 <raise>
 800f9a8:	2001      	movs	r0, #1
 800f9aa:	f7f3 f84d 	bl	8002a48 <_exit>

0800f9ae <_realloc_r>:
 800f9ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f9b2:	4680      	mov	r8, r0
 800f9b4:	4614      	mov	r4, r2
 800f9b6:	460e      	mov	r6, r1
 800f9b8:	b921      	cbnz	r1, 800f9c4 <_realloc_r+0x16>
 800f9ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f9be:	4611      	mov	r1, r2
 800f9c0:	f7ff bb82 	b.w	800f0c8 <_malloc_r>
 800f9c4:	b92a      	cbnz	r2, 800f9d2 <_realloc_r+0x24>
 800f9c6:	f7ff fb0b 	bl	800efe0 <_free_r>
 800f9ca:	4625      	mov	r5, r4
 800f9cc:	4628      	mov	r0, r5
 800f9ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f9d2:	f000 fa39 	bl	800fe48 <_malloc_usable_size_r>
 800f9d6:	4284      	cmp	r4, r0
 800f9d8:	4607      	mov	r7, r0
 800f9da:	d802      	bhi.n	800f9e2 <_realloc_r+0x34>
 800f9dc:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f9e0:	d812      	bhi.n	800fa08 <_realloc_r+0x5a>
 800f9e2:	4621      	mov	r1, r4
 800f9e4:	4640      	mov	r0, r8
 800f9e6:	f7ff fb6f 	bl	800f0c8 <_malloc_r>
 800f9ea:	4605      	mov	r5, r0
 800f9ec:	2800      	cmp	r0, #0
 800f9ee:	d0ed      	beq.n	800f9cc <_realloc_r+0x1e>
 800f9f0:	42bc      	cmp	r4, r7
 800f9f2:	4622      	mov	r2, r4
 800f9f4:	4631      	mov	r1, r6
 800f9f6:	bf28      	it	cs
 800f9f8:	463a      	movcs	r2, r7
 800f9fa:	f7ff ffc3 	bl	800f984 <memcpy>
 800f9fe:	4631      	mov	r1, r6
 800fa00:	4640      	mov	r0, r8
 800fa02:	f7ff faed 	bl	800efe0 <_free_r>
 800fa06:	e7e1      	b.n	800f9cc <_realloc_r+0x1e>
 800fa08:	4635      	mov	r5, r6
 800fa0a:	e7df      	b.n	800f9cc <_realloc_r+0x1e>

0800fa0c <__sfputc_r>:
 800fa0c:	6893      	ldr	r3, [r2, #8]
 800fa0e:	3b01      	subs	r3, #1
 800fa10:	2b00      	cmp	r3, #0
 800fa12:	b410      	push	{r4}
 800fa14:	6093      	str	r3, [r2, #8]
 800fa16:	da08      	bge.n	800fa2a <__sfputc_r+0x1e>
 800fa18:	6994      	ldr	r4, [r2, #24]
 800fa1a:	42a3      	cmp	r3, r4
 800fa1c:	db01      	blt.n	800fa22 <__sfputc_r+0x16>
 800fa1e:	290a      	cmp	r1, #10
 800fa20:	d103      	bne.n	800fa2a <__sfputc_r+0x1e>
 800fa22:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fa26:	f000 b935 	b.w	800fc94 <__swbuf_r>
 800fa2a:	6813      	ldr	r3, [r2, #0]
 800fa2c:	1c58      	adds	r0, r3, #1
 800fa2e:	6010      	str	r0, [r2, #0]
 800fa30:	7019      	strb	r1, [r3, #0]
 800fa32:	4608      	mov	r0, r1
 800fa34:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fa38:	4770      	bx	lr

0800fa3a <__sfputs_r>:
 800fa3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fa3c:	4606      	mov	r6, r0
 800fa3e:	460f      	mov	r7, r1
 800fa40:	4614      	mov	r4, r2
 800fa42:	18d5      	adds	r5, r2, r3
 800fa44:	42ac      	cmp	r4, r5
 800fa46:	d101      	bne.n	800fa4c <__sfputs_r+0x12>
 800fa48:	2000      	movs	r0, #0
 800fa4a:	e007      	b.n	800fa5c <__sfputs_r+0x22>
 800fa4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fa50:	463a      	mov	r2, r7
 800fa52:	4630      	mov	r0, r6
 800fa54:	f7ff ffda 	bl	800fa0c <__sfputc_r>
 800fa58:	1c43      	adds	r3, r0, #1
 800fa5a:	d1f3      	bne.n	800fa44 <__sfputs_r+0xa>
 800fa5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800fa60 <_vfiprintf_r>:
 800fa60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa64:	460d      	mov	r5, r1
 800fa66:	b09d      	sub	sp, #116	; 0x74
 800fa68:	4614      	mov	r4, r2
 800fa6a:	4698      	mov	r8, r3
 800fa6c:	4606      	mov	r6, r0
 800fa6e:	b118      	cbz	r0, 800fa78 <_vfiprintf_r+0x18>
 800fa70:	6a03      	ldr	r3, [r0, #32]
 800fa72:	b90b      	cbnz	r3, 800fa78 <_vfiprintf_r+0x18>
 800fa74:	f7ff f90c 	bl	800ec90 <__sinit>
 800fa78:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fa7a:	07d9      	lsls	r1, r3, #31
 800fa7c:	d405      	bmi.n	800fa8a <_vfiprintf_r+0x2a>
 800fa7e:	89ab      	ldrh	r3, [r5, #12]
 800fa80:	059a      	lsls	r2, r3, #22
 800fa82:	d402      	bmi.n	800fa8a <_vfiprintf_r+0x2a>
 800fa84:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fa86:	f7ff fa83 	bl	800ef90 <__retarget_lock_acquire_recursive>
 800fa8a:	89ab      	ldrh	r3, [r5, #12]
 800fa8c:	071b      	lsls	r3, r3, #28
 800fa8e:	d501      	bpl.n	800fa94 <_vfiprintf_r+0x34>
 800fa90:	692b      	ldr	r3, [r5, #16]
 800fa92:	b99b      	cbnz	r3, 800fabc <_vfiprintf_r+0x5c>
 800fa94:	4629      	mov	r1, r5
 800fa96:	4630      	mov	r0, r6
 800fa98:	f000 f93a 	bl	800fd10 <__swsetup_r>
 800fa9c:	b170      	cbz	r0, 800fabc <_vfiprintf_r+0x5c>
 800fa9e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800faa0:	07dc      	lsls	r4, r3, #31
 800faa2:	d504      	bpl.n	800faae <_vfiprintf_r+0x4e>
 800faa4:	f04f 30ff 	mov.w	r0, #4294967295
 800faa8:	b01d      	add	sp, #116	; 0x74
 800faaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800faae:	89ab      	ldrh	r3, [r5, #12]
 800fab0:	0598      	lsls	r0, r3, #22
 800fab2:	d4f7      	bmi.n	800faa4 <_vfiprintf_r+0x44>
 800fab4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fab6:	f7ff fa6c 	bl	800ef92 <__retarget_lock_release_recursive>
 800faba:	e7f3      	b.n	800faa4 <_vfiprintf_r+0x44>
 800fabc:	2300      	movs	r3, #0
 800fabe:	9309      	str	r3, [sp, #36]	; 0x24
 800fac0:	2320      	movs	r3, #32
 800fac2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fac6:	f8cd 800c 	str.w	r8, [sp, #12]
 800faca:	2330      	movs	r3, #48	; 0x30
 800facc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800fc80 <_vfiprintf_r+0x220>
 800fad0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fad4:	f04f 0901 	mov.w	r9, #1
 800fad8:	4623      	mov	r3, r4
 800fada:	469a      	mov	sl, r3
 800fadc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fae0:	b10a      	cbz	r2, 800fae6 <_vfiprintf_r+0x86>
 800fae2:	2a25      	cmp	r2, #37	; 0x25
 800fae4:	d1f9      	bne.n	800fada <_vfiprintf_r+0x7a>
 800fae6:	ebba 0b04 	subs.w	fp, sl, r4
 800faea:	d00b      	beq.n	800fb04 <_vfiprintf_r+0xa4>
 800faec:	465b      	mov	r3, fp
 800faee:	4622      	mov	r2, r4
 800faf0:	4629      	mov	r1, r5
 800faf2:	4630      	mov	r0, r6
 800faf4:	f7ff ffa1 	bl	800fa3a <__sfputs_r>
 800faf8:	3001      	adds	r0, #1
 800fafa:	f000 80a9 	beq.w	800fc50 <_vfiprintf_r+0x1f0>
 800fafe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fb00:	445a      	add	r2, fp
 800fb02:	9209      	str	r2, [sp, #36]	; 0x24
 800fb04:	f89a 3000 	ldrb.w	r3, [sl]
 800fb08:	2b00      	cmp	r3, #0
 800fb0a:	f000 80a1 	beq.w	800fc50 <_vfiprintf_r+0x1f0>
 800fb0e:	2300      	movs	r3, #0
 800fb10:	f04f 32ff 	mov.w	r2, #4294967295
 800fb14:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fb18:	f10a 0a01 	add.w	sl, sl, #1
 800fb1c:	9304      	str	r3, [sp, #16]
 800fb1e:	9307      	str	r3, [sp, #28]
 800fb20:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fb24:	931a      	str	r3, [sp, #104]	; 0x68
 800fb26:	4654      	mov	r4, sl
 800fb28:	2205      	movs	r2, #5
 800fb2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fb2e:	4854      	ldr	r0, [pc, #336]	; (800fc80 <_vfiprintf_r+0x220>)
 800fb30:	f7f0 fb6e 	bl	8000210 <memchr>
 800fb34:	9a04      	ldr	r2, [sp, #16]
 800fb36:	b9d8      	cbnz	r0, 800fb70 <_vfiprintf_r+0x110>
 800fb38:	06d1      	lsls	r1, r2, #27
 800fb3a:	bf44      	itt	mi
 800fb3c:	2320      	movmi	r3, #32
 800fb3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fb42:	0713      	lsls	r3, r2, #28
 800fb44:	bf44      	itt	mi
 800fb46:	232b      	movmi	r3, #43	; 0x2b
 800fb48:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fb4c:	f89a 3000 	ldrb.w	r3, [sl]
 800fb50:	2b2a      	cmp	r3, #42	; 0x2a
 800fb52:	d015      	beq.n	800fb80 <_vfiprintf_r+0x120>
 800fb54:	9a07      	ldr	r2, [sp, #28]
 800fb56:	4654      	mov	r4, sl
 800fb58:	2000      	movs	r0, #0
 800fb5a:	f04f 0c0a 	mov.w	ip, #10
 800fb5e:	4621      	mov	r1, r4
 800fb60:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fb64:	3b30      	subs	r3, #48	; 0x30
 800fb66:	2b09      	cmp	r3, #9
 800fb68:	d94d      	bls.n	800fc06 <_vfiprintf_r+0x1a6>
 800fb6a:	b1b0      	cbz	r0, 800fb9a <_vfiprintf_r+0x13a>
 800fb6c:	9207      	str	r2, [sp, #28]
 800fb6e:	e014      	b.n	800fb9a <_vfiprintf_r+0x13a>
 800fb70:	eba0 0308 	sub.w	r3, r0, r8
 800fb74:	fa09 f303 	lsl.w	r3, r9, r3
 800fb78:	4313      	orrs	r3, r2
 800fb7a:	9304      	str	r3, [sp, #16]
 800fb7c:	46a2      	mov	sl, r4
 800fb7e:	e7d2      	b.n	800fb26 <_vfiprintf_r+0xc6>
 800fb80:	9b03      	ldr	r3, [sp, #12]
 800fb82:	1d19      	adds	r1, r3, #4
 800fb84:	681b      	ldr	r3, [r3, #0]
 800fb86:	9103      	str	r1, [sp, #12]
 800fb88:	2b00      	cmp	r3, #0
 800fb8a:	bfbb      	ittet	lt
 800fb8c:	425b      	neglt	r3, r3
 800fb8e:	f042 0202 	orrlt.w	r2, r2, #2
 800fb92:	9307      	strge	r3, [sp, #28]
 800fb94:	9307      	strlt	r3, [sp, #28]
 800fb96:	bfb8      	it	lt
 800fb98:	9204      	strlt	r2, [sp, #16]
 800fb9a:	7823      	ldrb	r3, [r4, #0]
 800fb9c:	2b2e      	cmp	r3, #46	; 0x2e
 800fb9e:	d10c      	bne.n	800fbba <_vfiprintf_r+0x15a>
 800fba0:	7863      	ldrb	r3, [r4, #1]
 800fba2:	2b2a      	cmp	r3, #42	; 0x2a
 800fba4:	d134      	bne.n	800fc10 <_vfiprintf_r+0x1b0>
 800fba6:	9b03      	ldr	r3, [sp, #12]
 800fba8:	1d1a      	adds	r2, r3, #4
 800fbaa:	681b      	ldr	r3, [r3, #0]
 800fbac:	9203      	str	r2, [sp, #12]
 800fbae:	2b00      	cmp	r3, #0
 800fbb0:	bfb8      	it	lt
 800fbb2:	f04f 33ff 	movlt.w	r3, #4294967295
 800fbb6:	3402      	adds	r4, #2
 800fbb8:	9305      	str	r3, [sp, #20]
 800fbba:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800fc90 <_vfiprintf_r+0x230>
 800fbbe:	7821      	ldrb	r1, [r4, #0]
 800fbc0:	2203      	movs	r2, #3
 800fbc2:	4650      	mov	r0, sl
 800fbc4:	f7f0 fb24 	bl	8000210 <memchr>
 800fbc8:	b138      	cbz	r0, 800fbda <_vfiprintf_r+0x17a>
 800fbca:	9b04      	ldr	r3, [sp, #16]
 800fbcc:	eba0 000a 	sub.w	r0, r0, sl
 800fbd0:	2240      	movs	r2, #64	; 0x40
 800fbd2:	4082      	lsls	r2, r0
 800fbd4:	4313      	orrs	r3, r2
 800fbd6:	3401      	adds	r4, #1
 800fbd8:	9304      	str	r3, [sp, #16]
 800fbda:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fbde:	4829      	ldr	r0, [pc, #164]	; (800fc84 <_vfiprintf_r+0x224>)
 800fbe0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fbe4:	2206      	movs	r2, #6
 800fbe6:	f7f0 fb13 	bl	8000210 <memchr>
 800fbea:	2800      	cmp	r0, #0
 800fbec:	d03f      	beq.n	800fc6e <_vfiprintf_r+0x20e>
 800fbee:	4b26      	ldr	r3, [pc, #152]	; (800fc88 <_vfiprintf_r+0x228>)
 800fbf0:	bb1b      	cbnz	r3, 800fc3a <_vfiprintf_r+0x1da>
 800fbf2:	9b03      	ldr	r3, [sp, #12]
 800fbf4:	3307      	adds	r3, #7
 800fbf6:	f023 0307 	bic.w	r3, r3, #7
 800fbfa:	3308      	adds	r3, #8
 800fbfc:	9303      	str	r3, [sp, #12]
 800fbfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fc00:	443b      	add	r3, r7
 800fc02:	9309      	str	r3, [sp, #36]	; 0x24
 800fc04:	e768      	b.n	800fad8 <_vfiprintf_r+0x78>
 800fc06:	fb0c 3202 	mla	r2, ip, r2, r3
 800fc0a:	460c      	mov	r4, r1
 800fc0c:	2001      	movs	r0, #1
 800fc0e:	e7a6      	b.n	800fb5e <_vfiprintf_r+0xfe>
 800fc10:	2300      	movs	r3, #0
 800fc12:	3401      	adds	r4, #1
 800fc14:	9305      	str	r3, [sp, #20]
 800fc16:	4619      	mov	r1, r3
 800fc18:	f04f 0c0a 	mov.w	ip, #10
 800fc1c:	4620      	mov	r0, r4
 800fc1e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fc22:	3a30      	subs	r2, #48	; 0x30
 800fc24:	2a09      	cmp	r2, #9
 800fc26:	d903      	bls.n	800fc30 <_vfiprintf_r+0x1d0>
 800fc28:	2b00      	cmp	r3, #0
 800fc2a:	d0c6      	beq.n	800fbba <_vfiprintf_r+0x15a>
 800fc2c:	9105      	str	r1, [sp, #20]
 800fc2e:	e7c4      	b.n	800fbba <_vfiprintf_r+0x15a>
 800fc30:	fb0c 2101 	mla	r1, ip, r1, r2
 800fc34:	4604      	mov	r4, r0
 800fc36:	2301      	movs	r3, #1
 800fc38:	e7f0      	b.n	800fc1c <_vfiprintf_r+0x1bc>
 800fc3a:	ab03      	add	r3, sp, #12
 800fc3c:	9300      	str	r3, [sp, #0]
 800fc3e:	462a      	mov	r2, r5
 800fc40:	4b12      	ldr	r3, [pc, #72]	; (800fc8c <_vfiprintf_r+0x22c>)
 800fc42:	a904      	add	r1, sp, #16
 800fc44:	4630      	mov	r0, r6
 800fc46:	f3af 8000 	nop.w
 800fc4a:	4607      	mov	r7, r0
 800fc4c:	1c78      	adds	r0, r7, #1
 800fc4e:	d1d6      	bne.n	800fbfe <_vfiprintf_r+0x19e>
 800fc50:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fc52:	07d9      	lsls	r1, r3, #31
 800fc54:	d405      	bmi.n	800fc62 <_vfiprintf_r+0x202>
 800fc56:	89ab      	ldrh	r3, [r5, #12]
 800fc58:	059a      	lsls	r2, r3, #22
 800fc5a:	d402      	bmi.n	800fc62 <_vfiprintf_r+0x202>
 800fc5c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fc5e:	f7ff f998 	bl	800ef92 <__retarget_lock_release_recursive>
 800fc62:	89ab      	ldrh	r3, [r5, #12]
 800fc64:	065b      	lsls	r3, r3, #25
 800fc66:	f53f af1d 	bmi.w	800faa4 <_vfiprintf_r+0x44>
 800fc6a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fc6c:	e71c      	b.n	800faa8 <_vfiprintf_r+0x48>
 800fc6e:	ab03      	add	r3, sp, #12
 800fc70:	9300      	str	r3, [sp, #0]
 800fc72:	462a      	mov	r2, r5
 800fc74:	4b05      	ldr	r3, [pc, #20]	; (800fc8c <_vfiprintf_r+0x22c>)
 800fc76:	a904      	add	r1, sp, #16
 800fc78:	4630      	mov	r0, r6
 800fc7a:	f7ff fc77 	bl	800f56c <_printf_i>
 800fc7e:	e7e4      	b.n	800fc4a <_vfiprintf_r+0x1ea>
 800fc80:	080108f7 	.word	0x080108f7
 800fc84:	08010901 	.word	0x08010901
 800fc88:	00000000 	.word	0x00000000
 800fc8c:	0800fa3b 	.word	0x0800fa3b
 800fc90:	080108fd 	.word	0x080108fd

0800fc94 <__swbuf_r>:
 800fc94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc96:	460e      	mov	r6, r1
 800fc98:	4614      	mov	r4, r2
 800fc9a:	4605      	mov	r5, r0
 800fc9c:	b118      	cbz	r0, 800fca6 <__swbuf_r+0x12>
 800fc9e:	6a03      	ldr	r3, [r0, #32]
 800fca0:	b90b      	cbnz	r3, 800fca6 <__swbuf_r+0x12>
 800fca2:	f7fe fff5 	bl	800ec90 <__sinit>
 800fca6:	69a3      	ldr	r3, [r4, #24]
 800fca8:	60a3      	str	r3, [r4, #8]
 800fcaa:	89a3      	ldrh	r3, [r4, #12]
 800fcac:	071a      	lsls	r2, r3, #28
 800fcae:	d525      	bpl.n	800fcfc <__swbuf_r+0x68>
 800fcb0:	6923      	ldr	r3, [r4, #16]
 800fcb2:	b31b      	cbz	r3, 800fcfc <__swbuf_r+0x68>
 800fcb4:	6823      	ldr	r3, [r4, #0]
 800fcb6:	6922      	ldr	r2, [r4, #16]
 800fcb8:	1a98      	subs	r0, r3, r2
 800fcba:	6963      	ldr	r3, [r4, #20]
 800fcbc:	b2f6      	uxtb	r6, r6
 800fcbe:	4283      	cmp	r3, r0
 800fcc0:	4637      	mov	r7, r6
 800fcc2:	dc04      	bgt.n	800fcce <__swbuf_r+0x3a>
 800fcc4:	4621      	mov	r1, r4
 800fcc6:	4628      	mov	r0, r5
 800fcc8:	f7ff fdf8 	bl	800f8bc <_fflush_r>
 800fccc:	b9e0      	cbnz	r0, 800fd08 <__swbuf_r+0x74>
 800fcce:	68a3      	ldr	r3, [r4, #8]
 800fcd0:	3b01      	subs	r3, #1
 800fcd2:	60a3      	str	r3, [r4, #8]
 800fcd4:	6823      	ldr	r3, [r4, #0]
 800fcd6:	1c5a      	adds	r2, r3, #1
 800fcd8:	6022      	str	r2, [r4, #0]
 800fcda:	701e      	strb	r6, [r3, #0]
 800fcdc:	6962      	ldr	r2, [r4, #20]
 800fcde:	1c43      	adds	r3, r0, #1
 800fce0:	429a      	cmp	r2, r3
 800fce2:	d004      	beq.n	800fcee <__swbuf_r+0x5a>
 800fce4:	89a3      	ldrh	r3, [r4, #12]
 800fce6:	07db      	lsls	r3, r3, #31
 800fce8:	d506      	bpl.n	800fcf8 <__swbuf_r+0x64>
 800fcea:	2e0a      	cmp	r6, #10
 800fcec:	d104      	bne.n	800fcf8 <__swbuf_r+0x64>
 800fcee:	4621      	mov	r1, r4
 800fcf0:	4628      	mov	r0, r5
 800fcf2:	f7ff fde3 	bl	800f8bc <_fflush_r>
 800fcf6:	b938      	cbnz	r0, 800fd08 <__swbuf_r+0x74>
 800fcf8:	4638      	mov	r0, r7
 800fcfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fcfc:	4621      	mov	r1, r4
 800fcfe:	4628      	mov	r0, r5
 800fd00:	f000 f806 	bl	800fd10 <__swsetup_r>
 800fd04:	2800      	cmp	r0, #0
 800fd06:	d0d5      	beq.n	800fcb4 <__swbuf_r+0x20>
 800fd08:	f04f 37ff 	mov.w	r7, #4294967295
 800fd0c:	e7f4      	b.n	800fcf8 <__swbuf_r+0x64>
	...

0800fd10 <__swsetup_r>:
 800fd10:	b538      	push	{r3, r4, r5, lr}
 800fd12:	4b2a      	ldr	r3, [pc, #168]	; (800fdbc <__swsetup_r+0xac>)
 800fd14:	4605      	mov	r5, r0
 800fd16:	6818      	ldr	r0, [r3, #0]
 800fd18:	460c      	mov	r4, r1
 800fd1a:	b118      	cbz	r0, 800fd24 <__swsetup_r+0x14>
 800fd1c:	6a03      	ldr	r3, [r0, #32]
 800fd1e:	b90b      	cbnz	r3, 800fd24 <__swsetup_r+0x14>
 800fd20:	f7fe ffb6 	bl	800ec90 <__sinit>
 800fd24:	89a3      	ldrh	r3, [r4, #12]
 800fd26:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800fd2a:	0718      	lsls	r0, r3, #28
 800fd2c:	d422      	bmi.n	800fd74 <__swsetup_r+0x64>
 800fd2e:	06d9      	lsls	r1, r3, #27
 800fd30:	d407      	bmi.n	800fd42 <__swsetup_r+0x32>
 800fd32:	2309      	movs	r3, #9
 800fd34:	602b      	str	r3, [r5, #0]
 800fd36:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800fd3a:	81a3      	strh	r3, [r4, #12]
 800fd3c:	f04f 30ff 	mov.w	r0, #4294967295
 800fd40:	e034      	b.n	800fdac <__swsetup_r+0x9c>
 800fd42:	0758      	lsls	r0, r3, #29
 800fd44:	d512      	bpl.n	800fd6c <__swsetup_r+0x5c>
 800fd46:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fd48:	b141      	cbz	r1, 800fd5c <__swsetup_r+0x4c>
 800fd4a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fd4e:	4299      	cmp	r1, r3
 800fd50:	d002      	beq.n	800fd58 <__swsetup_r+0x48>
 800fd52:	4628      	mov	r0, r5
 800fd54:	f7ff f944 	bl	800efe0 <_free_r>
 800fd58:	2300      	movs	r3, #0
 800fd5a:	6363      	str	r3, [r4, #52]	; 0x34
 800fd5c:	89a3      	ldrh	r3, [r4, #12]
 800fd5e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800fd62:	81a3      	strh	r3, [r4, #12]
 800fd64:	2300      	movs	r3, #0
 800fd66:	6063      	str	r3, [r4, #4]
 800fd68:	6923      	ldr	r3, [r4, #16]
 800fd6a:	6023      	str	r3, [r4, #0]
 800fd6c:	89a3      	ldrh	r3, [r4, #12]
 800fd6e:	f043 0308 	orr.w	r3, r3, #8
 800fd72:	81a3      	strh	r3, [r4, #12]
 800fd74:	6923      	ldr	r3, [r4, #16]
 800fd76:	b94b      	cbnz	r3, 800fd8c <__swsetup_r+0x7c>
 800fd78:	89a3      	ldrh	r3, [r4, #12]
 800fd7a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800fd7e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fd82:	d003      	beq.n	800fd8c <__swsetup_r+0x7c>
 800fd84:	4621      	mov	r1, r4
 800fd86:	4628      	mov	r0, r5
 800fd88:	f000 f88c 	bl	800fea4 <__smakebuf_r>
 800fd8c:	89a0      	ldrh	r0, [r4, #12]
 800fd8e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800fd92:	f010 0301 	ands.w	r3, r0, #1
 800fd96:	d00a      	beq.n	800fdae <__swsetup_r+0x9e>
 800fd98:	2300      	movs	r3, #0
 800fd9a:	60a3      	str	r3, [r4, #8]
 800fd9c:	6963      	ldr	r3, [r4, #20]
 800fd9e:	425b      	negs	r3, r3
 800fda0:	61a3      	str	r3, [r4, #24]
 800fda2:	6923      	ldr	r3, [r4, #16]
 800fda4:	b943      	cbnz	r3, 800fdb8 <__swsetup_r+0xa8>
 800fda6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800fdaa:	d1c4      	bne.n	800fd36 <__swsetup_r+0x26>
 800fdac:	bd38      	pop	{r3, r4, r5, pc}
 800fdae:	0781      	lsls	r1, r0, #30
 800fdb0:	bf58      	it	pl
 800fdb2:	6963      	ldrpl	r3, [r4, #20]
 800fdb4:	60a3      	str	r3, [r4, #8]
 800fdb6:	e7f4      	b.n	800fda2 <__swsetup_r+0x92>
 800fdb8:	2000      	movs	r0, #0
 800fdba:	e7f7      	b.n	800fdac <__swsetup_r+0x9c>
 800fdbc:	20000174 	.word	0x20000174

0800fdc0 <_raise_r>:
 800fdc0:	291f      	cmp	r1, #31
 800fdc2:	b538      	push	{r3, r4, r5, lr}
 800fdc4:	4604      	mov	r4, r0
 800fdc6:	460d      	mov	r5, r1
 800fdc8:	d904      	bls.n	800fdd4 <_raise_r+0x14>
 800fdca:	2316      	movs	r3, #22
 800fdcc:	6003      	str	r3, [r0, #0]
 800fdce:	f04f 30ff 	mov.w	r0, #4294967295
 800fdd2:	bd38      	pop	{r3, r4, r5, pc}
 800fdd4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800fdd6:	b112      	cbz	r2, 800fdde <_raise_r+0x1e>
 800fdd8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800fddc:	b94b      	cbnz	r3, 800fdf2 <_raise_r+0x32>
 800fdde:	4620      	mov	r0, r4
 800fde0:	f000 f830 	bl	800fe44 <_getpid_r>
 800fde4:	462a      	mov	r2, r5
 800fde6:	4601      	mov	r1, r0
 800fde8:	4620      	mov	r0, r4
 800fdea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fdee:	f000 b817 	b.w	800fe20 <_kill_r>
 800fdf2:	2b01      	cmp	r3, #1
 800fdf4:	d00a      	beq.n	800fe0c <_raise_r+0x4c>
 800fdf6:	1c59      	adds	r1, r3, #1
 800fdf8:	d103      	bne.n	800fe02 <_raise_r+0x42>
 800fdfa:	2316      	movs	r3, #22
 800fdfc:	6003      	str	r3, [r0, #0]
 800fdfe:	2001      	movs	r0, #1
 800fe00:	e7e7      	b.n	800fdd2 <_raise_r+0x12>
 800fe02:	2400      	movs	r4, #0
 800fe04:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800fe08:	4628      	mov	r0, r5
 800fe0a:	4798      	blx	r3
 800fe0c:	2000      	movs	r0, #0
 800fe0e:	e7e0      	b.n	800fdd2 <_raise_r+0x12>

0800fe10 <raise>:
 800fe10:	4b02      	ldr	r3, [pc, #8]	; (800fe1c <raise+0xc>)
 800fe12:	4601      	mov	r1, r0
 800fe14:	6818      	ldr	r0, [r3, #0]
 800fe16:	f7ff bfd3 	b.w	800fdc0 <_raise_r>
 800fe1a:	bf00      	nop
 800fe1c:	20000174 	.word	0x20000174

0800fe20 <_kill_r>:
 800fe20:	b538      	push	{r3, r4, r5, lr}
 800fe22:	4d07      	ldr	r5, [pc, #28]	; (800fe40 <_kill_r+0x20>)
 800fe24:	2300      	movs	r3, #0
 800fe26:	4604      	mov	r4, r0
 800fe28:	4608      	mov	r0, r1
 800fe2a:	4611      	mov	r1, r2
 800fe2c:	602b      	str	r3, [r5, #0]
 800fe2e:	f7f2 fdfb 	bl	8002a28 <_kill>
 800fe32:	1c43      	adds	r3, r0, #1
 800fe34:	d102      	bne.n	800fe3c <_kill_r+0x1c>
 800fe36:	682b      	ldr	r3, [r5, #0]
 800fe38:	b103      	cbz	r3, 800fe3c <_kill_r+0x1c>
 800fe3a:	6023      	str	r3, [r4, #0]
 800fe3c:	bd38      	pop	{r3, r4, r5, pc}
 800fe3e:	bf00      	nop
 800fe40:	200045b0 	.word	0x200045b0

0800fe44 <_getpid_r>:
 800fe44:	f7f2 bde8 	b.w	8002a18 <_getpid>

0800fe48 <_malloc_usable_size_r>:
 800fe48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fe4c:	1f18      	subs	r0, r3, #4
 800fe4e:	2b00      	cmp	r3, #0
 800fe50:	bfbc      	itt	lt
 800fe52:	580b      	ldrlt	r3, [r1, r0]
 800fe54:	18c0      	addlt	r0, r0, r3
 800fe56:	4770      	bx	lr

0800fe58 <__swhatbuf_r>:
 800fe58:	b570      	push	{r4, r5, r6, lr}
 800fe5a:	460c      	mov	r4, r1
 800fe5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fe60:	2900      	cmp	r1, #0
 800fe62:	b096      	sub	sp, #88	; 0x58
 800fe64:	4615      	mov	r5, r2
 800fe66:	461e      	mov	r6, r3
 800fe68:	da0d      	bge.n	800fe86 <__swhatbuf_r+0x2e>
 800fe6a:	89a3      	ldrh	r3, [r4, #12]
 800fe6c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800fe70:	f04f 0100 	mov.w	r1, #0
 800fe74:	bf0c      	ite	eq
 800fe76:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800fe7a:	2340      	movne	r3, #64	; 0x40
 800fe7c:	2000      	movs	r0, #0
 800fe7e:	6031      	str	r1, [r6, #0]
 800fe80:	602b      	str	r3, [r5, #0]
 800fe82:	b016      	add	sp, #88	; 0x58
 800fe84:	bd70      	pop	{r4, r5, r6, pc}
 800fe86:	466a      	mov	r2, sp
 800fe88:	f000 f848 	bl	800ff1c <_fstat_r>
 800fe8c:	2800      	cmp	r0, #0
 800fe8e:	dbec      	blt.n	800fe6a <__swhatbuf_r+0x12>
 800fe90:	9901      	ldr	r1, [sp, #4]
 800fe92:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800fe96:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800fe9a:	4259      	negs	r1, r3
 800fe9c:	4159      	adcs	r1, r3
 800fe9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fea2:	e7eb      	b.n	800fe7c <__swhatbuf_r+0x24>

0800fea4 <__smakebuf_r>:
 800fea4:	898b      	ldrh	r3, [r1, #12]
 800fea6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800fea8:	079d      	lsls	r5, r3, #30
 800feaa:	4606      	mov	r6, r0
 800feac:	460c      	mov	r4, r1
 800feae:	d507      	bpl.n	800fec0 <__smakebuf_r+0x1c>
 800feb0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800feb4:	6023      	str	r3, [r4, #0]
 800feb6:	6123      	str	r3, [r4, #16]
 800feb8:	2301      	movs	r3, #1
 800feba:	6163      	str	r3, [r4, #20]
 800febc:	b002      	add	sp, #8
 800febe:	bd70      	pop	{r4, r5, r6, pc}
 800fec0:	ab01      	add	r3, sp, #4
 800fec2:	466a      	mov	r2, sp
 800fec4:	f7ff ffc8 	bl	800fe58 <__swhatbuf_r>
 800fec8:	9900      	ldr	r1, [sp, #0]
 800feca:	4605      	mov	r5, r0
 800fecc:	4630      	mov	r0, r6
 800fece:	f7ff f8fb 	bl	800f0c8 <_malloc_r>
 800fed2:	b948      	cbnz	r0, 800fee8 <__smakebuf_r+0x44>
 800fed4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fed8:	059a      	lsls	r2, r3, #22
 800feda:	d4ef      	bmi.n	800febc <__smakebuf_r+0x18>
 800fedc:	f023 0303 	bic.w	r3, r3, #3
 800fee0:	f043 0302 	orr.w	r3, r3, #2
 800fee4:	81a3      	strh	r3, [r4, #12]
 800fee6:	e7e3      	b.n	800feb0 <__smakebuf_r+0xc>
 800fee8:	89a3      	ldrh	r3, [r4, #12]
 800feea:	6020      	str	r0, [r4, #0]
 800feec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fef0:	81a3      	strh	r3, [r4, #12]
 800fef2:	9b00      	ldr	r3, [sp, #0]
 800fef4:	6163      	str	r3, [r4, #20]
 800fef6:	9b01      	ldr	r3, [sp, #4]
 800fef8:	6120      	str	r0, [r4, #16]
 800fefa:	b15b      	cbz	r3, 800ff14 <__smakebuf_r+0x70>
 800fefc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ff00:	4630      	mov	r0, r6
 800ff02:	f000 f81d 	bl	800ff40 <_isatty_r>
 800ff06:	b128      	cbz	r0, 800ff14 <__smakebuf_r+0x70>
 800ff08:	89a3      	ldrh	r3, [r4, #12]
 800ff0a:	f023 0303 	bic.w	r3, r3, #3
 800ff0e:	f043 0301 	orr.w	r3, r3, #1
 800ff12:	81a3      	strh	r3, [r4, #12]
 800ff14:	89a3      	ldrh	r3, [r4, #12]
 800ff16:	431d      	orrs	r5, r3
 800ff18:	81a5      	strh	r5, [r4, #12]
 800ff1a:	e7cf      	b.n	800febc <__smakebuf_r+0x18>

0800ff1c <_fstat_r>:
 800ff1c:	b538      	push	{r3, r4, r5, lr}
 800ff1e:	4d07      	ldr	r5, [pc, #28]	; (800ff3c <_fstat_r+0x20>)
 800ff20:	2300      	movs	r3, #0
 800ff22:	4604      	mov	r4, r0
 800ff24:	4608      	mov	r0, r1
 800ff26:	4611      	mov	r1, r2
 800ff28:	602b      	str	r3, [r5, #0]
 800ff2a:	f7f2 fddc 	bl	8002ae6 <_fstat>
 800ff2e:	1c43      	adds	r3, r0, #1
 800ff30:	d102      	bne.n	800ff38 <_fstat_r+0x1c>
 800ff32:	682b      	ldr	r3, [r5, #0]
 800ff34:	b103      	cbz	r3, 800ff38 <_fstat_r+0x1c>
 800ff36:	6023      	str	r3, [r4, #0]
 800ff38:	bd38      	pop	{r3, r4, r5, pc}
 800ff3a:	bf00      	nop
 800ff3c:	200045b0 	.word	0x200045b0

0800ff40 <_isatty_r>:
 800ff40:	b538      	push	{r3, r4, r5, lr}
 800ff42:	4d06      	ldr	r5, [pc, #24]	; (800ff5c <_isatty_r+0x1c>)
 800ff44:	2300      	movs	r3, #0
 800ff46:	4604      	mov	r4, r0
 800ff48:	4608      	mov	r0, r1
 800ff4a:	602b      	str	r3, [r5, #0]
 800ff4c:	f7f2 fddb 	bl	8002b06 <_isatty>
 800ff50:	1c43      	adds	r3, r0, #1
 800ff52:	d102      	bne.n	800ff5a <_isatty_r+0x1a>
 800ff54:	682b      	ldr	r3, [r5, #0]
 800ff56:	b103      	cbz	r3, 800ff5a <_isatty_r+0x1a>
 800ff58:	6023      	str	r3, [r4, #0]
 800ff5a:	bd38      	pop	{r3, r4, r5, pc}
 800ff5c:	200045b0 	.word	0x200045b0

0800ff60 <_init>:
 800ff60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ff62:	bf00      	nop
 800ff64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ff66:	bc08      	pop	{r3}
 800ff68:	469e      	mov	lr, r3
 800ff6a:	4770      	bx	lr

0800ff6c <_fini>:
 800ff6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ff6e:	bf00      	nop
 800ff70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ff72:	bc08      	pop	{r3}
 800ff74:	469e      	mov	lr, r3
 800ff76:	4770      	bx	lr
